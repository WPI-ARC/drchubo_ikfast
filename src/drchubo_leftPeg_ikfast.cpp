#define IKFAST_NAMESPACE drchubo_leftpeg_ikfast
#include "plugindefs.h"

/// autogenerated analytical inverse kinematics code from ikfast program part of OpenRAVE
/// \author Rosen Diankov
///
/// Licensed under the Apache License, Version 2.0 (the "License");
/// you may not use this file except in compliance with the License.
/// You may obtain a copy of the License at
///     http://www.apache.org/licenses/LICENSE-2.0
///
/// Unless required by applicable law or agreed to in writing, software
/// distributed under the License is distributed on an "AS IS" BASIS,
/// WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
/// See the License for the specific language governing permissions and
/// limitations under the License.
///
/// ikfast version 61 generated on 2013-11-14 13:55:42.462082
/// To compile with gcc:
///     gcc -lstdc++ ik.cpp
/// To compile without any main function as a shared object (might need -llapack):
///     gcc -fPIC -lstdc++ -DIKFAST_NO_MAIN -DIKFAST_CLIBRARY -shared -Wl,-soname,libik.so -o libik.so ik.cpp
#define IKFAST_HAS_LIBRARY
#include "ikfast.h" // found inside share/openrave-X.Y/python/ikfast.h
using namespace ikfast;

// check if the included ikfast version matches what this file was compiled with
#define IKFAST_COMPILE_ASSERT(x) extern int __dummy[(int)x]
IKFAST_COMPILE_ASSERT(IKFAST_VERSION==61);

#include <cmath>
#include <vector>
#include <limits>
#include <algorithm>
#include <complex>

#define IKFAST_STRINGIZE2(s) #s
#define IKFAST_STRINGIZE(s) IKFAST_STRINGIZE2(s)

#ifndef IKFAST_ASSERT
#include <stdexcept>
#include <sstream>
#include <iostream>

#ifdef _MSC_VER
#ifndef __PRETTY_FUNCTION__
#define __PRETTY_FUNCTION__ __FUNCDNAME__
#endif
#endif

#ifndef __PRETTY_FUNCTION__
#define __PRETTY_FUNCTION__ __func__
#endif

#define IKFAST_ASSERT(b) { if( !(b) ) { std::stringstream ss; ss << "ikfast exception: " << __FILE__ << ":" << __LINE__ << ": " <<__PRETTY_FUNCTION__ << ": Assertion '" << #b << "' failed"; throw std::runtime_error(ss.str()); } }

#endif

#if defined(_MSC_VER)
#define IKFAST_ALIGNED16(x) __declspec(align(16)) x
#else
#define IKFAST_ALIGNED16(x) x __attribute((aligned(16)))
#endif

#define IK2PI  ((IkReal)6.28318530717959)
#define IKPI  ((IkReal)3.14159265358979)
#define IKPI_2  ((IkReal)1.57079632679490)

#ifdef _MSC_VER
#ifndef isnan
#define isnan _isnan
#endif
#endif // _MSC_VER

// lapack routines
extern "C" {
  void dgetrf_ (const int* m, const int* n, double* a, const int* lda, int* ipiv, int* info);
  void zgetrf_ (const int* m, const int* n, std::complex<double>* a, const int* lda, int* ipiv, int* info);
  void dgetri_(const int* n, const double* a, const int* lda, int* ipiv, double* work, const int* lwork, int* info);
  void dgesv_ (const int* n, const int* nrhs, double* a, const int* lda, int* ipiv, double* b, const int* ldb, int* info);
  void dgetrs_(const char *trans, const int *n, const int *nrhs, double *a, const int *lda, int *ipiv, double *b, const int *ldb, int *info);
  void dgeev_(const char *jobvl, const char *jobvr, const int *n, double *a, const int *lda, double *wr, double *wi,double *vl, const int *ldvl, double *vr, const int *ldvr, double *work, const int *lwork, int *info);
}

using namespace std; // necessary to get std math routines

#ifdef IKFAST_NAMESPACE
namespace IKFAST_NAMESPACE {
#endif

inline float IKabs(float f) { return fabsf(f); }
inline double IKabs(double f) { return fabs(f); }

inline float IKsqr(float f) { return f*f; }
inline double IKsqr(double f) { return f*f; }

inline float IKlog(float f) { return logf(f); }
inline double IKlog(double f) { return log(f); }

// allows asin and acos to exceed 1
#ifndef IKFAST_SINCOS_THRESH
#define IKFAST_SINCOS_THRESH ((IkReal)0.000001)
#endif

// used to check input to atan2 for degenerate cases
#ifndef IKFAST_ATAN2_MAGTHRESH
#define IKFAST_ATAN2_MAGTHRESH ((IkReal)2e-6)
#endif

// minimum distance of separate solutions
#ifndef IKFAST_SOLUTION_THRESH
#define IKFAST_SOLUTION_THRESH ((IkReal)1e-6)
#endif

inline float IKasin(float f)
{
IKFAST_ASSERT( f > -1-IKFAST_SINCOS_THRESH && f < 1+IKFAST_SINCOS_THRESH ); // any more error implies something is wrong with the solver
if( f <= -1 ) return float(-IKPI_2);
else if( f >= 1 ) return float(IKPI_2);
return asinf(f);
}
inline double IKasin(double f)
{
IKFAST_ASSERT( f > -1-IKFAST_SINCOS_THRESH && f < 1+IKFAST_SINCOS_THRESH ); // any more error implies something is wrong with the solver
if( f <= -1 ) return -IKPI_2;
else if( f >= 1 ) return IKPI_2;
return asin(f);
}

// return positive value in [0,y)
inline float IKfmod(float x, float y)
{
    while(x < 0) {
        x += y;
    }
    return fmodf(x,y);
}

// return positive value in [0,y)
inline double IKfmod(double x, double y)
{
    while(x < 0) {
        x += y;
    }
    return fmod(x,y);
}

inline float IKacos(float f)
{
IKFAST_ASSERT( f > -1-IKFAST_SINCOS_THRESH && f < 1+IKFAST_SINCOS_THRESH ); // any more error implies something is wrong with the solver
if( f <= -1 ) return float(IKPI);
else if( f >= 1 ) return float(0);
return acosf(f);
}
inline double IKacos(double f)
{
IKFAST_ASSERT( f > -1-IKFAST_SINCOS_THRESH && f < 1+IKFAST_SINCOS_THRESH ); // any more error implies something is wrong with the solver
if( f <= -1 ) return IKPI;
else if( f >= 1 ) return 0;
return acos(f);
}
inline float IKsin(float f) { return sinf(f); }
inline double IKsin(double f) { return sin(f); }
inline float IKcos(float f) { return cosf(f); }
inline double IKcos(double f) { return cos(f); }
inline float IKtan(float f) { return tanf(f); }
inline double IKtan(double f) { return tan(f); }
inline float IKsqrt(float f) { if( f <= 0.0f ) return 0.0f; return sqrtf(f); }
inline double IKsqrt(double f) { if( f <= 0.0 ) return 0.0; return sqrt(f); }
inline float IKatan2(float fy, float fx) {
    if( isnan(fy) ) {
        IKFAST_ASSERT(!isnan(fx)); // if both are nan, probably wrong value will be returned
        return float(IKPI_2);
    }
    else if( isnan(fx) ) {
        return 0;
    }
    return atan2f(fy,fx);
}
inline double IKatan2(double fy, double fx) {
    if( isnan(fy) ) {
        IKFAST_ASSERT(!isnan(fx)); // if both are nan, probably wrong value will be returned
        return IKPI_2;
    }
    else if( isnan(fx) ) {
        return 0;
    }
    return atan2(fy,fx);
}

inline float IKsign(float f) {
    if( f > 0 ) {
        return float(1);
    }
    else if( f < 0 ) {
        return float(-1);
    }
    return 0;
}

inline double IKsign(double f) {
    if( f > 0 ) {
        return 1.0;
    }
    else if( f < 0 ) {
        return -1.0;
    }
    return 0;
}

/// solves the forward kinematics equations.
/// \param pfree is an array specifying the free joints of the chain.
IKFAST_API void ComputeFk(const IkReal* j, IkReal* eetrans, IkReal* eerot) {
IkReal x0,x1,x2,x3,x4,x5,x6,x7,x8,x9,x10,x11,x12,x13,x14,x15,x16,x17,x18,x19,x20,x21,x22,x23,x24,x25,x26,x27,x28,x29,x30,x31,x32,x33,x34,x35,x36,x37,x38,x39,x40,x41,x42,x43,x44,x45,x46,x47,x48,x49,x50,x51,x52,x53,x54,x55,x56,x57,x58,x59,x60,x61,x62,x63,x64,x65,x66;
x0=IKsin(j[0]);
x1=IKcos(j[2]);
x2=IKsin(j[1]);
x3=IKcos(j[0]);
x4=IKsin(j[2]);
x5=IKcos(j[1]);
x6=IKcos(j[3]);
x7=IKsin(j[3]);
x8=IKsin(j[4]);
x9=IKcos(j[4]);
x10=IKcos(j[5]);
x11=IKsin(j[5]);
x12=IKcos(j[6]);
x13=IKsin(j[6]);
x14=((IkReal(0.0300000000000000))*(x1));
x15=((IkReal(1.00000000000000))*(x8));
x16=((IkReal(1.00000000000000))*(x4));
x17=((IkReal(0.0300000000000000))*(x2));
x18=((IkReal(0.100000000000000))*(x6));
x19=((IkReal(1.00000000000000))*(x7));
x20=((IkReal(0.313800000000000))*(x2));
x21=((IkReal(0.100000000000000))*(x9));
x22=((IkReal(1.00000000000000))*(x11));
x23=((IkReal(1.00000000000000))*(x6));
x24=((IkReal(0.100000000000000))*(x8));
x25=((IkReal(0.100000000000000))*(x7));
x26=((IkReal(0.313800000000000))*(x6));
x27=((IkReal(1.00000000000000))*(x10));
x28=((IkReal(1.00000000000000))*(x9));
x29=((IkReal(0.0300000000000000))*(x7));
x30=((IkReal(-1.00000000000000))*(x9));
x31=((x0)*(x1));
x32=((x3)*(x5));
x33=((x0)*(x4));
x34=((x0)*(x5));
x35=((x1)*(x5));
x36=((x1)*(x3));
x37=((x4)*(x5));
x38=((IkReal(-1.00000000000000))*(x8));
x39=((x3)*(x4));
x40=((x14)*(x3));
x41=((x0)*(x14));
x42=((x37)*(x6));
x43=((x19)*(x34));
x44=((x17)*(x33));
x45=((x16)*(x2)*(x3));
x46=((x17)*(x39));
x47=((((IkReal(-1.00000000000000))*(x16)*(x3)))+(((x2)*(x31))));
x48=((((x2)*(x33)))+(x36));
x49=((x42)+(((x2)*(x7))));
x50=((((IkReal(-1.00000000000000))*(x45)))+(x31));
x51=((((IkReal(-1.00000000000000))*(x2)*(x23)))+(((x16)*(x5)*(x7))));
x52=((((IkReal(-1.00000000000000))*(x31)))+(x45));
x53=((((IkReal(-1.00000000000000))*(x36)))+(((IkReal(-1.00000000000000))*(x0)*(x16)*(x2))));
x54=((((IkReal(-1.00000000000000))*(x16)*(x5)*(x6)))+(((IkReal(-1.00000000000000))*(x19)*(x2))));
x55=((((IkReal(-1.00000000000000))*(x0)*(x16)))+(((IkReal(-1.00000000000000))*(x2)*(x36))));
x56=((x44)+(x40));
x57=((x50)*(x6));
x58=((((IkReal(-1.00000000000000))*(x43)))+(((x48)*(x6))));
x59=((((x32)*(x7)))+(x57));
x60=((x43)+(((IkReal(-1.00000000000000))*(x23)*(x48))));
x61=((x58)*(x9));
x62=((((x23)*(x34)))+(((IkReal(-1.00000000000000))*(x19)*(x53))));
x63=((x11)*(((((IkReal(-1.00000000000000))*(x19)*(x52)))+(((IkReal(-1.00000000000000))*(x23)*(x32))))));
x64=((x11)*(x62));
x65=((((IkReal(-1.00000000000000))*(x28)*(x59)))+(((IkReal(-1.00000000000000))*(x15)*(x55))));
x66=((((x27)*(((((x28)*(x49)))+(((x15)*(x35)))))))+(((IkReal(-1.00000000000000))*(x22)*(x51))));
eerot[0]=((((x13)*(((((IkReal(-1.00000000000000))*(x10)*(((((x38)*(x47)))+(((x30)*(x58)))))))+(((IkReal(-1.00000000000000))*(x64)))))))+(((x12)*(((((x47)*(x9)))+(((x60)*(x8))))))));
eerot[1]=((((x11)*(((((x47)*(x8)))+(x61)))))+(((x10)*(x62))));
eerot[2]=((((IkReal(-1.00000000000000))*(x12)*(((((x27)*(((((IkReal(-1.00000000000000))*(x15)*(x47)))+(((IkReal(-1.00000000000000))*(x28)*(x58)))))))+(((x22)*(x62)))))))+(((x13)*(((((x38)*(x60)))+(((x30)*(x47))))))));
eetrans[0]=((((IkReal(-1.00000000000000))*(x56)*(x6)))+(((x29)*(x34)))+(((x11)*(((((x24)*(x47)))+(((x21)*(x58)))))))+(((IkReal(-0.300000000000000))*(x34)))+(x56)+(((IkReal(-1.00000000000000))*(x26)*(x34)))+(((x7)*(((((IkReal(-0.313800000000000))*(x36)))+(((IkReal(-1.00000000000000))*(x20)*(x33)))))))+(((x10)*(((((x18)*(x34)))+(((IkReal(-1.00000000000000))*(x25)*(x53))))))));
eerot[3]=((((x13)*(x66)))+(((x12)*(((((x35)*(x9)))+(((x54)*(x8))))))));
eerot[4]=((((x10)*(x51)))+(((x11)*(((((x35)*(x8)))+(((x49)*(x9))))))));
eerot[5]=((((x12)*(x66)))+(((x13)*(((((IkReal(-1.00000000000000))*(x15)*(x54)))+(((IkReal(-1.00000000000000))*(x28)*(x35))))))));
eetrans[1]=((IkReal(0.229500000000000))+(((x11)*(((((x21)*(x49)))+(((x24)*(x35)))))))+(((IkReal(0.0300000000000000))*(x37)))+(((IkReal(-0.0300000000000000))*(x42)))+(((IkReal(-1.00000000000000))*(x17)*(x7)))+(((IkReal(-0.313800000000000))*(x37)*(x7)))+(((IkReal(0.300000000000000))*(x2)))+(((x10)*(((((IkReal(-1.00000000000000))*(x18)*(x2)))+(((x25)*(x37)))))))+(((x20)*(x6))));
eerot[6]=((((x12)*(((((x38)*(((((IkReal(-1.00000000000000))*(x32)*(x7)))+(((IkReal(-1.00000000000000))*(x57)))))))+(((x30)*(x55)))))))+(((x13)*(((((x10)*(x65)))+(x63))))));
eerot[7]=((((x10)*(((((x32)*(x6)))+(((x52)*(x7)))))))+(((x11)*(x65))));
eerot[8]=((((x13)*(((((x8)*(((((IkReal(-1.00000000000000))*(x19)*(x32)))+(((IkReal(-1.00000000000000))*(x23)*(x50)))))))+(((x55)*(x9)))))))+(((x12)*(((((x10)*(((((x38)*(x55)))+(((x30)*(x59)))))))+(x63))))));
eetrans[2]=((((IkReal(-1.00000000000000))*(x41)))+(((x29)*(x32)))+(((x11)*(((((IkReal(-1.00000000000000))*(x21)*(x59)))+(((IkReal(-1.00000000000000))*(x24)*(x55)))))))+(((x6)*(((((IkReal(-1.00000000000000))*(x46)))+(x41)))))+(((IkReal(-0.300000000000000))*(x32)))+(x46)+(((x7)*(((((IkReal(-1.00000000000000))*(x20)*(x39)))+(((IkReal(0.313800000000000))*(x31)))))))+(((x10)*(((((x18)*(x32)))+(((x25)*(x52)))))))+(((IkReal(-1.00000000000000))*(x26)*(x32))));
}

IKFAST_API int GetNumFreeParameters() { return 1; }
IKFAST_API int* GetFreeParameters() { static int freeparams[] = {2}; return freeparams; }
IKFAST_API int GetNumJoints() { return 7; }

IKFAST_API int GetIkRealSize() { return sizeof(IkReal); }

IKFAST_API int GetIkType() { return 0x67000001; }

class IKSolver {
public:
IkReal j20,cj20,sj20,htj20,j21,cj21,sj21,htj21,j23,cj23,sj23,htj23,j24,cj24,sj24,htj24,j25,cj25,sj25,htj25,j27,cj27,sj27,htj27,j22,cj22,sj22,htj22,new_r00,r00,rxp0_0,new_r01,r01,rxp0_1,new_r02,r02,rxp0_2,new_r10,r10,rxp1_0,new_r11,r11,rxp1_1,new_r12,r12,rxp1_2,new_r20,r20,rxp2_0,new_r21,r21,rxp2_1,new_r22,r22,rxp2_2,new_px,px,npx,new_py,py,npy,new_pz,pz,npz,pp;
unsigned char _ij20[2], _nj20,_ij21[2], _nj21,_ij23[2], _nj23,_ij24[2], _nj24,_ij25[2], _nj25,_ij27[2], _nj27,_ij22[2], _nj22;

bool ComputeIk(const IkReal* eetrans, const IkReal* eerot, const IkReal* pfree, IkSolutionListBase<IkReal>& solutions) {
j20=numeric_limits<IkReal>::quiet_NaN(); _ij20[0] = -1; _ij20[1] = -1; _nj20 = -1; j21=numeric_limits<IkReal>::quiet_NaN(); _ij21[0] = -1; _ij21[1] = -1; _nj21 = -1; j23=numeric_limits<IkReal>::quiet_NaN(); _ij23[0] = -1; _ij23[1] = -1; _nj23 = -1; j24=numeric_limits<IkReal>::quiet_NaN(); _ij24[0] = -1; _ij24[1] = -1; _nj24 = -1; j25=numeric_limits<IkReal>::quiet_NaN(); _ij25[0] = -1; _ij25[1] = -1; _nj25 = -1; j27=numeric_limits<IkReal>::quiet_NaN(); _ij27[0] = -1; _ij27[1] = -1; _nj27 = -1;  _ij22[0] = -1; _ij22[1] = -1; _nj22 = 0;
for(int dummyiter = 0; dummyiter < 1; ++dummyiter) {
    solutions.Clear();
j22=pfree[0]; cj22=cos(pfree[0]); sj22=sin(pfree[0]);
r00 = eerot[0*3+0];
r01 = eerot[0*3+1];
r02 = eerot[0*3+2];
r10 = eerot[1*3+0];
r11 = eerot[1*3+1];
r12 = eerot[1*3+2];
r20 = eerot[2*3+0];
r21 = eerot[2*3+1];
r22 = eerot[2*3+2];
px = eetrans[0]; py = eetrans[1]; pz = eetrans[2];

new_r00=((IkReal(-1.00000000000000))*(r02));
new_r01=r00;
new_r02=((IkReal(-1.00000000000000))*(r01));
new_px=((px)+(((IkReal(-0.100000000000000))*(r01))));
new_r10=r22;
new_r11=((IkReal(-1.00000000000000))*(r20));
new_r12=r21;
new_py=((((IkReal(0.100000000000000))*(r21)))+(((IkReal(-1.00000000000000))*(pz))));
new_r20=((IkReal(-1.00000000000000))*(r12));
new_r21=r10;
new_r22=((IkReal(-1.00000000000000))*(r11));
new_pz=((IkReal(-0.229500000000000))+(py)+(((IkReal(-0.100000000000000))*(r11))));
r00 = new_r00; r01 = new_r01; r02 = new_r02; r10 = new_r10; r11 = new_r11; r12 = new_r12; r20 = new_r20; r21 = new_r21; r22 = new_r22; px = new_px; py = new_py; pz = new_pz;
pp=(((px)*(px))+((py)*(py))+((pz)*(pz)));
npx=((((px)*(r00)))+(((py)*(r10)))+(((pz)*(r20))));
npy=((((px)*(r01)))+(((py)*(r11)))+(((pz)*(r21))));
npz=((((px)*(r02)))+(((py)*(r12)))+(((pz)*(r22))));
rxp0_0=((((IkReal(-1.00000000000000))*(py)*(r20)))+(((pz)*(r10))));
rxp0_1=((((px)*(r20)))+(((IkReal(-1.00000000000000))*(pz)*(r00))));
rxp0_2=((((IkReal(-1.00000000000000))*(px)*(r10)))+(((py)*(r00))));
rxp1_0=((((IkReal(-1.00000000000000))*(py)*(r21)))+(((pz)*(r11))));
rxp1_1=((((px)*(r21)))+(((IkReal(-1.00000000000000))*(pz)*(r01))));
rxp1_2=((((IkReal(-1.00000000000000))*(px)*(r11)))+(((py)*(r01))));
rxp2_0=((((IkReal(-1.00000000000000))*(py)*(r22)))+(((pz)*(r12))));
rxp2_1=((((px)*(r22)))+(((IkReal(-1.00000000000000))*(pz)*(r02))));
rxp2_2=((((IkReal(-1.00000000000000))*(px)*(r12)))+(((py)*(r02))));
{
IkReal j23array[2], cj23array[2], sj23array[2];
bool j23valid[2]={false};
_nj23 = 2;
if( (((IkReal(1.00099239693695))+(((IkReal(-5.26089284776420))*(pp))))) < -1-IKFAST_SINCOS_THRESH || (((IkReal(1.00099239693695))+(((IkReal(-5.26089284776420))*(pp))))) > 1+IKFAST_SINCOS_THRESH )
    continue;
IkReal x67=IKasin(((IkReal(1.00099239693695))+(((IkReal(-5.26089284776420))*(pp)))));
j23array[0]=((IkReal(-1.76577759872331))+(((IkReal(-1.00000000000000))*(x67))));
sj23array[0]=IKsin(j23array[0]);
cj23array[0]=IKcos(j23array[0]);
j23array[1]=((IkReal(1.37581505486648))+(x67));
sj23array[1]=IKsin(j23array[1]);
cj23array[1]=IKcos(j23array[1]);
if( j23array[0] > IKPI )
{
    j23array[0]-=IK2PI;
}
else if( j23array[0] < -IKPI )
{    j23array[0]+=IK2PI;
}
j23valid[0] = true;
if( j23array[1] > IKPI )
{
    j23array[1]-=IK2PI;
}
else if( j23array[1] < -IKPI )
{    j23array[1]+=IK2PI;
}
j23valid[1] = true;
for(int ij23 = 0; ij23 < 2; ++ij23)
{
if( !j23valid[ij23] )
{
    continue;
}
_ij23[0] = ij23; _ij23[1] = -1;
for(int iij23 = ij23+1; iij23 < 2; ++iij23)
{
if( j23valid[iij23] && IKabs(cj23array[ij23]-cj23array[iij23]) < IKFAST_SOLUTION_THRESH && IKabs(sj23array[ij23]-sj23array[iij23]) < IKFAST_SOLUTION_THRESH )
{
    j23valid[iij23]=false; _ij23[1] = iij23; break;
}
}
j23 = j23array[ij23]; cj23 = cj23array[ij23]; sj23 = sj23array[ij23];

{
IkReal dummyeval[1];
dummyeval[0]=(((px)*(px))+((py)*(py)));
if( IKabs(dummyeval[0]) < 0.0000010000000000  )
{
{
IkReal dummyeval[1];
dummyeval[0]=(((px)*(px))+((py)*(py)));
if( IKabs(dummyeval[0]) < 0.0000010000000000  )
{
{
IkReal dummyeval[1];
IkReal x68=(sj22)*(sj22);
IkReal x69=(cj23)*(cj23);
IkReal x70=(sj23)*(sj23);
IkReal x71=((IkReal(20.9200000000000))*(sj23));
IkReal x72=((cj23)*(x68));
dummyeval[0]=((IkReal(100.000000000000))+(((IkReal(-1.00000000000000))*(cj23)*(x71)))+(((IkReal(-20.0000000000000))*(sj23)))+(((IkReal(109.411600000000))*(x69)))+(((x68)*(x69)))+(((IkReal(-2.00000000000000))*(x72)))+(x70)+(x68)+(((IkReal(209.200000000000))*(cj23)))+(((IkReal(-1.00000000000000))*(x68)*(x71)))+(((IkReal(109.411600000000))*(x68)*(x70)))+(((x71)*(x72))));
if( IKabs(dummyeval[0]) < 0.0000010000000000  )
{
continue;

} else
{
{
IkReal j21array[2], cj21array[2], sj21array[2];
bool j21valid[2]={false};
_nj21 = 2;
IkReal x73=((IkReal(0.0300000000000000))*(sj22));
IkReal x74=((IkReal(0.300000000000000))+(((IkReal(0.313800000000000))*(cj23)))+(((IkReal(-0.0300000000000000))*(sj23))));
IkReal x75=((((IkReal(-1.00000000000000))*(cj23)*(x73)))+(x73)+(((IkReal(-0.313800000000000))*(sj22)*(sj23))));
if( IKabs(x75) < IKFAST_ATAN2_MAGTHRESH && IKabs(x74) < IKFAST_ATAN2_MAGTHRESH )
    continue;
IkReal x76=((IkReal(1.00000000000000))*(IKatan2(x75, x74)));
if( ((((x75)*(x75))+((x74)*(x74)))) < (IkReal)-0.00001 )
    continue;
if( (((pz)*(((IKabs(IKabs(IKsqrt((((x75)*(x75))+((x74)*(x74)))))) != 0)?((IkReal)1/(IKabs(IKsqrt((((x75)*(x75))+((x74)*(x74))))))):(IkReal)1.0e30)))) < -1-IKFAST_SINCOS_THRESH || (((pz)*(((IKabs(IKabs(IKsqrt((((x75)*(x75))+((x74)*(x74)))))) != 0)?((IkReal)1/(IKabs(IKsqrt((((x75)*(x75))+((x74)*(x74))))))):(IkReal)1.0e30)))) > 1+IKFAST_SINCOS_THRESH )
    continue;
IkReal x77=IKasin(((pz)*(((IKabs(IKabs(IKsqrt((((x75)*(x75))+((x74)*(x74)))))) != 0)?((IkReal)1/(IKabs(IKsqrt((((x75)*(x75))+((x74)*(x74))))))):(IkReal)1.0e30))));
j21array[0]=((((IkReal(-1.00000000000000))*(x76)))+(x77));
sj21array[0]=IKsin(j21array[0]);
cj21array[0]=IKcos(j21array[0]);
j21array[1]=((IkReal(3.14159265358979))+(((IkReal(-1.00000000000000))*(x76)))+(((IkReal(-1.00000000000000))*(x77))));
sj21array[1]=IKsin(j21array[1]);
cj21array[1]=IKcos(j21array[1]);
if( j21array[0] > IKPI )
{
    j21array[0]-=IK2PI;
}
else if( j21array[0] < -IKPI )
{    j21array[0]+=IK2PI;
}
j21valid[0] = true;
if( j21array[1] > IKPI )
{
    j21array[1]-=IK2PI;
}
else if( j21array[1] < -IKPI )
{    j21array[1]+=IK2PI;
}
j21valid[1] = true;
for(int ij21 = 0; ij21 < 2; ++ij21)
{
if( !j21valid[ij21] )
{
    continue;
}
_ij21[0] = ij21; _ij21[1] = -1;
for(int iij21 = ij21+1; iij21 < 2; ++iij21)
{
if( j21valid[iij21] && IKabs(cj21array[ij21]-cj21array[iij21]) < IKFAST_SOLUTION_THRESH && IKabs(sj21array[ij21]-sj21array[iij21]) < IKFAST_SOLUTION_THRESH )
{
    j21valid[iij21]=false; _ij21[1] = iij21; break;
}
}
j21 = j21array[ij21]; cj21 = cj21array[ij21]; sj21 = sj21array[ij21];

{
IkReal dummyeval[1];
IkReal gconst0;
gconst0=IKsign(((((cj21)*((py)*(py))))+(((cj21)*((px)*(px))))));
dummyeval[0]=((((cj21)*((py)*(py))))+(((cj21)*((px)*(px)))));
if( IKabs(dummyeval[0]) < 0.0000010000000000  )
{
{
IkReal dummyeval[1];
IkReal gconst1;
IkReal x78=((cj22)*(sj21));
gconst1=IKsign(((((x78)*((py)*(py))))+(((x78)*((px)*(px))))));
IkReal x79=((cj22)*(sj21));
dummyeval[0]=((((x79)*((px)*(px))))+(((x79)*((py)*(py)))));
if( IKabs(dummyeval[0]) < 0.0000010000000000  )
{
{
IkReal evalcond[4];
IkReal x80=((IkReal(0.0300000000000000))*(cj21));
evalcond[0]=((IkReal(-3.14159265358979))+(IKfmod(((IkReal(1.57079632679490))+(j22)), IkReal(6.28318530717959))));
evalcond[1]=((IkReal(0.190270440000000))+(((IkReal(0.186480000000000))*(cj23)))+(((IkReal(-1.00000000000000))*(pp)))+(((IkReal(-0.0368280000000000))*(sj23))));
evalcond[2]=((((IkReal(0.313800000000000))*(cj23)*(sj21)))+(((IkReal(-0.313800000000000))*(cj21)*(sj23)))+(((IkReal(-0.0300000000000000))*(sj21)*(sj23)))+(((IkReal(-1.00000000000000))*(pz)))+(((IkReal(0.300000000000000))*(sj21)))+(x80)+(((IkReal(-1.00000000000000))*(cj23)*(x80))));
if( IKabs(evalcond[0]) < 0.0000010000000000  && IKabs(evalcond[1]) < 0.0000010000000000  && IKabs(evalcond[2]) < 0.0000010000000000  )
{
{
IkReal dummyeval[1];
IkReal gconst2;
gconst2=IKsign(((((cj21)*((py)*(py))))+(((cj21)*((px)*(px))))));
dummyeval[0]=((((cj21)*((py)*(py))))+(((cj21)*((px)*(px)))));
if( IKabs(dummyeval[0]) < 0.0000010000000000  )
{
{
IkReal dummyeval[1];
IkReal gconst3;
gconst3=IKsign(((((sj21)*((py)*(py))))+(((sj21)*((px)*(px))))));
dummyeval[0]=((((sj21)*((py)*(py))))+(((sj21)*((px)*(px)))));
if( IKabs(dummyeval[0]) < 0.0000010000000000  )
{
{
IkReal evalcond[4];
IkReal x81=((IkReal(0.0300000000000000))+(((IkReal(-0.0300000000000000))*(cj23)))+(((IkReal(-1.00000000000000))*(pz)))+(((IkReal(-0.313800000000000))*(sj23))));
evalcond[0]=((IkReal(-3.14159265358979))+(IKfmod(((IkReal(3.14159265358979))+(j21)), IkReal(6.28318530717959))));
evalcond[1]=((IkReal(0.190270440000000))+(((IkReal(0.186480000000000))*(cj23)))+(((IkReal(-1.00000000000000))*(pp)))+(((IkReal(-0.0368280000000000))*(sj23))));
evalcond[2]=x81;
evalcond[3]=x81;
if( IKabs(evalcond[0]) < 0.0000010000000000  && IKabs(evalcond[1]) < 0.0000010000000000  && IKabs(evalcond[2]) < 0.0000010000000000  && IKabs(evalcond[3]) < 0.0000010000000000  )
{
{
IkReal dummyeval[1];
IkReal gconst4;
gconst4=IKsign(((((IkReal(-1.00000000000000))*((px)*(px))))+(((IkReal(-1.00000000000000))*((py)*(py))))));
dummyeval[0]=((((IkReal(-1.00000000000000))*((px)*(px))))+(((IkReal(-1.00000000000000))*((py)*(py)))));
if( IKabs(dummyeval[0]) < 0.0000010000000000  )
{
{
IkReal dummyeval[1];
IkReal gconst5;
gconst5=IKsign(((((IkReal(3.00000000000000))*((py)*(py))))+(((IkReal(3.00000000000000))*((px)*(px))))));
dummyeval[0]=(((px)*(px))+((py)*(py)));
if( IKabs(dummyeval[0]) < 0.0000010000000000  )
{
continue;

} else
{
{
IkReal j20array[1], cj20array[1], sj20array[1];
bool j20valid[1]={false};
_nj20 = 1;
IkReal x82=((IkReal(5.00000000000000))*(pp));
IkReal x83=((IkReal(0.300000000000000))*(pz));
if( IKabs(((gconst5)*(((((IkReal(0.0423522000000000))*(px)))+(((px)*(x83)))+(((IkReal(-1.00000000000000))*(px)*(x82))))))) < IKFAST_ATAN2_MAGTHRESH && IKabs(((gconst5)*(((((IkReal(-1.00000000000000))*(py)*(x83)))+(((IkReal(-0.0423522000000000))*(py)))+(((py)*(x82))))))) < IKFAST_ATAN2_MAGTHRESH )
    continue;
j20array[0]=IKatan2(((gconst5)*(((((IkReal(0.0423522000000000))*(px)))+(((px)*(x83)))+(((IkReal(-1.00000000000000))*(px)*(x82)))))), ((gconst5)*(((((IkReal(-1.00000000000000))*(py)*(x83)))+(((IkReal(-0.0423522000000000))*(py)))+(((py)*(x82)))))));
sj20array[0]=IKsin(j20array[0]);
cj20array[0]=IKcos(j20array[0]);
if( j20array[0] > IKPI )
{
    j20array[0]-=IK2PI;
}
else if( j20array[0] < -IKPI )
{    j20array[0]+=IK2PI;
}
j20valid[0] = true;
for(int ij20 = 0; ij20 < 1; ++ij20)
{
if( !j20valid[ij20] )
{
    continue;
}
_ij20[0] = ij20; _ij20[1] = -1;
for(int iij20 = ij20+1; iij20 < 1; ++iij20)
{
if( j20valid[iij20] && IKabs(cj20array[ij20]-cj20array[iij20]) < IKFAST_SOLUTION_THRESH && IKabs(sj20array[ij20]-sj20array[iij20]) < IKFAST_SOLUTION_THRESH )
{
    j20valid[iij20]=false; _ij20[1] = iij20; break;
}
}
j20 = j20array[ij20]; cj20 = cj20array[ij20]; sj20 = sj20array[ij20];
{
IkReal evalcond[3];
IkReal x84=IKsin(j20);
IkReal x85=IKcos(j20);
IkReal x86=((px)*(x84));
IkReal x87=((py)*(x85));
evalcond[0]=((((IkReal(-1.00000000000000))*(px)*(x85)))+(((IkReal(-1.00000000000000))*(py)*(x84))));
evalcond[1]=((IkReal(0.300000000000000))+(((IkReal(0.313800000000000))*(cj23)))+(x86)+(((IkReal(-1.00000000000000))*(x87)))+(((IkReal(-0.0300000000000000))*(sj23))));
evalcond[2]=((IkReal(0.00847044000000000))+(((IkReal(0.600000000000000))*(x87)))+(((IkReal(-1.00000000000000))*(pp)))+(((IkReal(0.0600000000000000))*(pz)))+(((IkReal(-0.600000000000000))*(x86))));
if( IKabs(evalcond[0]) > 0.000001  || IKabs(evalcond[1]) > 0.000001  || IKabs(evalcond[2]) > 0.000001  )
{
continue;
}
}

rotationfunction0(solutions);
}
}

}

}

} else
{
{
IkReal j20array[1], cj20array[1], sj20array[1];
bool j20valid[1]={false};
_nj20 = 1;
IkReal x251=((IkReal(0.0300000000000000))*(sj23));
IkReal x252=((IkReal(0.313800000000000))*(cj23));
if( IKabs(((gconst4)*(((((IkReal(0.300000000000000))*(px)))+(((px)*(x252)))+(((IkReal(-1.00000000000000))*(px)*(x251))))))) < IKFAST_ATAN2_MAGTHRESH && IKabs(((gconst4)*(((((IkReal(-0.300000000000000))*(py)))+(((py)*(x251)))+(((IkReal(-1.00000000000000))*(py)*(x252))))))) < IKFAST_ATAN2_MAGTHRESH )
    continue;
j20array[0]=IKatan2(((gconst4)*(((((IkReal(0.300000000000000))*(px)))+(((px)*(x252)))+(((IkReal(-1.00000000000000))*(px)*(x251)))))), ((gconst4)*(((((IkReal(-0.300000000000000))*(py)))+(((py)*(x251)))+(((IkReal(-1.00000000000000))*(py)*(x252)))))));
sj20array[0]=IKsin(j20array[0]);
cj20array[0]=IKcos(j20array[0]);
if( j20array[0] > IKPI )
{
    j20array[0]-=IK2PI;
}
else if( j20array[0] < -IKPI )
{    j20array[0]+=IK2PI;
}
j20valid[0] = true;
for(int ij20 = 0; ij20 < 1; ++ij20)
{
if( !j20valid[ij20] )
{
    continue;
}
_ij20[0] = ij20; _ij20[1] = -1;
for(int iij20 = ij20+1; iij20 < 1; ++iij20)
{
if( j20valid[iij20] && IKabs(cj20array[ij20]-cj20array[iij20]) < IKFAST_SOLUTION_THRESH && IKabs(sj20array[ij20]-sj20array[iij20]) < IKFAST_SOLUTION_THRESH )
{
    j20valid[iij20]=false; _ij20[1] = iij20; break;
}
}
j20 = j20array[ij20]; cj20 = cj20array[ij20]; sj20 = sj20array[ij20];
{
IkReal evalcond[3];
IkReal x253=IKsin(j20);
IkReal x254=IKcos(j20);
IkReal x255=((px)*(x253));
IkReal x256=((py)*(x254));
evalcond[0]=((((IkReal(-1.00000000000000))*(px)*(x254)))+(((IkReal(-1.00000000000000))*(py)*(x253))));
evalcond[1]=((IkReal(0.300000000000000))+(((IkReal(0.313800000000000))*(cj23)))+(x255)+(((IkReal(-0.0300000000000000))*(sj23)))+(((IkReal(-1.00000000000000))*(x256))));
evalcond[2]=((IkReal(0.00847044000000000))+(((IkReal(0.600000000000000))*(x256)))+(((IkReal(-1.00000000000000))*(pp)))+(((IkReal(-0.600000000000000))*(x255)))+(((IkReal(0.0600000000000000))*(pz))));
if( IKabs(evalcond[0]) > 0.000001  || IKabs(evalcond[1]) > 0.000001  || IKabs(evalcond[2]) > 0.000001  )
{
continue;
}
}

rotationfunction0(solutions);
}
}

}

}

} else
{
IkReal x257=((IkReal(0.313800000000000))*(sj23));
IkReal x258=((IkReal(0.0300000000000000))*(cj23));
IkReal x259=((x258)+(x257));
evalcond[0]=((IkReal(-3.14159265358979))+(IKfmod(j21, IkReal(6.28318530717959))));
evalcond[1]=((IkReal(0.190270440000000))+(((IkReal(0.186480000000000))*(cj23)))+(((IkReal(-1.00000000000000))*(pp)))+(((IkReal(-0.0368280000000000))*(sj23))));
evalcond[2]=((IkReal(-0.0300000000000000))+(((IkReal(-1.00000000000000))*(pz)))+(x259));
evalcond[3]=((IkReal(0.0300000000000000))+(pz)+(((IkReal(-1.00000000000000))*(x259))));
if( IKabs(evalcond[0]) < 0.0000010000000000  && IKabs(evalcond[1]) < 0.0000010000000000  && IKabs(evalcond[2]) < 0.0000010000000000  && IKabs(evalcond[3]) < 0.0000010000000000  )
{
{
IkReal dummyeval[1];
IkReal gconst6;
gconst6=IKsign((((px)*(px))+((py)*(py))));
dummyeval[0]=(((px)*(px))+((py)*(py)));
if( IKabs(dummyeval[0]) < 0.0000010000000000  )
{
{
IkReal dummyeval[1];
IkReal gconst7;
gconst7=IKsign(((((IkReal(-3.00000000000000))*((px)*(px))))+(((IkReal(-3.00000000000000))*((py)*(py))))));
dummyeval[0]=((((IkReal(-1.00000000000000))*((px)*(px))))+(((IkReal(-1.00000000000000))*((py)*(py)))));
if( IKabs(dummyeval[0]) < 0.0000010000000000  )
{
continue;

} else
{
{
IkReal j20array[1], cj20array[1], sj20array[1];
bool j20valid[1]={false};
_nj20 = 1;
IkReal x260=((IkReal(5.00000000000000))*(pp));
IkReal x261=((IkReal(0.300000000000000))*(pz));
if( IKabs(((gconst7)*(((((IkReal(0.0423522000000000))*(px)))+(((IkReal(-1.00000000000000))*(px)*(x260)))+(((IkReal(-1.00000000000000))*(px)*(x261))))))) < IKFAST_ATAN2_MAGTHRESH && IKabs(((gconst7)*(((((IkReal(-0.0423522000000000))*(py)))+(((py)*(x260)))+(((py)*(x261))))))) < IKFAST_ATAN2_MAGTHRESH )
    continue;
j20array[0]=IKatan2(((gconst7)*(((((IkReal(0.0423522000000000))*(px)))+(((IkReal(-1.00000000000000))*(px)*(x260)))+(((IkReal(-1.00000000000000))*(px)*(x261)))))), ((gconst7)*(((((IkReal(-0.0423522000000000))*(py)))+(((py)*(x260)))+(((py)*(x261)))))));
sj20array[0]=IKsin(j20array[0]);
cj20array[0]=IKcos(j20array[0]);
if( j20array[0] > IKPI )
{
    j20array[0]-=IK2PI;
}
else if( j20array[0] < -IKPI )
{    j20array[0]+=IK2PI;
}
j20valid[0] = true;
for(int ij20 = 0; ij20 < 1; ++ij20)
{
if( !j20valid[ij20] )
{
    continue;
}
_ij20[0] = ij20; _ij20[1] = -1;
for(int iij20 = ij20+1; iij20 < 1; ++iij20)
{
if( j20valid[iij20] && IKabs(cj20array[ij20]-cj20array[iij20]) < IKFAST_SOLUTION_THRESH && IKabs(sj20array[ij20]-sj20array[iij20]) < IKFAST_SOLUTION_THRESH )
{
    j20valid[iij20]=false; _ij20[1] = iij20; break;
}
}
j20 = j20array[ij20]; cj20 = cj20array[ij20]; sj20 = sj20array[ij20];
{
IkReal evalcond[3];
IkReal x262=IKcos(j20);
IkReal x263=IKsin(j20);
IkReal x264=((px)*(x263));
IkReal x265=((py)*(x262));
evalcond[0]=((((IkReal(-1.00000000000000))*(px)*(x262)))+(((IkReal(-1.00000000000000))*(py)*(x263))));
evalcond[1]=((IkReal(0.300000000000000))+(((IkReal(-1.00000000000000))*(x264)))+(((IkReal(0.313800000000000))*(cj23)))+(x265)+(((IkReal(-0.0300000000000000))*(sj23))));
evalcond[2]=((IkReal(0.00847044000000000))+(((IkReal(-1.00000000000000))*(pp)))+(((IkReal(-0.0600000000000000))*(pz)))+(((IkReal(0.600000000000000))*(x264)))+(((IkReal(-0.600000000000000))*(x265))));
if( IKabs(evalcond[0]) > 0.000001  || IKabs(evalcond[1]) > 0.000001  || IKabs(evalcond[2]) > 0.000001  )
{
continue;
}
}

rotationfunction0(solutions);
}
}

}

}

} else
{
{
IkReal j20array[1], cj20array[1], sj20array[1];
bool j20valid[1]={false};
_nj20 = 1;
IkReal x266=((IkReal(0.0300000000000000))*(sj23));
IkReal x267=((IkReal(0.313800000000000))*(cj23));
if( IKabs(((gconst6)*(((((IkReal(0.300000000000000))*(px)))+(((IkReal(-1.00000000000000))*(px)*(x266)))+(((px)*(x267))))))) < IKFAST_ATAN2_MAGTHRESH && IKabs(((gconst6)*(((((IkReal(-0.300000000000000))*(py)))+(((py)*(x266)))+(((IkReal(-1.00000000000000))*(py)*(x267))))))) < IKFAST_ATAN2_MAGTHRESH )
    continue;
j20array[0]=IKatan2(((gconst6)*(((((IkReal(0.300000000000000))*(px)))+(((IkReal(-1.00000000000000))*(px)*(x266)))+(((px)*(x267)))))), ((gconst6)*(((((IkReal(-0.300000000000000))*(py)))+(((py)*(x266)))+(((IkReal(-1.00000000000000))*(py)*(x267)))))));
sj20array[0]=IKsin(j20array[0]);
cj20array[0]=IKcos(j20array[0]);
if( j20array[0] > IKPI )
{
    j20array[0]-=IK2PI;
}
else if( j20array[0] < -IKPI )
{    j20array[0]+=IK2PI;
}
j20valid[0] = true;
for(int ij20 = 0; ij20 < 1; ++ij20)
{
if( !j20valid[ij20] )
{
    continue;
}
_ij20[0] = ij20; _ij20[1] = -1;
for(int iij20 = ij20+1; iij20 < 1; ++iij20)
{
if( j20valid[iij20] && IKabs(cj20array[ij20]-cj20array[iij20]) < IKFAST_SOLUTION_THRESH && IKabs(sj20array[ij20]-sj20array[iij20]) < IKFAST_SOLUTION_THRESH )
{
    j20valid[iij20]=false; _ij20[1] = iij20; break;
}
}
j20 = j20array[ij20]; cj20 = cj20array[ij20]; sj20 = sj20array[ij20];
{
IkReal evalcond[3];
IkReal x268=IKcos(j20);
IkReal x269=IKsin(j20);
IkReal x270=((px)*(x269));
IkReal x271=((py)*(x268));
evalcond[0]=((((IkReal(-1.00000000000000))*(px)*(x268)))+(((IkReal(-1.00000000000000))*(py)*(x269))));
evalcond[1]=((IkReal(0.300000000000000))+(((IkReal(0.313800000000000))*(cj23)))+(((IkReal(-1.00000000000000))*(x270)))+(x271)+(((IkReal(-0.0300000000000000))*(sj23))));
evalcond[2]=((IkReal(0.00847044000000000))+(((IkReal(-1.00000000000000))*(pp)))+(((IkReal(-0.0600000000000000))*(pz)))+(((IkReal(0.600000000000000))*(x270)))+(((IkReal(-0.600000000000000))*(x271))));
if( IKabs(evalcond[0]) > 0.000001  || IKabs(evalcond[1]) > 0.000001  || IKabs(evalcond[2]) > 0.000001  )
{
continue;
}
}

rotationfunction0(solutions);
}
}

}

}

} else
{
IkReal x272=((IkReal(0.300000000000000))+(((IkReal(0.313800000000000))*(cj23)))+(((IkReal(-1.00000000000000))*(pz)))+(((IkReal(-0.0300000000000000))*(sj23))));
evalcond[0]=((IkReal(-3.14159265358979))+(IKfmod(((IkReal(1.57079632679490))+(j21)), IkReal(6.28318530717959))));
evalcond[1]=((IkReal(0.190270440000000))+(((IkReal(0.186480000000000))*(cj23)))+(((IkReal(-1.00000000000000))*(pp)))+(((IkReal(-0.0368280000000000))*(sj23))));
evalcond[2]=x272;
evalcond[3]=x272;
if( IKabs(evalcond[0]) < 0.0000010000000000  && IKabs(evalcond[1]) < 0.0000010000000000  && IKabs(evalcond[2]) < 0.0000010000000000  && IKabs(evalcond[3]) < 0.0000010000000000  )
{
{
IkReal dummyeval[1];
IkReal gconst8;
gconst8=IKsign((((px)*(px))+((py)*(py))));
dummyeval[0]=(((px)*(px))+((py)*(py)));
if( IKabs(dummyeval[0]) < 0.0000010000000000  )
{
{
IkReal dummyeval[1];
IkReal gconst9;
gconst9=IKsign(((((IkReal(-3.00000000000000))*((px)*(px))))+(((IkReal(-3.00000000000000))*((py)*(py))))));
dummyeval[0]=((((IkReal(-1.00000000000000))*((px)*(px))))+(((IkReal(-1.00000000000000))*((py)*(py)))));
if( IKabs(dummyeval[0]) < 0.0000010000000000  )
{
continue;

} else
{
{
IkReal j20array[1], cj20array[1], sj20array[1];
bool j20valid[1]={false};
_nj20 = 1;
IkReal x273=((IkReal(50.0000000000000))*(pp));
IkReal x274=((IkReal(30.0000000000000))*(pz));
if( IKabs(((gconst9)*(((((IkReal(0.423522000000000))*(px)))+(((px)*(x274)))+(((IkReal(-1.00000000000000))*(px)*(x273))))))) < IKFAST_ATAN2_MAGTHRESH && IKabs(((gconst9)*(((((py)*(x273)))+(((IkReal(-0.423522000000000))*(py)))+(((IkReal(-1.00000000000000))*(py)*(x274))))))) < IKFAST_ATAN2_MAGTHRESH )
    continue;
j20array[0]=IKatan2(((gconst9)*(((((IkReal(0.423522000000000))*(px)))+(((px)*(x274)))+(((IkReal(-1.00000000000000))*(px)*(x273)))))), ((gconst9)*(((((py)*(x273)))+(((IkReal(-0.423522000000000))*(py)))+(((IkReal(-1.00000000000000))*(py)*(x274)))))));
sj20array[0]=IKsin(j20array[0]);
cj20array[0]=IKcos(j20array[0]);
if( j20array[0] > IKPI )
{
    j20array[0]-=IK2PI;
}
else if( j20array[0] < -IKPI )
{    j20array[0]+=IK2PI;
}
j20valid[0] = true;
for(int ij20 = 0; ij20 < 1; ++ij20)
{
if( !j20valid[ij20] )
{
    continue;
}
_ij20[0] = ij20; _ij20[1] = -1;
for(int iij20 = ij20+1; iij20 < 1; ++iij20)
{
if( j20valid[iij20] && IKabs(cj20array[ij20]-cj20array[iij20]) < IKFAST_SOLUTION_THRESH && IKabs(sj20array[ij20]-sj20array[iij20]) < IKFAST_SOLUTION_THRESH )
{
    j20valid[iij20]=false; _ij20[1] = iij20; break;
}
}
j20 = j20array[ij20]; cj20 = cj20array[ij20]; sj20 = sj20array[ij20];
{
IkReal evalcond[3];
IkReal x275=IKcos(j20);
IkReal x276=IKsin(j20);
IkReal x277=((py)*(x275));
IkReal x278=((px)*(x276));
evalcond[0]=((((IkReal(-1.00000000000000))*(px)*(x275)))+(((IkReal(-1.00000000000000))*(py)*(x276))));
evalcond[1]=((IkReal(0.0300000000000000))+(((IkReal(-0.0300000000000000))*(cj23)))+(((IkReal(-1.00000000000000))*(x278)))+(x277)+(((IkReal(-0.313800000000000))*(sj23))));
evalcond[2]=((IkReal(0.00847044000000000))+(((IkReal(0.600000000000000))*(pz)))+(((IkReal(-1.00000000000000))*(pp)))+(((IkReal(-0.0600000000000000))*(x277)))+(((IkReal(0.0600000000000000))*(x278))));
if( IKabs(evalcond[0]) > 0.000001  || IKabs(evalcond[1]) > 0.000001  || IKabs(evalcond[2]) > 0.000001  )
{
continue;
}
}

rotationfunction0(solutions);
}
}

}

}

} else
{
{
IkReal j20array[1], cj20array[1], sj20array[1];
bool j20valid[1]={false};
_nj20 = 1;
IkReal x279=((IkReal(0.0300000000000000))*(cj23));
IkReal x280=((IkReal(0.313800000000000))*(sj23));
if( IKabs(((gconst8)*(((((IkReal(-1.00000000000000))*(px)*(x280)))+(((IkReal(-1.00000000000000))*(px)*(x279)))+(((IkReal(0.0300000000000000))*(px))))))) < IKFAST_ATAN2_MAGTHRESH && IKabs(((gconst8)*(((((py)*(x279)))+(((py)*(x280)))+(((IkReal(-0.0300000000000000))*(py))))))) < IKFAST_ATAN2_MAGTHRESH )
    continue;
j20array[0]=IKatan2(((gconst8)*(((((IkReal(-1.00000000000000))*(px)*(x280)))+(((IkReal(-1.00000000000000))*(px)*(x279)))+(((IkReal(0.0300000000000000))*(px)))))), ((gconst8)*(((((py)*(x279)))+(((py)*(x280)))+(((IkReal(-0.0300000000000000))*(py)))))));
sj20array[0]=IKsin(j20array[0]);
cj20array[0]=IKcos(j20array[0]);
if( j20array[0] > IKPI )
{
    j20array[0]-=IK2PI;
}
else if( j20array[0] < -IKPI )
{    j20array[0]+=IK2PI;
}
j20valid[0] = true;
for(int ij20 = 0; ij20 < 1; ++ij20)
{
if( !j20valid[ij20] )
{
    continue;
}
_ij20[0] = ij20; _ij20[1] = -1;
for(int iij20 = ij20+1; iij20 < 1; ++iij20)
{
if( j20valid[iij20] && IKabs(cj20array[ij20]-cj20array[iij20]) < IKFAST_SOLUTION_THRESH && IKabs(sj20array[ij20]-sj20array[iij20]) < IKFAST_SOLUTION_THRESH )
{
    j20valid[iij20]=false; _ij20[1] = iij20; break;
}
}
j20 = j20array[ij20]; cj20 = cj20array[ij20]; sj20 = sj20array[ij20];
{
IkReal evalcond[3];
IkReal x281=IKcos(j20);
IkReal x282=IKsin(j20);
IkReal x283=((py)*(x281));
IkReal x284=((px)*(x282));
evalcond[0]=((((IkReal(-1.00000000000000))*(py)*(x282)))+(((IkReal(-1.00000000000000))*(px)*(x281))));
evalcond[1]=((IkReal(0.0300000000000000))+(((IkReal(-0.0300000000000000))*(cj23)))+(x283)+(((IkReal(-1.00000000000000))*(x284)))+(((IkReal(-0.313800000000000))*(sj23))));
evalcond[2]=((IkReal(0.00847044000000000))+(((IkReal(0.600000000000000))*(pz)))+(((IkReal(-0.0600000000000000))*(x283)))+(((IkReal(0.0600000000000000))*(x284)))+(((IkReal(-1.00000000000000))*(pp))));
if( IKabs(evalcond[0]) > 0.000001  || IKabs(evalcond[1]) > 0.000001  || IKabs(evalcond[2]) > 0.000001  )
{
continue;
}
}

rotationfunction0(solutions);
}
}

}

}

} else
{
IkReal x285=((IkReal(0.0300000000000000))*(sj23));
IkReal x286=((IkReal(0.313800000000000))*(cj23));
evalcond[0]=((IkReal(-3.14159265358979))+(IKfmod(((IkReal(4.71238898038469))+(j21)), IkReal(6.28318530717959))));
evalcond[1]=((IkReal(0.190270440000000))+(((IkReal(0.186480000000000))*(cj23)))+(((IkReal(-1.00000000000000))*(pp)))+(((IkReal(-0.0368280000000000))*(sj23))));
evalcond[2]=((IkReal(0.300000000000000))+(x286)+(pz)+(((IkReal(-1.00000000000000))*(x285))));
evalcond[3]=((IkReal(-0.300000000000000))+(((IkReal(-1.00000000000000))*(pz)))+(x285)+(((IkReal(-1.00000000000000))*(x286))));
if( IKabs(evalcond[0]) < 0.0000010000000000  && IKabs(evalcond[1]) < 0.0000010000000000  && IKabs(evalcond[2]) < 0.0000010000000000  && IKabs(evalcond[3]) < 0.0000010000000000  )
{
{
IkReal dummyeval[1];
IkReal gconst10;
gconst10=IKsign(((((IkReal(-1.00000000000000))*((px)*(px))))+(((IkReal(-1.00000000000000))*((py)*(py))))));
dummyeval[0]=((((IkReal(-1.00000000000000))*((px)*(px))))+(((IkReal(-1.00000000000000))*((py)*(py)))));
if( IKabs(dummyeval[0]) < 0.0000010000000000  )
{
{
IkReal dummyeval[1];
IkReal gconst11;
gconst11=IKsign(((((IkReal(3.00000000000000))*((py)*(py))))+(((IkReal(3.00000000000000))*((px)*(px))))));
dummyeval[0]=(((px)*(px))+((py)*(py)));
if( IKabs(dummyeval[0]) < 0.0000010000000000  )
{
continue;

} else
{
{
IkReal j20array[1], cj20array[1], sj20array[1];
bool j20valid[1]={false};
_nj20 = 1;
IkReal x287=((IkReal(50.0000000000000))*(pp));
IkReal x288=((IkReal(30.0000000000000))*(pz));
if( IKabs(((gconst11)*(((((IkReal(0.423522000000000))*(px)))+(((IkReal(-1.00000000000000))*(px)*(x288)))+(((IkReal(-1.00000000000000))*(px)*(x287))))))) < IKFAST_ATAN2_MAGTHRESH && IKabs(((gconst11)*(((((IkReal(-0.423522000000000))*(py)))+(((py)*(x288)))+(((py)*(x287))))))) < IKFAST_ATAN2_MAGTHRESH )
    continue;
j20array[0]=IKatan2(((gconst11)*(((((IkReal(0.423522000000000))*(px)))+(((IkReal(-1.00000000000000))*(px)*(x288)))+(((IkReal(-1.00000000000000))*(px)*(x287)))))), ((gconst11)*(((((IkReal(-0.423522000000000))*(py)))+(((py)*(x288)))+(((py)*(x287)))))));
sj20array[0]=IKsin(j20array[0]);
cj20array[0]=IKcos(j20array[0]);
if( j20array[0] > IKPI )
{
    j20array[0]-=IK2PI;
}
else if( j20array[0] < -IKPI )
{    j20array[0]+=IK2PI;
}
j20valid[0] = true;
for(int ij20 = 0; ij20 < 1; ++ij20)
{
if( !j20valid[ij20] )
{
    continue;
}
_ij20[0] = ij20; _ij20[1] = -1;
for(int iij20 = ij20+1; iij20 < 1; ++iij20)
{
if( j20valid[iij20] && IKabs(cj20array[ij20]-cj20array[iij20]) < IKFAST_SOLUTION_THRESH && IKabs(sj20array[ij20]-sj20array[iij20]) < IKFAST_SOLUTION_THRESH )
{
    j20valid[iij20]=false; _ij20[1] = iij20; break;
}
}
j20 = j20array[ij20]; cj20 = cj20array[ij20]; sj20 = sj20array[ij20];
{
IkReal evalcond[3];
IkReal x289=IKsin(j20);
IkReal x290=IKcos(j20);
IkReal x291=((py)*(x290));
IkReal x292=((px)*(x289));
evalcond[0]=((((IkReal(-1.00000000000000))*(px)*(x290)))+(((IkReal(-1.00000000000000))*(py)*(x289))));
evalcond[1]=((IkReal(0.0300000000000000))+(((IkReal(-1.00000000000000))*(x291)))+(((IkReal(-0.0300000000000000))*(cj23)))+(x292)+(((IkReal(-0.313800000000000))*(sj23))));
evalcond[2]=((IkReal(0.00847044000000000))+(((IkReal(-0.600000000000000))*(pz)))+(((IkReal(-1.00000000000000))*(pp)))+(((IkReal(-0.0600000000000000))*(x292)))+(((IkReal(0.0600000000000000))*(x291))));
if( IKabs(evalcond[0]) > 0.000001  || IKabs(evalcond[1]) > 0.000001  || IKabs(evalcond[2]) > 0.000001  )
{
continue;
}
}

rotationfunction0(solutions);
}
}

}

}

} else
{
{
IkReal j20array[1], cj20array[1], sj20array[1];
bool j20valid[1]={false};
_nj20 = 1;
IkReal x293=((IkReal(0.0300000000000000))*(cj23));
IkReal x294=((IkReal(0.313800000000000))*(sj23));
if( IKabs(((gconst10)*(((((IkReal(0.0300000000000000))*(px)))+(((IkReal(-1.00000000000000))*(px)*(x294)))+(((IkReal(-1.00000000000000))*(px)*(x293))))))) < IKFAST_ATAN2_MAGTHRESH && IKabs(((gconst10)*(((((py)*(x294)))+(((py)*(x293)))+(((IkReal(-0.0300000000000000))*(py))))))) < IKFAST_ATAN2_MAGTHRESH )
    continue;
j20array[0]=IKatan2(((gconst10)*(((((IkReal(0.0300000000000000))*(px)))+(((IkReal(-1.00000000000000))*(px)*(x294)))+(((IkReal(-1.00000000000000))*(px)*(x293)))))), ((gconst10)*(((((py)*(x294)))+(((py)*(x293)))+(((IkReal(-0.0300000000000000))*(py)))))));
sj20array[0]=IKsin(j20array[0]);
cj20array[0]=IKcos(j20array[0]);
if( j20array[0] > IKPI )
{
    j20array[0]-=IK2PI;
}
else if( j20array[0] < -IKPI )
{    j20array[0]+=IK2PI;
}
j20valid[0] = true;
for(int ij20 = 0; ij20 < 1; ++ij20)
{
if( !j20valid[ij20] )
{
    continue;
}
_ij20[0] = ij20; _ij20[1] = -1;
for(int iij20 = ij20+1; iij20 < 1; ++iij20)
{
if( j20valid[iij20] && IKabs(cj20array[ij20]-cj20array[iij20]) < IKFAST_SOLUTION_THRESH && IKabs(sj20array[ij20]-sj20array[iij20]) < IKFAST_SOLUTION_THRESH )
{
    j20valid[iij20]=false; _ij20[1] = iij20; break;
}
}
j20 = j20array[ij20]; cj20 = cj20array[ij20]; sj20 = sj20array[ij20];
{
IkReal evalcond[3];
IkReal x295=IKsin(j20);
IkReal x296=IKcos(j20);
IkReal x297=((py)*(x296));
IkReal x298=((px)*(x295));
evalcond[0]=((((IkReal(-1.00000000000000))*(py)*(x295)))+(((IkReal(-1.00000000000000))*(px)*(x296))));
evalcond[1]=((IkReal(0.0300000000000000))+(((IkReal(-1.00000000000000))*(x297)))+(((IkReal(-0.0300000000000000))*(cj23)))+(x298)+(((IkReal(-0.313800000000000))*(sj23))));
evalcond[2]=((IkReal(0.00847044000000000))+(((IkReal(-0.600000000000000))*(pz)))+(((IkReal(-1.00000000000000))*(pp)))+(((IkReal(-0.0600000000000000))*(x298)))+(((IkReal(0.0600000000000000))*(x297))));
if( IKabs(evalcond[0]) > 0.000001  || IKabs(evalcond[1]) > 0.000001  || IKabs(evalcond[2]) > 0.000001  )
{
continue;
}
}

rotationfunction0(solutions);
}
}

}

}

} else
{
if( 1 )
{
continue;

} else
{
}
}
}
}
}
}

} else
{
{
IkReal j20array[1], cj20array[1], sj20array[1];
bool j20valid[1]={false};
_nj20 = 1;
IkReal x299=((IkReal(0.313800000000000))*(sj23));
IkReal x300=((IkReal(0.0300000000000000))*(cj23));
IkReal x301=((cj21)*(pz));
if( IKabs(((gconst3)*(((((IkReal(-1.00000000000000))*(px)*(x300)))+(((IkReal(-1.00000000000000))*(px)*(x301)))+(((IkReal(0.0300000000000000))*(px)))+(((IkReal(-1.00000000000000))*(px)*(x299))))))) < IKFAST_ATAN2_MAGTHRESH && IKabs(((gconst3)*(((((py)*(x299)))+(((py)*(x301)))+(((py)*(x300)))+(((IkReal(-0.0300000000000000))*(py))))))) < IKFAST_ATAN2_MAGTHRESH )
    continue;
j20array[0]=IKatan2(((gconst3)*(((((IkReal(-1.00000000000000))*(px)*(x300)))+(((IkReal(-1.00000000000000))*(px)*(x301)))+(((IkReal(0.0300000000000000))*(px)))+(((IkReal(-1.00000000000000))*(px)*(x299)))))), ((gconst3)*(((((py)*(x299)))+(((py)*(x301)))+(((py)*(x300)))+(((IkReal(-0.0300000000000000))*(py)))))));
sj20array[0]=IKsin(j20array[0]);
cj20array[0]=IKcos(j20array[0]);
if( j20array[0] > IKPI )
{
    j20array[0]-=IK2PI;
}
else if( j20array[0] < -IKPI )
{    j20array[0]+=IK2PI;
}
j20valid[0] = true;
for(int ij20 = 0; ij20 < 1; ++ij20)
{
if( !j20valid[ij20] )
{
    continue;
}
_ij20[0] = ij20; _ij20[1] = -1;
for(int iij20 = ij20+1; iij20 < 1; ++iij20)
{
if( j20valid[iij20] && IKabs(cj20array[ij20]-cj20array[iij20]) < IKFAST_SOLUTION_THRESH && IKabs(sj20array[ij20]-sj20array[iij20]) < IKFAST_SOLUTION_THRESH )
{
    j20valid[iij20]=false; _ij20[1] = iij20; break;
}
}
j20 = j20array[ij20]; cj20 = cj20array[ij20]; sj20 = sj20array[ij20];
{
IkReal evalcond[5];
IkReal x302=IKsin(j20);
IkReal x303=IKcos(j20);
IkReal x304=((IkReal(0.0300000000000000))*(sj23));
IkReal x305=((IkReal(0.313800000000000))*(cj23));
IkReal x306=((IkReal(0.0300000000000000))*(cj23));
IkReal x307=((IkReal(0.0600000000000000))*(sj21));
IkReal x308=((IkReal(0.313800000000000))*(sj23));
IkReal x309=((cj21)*(pz));
IkReal x310=((pz)*(sj21));
IkReal x311=((px)*(x302));
IkReal x312=((py)*(x303));
IkReal x313=((cj21)*(x312));
evalcond[0]=((((IkReal(-1.00000000000000))*(px)*(x303)))+(((IkReal(-1.00000000000000))*(py)*(x302))));
evalcond[1]=((IkReal(0.300000000000000))+(x305)+(((cj21)*(x311)))+(((IkReal(-1.00000000000000))*(x310)))+(((IkReal(-1.00000000000000))*(x313)))+(((IkReal(-1.00000000000000))*(x304))));
evalcond[2]=((IkReal(0.0300000000000000))+(((IkReal(-1.00000000000000))*(sj21)*(x311)))+(((IkReal(-1.00000000000000))*(x309)))+(((sj21)*(x312)))+(((IkReal(-1.00000000000000))*(x306)))+(((IkReal(-1.00000000000000))*(x308))));
evalcond[3]=((((sj21)*(x308)))+(((sj21)*(x306)))+(x311)+(((IkReal(-1.00000000000000))*(cj21)*(x304)))+(((IkReal(-0.0300000000000000))*(sj21)))+(((IkReal(-1.00000000000000))*(x312)))+(((cj21)*(x305)))+(((IkReal(0.300000000000000))*(cj21))));
evalcond[4]=((IkReal(0.00847044000000000))+(((IkReal(0.0600000000000000))*(x309)))+(((IkReal(0.600000000000000))*(x310)))+(((IkReal(0.600000000000000))*(x313)))+(((IkReal(-1.00000000000000))*(pp)))+(((x307)*(x311)))+(((IkReal(-1.00000000000000))*(x307)*(x312)))+(((IkReal(-0.600000000000000))*(cj21)*(x311))));
if( IKabs(evalcond[0]) > 0.000001  || IKabs(evalcond[1]) > 0.000001  || IKabs(evalcond[2]) > 0.000001  || IKabs(evalcond[3]) > 0.000001  || IKabs(evalcond[4]) > 0.000001  )
{
continue;
}
}

rotationfunction0(solutions);
}
}

}

}

} else
{
{
IkReal j20array[1], cj20array[1], sj20array[1];
bool j20valid[1]={false};
_nj20 = 1;
IkReal x314=((pz)*(sj21));
IkReal x315=((IkReal(0.0300000000000000))*(sj23));
IkReal x316=((IkReal(0.313800000000000))*(cj23));
if( IKabs(((gconst2)*(((((IkReal(-0.300000000000000))*(px)))+(((px)*(x315)))+(((px)*(x314)))+(((IkReal(-1.00000000000000))*(px)*(x316))))))) < IKFAST_ATAN2_MAGTHRESH && IKabs(((gconst2)*(((((IkReal(0.300000000000000))*(py)))+(((IkReal(-1.00000000000000))*(py)*(x314)))+(((IkReal(-1.00000000000000))*(py)*(x315)))+(((py)*(x316))))))) < IKFAST_ATAN2_MAGTHRESH )
    continue;
j20array[0]=IKatan2(((gconst2)*(((((IkReal(-0.300000000000000))*(px)))+(((px)*(x315)))+(((px)*(x314)))+(((IkReal(-1.00000000000000))*(px)*(x316)))))), ((gconst2)*(((((IkReal(0.300000000000000))*(py)))+(((IkReal(-1.00000000000000))*(py)*(x314)))+(((IkReal(-1.00000000000000))*(py)*(x315)))+(((py)*(x316)))))));
sj20array[0]=IKsin(j20array[0]);
cj20array[0]=IKcos(j20array[0]);
if( j20array[0] > IKPI )
{
    j20array[0]-=IK2PI;
}
else if( j20array[0] < -IKPI )
{    j20array[0]+=IK2PI;
}
j20valid[0] = true;
for(int ij20 = 0; ij20 < 1; ++ij20)
{
if( !j20valid[ij20] )
{
    continue;
}
_ij20[0] = ij20; _ij20[1] = -1;
for(int iij20 = ij20+1; iij20 < 1; ++iij20)
{
if( j20valid[iij20] && IKabs(cj20array[ij20]-cj20array[iij20]) < IKFAST_SOLUTION_THRESH && IKabs(sj20array[ij20]-sj20array[iij20]) < IKFAST_SOLUTION_THRESH )
{
    j20valid[iij20]=false; _ij20[1] = iij20; break;
}
}
j20 = j20array[ij20]; cj20 = cj20array[ij20]; sj20 = sj20array[ij20];
{
IkReal evalcond[5];
IkReal x317=IKsin(j20);
IkReal x318=IKcos(j20);
IkReal x319=((IkReal(0.0300000000000000))*(sj23));
IkReal x320=((IkReal(0.313800000000000))*(cj23));
IkReal x321=((IkReal(0.0300000000000000))*(cj23));
IkReal x322=((IkReal(0.0600000000000000))*(sj21));
IkReal x323=((IkReal(0.313800000000000))*(sj23));
IkReal x324=((cj21)*(pz));
IkReal x325=((pz)*(sj21));
IkReal x326=((px)*(x317));
IkReal x327=((py)*(x318));
IkReal x328=((cj21)*(x327));
evalcond[0]=((((IkReal(-1.00000000000000))*(px)*(x318)))+(((IkReal(-1.00000000000000))*(py)*(x317))));
evalcond[1]=((IkReal(0.300000000000000))+(((IkReal(-1.00000000000000))*(x328)))+(((IkReal(-1.00000000000000))*(x325)))+(x320)+(((IkReal(-1.00000000000000))*(x319)))+(((cj21)*(x326))));
evalcond[2]=((IkReal(0.0300000000000000))+(((IkReal(-1.00000000000000))*(x323)))+(((IkReal(-1.00000000000000))*(x321)))+(((IkReal(-1.00000000000000))*(x324)))+(((IkReal(-1.00000000000000))*(sj21)*(x326)))+(((sj21)*(x327))));
evalcond[3]=((((IkReal(-1.00000000000000))*(cj21)*(x319)))+(((IkReal(-1.00000000000000))*(x327)))+(x326)+(((sj21)*(x321)))+(((sj21)*(x323)))+(((IkReal(-0.0300000000000000))*(sj21)))+(((cj21)*(x320)))+(((IkReal(0.300000000000000))*(cj21))));
evalcond[4]=((IkReal(0.00847044000000000))+(((x322)*(x326)))+(((IkReal(-1.00000000000000))*(x322)*(x327)))+(((IkReal(0.600000000000000))*(x328)))+(((IkReal(0.600000000000000))*(x325)))+(((IkReal(-1.00000000000000))*(pp)))+(((IkReal(-0.600000000000000))*(cj21)*(x326)))+(((IkReal(0.0600000000000000))*(x324))));
if( IKabs(evalcond[0]) > 0.000001  || IKabs(evalcond[1]) > 0.000001  || IKabs(evalcond[2]) > 0.000001  || IKabs(evalcond[3]) > 0.000001  || IKabs(evalcond[4]) > 0.000001  )
{
continue;
}
}

rotationfunction0(solutions);
}
}

}

}

} else
{
IkReal x329=((IkReal(0.0300000000000000))*(cj21));
evalcond[0]=((IkReal(-3.14159265358979))+(IKfmod(((IkReal(4.71238898038469))+(j22)), IkReal(6.28318530717959))));
evalcond[1]=((IkReal(0.190270440000000))+(((IkReal(0.186480000000000))*(cj23)))+(((IkReal(-1.00000000000000))*(pp)))+(((IkReal(-0.0368280000000000))*(sj23))));
evalcond[2]=((((IkReal(0.313800000000000))*(cj23)*(sj21)))+(((IkReal(-1.00000000000000))*(x329)))+(((IkReal(-0.0300000000000000))*(sj21)*(sj23)))+(((IkReal(-1.00000000000000))*(pz)))+(((IkReal(0.300000000000000))*(sj21)))+(((cj23)*(x329)))+(((IkReal(0.313800000000000))*(cj21)*(sj23))));
if( IKabs(evalcond[0]) < 0.0000010000000000  && IKabs(evalcond[1]) < 0.0000010000000000  && IKabs(evalcond[2]) < 0.0000010000000000  )
{
{
IkReal dummyeval[1];
IkReal gconst12;
gconst12=IKsign(((((sj21)*((py)*(py))))+(((sj21)*((px)*(px))))));
dummyeval[0]=((((sj21)*((py)*(py))))+(((sj21)*((px)*(px)))));
if( IKabs(dummyeval[0]) < 0.0000010000000000  )
{
{
IkReal dummyeval[1];
IkReal gconst13;
gconst13=IKsign(((((cj21)*((py)*(py))))+(((cj21)*((px)*(px))))));
dummyeval[0]=((((cj21)*((py)*(py))))+(((cj21)*((px)*(px)))));
if( IKabs(dummyeval[0]) < 0.0000010000000000  )
{
{
IkReal evalcond[4];
IkReal x330=((IkReal(0.300000000000000))+(((IkReal(0.313800000000000))*(cj23)))+(((IkReal(-1.00000000000000))*(pz)))+(((IkReal(-0.0300000000000000))*(sj23))));
evalcond[0]=((IkReal(-3.14159265358979))+(IKfmod(((IkReal(1.57079632679490))+(j21)), IkReal(6.28318530717959))));
evalcond[1]=((IkReal(0.190270440000000))+(((IkReal(0.186480000000000))*(cj23)))+(((IkReal(-1.00000000000000))*(pp)))+(((IkReal(-0.0368280000000000))*(sj23))));
evalcond[2]=x330;
evalcond[3]=x330;
if( IKabs(evalcond[0]) < 0.0000010000000000  && IKabs(evalcond[1]) < 0.0000010000000000  && IKabs(evalcond[2]) < 0.0000010000000000  && IKabs(evalcond[3]) < 0.0000010000000000  )
{
{
IkReal dummyeval[1];
IkReal gconst14;
gconst14=IKsign(((((IkReal(-1.00000000000000))*((px)*(px))))+(((IkReal(-1.00000000000000))*((py)*(py))))));
dummyeval[0]=((((IkReal(-1.00000000000000))*((px)*(px))))+(((IkReal(-1.00000000000000))*((py)*(py)))));
if( IKabs(dummyeval[0]) < 0.0000010000000000  )
{
{
IkReal dummyeval[1];
IkReal gconst15;
gconst15=IKsign(((((IkReal(3.00000000000000))*((py)*(py))))+(((IkReal(3.00000000000000))*((px)*(px))))));
dummyeval[0]=(((px)*(px))+((py)*(py)));
if( IKabs(dummyeval[0]) < 0.0000010000000000  )
{
continue;

} else
{
{
IkReal j20array[1], cj20array[1], sj20array[1];
bool j20valid[1]={false};
_nj20 = 1;
IkReal x331=((IkReal(50.0000000000000))*(pp));
IkReal x332=((IkReal(30.0000000000000))*(pz));
if( IKabs(((gconst15)*(((((IkReal(-1.00000000000000))*(px)*(x331)))+(((IkReal(0.423522000000000))*(px)))+(((px)*(x332))))))) < IKFAST_ATAN2_MAGTHRESH && IKabs(((gconst15)*(((((IkReal(-1.00000000000000))*(py)*(x332)))+(((py)*(x331)))+(((IkReal(-0.423522000000000))*(py))))))) < IKFAST_ATAN2_MAGTHRESH )
    continue;
j20array[0]=IKatan2(((gconst15)*(((((IkReal(-1.00000000000000))*(px)*(x331)))+(((IkReal(0.423522000000000))*(px)))+(((px)*(x332)))))), ((gconst15)*(((((IkReal(-1.00000000000000))*(py)*(x332)))+(((py)*(x331)))+(((IkReal(-0.423522000000000))*(py)))))));
sj20array[0]=IKsin(j20array[0]);
cj20array[0]=IKcos(j20array[0]);
if( j20array[0] > IKPI )
{
    j20array[0]-=IK2PI;
}
else if( j20array[0] < -IKPI )
{    j20array[0]+=IK2PI;
}
j20valid[0] = true;
for(int ij20 = 0; ij20 < 1; ++ij20)
{
if( !j20valid[ij20] )
{
    continue;
}
_ij20[0] = ij20; _ij20[1] = -1;
for(int iij20 = ij20+1; iij20 < 1; ++iij20)
{
if( j20valid[iij20] && IKabs(cj20array[ij20]-cj20array[iij20]) < IKFAST_SOLUTION_THRESH && IKabs(sj20array[ij20]-sj20array[iij20]) < IKFAST_SOLUTION_THRESH )
{
    j20valid[iij20]=false; _ij20[1] = iij20; break;
}
}
j20 = j20array[ij20]; cj20 = cj20array[ij20]; sj20 = sj20array[ij20];
{
IkReal evalcond[3];
IkReal x333=IKsin(j20);
IkReal x334=IKcos(j20);
IkReal x335=((py)*(x334));
IkReal x336=((px)*(x333));
evalcond[0]=((((IkReal(-1.00000000000000))*(px)*(x334)))+(((IkReal(-1.00000000000000))*(py)*(x333))));
evalcond[1]=((IkReal(0.0300000000000000))+(((IkReal(-0.0300000000000000))*(cj23)))+(x336)+(((IkReal(-1.00000000000000))*(x335)))+(((IkReal(-0.313800000000000))*(sj23))));
evalcond[2]=((IkReal(0.00847044000000000))+(((IkReal(0.600000000000000))*(pz)))+(((IkReal(-0.0600000000000000))*(x336)))+(((IkReal(0.0600000000000000))*(x335)))+(((IkReal(-1.00000000000000))*(pp))));
if( IKabs(evalcond[0]) > 0.000001  || IKabs(evalcond[1]) > 0.000001  || IKabs(evalcond[2]) > 0.000001  )
{
continue;
}
}

rotationfunction0(solutions);
}
}

}

}

} else
{
{
IkReal j20array[1], cj20array[1], sj20array[1];
bool j20valid[1]={false};
_nj20 = 1;
IkReal x337=((IkReal(0.0300000000000000))*(cj23));
IkReal x338=((IkReal(0.313800000000000))*(sj23));
if( IKabs(((gconst14)*(((((IkReal(-1.00000000000000))*(px)*(x337)))+(((IkReal(-1.00000000000000))*(px)*(x338)))+(((IkReal(0.0300000000000000))*(px))))))) < IKFAST_ATAN2_MAGTHRESH && IKabs(((gconst14)*(((((py)*(x338)))+(((py)*(x337)))+(((IkReal(-0.0300000000000000))*(py))))))) < IKFAST_ATAN2_MAGTHRESH )
    continue;
j20array[0]=IKatan2(((gconst14)*(((((IkReal(-1.00000000000000))*(px)*(x337)))+(((IkReal(-1.00000000000000))*(px)*(x338)))+(((IkReal(0.0300000000000000))*(px)))))), ((gconst14)*(((((py)*(x338)))+(((py)*(x337)))+(((IkReal(-0.0300000000000000))*(py)))))));
sj20array[0]=IKsin(j20array[0]);
cj20array[0]=IKcos(j20array[0]);
if( j20array[0] > IKPI )
{
    j20array[0]-=IK2PI;
}
else if( j20array[0] < -IKPI )
{    j20array[0]+=IK2PI;
}
j20valid[0] = true;
for(int ij20 = 0; ij20 < 1; ++ij20)
{
if( !j20valid[ij20] )
{
    continue;
}
_ij20[0] = ij20; _ij20[1] = -1;
for(int iij20 = ij20+1; iij20 < 1; ++iij20)
{
if( j20valid[iij20] && IKabs(cj20array[ij20]-cj20array[iij20]) < IKFAST_SOLUTION_THRESH && IKabs(sj20array[ij20]-sj20array[iij20]) < IKFAST_SOLUTION_THRESH )
{
    j20valid[iij20]=false; _ij20[1] = iij20; break;
}
}
j20 = j20array[ij20]; cj20 = cj20array[ij20]; sj20 = sj20array[ij20];
{
IkReal evalcond[3];
IkReal x339=IKsin(j20);
IkReal x340=IKcos(j20);
IkReal x341=((py)*(x340));
IkReal x342=((px)*(x339));
evalcond[0]=((((IkReal(-1.00000000000000))*(px)*(x340)))+(((IkReal(-1.00000000000000))*(py)*(x339))));
evalcond[1]=((IkReal(0.0300000000000000))+(((IkReal(-0.0300000000000000))*(cj23)))+(x342)+(((IkReal(-0.313800000000000))*(sj23)))+(((IkReal(-1.00000000000000))*(x341))));
evalcond[2]=((IkReal(0.00847044000000000))+(((IkReal(0.600000000000000))*(pz)))+(((IkReal(-0.0600000000000000))*(x342)))+(((IkReal(-1.00000000000000))*(pp)))+(((IkReal(0.0600000000000000))*(x341))));
if( IKabs(evalcond[0]) > 0.000001  || IKabs(evalcond[1]) > 0.000001  || IKabs(evalcond[2]) > 0.000001  )
{
continue;
}
}

rotationfunction0(solutions);
}
}

}

}

} else
{
IkReal x343=((IkReal(0.0300000000000000))*(sj23));
IkReal x344=((IkReal(0.313800000000000))*(cj23));
evalcond[0]=((IkReal(-3.14159265358979))+(IKfmod(((IkReal(4.71238898038469))+(j21)), IkReal(6.28318530717959))));
evalcond[1]=((IkReal(0.190270440000000))+(((IkReal(0.186480000000000))*(cj23)))+(((IkReal(-1.00000000000000))*(pp)))+(((IkReal(-0.0368280000000000))*(sj23))));
evalcond[2]=((IkReal(0.300000000000000))+(x344)+(pz)+(((IkReal(-1.00000000000000))*(x343))));
evalcond[3]=((IkReal(-0.300000000000000))+(x343)+(((IkReal(-1.00000000000000))*(pz)))+(((IkReal(-1.00000000000000))*(x344))));
if( IKabs(evalcond[0]) < 0.0000010000000000  && IKabs(evalcond[1]) < 0.0000010000000000  && IKabs(evalcond[2]) < 0.0000010000000000  && IKabs(evalcond[3]) < 0.0000010000000000  )
{
{
IkReal dummyeval[1];
IkReal gconst16;
gconst16=IKsign((((px)*(px))+((py)*(py))));
dummyeval[0]=(((px)*(px))+((py)*(py)));
if( IKabs(dummyeval[0]) < 0.0000010000000000  )
{
{
IkReal dummyeval[1];
IkReal gconst17;
gconst17=IKsign(((((IkReal(-3.00000000000000))*((px)*(px))))+(((IkReal(-3.00000000000000))*((py)*(py))))));
dummyeval[0]=((((IkReal(-1.00000000000000))*((px)*(px))))+(((IkReal(-1.00000000000000))*((py)*(py)))));
if( IKabs(dummyeval[0]) < 0.0000010000000000  )
{
continue;

} else
{
{
IkReal j20array[1], cj20array[1], sj20array[1];
bool j20valid[1]={false};
_nj20 = 1;
IkReal x345=((IkReal(50.0000000000000))*(pp));
IkReal x346=((IkReal(30.0000000000000))*(pz));
if( IKabs(((gconst17)*(((((IkReal(-1.00000000000000))*(px)*(x345)))+(((IkReal(-1.00000000000000))*(px)*(x346)))+(((IkReal(0.423522000000000))*(px))))))) < IKFAST_ATAN2_MAGTHRESH && IKabs(((gconst17)*(((((py)*(x345)))+(((py)*(x346)))+(((IkReal(-0.423522000000000))*(py))))))) < IKFAST_ATAN2_MAGTHRESH )
    continue;
j20array[0]=IKatan2(((gconst17)*(((((IkReal(-1.00000000000000))*(px)*(x345)))+(((IkReal(-1.00000000000000))*(px)*(x346)))+(((IkReal(0.423522000000000))*(px)))))), ((gconst17)*(((((py)*(x345)))+(((py)*(x346)))+(((IkReal(-0.423522000000000))*(py)))))));
sj20array[0]=IKsin(j20array[0]);
cj20array[0]=IKcos(j20array[0]);
if( j20array[0] > IKPI )
{
    j20array[0]-=IK2PI;
}
else if( j20array[0] < -IKPI )
{    j20array[0]+=IK2PI;
}
j20valid[0] = true;
for(int ij20 = 0; ij20 < 1; ++ij20)
{
if( !j20valid[ij20] )
{
    continue;
}
_ij20[0] = ij20; _ij20[1] = -1;
for(int iij20 = ij20+1; iij20 < 1; ++iij20)
{
if( j20valid[iij20] && IKabs(cj20array[ij20]-cj20array[iij20]) < IKFAST_SOLUTION_THRESH && IKabs(sj20array[ij20]-sj20array[iij20]) < IKFAST_SOLUTION_THRESH )
{
    j20valid[iij20]=false; _ij20[1] = iij20; break;
}
}
j20 = j20array[ij20]; cj20 = cj20array[ij20]; sj20 = sj20array[ij20];
{
IkReal evalcond[3];
IkReal x347=IKcos(j20);
IkReal x348=IKsin(j20);
IkReal x349=((py)*(x347));
IkReal x350=((px)*(x348));
evalcond[0]=((((IkReal(-1.00000000000000))*(px)*(x347)))+(((IkReal(-1.00000000000000))*(py)*(x348))));
evalcond[1]=((IkReal(0.0300000000000000))+(((IkReal(-0.0300000000000000))*(cj23)))+(((IkReal(-1.00000000000000))*(x350)))+(x349)+(((IkReal(-0.313800000000000))*(sj23))));
evalcond[2]=((IkReal(0.00847044000000000))+(((IkReal(-0.0600000000000000))*(x349)))+(((IkReal(-0.600000000000000))*(pz)))+(((IkReal(-1.00000000000000))*(pp)))+(((IkReal(0.0600000000000000))*(x350))));
if( IKabs(evalcond[0]) > 0.000001  || IKabs(evalcond[1]) > 0.000001  || IKabs(evalcond[2]) > 0.000001  )
{
continue;
}
}

rotationfunction0(solutions);
}
}

}

}

} else
{
{
IkReal j20array[1], cj20array[1], sj20array[1];
bool j20valid[1]={false};
_nj20 = 1;
IkReal x351=((IkReal(0.0300000000000000))*(cj23));
IkReal x352=((IkReal(0.313800000000000))*(sj23));
if( IKabs(((gconst16)*(((((IkReal(-1.00000000000000))*(px)*(x352)))+(((IkReal(-1.00000000000000))*(px)*(x351)))+(((IkReal(0.0300000000000000))*(px))))))) < IKFAST_ATAN2_MAGTHRESH && IKabs(((gconst16)*(((((py)*(x351)))+(((py)*(x352)))+(((IkReal(-0.0300000000000000))*(py))))))) < IKFAST_ATAN2_MAGTHRESH )
    continue;
j20array[0]=IKatan2(((gconst16)*(((((IkReal(-1.00000000000000))*(px)*(x352)))+(((IkReal(-1.00000000000000))*(px)*(x351)))+(((IkReal(0.0300000000000000))*(px)))))), ((gconst16)*(((((py)*(x351)))+(((py)*(x352)))+(((IkReal(-0.0300000000000000))*(py)))))));
sj20array[0]=IKsin(j20array[0]);
cj20array[0]=IKcos(j20array[0]);
if( j20array[0] > IKPI )
{
    j20array[0]-=IK2PI;
}
else if( j20array[0] < -IKPI )
{    j20array[0]+=IK2PI;
}
j20valid[0] = true;
for(int ij20 = 0; ij20 < 1; ++ij20)
{
if( !j20valid[ij20] )
{
    continue;
}
_ij20[0] = ij20; _ij20[1] = -1;
for(int iij20 = ij20+1; iij20 < 1; ++iij20)
{
if( j20valid[iij20] && IKabs(cj20array[ij20]-cj20array[iij20]) < IKFAST_SOLUTION_THRESH && IKabs(sj20array[ij20]-sj20array[iij20]) < IKFAST_SOLUTION_THRESH )
{
    j20valid[iij20]=false; _ij20[1] = iij20; break;
}
}
j20 = j20array[ij20]; cj20 = cj20array[ij20]; sj20 = sj20array[ij20];
{
IkReal evalcond[3];
IkReal x353=IKcos(j20);
IkReal x354=IKsin(j20);
IkReal x355=((py)*(x353));
IkReal x356=((px)*(x354));
evalcond[0]=((((IkReal(-1.00000000000000))*(py)*(x354)))+(((IkReal(-1.00000000000000))*(px)*(x353))));
evalcond[1]=((IkReal(0.0300000000000000))+(((IkReal(-0.0300000000000000))*(cj23)))+(((IkReal(-1.00000000000000))*(x356)))+(x355)+(((IkReal(-0.313800000000000))*(sj23))));
evalcond[2]=((IkReal(0.00847044000000000))+(((IkReal(-0.0600000000000000))*(x355)))+(((IkReal(-0.600000000000000))*(pz)))+(((IkReal(-1.00000000000000))*(pp)))+(((IkReal(0.0600000000000000))*(x356))));
if( IKabs(evalcond[0]) > 0.000001  || IKabs(evalcond[1]) > 0.000001  || IKabs(evalcond[2]) > 0.000001  )
{
continue;
}
}

rotationfunction0(solutions);
}
}

}

}

} else
{
IkReal x357=((IkReal(0.313800000000000))*(sj23));
IkReal x358=((IkReal(0.0300000000000000))*(cj23));
IkReal x359=((x357)+(x358));
evalcond[0]=((IkReal(-3.14159265358979))+(IKfmod(((IkReal(3.14159265358979))+(j21)), IkReal(6.28318530717959))));
evalcond[1]=((IkReal(0.190270440000000))+(((IkReal(0.186480000000000))*(cj23)))+(((IkReal(-1.00000000000000))*(pp)))+(((IkReal(-0.0368280000000000))*(sj23))));
evalcond[2]=((IkReal(-0.0300000000000000))+(x359)+(((IkReal(-1.00000000000000))*(pz))));
evalcond[3]=((IkReal(0.0300000000000000))+(((IkReal(-1.00000000000000))*(x359)))+(pz));
if( IKabs(evalcond[0]) < 0.0000010000000000  && IKabs(evalcond[1]) < 0.0000010000000000  && IKabs(evalcond[2]) < 0.0000010000000000  && IKabs(evalcond[3]) < 0.0000010000000000  )
{
{
IkReal dummyeval[1];
IkReal gconst18;
gconst18=IKsign(((((IkReal(-1.00000000000000))*((px)*(px))))+(((IkReal(-1.00000000000000))*((py)*(py))))));
dummyeval[0]=((((IkReal(-1.00000000000000))*((px)*(px))))+(((IkReal(-1.00000000000000))*((py)*(py)))));
if( IKabs(dummyeval[0]) < 0.0000010000000000  )
{
{
IkReal dummyeval[1];
IkReal gconst19;
gconst19=IKsign(((((IkReal(3.00000000000000))*((py)*(py))))+(((IkReal(3.00000000000000))*((px)*(px))))));
dummyeval[0]=(((px)*(px))+((py)*(py)));
if( IKabs(dummyeval[0]) < 0.0000010000000000  )
{
continue;

} else
{
{
IkReal j20array[1], cj20array[1], sj20array[1];
bool j20valid[1]={false};
_nj20 = 1;
IkReal x360=((IkReal(5.00000000000000))*(pp));
IkReal x361=((IkReal(0.300000000000000))*(pz));
if( IKabs(((gconst19)*(((((IkReal(0.0423522000000000))*(px)))+(((IkReal(-1.00000000000000))*(px)*(x361)))+(((IkReal(-1.00000000000000))*(px)*(x360))))))) < IKFAST_ATAN2_MAGTHRESH && IKabs(((gconst19)*(((((IkReal(-0.0423522000000000))*(py)))+(((py)*(x361)))+(((py)*(x360))))))) < IKFAST_ATAN2_MAGTHRESH )
    continue;
j20array[0]=IKatan2(((gconst19)*(((((IkReal(0.0423522000000000))*(px)))+(((IkReal(-1.00000000000000))*(px)*(x361)))+(((IkReal(-1.00000000000000))*(px)*(x360)))))), ((gconst19)*(((((IkReal(-0.0423522000000000))*(py)))+(((py)*(x361)))+(((py)*(x360)))))));
sj20array[0]=IKsin(j20array[0]);
cj20array[0]=IKcos(j20array[0]);
if( j20array[0] > IKPI )
{
    j20array[0]-=IK2PI;
}
else if( j20array[0] < -IKPI )
{    j20array[0]+=IK2PI;
}
j20valid[0] = true;
for(int ij20 = 0; ij20 < 1; ++ij20)
{
if( !j20valid[ij20] )
{
    continue;
}
_ij20[0] = ij20; _ij20[1] = -1;
for(int iij20 = ij20+1; iij20 < 1; ++iij20)
{
if( j20valid[iij20] && IKabs(cj20array[ij20]-cj20array[iij20]) < IKFAST_SOLUTION_THRESH && IKabs(sj20array[ij20]-sj20array[iij20]) < IKFAST_SOLUTION_THRESH )
{
    j20valid[iij20]=false; _ij20[1] = iij20; break;
}
}
j20 = j20array[ij20]; cj20 = cj20array[ij20]; sj20 = sj20array[ij20];
{
IkReal evalcond[3];
IkReal x362=IKsin(j20);
IkReal x363=IKcos(j20);
IkReal x364=((px)*(x362));
IkReal x365=((py)*(x363));
evalcond[0]=((((IkReal(-1.00000000000000))*(px)*(x363)))+(((IkReal(-1.00000000000000))*(py)*(x362))));
evalcond[1]=((IkReal(0.300000000000000))+(((IkReal(-1.00000000000000))*(x365)))+(((IkReal(0.313800000000000))*(cj23)))+(x364)+(((IkReal(-0.0300000000000000))*(sj23))));
evalcond[2]=((IkReal(0.00847044000000000))+(((IkReal(-0.600000000000000))*(x364)))+(((IkReal(-1.00000000000000))*(pp)))+(((IkReal(-0.0600000000000000))*(pz)))+(((IkReal(0.600000000000000))*(x365))));
if( IKabs(evalcond[0]) > 0.000001  || IKabs(evalcond[1]) > 0.000001  || IKabs(evalcond[2]) > 0.000001  )
{
continue;
}
}

rotationfunction0(solutions);
}
}

}

}

} else
{
{
IkReal j20array[1], cj20array[1], sj20array[1];
bool j20valid[1]={false};
_nj20 = 1;
IkReal x366=((IkReal(0.0300000000000000))*(sj23));
IkReal x367=((IkReal(0.313800000000000))*(cj23));
if( IKabs(((gconst18)*(((((IkReal(0.300000000000000))*(px)))+(((px)*(x367)))+(((IkReal(-1.00000000000000))*(px)*(x366))))))) < IKFAST_ATAN2_MAGTHRESH && IKabs(((gconst18)*(((((IkReal(-0.300000000000000))*(py)))+(((py)*(x366)))+(((IkReal(-1.00000000000000))*(py)*(x367))))))) < IKFAST_ATAN2_MAGTHRESH )
    continue;
j20array[0]=IKatan2(((gconst18)*(((((IkReal(0.300000000000000))*(px)))+(((px)*(x367)))+(((IkReal(-1.00000000000000))*(px)*(x366)))))), ((gconst18)*(((((IkReal(-0.300000000000000))*(py)))+(((py)*(x366)))+(((IkReal(-1.00000000000000))*(py)*(x367)))))));
sj20array[0]=IKsin(j20array[0]);
cj20array[0]=IKcos(j20array[0]);
if( j20array[0] > IKPI )
{
    j20array[0]-=IK2PI;
}
else if( j20array[0] < -IKPI )
{    j20array[0]+=IK2PI;
}
j20valid[0] = true;
for(int ij20 = 0; ij20 < 1; ++ij20)
{
if( !j20valid[ij20] )
{
    continue;
}
_ij20[0] = ij20; _ij20[1] = -1;
for(int iij20 = ij20+1; iij20 < 1; ++iij20)
{
if( j20valid[iij20] && IKabs(cj20array[ij20]-cj20array[iij20]) < IKFAST_SOLUTION_THRESH && IKabs(sj20array[ij20]-sj20array[iij20]) < IKFAST_SOLUTION_THRESH )
{
    j20valid[iij20]=false; _ij20[1] = iij20; break;
}
}
j20 = j20array[ij20]; cj20 = cj20array[ij20]; sj20 = sj20array[ij20];
{
IkReal evalcond[3];
IkReal x368=IKsin(j20);
IkReal x369=IKcos(j20);
IkReal x370=((px)*(x368));
IkReal x371=((py)*(x369));
evalcond[0]=((((IkReal(-1.00000000000000))*(px)*(x369)))+(((IkReal(-1.00000000000000))*(py)*(x368))));
evalcond[1]=((IkReal(0.300000000000000))+(((IkReal(-1.00000000000000))*(x371)))+(((IkReal(0.313800000000000))*(cj23)))+(x370)+(((IkReal(-0.0300000000000000))*(sj23))));
evalcond[2]=((IkReal(0.00847044000000000))+(((IkReal(-0.600000000000000))*(x370)))+(((IkReal(0.600000000000000))*(x371)))+(((IkReal(-1.00000000000000))*(pp)))+(((IkReal(-0.0600000000000000))*(pz))));
if( IKabs(evalcond[0]) > 0.000001  || IKabs(evalcond[1]) > 0.000001  || IKabs(evalcond[2]) > 0.000001  )
{
continue;
}
}

rotationfunction0(solutions);
}
}

}

}

} else
{
IkReal x372=((IkReal(0.0300000000000000))+(((IkReal(-0.0300000000000000))*(cj23)))+(((IkReal(-1.00000000000000))*(pz)))+(((IkReal(-0.313800000000000))*(sj23))));
evalcond[0]=((IkReal(-3.14159265358979))+(IKfmod(j21, IkReal(6.28318530717959))));
evalcond[1]=((IkReal(0.190270440000000))+(((IkReal(0.186480000000000))*(cj23)))+(((IkReal(-1.00000000000000))*(pp)))+(((IkReal(-0.0368280000000000))*(sj23))));
evalcond[2]=x372;
evalcond[3]=x372;
if( IKabs(evalcond[0]) < 0.0000010000000000  && IKabs(evalcond[1]) < 0.0000010000000000  && IKabs(evalcond[2]) < 0.0000010000000000  && IKabs(evalcond[3]) < 0.0000010000000000  )
{
{
IkReal dummyeval[1];
IkReal gconst20;
gconst20=IKsign((((px)*(px))+((py)*(py))));
dummyeval[0]=(((px)*(px))+((py)*(py)));
if( IKabs(dummyeval[0]) < 0.0000010000000000  )
{
{
IkReal dummyeval[1];
IkReal gconst21;
gconst21=IKsign(((((IkReal(-3.00000000000000))*((px)*(px))))+(((IkReal(-3.00000000000000))*((py)*(py))))));
dummyeval[0]=((((IkReal(-1.00000000000000))*((px)*(px))))+(((IkReal(-1.00000000000000))*((py)*(py)))));
if( IKabs(dummyeval[0]) < 0.0000010000000000  )
{
continue;

} else
{
{
IkReal j20array[1], cj20array[1], sj20array[1];
bool j20valid[1]={false};
_nj20 = 1;
IkReal x373=((IkReal(5.00000000000000))*(pp));
IkReal x374=((IkReal(0.300000000000000))*(pz));
if( IKabs(((gconst21)*(((((IkReal(0.0423522000000000))*(px)))+(((px)*(x374)))+(((IkReal(-1.00000000000000))*(px)*(x373))))))) < IKFAST_ATAN2_MAGTHRESH && IKabs(((gconst21)*(((((IkReal(-0.0423522000000000))*(py)))+(((py)*(x373)))+(((IkReal(-1.00000000000000))*(py)*(x374))))))) < IKFAST_ATAN2_MAGTHRESH )
    continue;
j20array[0]=IKatan2(((gconst21)*(((((IkReal(0.0423522000000000))*(px)))+(((px)*(x374)))+(((IkReal(-1.00000000000000))*(px)*(x373)))))), ((gconst21)*(((((IkReal(-0.0423522000000000))*(py)))+(((py)*(x373)))+(((IkReal(-1.00000000000000))*(py)*(x374)))))));
sj20array[0]=IKsin(j20array[0]);
cj20array[0]=IKcos(j20array[0]);
if( j20array[0] > IKPI )
{
    j20array[0]-=IK2PI;
}
else if( j20array[0] < -IKPI )
{    j20array[0]+=IK2PI;
}
j20valid[0] = true;
for(int ij20 = 0; ij20 < 1; ++ij20)
{
if( !j20valid[ij20] )
{
    continue;
}
_ij20[0] = ij20; _ij20[1] = -1;
for(int iij20 = ij20+1; iij20 < 1; ++iij20)
{
if( j20valid[iij20] && IKabs(cj20array[ij20]-cj20array[iij20]) < IKFAST_SOLUTION_THRESH && IKabs(sj20array[ij20]-sj20array[iij20]) < IKFAST_SOLUTION_THRESH )
{
    j20valid[iij20]=false; _ij20[1] = iij20; break;
}
}
j20 = j20array[ij20]; cj20 = cj20array[ij20]; sj20 = sj20array[ij20];
{
IkReal evalcond[3];
IkReal x375=IKcos(j20);
IkReal x376=IKsin(j20);
IkReal x377=((px)*(x376));
IkReal x378=((py)*(x375));
evalcond[0]=((((IkReal(-1.00000000000000))*(py)*(x376)))+(((IkReal(-1.00000000000000))*(px)*(x375))));
evalcond[1]=((IkReal(0.300000000000000))+(((IkReal(-1.00000000000000))*(x377)))+(((IkReal(0.313800000000000))*(cj23)))+(x378)+(((IkReal(-0.0300000000000000))*(sj23))));
evalcond[2]=((IkReal(0.00847044000000000))+(((IkReal(-0.600000000000000))*(x378)))+(((IkReal(0.600000000000000))*(x377)))+(((IkReal(-1.00000000000000))*(pp)))+(((IkReal(0.0600000000000000))*(pz))));
if( IKabs(evalcond[0]) > 0.000001  || IKabs(evalcond[1]) > 0.000001  || IKabs(evalcond[2]) > 0.000001  )
{
continue;
}
}

rotationfunction0(solutions);
}
}

}

}

} else
{
{
IkReal j20array[1], cj20array[1], sj20array[1];
bool j20valid[1]={false};
_nj20 = 1;
IkReal x379=((IkReal(0.0300000000000000))*(sj23));
IkReal x380=((IkReal(0.313800000000000))*(cj23));
if( IKabs(((gconst20)*(((((px)*(x380)))+(((IkReal(0.300000000000000))*(px)))+(((IkReal(-1.00000000000000))*(px)*(x379))))))) < IKFAST_ATAN2_MAGTHRESH && IKabs(((gconst20)*(((((IkReal(-1.00000000000000))*(py)*(x380)))+(((IkReal(-0.300000000000000))*(py)))+(((py)*(x379))))))) < IKFAST_ATAN2_MAGTHRESH )
    continue;
j20array[0]=IKatan2(((gconst20)*(((((px)*(x380)))+(((IkReal(0.300000000000000))*(px)))+(((IkReal(-1.00000000000000))*(px)*(x379)))))), ((gconst20)*(((((IkReal(-1.00000000000000))*(py)*(x380)))+(((IkReal(-0.300000000000000))*(py)))+(((py)*(x379)))))));
sj20array[0]=IKsin(j20array[0]);
cj20array[0]=IKcos(j20array[0]);
if( j20array[0] > IKPI )
{
    j20array[0]-=IK2PI;
}
else if( j20array[0] < -IKPI )
{    j20array[0]+=IK2PI;
}
j20valid[0] = true;
for(int ij20 = 0; ij20 < 1; ++ij20)
{
if( !j20valid[ij20] )
{
    continue;
}
_ij20[0] = ij20; _ij20[1] = -1;
for(int iij20 = ij20+1; iij20 < 1; ++iij20)
{
if( j20valid[iij20] && IKabs(cj20array[ij20]-cj20array[iij20]) < IKFAST_SOLUTION_THRESH && IKabs(sj20array[ij20]-sj20array[iij20]) < IKFAST_SOLUTION_THRESH )
{
    j20valid[iij20]=false; _ij20[1] = iij20; break;
}
}
j20 = j20array[ij20]; cj20 = cj20array[ij20]; sj20 = sj20array[ij20];
{
IkReal evalcond[3];
IkReal x381=IKcos(j20);
IkReal x382=IKsin(j20);
IkReal x383=((px)*(x382));
IkReal x384=((py)*(x381));
evalcond[0]=((((IkReal(-1.00000000000000))*(px)*(x381)))+(((IkReal(-1.00000000000000))*(py)*(x382))));
evalcond[1]=((IkReal(0.300000000000000))+(((IkReal(0.313800000000000))*(cj23)))+(x384)+(((IkReal(-1.00000000000000))*(x383)))+(((IkReal(-0.0300000000000000))*(sj23))));
evalcond[2]=((IkReal(0.00847044000000000))+(((IkReal(-1.00000000000000))*(pp)))+(((IkReal(0.600000000000000))*(x383)))+(((IkReal(-0.600000000000000))*(x384)))+(((IkReal(0.0600000000000000))*(pz))));
if( IKabs(evalcond[0]) > 0.000001  || IKabs(evalcond[1]) > 0.000001  || IKabs(evalcond[2]) > 0.000001  )
{
continue;
}
}

rotationfunction0(solutions);
}
}

}

}

} else
{
if( 1 )
{
continue;

} else
{
}
}
}
}
}
}

} else
{
{
IkReal j20array[1], cj20array[1], sj20array[1];
bool j20valid[1]={false};
_nj20 = 1;
IkReal x385=((pz)*(sj21));
IkReal x386=((IkReal(0.0300000000000000))*(sj23));
IkReal x387=((IkReal(0.313800000000000))*(cj23));
if( IKabs(((gconst13)*(((((px)*(x386)))+(((px)*(x385)))+(((IkReal(-0.300000000000000))*(px)))+(((IkReal(-1.00000000000000))*(px)*(x387))))))) < IKFAST_ATAN2_MAGTHRESH && IKabs(((gconst13)*(((((IkReal(-1.00000000000000))*(py)*(x386)))+(((IkReal(0.300000000000000))*(py)))+(((IkReal(-1.00000000000000))*(py)*(x385)))+(((py)*(x387))))))) < IKFAST_ATAN2_MAGTHRESH )
    continue;
j20array[0]=IKatan2(((gconst13)*(((((px)*(x386)))+(((px)*(x385)))+(((IkReal(-0.300000000000000))*(px)))+(((IkReal(-1.00000000000000))*(px)*(x387)))))), ((gconst13)*(((((IkReal(-1.00000000000000))*(py)*(x386)))+(((IkReal(0.300000000000000))*(py)))+(((IkReal(-1.00000000000000))*(py)*(x385)))+(((py)*(x387)))))));
sj20array[0]=IKsin(j20array[0]);
cj20array[0]=IKcos(j20array[0]);
if( j20array[0] > IKPI )
{
    j20array[0]-=IK2PI;
}
else if( j20array[0] < -IKPI )
{    j20array[0]+=IK2PI;
}
j20valid[0] = true;
for(int ij20 = 0; ij20 < 1; ++ij20)
{
if( !j20valid[ij20] )
{
    continue;
}
_ij20[0] = ij20; _ij20[1] = -1;
for(int iij20 = ij20+1; iij20 < 1; ++iij20)
{
if( j20valid[iij20] && IKabs(cj20array[ij20]-cj20array[iij20]) < IKFAST_SOLUTION_THRESH && IKabs(sj20array[ij20]-sj20array[iij20]) < IKFAST_SOLUTION_THRESH )
{
    j20valid[iij20]=false; _ij20[1] = iij20; break;
}
}
j20 = j20array[ij20]; cj20 = cj20array[ij20]; sj20 = sj20array[ij20];
{
IkReal evalcond[5];
IkReal x388=IKsin(j20);
IkReal x389=IKcos(j20);
IkReal x390=((IkReal(0.0300000000000000))*(sj23));
IkReal x391=((IkReal(0.313800000000000))*(cj23));
IkReal x392=((IkReal(0.0300000000000000))*(cj23));
IkReal x393=((IkReal(1.00000000000000))*(sj21));
IkReal x394=((IkReal(0.600000000000000))*(cj21));
IkReal x395=((IkReal(0.0600000000000000))*(sj21));
IkReal x396=((IkReal(0.313800000000000))*(sj23));
IkReal x397=((cj21)*(pz));
IkReal x398=((py)*(x389));
IkReal x399=((px)*(x388));
evalcond[0]=((((IkReal(-1.00000000000000))*(px)*(x389)))+(((IkReal(-1.00000000000000))*(py)*(x388))));
evalcond[1]=((IkReal(0.300000000000000))+(((IkReal(-1.00000000000000))*(x390)))+(x391)+(((cj21)*(x399)))+(((IkReal(-1.00000000000000))*(pz)*(x393)))+(((IkReal(-1.00000000000000))*(cj21)*(x398))));
evalcond[2]=((IkReal(0.0300000000000000))+(((IkReal(-1.00000000000000))*(x392)))+(((IkReal(-1.00000000000000))*(x396)))+(x397)+(((IkReal(-1.00000000000000))*(x393)*(x398)))+(((sj21)*(x399))));
evalcond[3]=((((IkReal(0.0300000000000000))*(sj21)))+(((IkReal(-1.00000000000000))*(x398)))+(((IkReal(-1.00000000000000))*(cj21)*(x390)))+(x399)+(((cj21)*(x391)))+(((IkReal(-1.00000000000000))*(sj21)*(x396)))+(((IkReal(-1.00000000000000))*(sj21)*(x392)))+(((IkReal(0.300000000000000))*(cj21))));
evalcond[4]=((IkReal(0.00847044000000000))+(((IkReal(-1.00000000000000))*(x394)*(x399)))+(((x395)*(x398)))+(((x394)*(x398)))+(((IkReal(-1.00000000000000))*(x395)*(x399)))+(((IkReal(0.600000000000000))*(pz)*(sj21)))+(((IkReal(-1.00000000000000))*(pp)))+(((IkReal(-0.0600000000000000))*(x397))));
if( IKabs(evalcond[0]) > 0.000001  || IKabs(evalcond[1]) > 0.000001  || IKabs(evalcond[2]) > 0.000001  || IKabs(evalcond[3]) > 0.000001  || IKabs(evalcond[4]) > 0.000001  )
{
continue;
}
}

rotationfunction0(solutions);
}
}

}

}

} else
{
{
IkReal j20array[1], cj20array[1], sj20array[1];
bool j20valid[1]={false};
_nj20 = 1;
IkReal x400=((IkReal(0.0300000000000000))*(cj23));
IkReal x401=((IkReal(0.313800000000000))*(sj23));
IkReal x402=((cj21)*(pz));
if( IKabs(((gconst12)*(((((px)*(x400)))+(((px)*(x401)))+(((IkReal(-1.00000000000000))*(px)*(x402)))+(((IkReal(-0.0300000000000000))*(px))))))) < IKFAST_ATAN2_MAGTHRESH && IKabs(((gconst12)*(((((py)*(x402)))+(((IkReal(0.0300000000000000))*(py)))+(((IkReal(-1.00000000000000))*(py)*(x401)))+(((IkReal(-1.00000000000000))*(py)*(x400))))))) < IKFAST_ATAN2_MAGTHRESH )
    continue;
j20array[0]=IKatan2(((gconst12)*(((((px)*(x400)))+(((px)*(x401)))+(((IkReal(-1.00000000000000))*(px)*(x402)))+(((IkReal(-0.0300000000000000))*(px)))))), ((gconst12)*(((((py)*(x402)))+(((IkReal(0.0300000000000000))*(py)))+(((IkReal(-1.00000000000000))*(py)*(x401)))+(((IkReal(-1.00000000000000))*(py)*(x400)))))));
sj20array[0]=IKsin(j20array[0]);
cj20array[0]=IKcos(j20array[0]);
if( j20array[0] > IKPI )
{
    j20array[0]-=IK2PI;
}
else if( j20array[0] < -IKPI )
{    j20array[0]+=IK2PI;
}
j20valid[0] = true;
for(int ij20 = 0; ij20 < 1; ++ij20)
{
if( !j20valid[ij20] )
{
    continue;
}
_ij20[0] = ij20; _ij20[1] = -1;
for(int iij20 = ij20+1; iij20 < 1; ++iij20)
{
if( j20valid[iij20] && IKabs(cj20array[ij20]-cj20array[iij20]) < IKFAST_SOLUTION_THRESH && IKabs(sj20array[ij20]-sj20array[iij20]) < IKFAST_SOLUTION_THRESH )
{
    j20valid[iij20]=false; _ij20[1] = iij20; break;
}
}
j20 = j20array[ij20]; cj20 = cj20array[ij20]; sj20 = sj20array[ij20];
{
IkReal evalcond[5];
IkReal x403=IKsin(j20);
IkReal x404=IKcos(j20);
IkReal x405=((IkReal(0.0300000000000000))*(sj23));
IkReal x406=((IkReal(0.313800000000000))*(cj23));
IkReal x407=((IkReal(0.0300000000000000))*(cj23));
IkReal x408=((IkReal(1.00000000000000))*(sj21));
IkReal x409=((IkReal(0.600000000000000))*(cj21));
IkReal x410=((IkReal(0.0600000000000000))*(sj21));
IkReal x411=((IkReal(0.313800000000000))*(sj23));
IkReal x412=((cj21)*(pz));
IkReal x413=((py)*(x404));
IkReal x414=((px)*(x403));
evalcond[0]=((((IkReal(-1.00000000000000))*(py)*(x403)))+(((IkReal(-1.00000000000000))*(px)*(x404))));
evalcond[1]=((IkReal(0.300000000000000))+(((IkReal(-1.00000000000000))*(cj21)*(x413)))+(((cj21)*(x414)))+(x406)+(((IkReal(-1.00000000000000))*(pz)*(x408)))+(((IkReal(-1.00000000000000))*(x405))));
evalcond[2]=((IkReal(0.0300000000000000))+(((sj21)*(x414)))+(x412)+(((IkReal(-1.00000000000000))*(x411)))+(((IkReal(-1.00000000000000))*(x408)*(x413)))+(((IkReal(-1.00000000000000))*(x407))));
evalcond[3]=((((IkReal(0.0300000000000000))*(sj21)))+(((IkReal(-1.00000000000000))*(cj21)*(x405)))+(((IkReal(-1.00000000000000))*(sj21)*(x411)))+(((cj21)*(x406)))+(((IkReal(-1.00000000000000))*(sj21)*(x407)))+(x414)+(((IkReal(0.300000000000000))*(cj21)))+(((IkReal(-1.00000000000000))*(x413))));
evalcond[4]=((IkReal(0.00847044000000000))+(((IkReal(-0.0600000000000000))*(x412)))+(((x410)*(x413)))+(((IkReal(0.600000000000000))*(pz)*(sj21)))+(((x409)*(x413)))+(((IkReal(-1.00000000000000))*(pp)))+(((IkReal(-1.00000000000000))*(x410)*(x414)))+(((IkReal(-1.00000000000000))*(x409)*(x414))));
if( IKabs(evalcond[0]) > 0.000001  || IKabs(evalcond[1]) > 0.000001  || IKabs(evalcond[2]) > 0.000001  || IKabs(evalcond[3]) > 0.000001  || IKabs(evalcond[4]) > 0.000001  )
{
continue;
}
}

rotationfunction0(solutions);
}
}

}

}

} else
{
IkReal x415=((IkReal(0.0300000000000000))*(sj22));
evalcond[0]=((IkReal(-3.14159265358979))+(IKfmod(((IkReal(3.14159265358979))+(j21)), IkReal(6.28318530717959))));
evalcond[1]=((IkReal(0.190270440000000))+(((IkReal(0.186480000000000))*(cj23)))+(((IkReal(-1.00000000000000))*(pp)))+(((IkReal(-0.0368280000000000))*(sj23))));
evalcond[2]=((((IkReal(-1.00000000000000))*(cj23)*(x415)))+(((IkReal(-1.00000000000000))*(pz)))+(x415)+(((IkReal(-0.313800000000000))*(sj22)*(sj23))));
if( IKabs(evalcond[0]) < 0.0000010000000000  && IKabs(evalcond[1]) < 0.0000010000000000  && IKabs(evalcond[2]) < 0.0000010000000000  )
{
{
IkReal dummyeval[1];
IkReal gconst22;
gconst22=IKsign(((((sj22)*((px)*(px))))+(((sj22)*((py)*(py))))));
dummyeval[0]=((((sj22)*((px)*(px))))+(((sj22)*((py)*(py)))));
if( IKabs(dummyeval[0]) < 0.0000010000000000  )
{
{
IkReal dummyeval[1];
IkReal gconst23;
gconst23=IKsign((((px)*(px))+((py)*(py))));
dummyeval[0]=(((px)*(px))+((py)*(py)));
if( IKabs(dummyeval[0]) < 0.0000010000000000  )
{
{
IkReal evalcond[4];
IkReal x416=((IkReal(-1.00000000000000))*(pz));
evalcond[0]=((IkReal(-3.14159265358979))+(IKfmod(((IkReal(3.14159265358979))+(j22)), IkReal(6.28318530717959))));
evalcond[1]=((IkReal(0.190270440000000))+(((IkReal(0.186480000000000))*(cj23)))+(((IkReal(-1.00000000000000))*(pp)))+(((IkReal(-0.0368280000000000))*(sj23))));
evalcond[2]=x416;
evalcond[3]=x416;
if( IKabs(evalcond[0]) < 0.0000010000000000  && IKabs(evalcond[1]) < 0.0000010000000000  && IKabs(evalcond[2]) < 0.0000010000000000  && IKabs(evalcond[3]) < 0.0000010000000000  )
{
{
IkReal dummyeval[1];
IkReal gconst24;
gconst24=IKsign((((px)*(px))+((py)*(py))));
dummyeval[0]=(((px)*(px))+((py)*(py)));
if( IKabs(dummyeval[0]) < 0.0000010000000000  )
{
{
IkReal dummyeval[1];
IkReal gconst25;
gconst25=IKsign(((((IkReal(-0.0600000000000000))*((px)*(px))))+(((IkReal(-0.0600000000000000))*((py)*(py))))));
dummyeval[0]=((((IkReal(-1.00000000000000))*((px)*(px))))+(((IkReal(-1.00000000000000))*((py)*(py)))));
if( IKabs(dummyeval[0]) < 0.0000010000000000  )
{
continue;

} else
{
{
IkReal j20array[1], cj20array[1], sj20array[1];
bool j20valid[1]={false};
_nj20 = 1;
IkReal x417=((IkReal(0.0188280000000000))*(cj23));
IkReal x418=((IkReal(1.00000000000000))*(pp));
IkReal x419=((IkReal(0.188280000000000))*(cj23));
IkReal x420=((px)*(sj23));
IkReal x421=((py)*(sj23));
if( IKabs(((gconst25)*(((((py)*(x419)))+(((IkReal(0.0180000000000000))*(px)))+(((px)*(x417)))+(((IkReal(-0.0180000000000000))*(x421)))+(((IkReal(-0.00180000000000000))*(x420)))+(((IkReal(-1.00000000000000))*(py)*(x418)))+(((IkReal(0.188470440000000))*(py))))))) < IKFAST_ATAN2_MAGTHRESH && IKabs(((gconst25)*(((((IkReal(-1.00000000000000))*(px)*(x418)))+(((px)*(x419)))+(((IkReal(-0.0180000000000000))*(x420)))+(((IkReal(0.00180000000000000))*(x421)))+(((IkReal(-0.0180000000000000))*(py)))+(((IkReal(-1.00000000000000))*(py)*(x417)))+(((IkReal(0.188470440000000))*(px))))))) < IKFAST_ATAN2_MAGTHRESH )
    continue;
j20array[0]=IKatan2(((gconst25)*(((((py)*(x419)))+(((IkReal(0.0180000000000000))*(px)))+(((px)*(x417)))+(((IkReal(-0.0180000000000000))*(x421)))+(((IkReal(-0.00180000000000000))*(x420)))+(((IkReal(-1.00000000000000))*(py)*(x418)))+(((IkReal(0.188470440000000))*(py)))))), ((gconst25)*(((((IkReal(-1.00000000000000))*(px)*(x418)))+(((px)*(x419)))+(((IkReal(-0.0180000000000000))*(x420)))+(((IkReal(0.00180000000000000))*(x421)))+(((IkReal(-0.0180000000000000))*(py)))+(((IkReal(-1.00000000000000))*(py)*(x417)))+(((IkReal(0.188470440000000))*(px)))))));
sj20array[0]=IKsin(j20array[0]);
cj20array[0]=IKcos(j20array[0]);
if( j20array[0] > IKPI )
{
    j20array[0]-=IK2PI;
}
else if( j20array[0] < -IKPI )
{    j20array[0]+=IK2PI;
}
j20valid[0] = true;
for(int ij20 = 0; ij20 < 1; ++ij20)
{
if( !j20valid[ij20] )
{
    continue;
}
_ij20[0] = ij20; _ij20[1] = -1;
for(int iij20 = ij20+1; iij20 < 1; ++iij20)
{
if( j20valid[iij20] && IKabs(cj20array[ij20]-cj20array[iij20]) < IKFAST_SOLUTION_THRESH && IKabs(sj20array[ij20]-sj20array[iij20]) < IKFAST_SOLUTION_THRESH )
{
    j20valid[iij20]=false; _ij20[1] = iij20; break;
}
}
j20 = j20array[ij20]; cj20 = cj20array[ij20]; sj20 = sj20array[ij20];
{
IkReal evalcond[3];
IkReal x422=IKsin(j20);
IkReal x423=IKcos(j20);
IkReal x424=((py)*(x423));
IkReal x425=((px)*(x422));
IkReal x426=((py)*(x422));
IkReal x427=((px)*(x423));
evalcond[0]=((IkReal(0.0300000000000000))+(((IkReal(-1.00000000000000))*(x427)))+(((IkReal(-1.00000000000000))*(x426)))+(((IkReal(-0.0300000000000000))*(cj23)))+(((IkReal(-0.313800000000000))*(sj23))));
evalcond[1]=((IkReal(0.300000000000000))+(((IkReal(-1.00000000000000))*(x424)))+(((IkReal(0.313800000000000))*(cj23)))+(x425)+(((IkReal(-0.0300000000000000))*(sj23))));
evalcond[2]=((IkReal(0.00847044000000000))+(((IkReal(0.0600000000000000))*(x427)))+(((IkReal(0.0600000000000000))*(x426)))+(((IkReal(-1.00000000000000))*(pp)))+(((IkReal(0.600000000000000))*(x424)))+(((IkReal(-0.600000000000000))*(x425))));
if( IKabs(evalcond[0]) > 0.000001  || IKabs(evalcond[1]) > 0.000001  || IKabs(evalcond[2]) > 0.000001  )
{
continue;
}
}

rotationfunction0(solutions);
}
}

}

}

} else
{
{
IkReal j20array[1], cj20array[1], sj20array[1];
bool j20valid[1]={false};
_nj20 = 1;
IkReal x428=((IkReal(0.0300000000000000))*(cj23));
IkReal x429=((py)*(sj23));
IkReal x430=((IkReal(0.0300000000000000))*(px));
IkReal x431=((IkReal(0.313800000000000))*(px));
if( IKabs(((gconst24)*(((((IkReal(-0.300000000000000))*(px)))+(((IkReal(-0.313800000000000))*(x429)))+(((IkReal(-1.00000000000000))*(cj23)*(x431)))+(((sj23)*(x430)))+(((IkReal(0.0300000000000000))*(py)))+(((IkReal(-1.00000000000000))*(py)*(x428))))))) < IKFAST_ATAN2_MAGTHRESH && IKabs(((gconst24)*(((((IkReal(-1.00000000000000))*(px)*(x428)))+(((IkReal(0.313800000000000))*(cj23)*(py)))+(((IkReal(0.300000000000000))*(py)))+(((IkReal(-1.00000000000000))*(sj23)*(x431)))+(x430)+(((IkReal(-0.0300000000000000))*(x429))))))) < IKFAST_ATAN2_MAGTHRESH )
    continue;
j20array[0]=IKatan2(((gconst24)*(((((IkReal(-0.300000000000000))*(px)))+(((IkReal(-0.313800000000000))*(x429)))+(((IkReal(-1.00000000000000))*(cj23)*(x431)))+(((sj23)*(x430)))+(((IkReal(0.0300000000000000))*(py)))+(((IkReal(-1.00000000000000))*(py)*(x428)))))), ((gconst24)*(((((IkReal(-1.00000000000000))*(px)*(x428)))+(((IkReal(0.313800000000000))*(cj23)*(py)))+(((IkReal(0.300000000000000))*(py)))+(((IkReal(-1.00000000000000))*(sj23)*(x431)))+(x430)+(((IkReal(-0.0300000000000000))*(x429)))))));
sj20array[0]=IKsin(j20array[0]);
cj20array[0]=IKcos(j20array[0]);
if( j20array[0] > IKPI )
{
    j20array[0]-=IK2PI;
}
else if( j20array[0] < -IKPI )
{    j20array[0]+=IK2PI;
}
j20valid[0] = true;
for(int ij20 = 0; ij20 < 1; ++ij20)
{
if( !j20valid[ij20] )
{
    continue;
}
_ij20[0] = ij20; _ij20[1] = -1;
for(int iij20 = ij20+1; iij20 < 1; ++iij20)
{
if( j20valid[iij20] && IKabs(cj20array[ij20]-cj20array[iij20]) < IKFAST_SOLUTION_THRESH && IKabs(sj20array[ij20]-sj20array[iij20]) < IKFAST_SOLUTION_THRESH )
{
    j20valid[iij20]=false; _ij20[1] = iij20; break;
}
}
j20 = j20array[ij20]; cj20 = cj20array[ij20]; sj20 = sj20array[ij20];
{
IkReal evalcond[3];
IkReal x432=IKsin(j20);
IkReal x433=IKcos(j20);
IkReal x434=((py)*(x433));
IkReal x435=((px)*(x432));
IkReal x436=((py)*(x432));
IkReal x437=((px)*(x433));
evalcond[0]=((IkReal(0.0300000000000000))+(((IkReal(-0.0300000000000000))*(cj23)))+(((IkReal(-1.00000000000000))*(x437)))+(((IkReal(-1.00000000000000))*(x436)))+(((IkReal(-0.313800000000000))*(sj23))));
evalcond[1]=((IkReal(0.300000000000000))+(((IkReal(0.313800000000000))*(cj23)))+(((IkReal(-1.00000000000000))*(x434)))+(x435)+(((IkReal(-0.0300000000000000))*(sj23))));
evalcond[2]=((IkReal(0.00847044000000000))+(((IkReal(-0.600000000000000))*(x435)))+(((IkReal(-1.00000000000000))*(pp)))+(((IkReal(0.600000000000000))*(x434)))+(((IkReal(0.0600000000000000))*(x437)))+(((IkReal(0.0600000000000000))*(x436))));
if( IKabs(evalcond[0]) > 0.000001  || IKabs(evalcond[1]) > 0.000001  || IKabs(evalcond[2]) > 0.000001  )
{
continue;
}
}

rotationfunction0(solutions);
}
}

}

}

} else
{
evalcond[0]=((IkReal(-3.14159265358979))+(IKfmod(j22, IkReal(6.28318530717959))));
evalcond[1]=((IkReal(0.190270440000000))+(((IkReal(0.186480000000000))*(cj23)))+(((IkReal(-1.00000000000000))*(pp)))+(((IkReal(-0.0368280000000000))*(sj23))));
evalcond[2]=pz;
evalcond[3]=((IkReal(-1.00000000000000))*(pz));
if( IKabs(evalcond[0]) < 0.0000010000000000  && IKabs(evalcond[1]) < 0.0000010000000000  && IKabs(evalcond[2]) < 0.0000010000000000  && IKabs(evalcond[3]) < 0.0000010000000000  )
{
{
IkReal dummyeval[1];
IkReal gconst26;
gconst26=IKsign((((px)*(px))+((py)*(py))));
dummyeval[0]=(((px)*(px))+((py)*(py)));
if( IKabs(dummyeval[0]) < 0.0000010000000000  )
{
{
IkReal dummyeval[1];
IkReal gconst27;
gconst27=IKsign(((((IkReal(0.0600000000000000))*((py)*(py))))+(((IkReal(0.0600000000000000))*((px)*(px))))));
dummyeval[0]=(((px)*(px))+((py)*(py)));
if( IKabs(dummyeval[0]) < 0.0000010000000000  )
{
continue;

} else
{
{
IkReal j20array[1], cj20array[1], sj20array[1];
bool j20valid[1]={false};
_nj20 = 1;
IkReal x438=((IkReal(0.0188280000000000))*(cj23));
IkReal x439=((IkReal(1.00000000000000))*(pp));
IkReal x440=((IkReal(0.188280000000000))*(cj23));
IkReal x441=((IkReal(0.00180000000000000))*(sj23));
IkReal x442=((IkReal(0.0180000000000000))*(px));
IkReal x443=((IkReal(0.0180000000000000))*(py));
if( IKabs(((gconst27)*(((((IkReal(-1.00000000000000))*(x442)))+(((px)*(x441)))+(((py)*(x440)))+(((IkReal(-1.00000000000000))*(sj23)*(x443)))+(((IkReal(-1.00000000000000))*(py)*(x439)))+(((IkReal(0.188470440000000))*(py)))+(((IkReal(-1.00000000000000))*(px)*(x438))))))) < IKFAST_ATAN2_MAGTHRESH && IKabs(((gconst27)*(((((px)*(x440)))+(((py)*(x438)))+(((IkReal(-1.00000000000000))*(sj23)*(x442)))+(x443)+(((IkReal(-1.00000000000000))*(py)*(x441)))+(((IkReal(0.188470440000000))*(px)))+(((IkReal(-1.00000000000000))*(px)*(x439))))))) < IKFAST_ATAN2_MAGTHRESH )
    continue;
j20array[0]=IKatan2(((gconst27)*(((((IkReal(-1.00000000000000))*(x442)))+(((px)*(x441)))+(((py)*(x440)))+(((IkReal(-1.00000000000000))*(sj23)*(x443)))+(((IkReal(-1.00000000000000))*(py)*(x439)))+(((IkReal(0.188470440000000))*(py)))+(((IkReal(-1.00000000000000))*(px)*(x438)))))), ((gconst27)*(((((px)*(x440)))+(((py)*(x438)))+(((IkReal(-1.00000000000000))*(sj23)*(x442)))+(x443)+(((IkReal(-1.00000000000000))*(py)*(x441)))+(((IkReal(0.188470440000000))*(px)))+(((IkReal(-1.00000000000000))*(px)*(x439)))))));
sj20array[0]=IKsin(j20array[0]);
cj20array[0]=IKcos(j20array[0]);
if( j20array[0] > IKPI )
{
    j20array[0]-=IK2PI;
}
else if( j20array[0] < -IKPI )
{    j20array[0]+=IK2PI;
}
j20valid[0] = true;
for(int ij20 = 0; ij20 < 1; ++ij20)
{
if( !j20valid[ij20] )
{
    continue;
}
_ij20[0] = ij20; _ij20[1] = -1;
for(int iij20 = ij20+1; iij20 < 1; ++iij20)
{
if( j20valid[iij20] && IKabs(cj20array[ij20]-cj20array[iij20]) < IKFAST_SOLUTION_THRESH && IKabs(sj20array[ij20]-sj20array[iij20]) < IKFAST_SOLUTION_THRESH )
{
    j20valid[iij20]=false; _ij20[1] = iij20; break;
}
}
j20 = j20array[ij20]; cj20 = cj20array[ij20]; sj20 = sj20array[ij20];
{
IkReal evalcond[3];
IkReal x444=IKsin(j20);
IkReal x445=IKcos(j20);
IkReal x446=((py)*(x445));
IkReal x447=((px)*(x444));
IkReal x448=((py)*(x444));
IkReal x449=((px)*(x445));
evalcond[0]=((IkReal(-0.0300000000000000))+(((IkReal(-1.00000000000000))*(x449)))+(((IkReal(-1.00000000000000))*(x448)))+(((IkReal(0.313800000000000))*(sj23)))+(((IkReal(0.0300000000000000))*(cj23))));
evalcond[1]=((IkReal(0.300000000000000))+(((IkReal(0.313800000000000))*(cj23)))+(((IkReal(-1.00000000000000))*(x446)))+(x447)+(((IkReal(-0.0300000000000000))*(sj23))));
evalcond[2]=((IkReal(0.00847044000000000))+(((IkReal(-0.600000000000000))*(x447)))+(((IkReal(-1.00000000000000))*(pp)))+(((IkReal(0.600000000000000))*(x446)))+(((IkReal(-0.0600000000000000))*(x448)))+(((IkReal(-0.0600000000000000))*(x449))));
if( IKabs(evalcond[0]) > 0.000001  || IKabs(evalcond[1]) > 0.000001  || IKabs(evalcond[2]) > 0.000001  )
{
continue;
}
}

rotationfunction0(solutions);
}
}

}

}

} else
{
{
IkReal j20array[1], cj20array[1], sj20array[1];
bool j20valid[1]={false};
_nj20 = 1;
IkReal x450=((IkReal(0.0300000000000000))*(cj23));
IkReal x451=((py)*(sj23));
IkReal x452=((IkReal(0.0300000000000000))*(px));
IkReal x453=((IkReal(0.313800000000000))*(px));
if( IKabs(((gconst26)*(((((IkReal(-1.00000000000000))*(cj23)*(x453)))+(((IkReal(-0.300000000000000))*(px)))+(((sj23)*(x452)))+(((IkReal(0.313800000000000))*(x451)))+(((py)*(x450)))+(((IkReal(-0.0300000000000000))*(py))))))) < IKFAST_ATAN2_MAGTHRESH && IKabs(((gconst26)*(((((IkReal(0.313800000000000))*(cj23)*(py)))+(((sj23)*(x453)))+(((IkReal(0.300000000000000))*(py)))+(((IkReal(-1.00000000000000))*(x452)))+(((IkReal(-0.0300000000000000))*(x451)))+(((px)*(x450))))))) < IKFAST_ATAN2_MAGTHRESH )
    continue;
j20array[0]=IKatan2(((gconst26)*(((((IkReal(-1.00000000000000))*(cj23)*(x453)))+(((IkReal(-0.300000000000000))*(px)))+(((sj23)*(x452)))+(((IkReal(0.313800000000000))*(x451)))+(((py)*(x450)))+(((IkReal(-0.0300000000000000))*(py)))))), ((gconst26)*(((((IkReal(0.313800000000000))*(cj23)*(py)))+(((sj23)*(x453)))+(((IkReal(0.300000000000000))*(py)))+(((IkReal(-1.00000000000000))*(x452)))+(((IkReal(-0.0300000000000000))*(x451)))+(((px)*(x450)))))));
sj20array[0]=IKsin(j20array[0]);
cj20array[0]=IKcos(j20array[0]);
if( j20array[0] > IKPI )
{
    j20array[0]-=IK2PI;
}
else if( j20array[0] < -IKPI )
{    j20array[0]+=IK2PI;
}
j20valid[0] = true;
for(int ij20 = 0; ij20 < 1; ++ij20)
{
if( !j20valid[ij20] )
{
    continue;
}
_ij20[0] = ij20; _ij20[1] = -1;
for(int iij20 = ij20+1; iij20 < 1; ++iij20)
{
if( j20valid[iij20] && IKabs(cj20array[ij20]-cj20array[iij20]) < IKFAST_SOLUTION_THRESH && IKabs(sj20array[ij20]-sj20array[iij20]) < IKFAST_SOLUTION_THRESH )
{
    j20valid[iij20]=false; _ij20[1] = iij20; break;
}
}
j20 = j20array[ij20]; cj20 = cj20array[ij20]; sj20 = sj20array[ij20];
{
IkReal evalcond[3];
IkReal x454=IKsin(j20);
IkReal x455=IKcos(j20);
IkReal x456=((py)*(x455));
IkReal x457=((px)*(x454));
IkReal x458=((py)*(x454));
IkReal x459=((px)*(x455));
evalcond[0]=((IkReal(-0.0300000000000000))+(((IkReal(-1.00000000000000))*(x459)))+(((IkReal(-1.00000000000000))*(x458)))+(((IkReal(0.313800000000000))*(sj23)))+(((IkReal(0.0300000000000000))*(cj23))));
evalcond[1]=((IkReal(0.300000000000000))+(((IkReal(0.313800000000000))*(cj23)))+(((IkReal(-1.00000000000000))*(x456)))+(x457)+(((IkReal(-0.0300000000000000))*(sj23))));
evalcond[2]=((IkReal(0.00847044000000000))+(((IkReal(-0.600000000000000))*(x457)))+(((IkReal(0.600000000000000))*(x456)))+(((IkReal(-1.00000000000000))*(pp)))+(((IkReal(-0.0600000000000000))*(x458)))+(((IkReal(-0.0600000000000000))*(x459))));
if( IKabs(evalcond[0]) > 0.000001  || IKabs(evalcond[1]) > 0.000001  || IKabs(evalcond[2]) > 0.000001  )
{
continue;
}
}

rotationfunction0(solutions);
}
}

}

}

} else
{
if( 1 )
{
continue;

} else
{
}
}
}
}

} else
{
{
IkReal j20array[1], cj20array[1], sj20array[1];
bool j20valid[1]={false};
_nj20 = 1;
IkReal x460=((px)*(sj23));
IkReal x461=((IkReal(0.313800000000000))*(cj22));
IkReal x462=((IkReal(0.0300000000000000))*(cj22));
IkReal x463=((cj23)*(py));
IkReal x464=((py)*(sj23));
IkReal x465=((cj23)*(px));
if( IKabs(((gconst23)*(((((IkReal(-1.00000000000000))*(x462)*(x463)))+(((IkReal(-0.300000000000000))*(px)))+(((IkReal(-0.313800000000000))*(x465)))+(((IkReal(0.0300000000000000))*(x460)))+(((IkReal(-1.00000000000000))*(x461)*(x464)))+(((py)*(x462))))))) < IKFAST_ATAN2_MAGTHRESH && IKabs(((gconst23)*(((((IkReal(-1.00000000000000))*(x462)*(x465)))+(((IkReal(-1.00000000000000))*(x460)*(x461)))+(((IkReal(0.300000000000000))*(py)))+(((IkReal(0.313800000000000))*(x463)))+(((IkReal(-0.0300000000000000))*(x464)))+(((px)*(x462))))))) < IKFAST_ATAN2_MAGTHRESH )
    continue;
j20array[0]=IKatan2(((gconst23)*(((((IkReal(-1.00000000000000))*(x462)*(x463)))+(((IkReal(-0.300000000000000))*(px)))+(((IkReal(-0.313800000000000))*(x465)))+(((IkReal(0.0300000000000000))*(x460)))+(((IkReal(-1.00000000000000))*(x461)*(x464)))+(((py)*(x462)))))), ((gconst23)*(((((IkReal(-1.00000000000000))*(x462)*(x465)))+(((IkReal(-1.00000000000000))*(x460)*(x461)))+(((IkReal(0.300000000000000))*(py)))+(((IkReal(0.313800000000000))*(x463)))+(((IkReal(-0.0300000000000000))*(x464)))+(((px)*(x462)))))));
sj20array[0]=IKsin(j20array[0]);
cj20array[0]=IKcos(j20array[0]);
if( j20array[0] > IKPI )
{
    j20array[0]-=IK2PI;
}
else if( j20array[0] < -IKPI )
{    j20array[0]+=IK2PI;
}
j20valid[0] = true;
for(int ij20 = 0; ij20 < 1; ++ij20)
{
if( !j20valid[ij20] )
{
    continue;
}
_ij20[0] = ij20; _ij20[1] = -1;
for(int iij20 = ij20+1; iij20 < 1; ++iij20)
{
if( j20valid[iij20] && IKabs(cj20array[ij20]-cj20array[iij20]) < IKFAST_SOLUTION_THRESH && IKabs(sj20array[ij20]-sj20array[iij20]) < IKFAST_SOLUTION_THRESH )
{
    j20valid[iij20]=false; _ij20[1] = iij20; break;
}
}
j20 = j20array[ij20]; cj20 = cj20array[ij20]; sj20 = sj20array[ij20];
{
IkReal evalcond[5];
IkReal x466=IKsin(j20);
IkReal x467=IKcos(j20);
IkReal x468=((IkReal(0.313800000000000))*(sj23));
IkReal x469=((IkReal(1.00000000000000))*(cj22));
IkReal x470=((IkReal(0.0300000000000000))*(cj23));
IkReal x471=((pz)*(sj22));
IkReal x472=((IkReal(0.0600000000000000))*(cj22));
IkReal x473=((py)*(x466));
IkReal x474=((px)*(x467));
IkReal x475=((py)*(x467));
IkReal x476=((px)*(x466));
evalcond[0]=((((IkReal(-1.00000000000000))*(x473)))+(((IkReal(-1.00000000000000))*(x474)))+(((IkReal(-1.00000000000000))*(cj22)*(x468)))+(((IkReal(-1.00000000000000))*(cj22)*(x470)))+(((IkReal(0.0300000000000000))*(cj22))));
evalcond[1]=((IkReal(0.300000000000000))+(((IkReal(0.313800000000000))*(cj23)))+(((IkReal(-1.00000000000000))*(x475)))+(x476)+(((IkReal(-0.0300000000000000))*(sj23))));
evalcond[2]=((((sj22)*(x473)))+(((sj22)*(x474)))+(((IkReal(-1.00000000000000))*(pz)*(x469))));
evalcond[3]=((IkReal(0.0300000000000000))+(((IkReal(-1.00000000000000))*(x469)*(x473)))+(((IkReal(-1.00000000000000))*(x469)*(x474)))+(((IkReal(-1.00000000000000))*(x470)))+(((IkReal(-1.00000000000000))*(x468)))+(((IkReal(-1.00000000000000))*(x471))));
evalcond[4]=((IkReal(0.00847044000000000))+(((x472)*(x474)))+(((x472)*(x473)))+(((IkReal(-0.600000000000000))*(x476)))+(((IkReal(0.600000000000000))*(x475)))+(((IkReal(-1.00000000000000))*(pp)))+(((IkReal(0.0600000000000000))*(x471))));
if( IKabs(evalcond[0]) > 0.000001  || IKabs(evalcond[1]) > 0.000001  || IKabs(evalcond[2]) > 0.000001  || IKabs(evalcond[3]) > 0.000001  || IKabs(evalcond[4]) > 0.000001  )
{
continue;
}
}

rotationfunction0(solutions);
}
}

}

}

} else
{
{
IkReal j20array[1], cj20array[1], sj20array[1];
bool j20valid[1]={false};
_nj20 = 1;
IkReal x477=((py)*(sj22));
IkReal x478=((cj22)*(pz));
IkReal x479=((IkReal(0.0300000000000000))*(sj23));
IkReal x480=((px)*(sj22));
IkReal x481=((IkReal(0.313800000000000))*(cj23)*(sj22));
if( IKabs(((gconst22)*(((((IkReal(-0.300000000000000))*(x480)))+(((IkReal(-0.313800000000000))*(cj23)*(x480)))+(((py)*(x478)))+(((x479)*(x480))))))) < IKFAST_ATAN2_MAGTHRESH && IKabs(((gconst22)*(((((IkReal(-1.00000000000000))*(x477)*(x479)))+(((IkReal(0.313800000000000))*(cj23)*(x477)))+(((IkReal(0.300000000000000))*(x477)))+(((px)*(x478))))))) < IKFAST_ATAN2_MAGTHRESH )
    continue;
j20array[0]=IKatan2(((gconst22)*(((((IkReal(-0.300000000000000))*(x480)))+(((IkReal(-0.313800000000000))*(cj23)*(x480)))+(((py)*(x478)))+(((x479)*(x480)))))), ((gconst22)*(((((IkReal(-1.00000000000000))*(x477)*(x479)))+(((IkReal(0.313800000000000))*(cj23)*(x477)))+(((IkReal(0.300000000000000))*(x477)))+(((px)*(x478)))))));
sj20array[0]=IKsin(j20array[0]);
cj20array[0]=IKcos(j20array[0]);
if( j20array[0] > IKPI )
{
    j20array[0]-=IK2PI;
}
else if( j20array[0] < -IKPI )
{    j20array[0]+=IK2PI;
}
j20valid[0] = true;
for(int ij20 = 0; ij20 < 1; ++ij20)
{
if( !j20valid[ij20] )
{
    continue;
}
_ij20[0] = ij20; _ij20[1] = -1;
for(int iij20 = ij20+1; iij20 < 1; ++iij20)
{
if( j20valid[iij20] && IKabs(cj20array[ij20]-cj20array[iij20]) < IKFAST_SOLUTION_THRESH && IKabs(sj20array[ij20]-sj20array[iij20]) < IKFAST_SOLUTION_THRESH )
{
    j20valid[iij20]=false; _ij20[1] = iij20; break;
}
}
j20 = j20array[ij20]; cj20 = cj20array[ij20]; sj20 = sj20array[ij20];
{
IkReal evalcond[5];
IkReal x482=IKsin(j20);
IkReal x483=IKcos(j20);
IkReal x484=((IkReal(0.313800000000000))*(sj23));
IkReal x485=((IkReal(1.00000000000000))*(cj22));
IkReal x486=((IkReal(0.0300000000000000))*(cj23));
IkReal x487=((pz)*(sj22));
IkReal x488=((IkReal(0.0600000000000000))*(cj22));
IkReal x489=((py)*(x482));
IkReal x490=((px)*(x483));
IkReal x491=((py)*(x483));
IkReal x492=((px)*(x482));
evalcond[0]=((((IkReal(-1.00000000000000))*(x489)))+(((IkReal(-1.00000000000000))*(x490)))+(((IkReal(-1.00000000000000))*(cj22)*(x486)))+(((IkReal(-1.00000000000000))*(cj22)*(x484)))+(((IkReal(0.0300000000000000))*(cj22))));
evalcond[1]=((IkReal(0.300000000000000))+(((IkReal(0.313800000000000))*(cj23)))+(((IkReal(-1.00000000000000))*(x491)))+(x492)+(((IkReal(-0.0300000000000000))*(sj23))));
evalcond[2]=((((IkReal(-1.00000000000000))*(pz)*(x485)))+(((sj22)*(x490)))+(((sj22)*(x489))));
evalcond[3]=((IkReal(0.0300000000000000))+(((IkReal(-1.00000000000000))*(x484)))+(((IkReal(-1.00000000000000))*(x486)))+(((IkReal(-1.00000000000000))*(x487)))+(((IkReal(-1.00000000000000))*(x485)*(x490)))+(((IkReal(-1.00000000000000))*(x485)*(x489))));
evalcond[4]=((IkReal(0.00847044000000000))+(((IkReal(-0.600000000000000))*(x492)))+(((x488)*(x490)))+(((IkReal(0.0600000000000000))*(x487)))+(((x488)*(x489)))+(((IkReal(-1.00000000000000))*(pp)))+(((IkReal(0.600000000000000))*(x491))));
if( IKabs(evalcond[0]) > 0.000001  || IKabs(evalcond[1]) > 0.000001  || IKabs(evalcond[2]) > 0.000001  || IKabs(evalcond[3]) > 0.000001  || IKabs(evalcond[4]) > 0.000001  )
{
continue;
}
}

rotationfunction0(solutions);
}
}

}

}

} else
{
IkReal x493=((IkReal(0.0300000000000000))*(sj22));
evalcond[0]=((IkReal(-3.14159265358979))+(IKfmod(j21, IkReal(6.28318530717959))));
evalcond[1]=((IkReal(0.190270440000000))+(((IkReal(0.186480000000000))*(cj23)))+(((IkReal(-1.00000000000000))*(pp)))+(((IkReal(-0.0368280000000000))*(sj23))));
evalcond[2]=((((IkReal(-1.00000000000000))*(x493)))+(((IkReal(0.313800000000000))*(sj22)*(sj23)))+(((cj23)*(x493)))+(((IkReal(-1.00000000000000))*(pz))));
if( IKabs(evalcond[0]) < 0.0000010000000000  && IKabs(evalcond[1]) < 0.0000010000000000  && IKabs(evalcond[2]) < 0.0000010000000000  )
{
{
IkReal dummyeval[1];
IkReal gconst28;
gconst28=IKsign(((((sj22)*((px)*(px))))+(((sj22)*((py)*(py))))));
dummyeval[0]=((((sj22)*((px)*(px))))+(((sj22)*((py)*(py)))));
if( IKabs(dummyeval[0]) < 0.0000010000000000  )
{
{
IkReal dummyeval[1];
IkReal gconst29;
gconst29=IKsign((((px)*(px))+((py)*(py))));
dummyeval[0]=(((px)*(px))+((py)*(py)));
if( IKabs(dummyeval[0]) < 0.0000010000000000  )
{
{
IkReal evalcond[4];
evalcond[0]=((IkReal(-3.14159265358979))+(IKfmod(((IkReal(3.14159265358979))+(j22)), IkReal(6.28318530717959))));
evalcond[1]=((IkReal(0.190270440000000))+(((IkReal(0.186480000000000))*(cj23)))+(((IkReal(-1.00000000000000))*(pp)))+(((IkReal(-0.0368280000000000))*(sj23))));
evalcond[2]=pz;
evalcond[3]=((IkReal(-1.00000000000000))*(pz));
if( IKabs(evalcond[0]) < 0.0000010000000000  && IKabs(evalcond[1]) < 0.0000010000000000  && IKabs(evalcond[2]) < 0.0000010000000000  && IKabs(evalcond[3]) < 0.0000010000000000  )
{
{
IkReal dummyeval[1];
IkReal gconst30;
gconst30=IKsign((((px)*(px))+((py)*(py))));
dummyeval[0]=(((px)*(px))+((py)*(py)));
if( IKabs(dummyeval[0]) < 0.0000010000000000  )
{
{
IkReal dummyeval[1];
IkReal gconst31;
gconst31=IKsign(((((IkReal(0.0600000000000000))*((py)*(py))))+(((IkReal(0.0600000000000000))*((px)*(px))))));
dummyeval[0]=(((px)*(px))+((py)*(py)));
if( IKabs(dummyeval[0]) < 0.0000010000000000  )
{
continue;

} else
{
{
IkReal j20array[1], cj20array[1], sj20array[1];
bool j20valid[1]={false};
_nj20 = 1;
IkReal x494=((IkReal(0.0188280000000000))*(cj23));
IkReal x495=((IkReal(0.0180000000000000))*(sj23));
IkReal x496=((IkReal(0.188280000000000))*(cj23));
IkReal x497=((IkReal(0.00180000000000000))*(sj23));
if( IKabs(((gconst31)*(((((IkReal(0.0180000000000000))*(px)))+(((py)*(x495)))+(((px)*(x494)))+(((IkReal(-1.00000000000000))*(px)*(x497)))+(((IkReal(-1.00000000000000))*(py)*(x496)))+(((pp)*(py)))+(((IkReal(-0.188470440000000))*(py))))))) < IKFAST_ATAN2_MAGTHRESH && IKabs(((gconst31)*(((((py)*(x497)))+(((px)*(x495)))+(((IkReal(-1.00000000000000))*(px)*(x496)))+(((IkReal(-0.0180000000000000))*(py)))+(((IkReal(-1.00000000000000))*(py)*(x494)))+(((pp)*(px)))+(((IkReal(-0.188470440000000))*(px))))))) < IKFAST_ATAN2_MAGTHRESH )
    continue;
j20array[0]=IKatan2(((gconst31)*(((((IkReal(0.0180000000000000))*(px)))+(((py)*(x495)))+(((px)*(x494)))+(((IkReal(-1.00000000000000))*(px)*(x497)))+(((IkReal(-1.00000000000000))*(py)*(x496)))+(((pp)*(py)))+(((IkReal(-0.188470440000000))*(py)))))), ((gconst31)*(((((py)*(x497)))+(((px)*(x495)))+(((IkReal(-1.00000000000000))*(px)*(x496)))+(((IkReal(-0.0180000000000000))*(py)))+(((IkReal(-1.00000000000000))*(py)*(x494)))+(((pp)*(px)))+(((IkReal(-0.188470440000000))*(px)))))));
sj20array[0]=IKsin(j20array[0]);
cj20array[0]=IKcos(j20array[0]);
if( j20array[0] > IKPI )
{
    j20array[0]-=IK2PI;
}
else if( j20array[0] < -IKPI )
{    j20array[0]+=IK2PI;
}
j20valid[0] = true;
for(int ij20 = 0; ij20 < 1; ++ij20)
{
if( !j20valid[ij20] )
{
    continue;
}
_ij20[0] = ij20; _ij20[1] = -1;
for(int iij20 = ij20+1; iij20 < 1; ++iij20)
{
if( j20valid[iij20] && IKabs(cj20array[ij20]-cj20array[iij20]) < IKFAST_SOLUTION_THRESH && IKabs(sj20array[ij20]-sj20array[iij20]) < IKFAST_SOLUTION_THRESH )
{
    j20valid[iij20]=false; _ij20[1] = iij20; break;
}
}
j20 = j20array[ij20]; cj20 = cj20array[ij20]; sj20 = sj20array[ij20];
{
IkReal evalcond[3];
IkReal x498=IKcos(j20);
IkReal x499=IKsin(j20);
IkReal x500=((px)*(x499));
IkReal x501=((py)*(x498));
IkReal x502=((py)*(x499));
IkReal x503=((px)*(x498));
evalcond[0]=((IkReal(0.0300000000000000))+(((IkReal(-0.0300000000000000))*(cj23)))+(((IkReal(-0.313800000000000))*(sj23)))+(((IkReal(-1.00000000000000))*(x502)))+(((IkReal(-1.00000000000000))*(x503))));
evalcond[1]=((IkReal(0.300000000000000))+(((IkReal(0.313800000000000))*(cj23)))+(x501)+(((IkReal(-0.0300000000000000))*(sj23)))+(((IkReal(-1.00000000000000))*(x500))));
evalcond[2]=((IkReal(0.00847044000000000))+(((IkReal(-0.600000000000000))*(x501)))+(((IkReal(-1.00000000000000))*(pp)))+(((IkReal(0.600000000000000))*(x500)))+(((IkReal(0.0600000000000000))*(x502)))+(((IkReal(0.0600000000000000))*(x503))));
if( IKabs(evalcond[0]) > 0.000001  || IKabs(evalcond[1]) > 0.000001  || IKabs(evalcond[2]) > 0.000001  )
{
continue;
}
}

rotationfunction0(solutions);
}
}

}

}

} else
{
{
IkReal j20array[1], cj20array[1], sj20array[1];
bool j20valid[1]={false};
_nj20 = 1;
IkReal x504=((IkReal(0.0300000000000000))*(cj23));
IkReal x505=((py)*(sj23));
IkReal x506=((IkReal(0.0300000000000000))*(px));
IkReal x507=((IkReal(0.313800000000000))*(px));
if( IKabs(((gconst30)*(((((IkReal(-1.00000000000000))*(py)*(x504)))+(((IkReal(0.300000000000000))*(px)))+(((IkReal(-1.00000000000000))*(sj23)*(x506)))+(((IkReal(0.0300000000000000))*(py)))+(((IkReal(-0.313800000000000))*(x505)))+(((cj23)*(x507))))))) < IKFAST_ATAN2_MAGTHRESH && IKabs(((gconst30)*(((((IkReal(0.0300000000000000))*(x505)))+(((IkReal(-0.300000000000000))*(py)))+(((IkReal(-0.313800000000000))*(cj23)*(py)))+(x506)+(((IkReal(-1.00000000000000))*(sj23)*(x507)))+(((IkReal(-1.00000000000000))*(px)*(x504))))))) < IKFAST_ATAN2_MAGTHRESH )
    continue;
j20array[0]=IKatan2(((gconst30)*(((((IkReal(-1.00000000000000))*(py)*(x504)))+(((IkReal(0.300000000000000))*(px)))+(((IkReal(-1.00000000000000))*(sj23)*(x506)))+(((IkReal(0.0300000000000000))*(py)))+(((IkReal(-0.313800000000000))*(x505)))+(((cj23)*(x507)))))), ((gconst30)*(((((IkReal(0.0300000000000000))*(x505)))+(((IkReal(-0.300000000000000))*(py)))+(((IkReal(-0.313800000000000))*(cj23)*(py)))+(x506)+(((IkReal(-1.00000000000000))*(sj23)*(x507)))+(((IkReal(-1.00000000000000))*(px)*(x504)))))));
sj20array[0]=IKsin(j20array[0]);
cj20array[0]=IKcos(j20array[0]);
if( j20array[0] > IKPI )
{
    j20array[0]-=IK2PI;
}
else if( j20array[0] < -IKPI )
{    j20array[0]+=IK2PI;
}
j20valid[0] = true;
for(int ij20 = 0; ij20 < 1; ++ij20)
{
if( !j20valid[ij20] )
{
    continue;
}
_ij20[0] = ij20; _ij20[1] = -1;
for(int iij20 = ij20+1; iij20 < 1; ++iij20)
{
if( j20valid[iij20] && IKabs(cj20array[ij20]-cj20array[iij20]) < IKFAST_SOLUTION_THRESH && IKabs(sj20array[ij20]-sj20array[iij20]) < IKFAST_SOLUTION_THRESH )
{
    j20valid[iij20]=false; _ij20[1] = iij20; break;
}
}
j20 = j20array[ij20]; cj20 = cj20array[ij20]; sj20 = sj20array[ij20];
{
IkReal evalcond[3];
IkReal x508=IKcos(j20);
IkReal x509=IKsin(j20);
IkReal x510=((px)*(x509));
IkReal x511=((py)*(x508));
IkReal x512=((py)*(x509));
IkReal x513=((px)*(x508));
evalcond[0]=((IkReal(0.0300000000000000))+(((IkReal(-0.0300000000000000))*(cj23)))+(((IkReal(-1.00000000000000))*(x513)))+(((IkReal(-1.00000000000000))*(x512)))+(((IkReal(-0.313800000000000))*(sj23))));
evalcond[1]=((IkReal(0.300000000000000))+(((IkReal(0.313800000000000))*(cj23)))+(((IkReal(-1.00000000000000))*(x510)))+(x511)+(((IkReal(-0.0300000000000000))*(sj23))));
evalcond[2]=((IkReal(0.00847044000000000))+(((IkReal(0.600000000000000))*(x510)))+(((IkReal(0.0600000000000000))*(x513)))+(((IkReal(0.0600000000000000))*(x512)))+(((IkReal(-1.00000000000000))*(pp)))+(((IkReal(-0.600000000000000))*(x511))));
if( IKabs(evalcond[0]) > 0.000001  || IKabs(evalcond[1]) > 0.000001  || IKabs(evalcond[2]) > 0.000001  )
{
continue;
}
}

rotationfunction0(solutions);
}
}

}

}

} else
{
IkReal x514=((IkReal(-1.00000000000000))*(pz));
evalcond[0]=((IkReal(-3.14159265358979))+(IKfmod(j22, IkReal(6.28318530717959))));
evalcond[1]=((IkReal(0.190270440000000))+(((IkReal(0.186480000000000))*(cj23)))+(((IkReal(-1.00000000000000))*(pp)))+(((IkReal(-0.0368280000000000))*(sj23))));
evalcond[2]=x514;
evalcond[3]=x514;
if( IKabs(evalcond[0]) < 0.0000010000000000  && IKabs(evalcond[1]) < 0.0000010000000000  && IKabs(evalcond[2]) < 0.0000010000000000  && IKabs(evalcond[3]) < 0.0000010000000000  )
{
{
IkReal dummyeval[1];
IkReal gconst32;
gconst32=IKsign((((px)*(px))+((py)*(py))));
dummyeval[0]=(((px)*(px))+((py)*(py)));
if( IKabs(dummyeval[0]) < 0.0000010000000000  )
{
{
IkReal dummyeval[1];
IkReal gconst33;
gconst33=IKsign(((((IkReal(-0.0600000000000000))*((px)*(px))))+(((IkReal(-0.0600000000000000))*((py)*(py))))));
dummyeval[0]=((((IkReal(-1.00000000000000))*((px)*(px))))+(((IkReal(-1.00000000000000))*((py)*(py)))));
if( IKabs(dummyeval[0]) < 0.0000010000000000  )
{
continue;

} else
{
{
IkReal j20array[1], cj20array[1], sj20array[1];
bool j20valid[1]={false};
_nj20 = 1;
IkReal x515=((IkReal(0.0188280000000000))*(cj23));
IkReal x516=((py)*(sj23));
IkReal x517=((IkReal(0.188280000000000))*(cj23));
IkReal x518=((px)*(sj23));
if( IKabs(((gconst33)*(((((IkReal(-1.00000000000000))*(px)*(x515)))+(((IkReal(-0.0180000000000000))*(px)))+(((IkReal(0.00180000000000000))*(x518)))+(((IkReal(-1.00000000000000))*(py)*(x517)))+(((IkReal(0.0180000000000000))*(x516)))+(((pp)*(py)))+(((IkReal(-0.188470440000000))*(py))))))) < IKFAST_ATAN2_MAGTHRESH && IKabs(((gconst33)*(((((IkReal(0.0180000000000000))*(py)))+(((IkReal(-1.00000000000000))*(px)*(x517)))+(((py)*(x515)))+(((IkReal(0.0180000000000000))*(x518)))+(((IkReal(-0.00180000000000000))*(x516)))+(((pp)*(px)))+(((IkReal(-0.188470440000000))*(px))))))) < IKFAST_ATAN2_MAGTHRESH )
    continue;
j20array[0]=IKatan2(((gconst33)*(((((IkReal(-1.00000000000000))*(px)*(x515)))+(((IkReal(-0.0180000000000000))*(px)))+(((IkReal(0.00180000000000000))*(x518)))+(((IkReal(-1.00000000000000))*(py)*(x517)))+(((IkReal(0.0180000000000000))*(x516)))+(((pp)*(py)))+(((IkReal(-0.188470440000000))*(py)))))), ((gconst33)*(((((IkReal(0.0180000000000000))*(py)))+(((IkReal(-1.00000000000000))*(px)*(x517)))+(((py)*(x515)))+(((IkReal(0.0180000000000000))*(x518)))+(((IkReal(-0.00180000000000000))*(x516)))+(((pp)*(px)))+(((IkReal(-0.188470440000000))*(px)))))));
sj20array[0]=IKsin(j20array[0]);
cj20array[0]=IKcos(j20array[0]);
if( j20array[0] > IKPI )
{
    j20array[0]-=IK2PI;
}
else if( j20array[0] < -IKPI )
{    j20array[0]+=IK2PI;
}
j20valid[0] = true;
for(int ij20 = 0; ij20 < 1; ++ij20)
{
if( !j20valid[ij20] )
{
    continue;
}
_ij20[0] = ij20; _ij20[1] = -1;
for(int iij20 = ij20+1; iij20 < 1; ++iij20)
{
if( j20valid[iij20] && IKabs(cj20array[ij20]-cj20array[iij20]) < IKFAST_SOLUTION_THRESH && IKabs(sj20array[ij20]-sj20array[iij20]) < IKFAST_SOLUTION_THRESH )
{
    j20valid[iij20]=false; _ij20[1] = iij20; break;
}
}
j20 = j20array[ij20]; cj20 = cj20array[ij20]; sj20 = sj20array[ij20];
{
IkReal evalcond[3];
IkReal x519=IKcos(j20);
IkReal x520=IKsin(j20);
IkReal x521=((px)*(x520));
IkReal x522=((py)*(x519));
IkReal x523=((py)*(x520));
IkReal x524=((px)*(x519));
evalcond[0]=((IkReal(-0.0300000000000000))+(((IkReal(-1.00000000000000))*(x524)))+(((IkReal(-1.00000000000000))*(x523)))+(((IkReal(0.313800000000000))*(sj23)))+(((IkReal(0.0300000000000000))*(cj23))));
evalcond[1]=((IkReal(0.300000000000000))+(((IkReal(0.313800000000000))*(cj23)))+(((IkReal(-1.00000000000000))*(x521)))+(x522)+(((IkReal(-0.0300000000000000))*(sj23))));
evalcond[2]=((IkReal(0.00847044000000000))+(((IkReal(0.600000000000000))*(x521)))+(((IkReal(-1.00000000000000))*(pp)))+(((IkReal(-0.0600000000000000))*(x523)))+(((IkReal(-0.0600000000000000))*(x524)))+(((IkReal(-0.600000000000000))*(x522))));
if( IKabs(evalcond[0]) > 0.000001  || IKabs(evalcond[1]) > 0.000001  || IKabs(evalcond[2]) > 0.000001  )
{
continue;
}
}

rotationfunction0(solutions);
}
}

}

}

} else
{
{
IkReal j20array[1], cj20array[1], sj20array[1];
bool j20valid[1]={false};
_nj20 = 1;
IkReal x525=((IkReal(0.0300000000000000))*(cj23));
IkReal x526=((py)*(sj23));
IkReal x527=((IkReal(0.0300000000000000))*(px));
IkReal x528=((IkReal(0.313800000000000))*(px));
if( IKabs(((gconst32)*(((((IkReal(-1.00000000000000))*(sj23)*(x527)))+(((cj23)*(x528)))+(((IkReal(0.300000000000000))*(px)))+(((IkReal(0.313800000000000))*(x526)))+(((py)*(x525)))+(((IkReal(-0.0300000000000000))*(py))))))) < IKFAST_ATAN2_MAGTHRESH && IKabs(((gconst32)*(((((IkReal(-0.300000000000000))*(py)))+(((IkReal(0.0300000000000000))*(x526)))+(((IkReal(-1.00000000000000))*(x527)))+(((sj23)*(x528)))+(((IkReal(-0.313800000000000))*(cj23)*(py)))+(((px)*(x525))))))) < IKFAST_ATAN2_MAGTHRESH )
    continue;
j20array[0]=IKatan2(((gconst32)*(((((IkReal(-1.00000000000000))*(sj23)*(x527)))+(((cj23)*(x528)))+(((IkReal(0.300000000000000))*(px)))+(((IkReal(0.313800000000000))*(x526)))+(((py)*(x525)))+(((IkReal(-0.0300000000000000))*(py)))))), ((gconst32)*(((((IkReal(-0.300000000000000))*(py)))+(((IkReal(0.0300000000000000))*(x526)))+(((IkReal(-1.00000000000000))*(x527)))+(((sj23)*(x528)))+(((IkReal(-0.313800000000000))*(cj23)*(py)))+(((px)*(x525)))))));
sj20array[0]=IKsin(j20array[0]);
cj20array[0]=IKcos(j20array[0]);
if( j20array[0] > IKPI )
{
    j20array[0]-=IK2PI;
}
else if( j20array[0] < -IKPI )
{    j20array[0]+=IK2PI;
}
j20valid[0] = true;
for(int ij20 = 0; ij20 < 1; ++ij20)
{
if( !j20valid[ij20] )
{
    continue;
}
_ij20[0] = ij20; _ij20[1] = -1;
for(int iij20 = ij20+1; iij20 < 1; ++iij20)
{
if( j20valid[iij20] && IKabs(cj20array[ij20]-cj20array[iij20]) < IKFAST_SOLUTION_THRESH && IKabs(sj20array[ij20]-sj20array[iij20]) < IKFAST_SOLUTION_THRESH )
{
    j20valid[iij20]=false; _ij20[1] = iij20; break;
}
}
j20 = j20array[ij20]; cj20 = cj20array[ij20]; sj20 = sj20array[ij20];
{
IkReal evalcond[3];
IkReal x529=IKcos(j20);
IkReal x530=IKsin(j20);
IkReal x531=((px)*(x530));
IkReal x532=((py)*(x529));
IkReal x533=((py)*(x530));
IkReal x534=((px)*(x529));
evalcond[0]=((IkReal(-0.0300000000000000))+(((IkReal(-1.00000000000000))*(x533)))+(((IkReal(-1.00000000000000))*(x534)))+(((IkReal(0.313800000000000))*(sj23)))+(((IkReal(0.0300000000000000))*(cj23))));
evalcond[1]=((IkReal(0.300000000000000))+(((IkReal(0.313800000000000))*(cj23)))+(((IkReal(-1.00000000000000))*(x531)))+(x532)+(((IkReal(-0.0300000000000000))*(sj23))));
evalcond[2]=((IkReal(0.00847044000000000))+(((IkReal(0.600000000000000))*(x531)))+(((IkReal(-1.00000000000000))*(pp)))+(((IkReal(-0.0600000000000000))*(x533)))+(((IkReal(-0.0600000000000000))*(x534)))+(((IkReal(-0.600000000000000))*(x532))));
if( IKabs(evalcond[0]) > 0.000001  || IKabs(evalcond[1]) > 0.000001  || IKabs(evalcond[2]) > 0.000001  )
{
continue;
}
}

rotationfunction0(solutions);
}
}

}

}

} else
{
if( 1 )
{
continue;

} else
{
}
}
}
}

} else
{
{
IkReal j20array[1], cj20array[1], sj20array[1];
bool j20valid[1]={false};
_nj20 = 1;
IkReal x535=((px)*(sj23));
IkReal x536=((IkReal(0.313800000000000))*(cj22));
IkReal x537=((IkReal(0.0300000000000000))*(py));
IkReal x538=((cj22)*(cj23));
IkReal x539=((IkReal(0.0300000000000000))*(px));
IkReal x540=((IkReal(0.313800000000000))*(cj23));
if( IKabs(((gconst29)*(((((IkReal(-1.00000000000000))*(x537)*(x538)))+(((IkReal(0.300000000000000))*(px)))+(((px)*(x540)))+(((cj22)*(x537)))+(((IkReal(-1.00000000000000))*(py)*(sj23)*(x536)))+(((IkReal(-0.0300000000000000))*(x535))))))) < IKFAST_ATAN2_MAGTHRESH && IKabs(((gconst29)*(((((IkReal(-0.300000000000000))*(py)))+(((IkReal(-1.00000000000000))*(x538)*(x539)))+(((sj23)*(x537)))+(((cj22)*(x539)))+(((IkReal(-1.00000000000000))*(py)*(x540)))+(((IkReal(-1.00000000000000))*(x535)*(x536))))))) < IKFAST_ATAN2_MAGTHRESH )
    continue;
j20array[0]=IKatan2(((gconst29)*(((((IkReal(-1.00000000000000))*(x537)*(x538)))+(((IkReal(0.300000000000000))*(px)))+(((px)*(x540)))+(((cj22)*(x537)))+(((IkReal(-1.00000000000000))*(py)*(sj23)*(x536)))+(((IkReal(-0.0300000000000000))*(x535)))))), ((gconst29)*(((((IkReal(-0.300000000000000))*(py)))+(((IkReal(-1.00000000000000))*(x538)*(x539)))+(((sj23)*(x537)))+(((cj22)*(x539)))+(((IkReal(-1.00000000000000))*(py)*(x540)))+(((IkReal(-1.00000000000000))*(x535)*(x536)))))));
sj20array[0]=IKsin(j20array[0]);
cj20array[0]=IKcos(j20array[0]);
if( j20array[0] > IKPI )
{
    j20array[0]-=IK2PI;
}
else if( j20array[0] < -IKPI )
{    j20array[0]+=IK2PI;
}
j20valid[0] = true;
for(int ij20 = 0; ij20 < 1; ++ij20)
{
if( !j20valid[ij20] )
{
    continue;
}
_ij20[0] = ij20; _ij20[1] = -1;
for(int iij20 = ij20+1; iij20 < 1; ++iij20)
{
if( j20valid[iij20] && IKabs(cj20array[ij20]-cj20array[iij20]) < IKFAST_SOLUTION_THRESH && IKabs(sj20array[ij20]-sj20array[iij20]) < IKFAST_SOLUTION_THRESH )
{
    j20valid[iij20]=false; _ij20[1] = iij20; break;
}
}
j20 = j20array[ij20]; cj20 = cj20array[ij20]; sj20 = sj20array[ij20];
{
IkReal evalcond[5];
IkReal x541=IKcos(j20);
IkReal x542=IKsin(j20);
IkReal x543=((IkReal(0.0300000000000000))*(cj22));
IkReal x544=((IkReal(0.313800000000000))*(sj23));
IkReal x545=((IkReal(1.00000000000000))*(cj22));
IkReal x546=((pz)*(sj22));
IkReal x547=((IkReal(0.0600000000000000))*(cj22));
IkReal x548=((py)*(x542));
IkReal x549=((px)*(x541));
IkReal x550=((py)*(x541));
IkReal x551=((px)*(x542));
evalcond[0]=((((IkReal(-1.00000000000000))*(cj23)*(x543)))+(((IkReal(-1.00000000000000))*(x548)))+(((IkReal(-1.00000000000000))*(x549)))+(x543)+(((IkReal(-1.00000000000000))*(cj22)*(x544))));
evalcond[1]=((IkReal(0.300000000000000))+(((IkReal(-1.00000000000000))*(x551)))+(((IkReal(0.313800000000000))*(cj23)))+(x550)+(((IkReal(-0.0300000000000000))*(sj23))));
evalcond[2]=((((sj22)*(x549)))+(((sj22)*(x548)))+(((cj22)*(pz))));
evalcond[3]=((IkReal(0.0300000000000000))+(((IkReal(-0.0300000000000000))*(cj23)))+(((IkReal(-1.00000000000000))*(x545)*(x548)))+(((IkReal(-1.00000000000000))*(x545)*(x549)))+(((IkReal(-1.00000000000000))*(x544)))+(x546));
evalcond[4]=((IkReal(0.00847044000000000))+(((x547)*(x548)))+(((x547)*(x549)))+(((IkReal(0.600000000000000))*(x551)))+(((IkReal(-1.00000000000000))*(pp)))+(((IkReal(-0.0600000000000000))*(x546)))+(((IkReal(-0.600000000000000))*(x550))));
if( IKabs(evalcond[0]) > 0.000001  || IKabs(evalcond[1]) > 0.000001  || IKabs(evalcond[2]) > 0.000001  || IKabs(evalcond[3]) > 0.000001  || IKabs(evalcond[4]) > 0.000001  )
{
continue;
}
}

rotationfunction0(solutions);
}
}

}

}

} else
{
{
IkReal j20array[1], cj20array[1], sj20array[1];
bool j20valid[1]={false};
_nj20 = 1;
IkReal x552=((py)*(sj22));
IkReal x553=((IkReal(0.0300000000000000))*(sj23));
IkReal x554=((px)*(sj22));
IkReal x555=((IkReal(0.313800000000000))*(cj23)*(sj22));
IkReal x556=((IkReal(1.00000000000000))*(cj22)*(pz));
if( IKabs(((gconst28)*(((((IkReal(0.300000000000000))*(x554)))+(((IkReal(0.313800000000000))*(cj23)*(x554)))+(((IkReal(-1.00000000000000))*(x553)*(x554)))+(((IkReal(-1.00000000000000))*(py)*(x556))))))) < IKFAST_ATAN2_MAGTHRESH && IKabs(((gconst28)*(((((IkReal(-0.313800000000000))*(cj23)*(x552)))+(((IkReal(-0.300000000000000))*(x552)))+(((IkReal(-1.00000000000000))*(px)*(x556)))+(((x552)*(x553))))))) < IKFAST_ATAN2_MAGTHRESH )
    continue;
j20array[0]=IKatan2(((gconst28)*(((((IkReal(0.300000000000000))*(x554)))+(((IkReal(0.313800000000000))*(cj23)*(x554)))+(((IkReal(-1.00000000000000))*(x553)*(x554)))+(((IkReal(-1.00000000000000))*(py)*(x556)))))), ((gconst28)*(((((IkReal(-0.313800000000000))*(cj23)*(x552)))+(((IkReal(-0.300000000000000))*(x552)))+(((IkReal(-1.00000000000000))*(px)*(x556)))+(((x552)*(x553)))))));
sj20array[0]=IKsin(j20array[0]);
cj20array[0]=IKcos(j20array[0]);
if( j20array[0] > IKPI )
{
    j20array[0]-=IK2PI;
}
else if( j20array[0] < -IKPI )
{    j20array[0]+=IK2PI;
}
j20valid[0] = true;
for(int ij20 = 0; ij20 < 1; ++ij20)
{
if( !j20valid[ij20] )
{
    continue;
}
_ij20[0] = ij20; _ij20[1] = -1;
for(int iij20 = ij20+1; iij20 < 1; ++iij20)
{
if( j20valid[iij20] && IKabs(cj20array[ij20]-cj20array[iij20]) < IKFAST_SOLUTION_THRESH && IKabs(sj20array[ij20]-sj20array[iij20]) < IKFAST_SOLUTION_THRESH )
{
    j20valid[iij20]=false; _ij20[1] = iij20; break;
}
}
j20 = j20array[ij20]; cj20 = cj20array[ij20]; sj20 = sj20array[ij20];
{
IkReal evalcond[5];
IkReal x557=IKcos(j20);
IkReal x558=IKsin(j20);
IkReal x559=((IkReal(0.0300000000000000))*(cj22));
IkReal x560=((IkReal(0.313800000000000))*(sj23));
IkReal x561=((IkReal(1.00000000000000))*(cj22));
IkReal x562=((pz)*(sj22));
IkReal x563=((IkReal(0.0600000000000000))*(cj22));
IkReal x564=((py)*(x558));
IkReal x565=((px)*(x557));
IkReal x566=((py)*(x557));
IkReal x567=((px)*(x558));
evalcond[0]=((((IkReal(-1.00000000000000))*(cj22)*(x560)))+(((IkReal(-1.00000000000000))*(cj23)*(x559)))+(x559)+(((IkReal(-1.00000000000000))*(x564)))+(((IkReal(-1.00000000000000))*(x565))));
evalcond[1]=((IkReal(0.300000000000000))+(((IkReal(0.313800000000000))*(cj23)))+(x566)+(((IkReal(-1.00000000000000))*(x567)))+(((IkReal(-0.0300000000000000))*(sj23))));
evalcond[2]=((((sj22)*(x564)))+(((sj22)*(x565)))+(((cj22)*(pz))));
evalcond[3]=((IkReal(0.0300000000000000))+(((IkReal(-0.0300000000000000))*(cj23)))+(x562)+(((IkReal(-1.00000000000000))*(x561)*(x565)))+(((IkReal(-1.00000000000000))*(x561)*(x564)))+(((IkReal(-1.00000000000000))*(x560))));
evalcond[4]=((IkReal(0.00847044000000000))+(((IkReal(0.600000000000000))*(x567)))+(((IkReal(-0.0600000000000000))*(x562)))+(((IkReal(-0.600000000000000))*(x566)))+(((x563)*(x564)))+(((x563)*(x565)))+(((IkReal(-1.00000000000000))*(pp))));
if( IKabs(evalcond[0]) > 0.000001  || IKabs(evalcond[1]) > 0.000001  || IKabs(evalcond[2]) > 0.000001  || IKabs(evalcond[3]) > 0.000001  || IKabs(evalcond[4]) > 0.000001  )
{
continue;
}
}

rotationfunction0(solutions);
}
}

}

}

} else
{
IkReal x568=((IkReal(0.300000000000000))+(((IkReal(0.313800000000000))*(cj23)))+(((IkReal(-1.00000000000000))*(pz)))+(((IkReal(-0.0300000000000000))*(sj23))));
evalcond[0]=((IkReal(-3.14159265358979))+(IKfmod(((IkReal(1.57079632679490))+(j21)), IkReal(6.28318530717959))));
evalcond[1]=((IkReal(0.190270440000000))+(((IkReal(0.186480000000000))*(cj23)))+(((IkReal(-1.00000000000000))*(pp)))+(((IkReal(-0.0368280000000000))*(sj23))));
evalcond[2]=x568;
evalcond[3]=x568;
if( IKabs(evalcond[0]) < 0.0000010000000000  && IKabs(evalcond[1]) < 0.0000010000000000  && IKabs(evalcond[2]) < 0.0000010000000000  && IKabs(evalcond[3]) < 0.0000010000000000  )
{
{
IkReal dummyeval[1];
IkReal gconst34;
gconst34=IKsign((((px)*(px))+((py)*(py))));
dummyeval[0]=(((px)*(px))+((py)*(py)));
if( IKabs(dummyeval[0]) < 0.0000010000000000  )
{
{
IkReal dummyeval[1];
IkReal gconst35;
IkReal x569=((IkReal(1.00000000000000))*(sj22));
gconst35=IKsign(((((IkReal(-1.00000000000000))*(x569)*((px)*(px))))+(((IkReal(-1.00000000000000))*(x569)*((py)*(py))))));
IkReal x570=((IkReal(1.00000000000000))*(sj22));
dummyeval[0]=((((IkReal(-1.00000000000000))*(x570)*((py)*(py))))+(((IkReal(-1.00000000000000))*(x570)*((px)*(px)))));
if( IKabs(dummyeval[0]) < 0.0000010000000000  )
{
{
IkReal evalcond[4];
IkReal x571=x568;
evalcond[0]=((IkReal(-3.14159265358979))+(IKfmod(((IkReal(3.14159265358979))+(j22)), IkReal(6.28318530717959))));
evalcond[1]=((IkReal(0.190270440000000))+(((IkReal(0.186480000000000))*(cj23)))+(((IkReal(-1.00000000000000))*(pp)))+(((IkReal(-0.0368280000000000))*(sj23))));
evalcond[2]=x571;
evalcond[3]=x571;
if( IKabs(evalcond[0]) < 0.0000010000000000  && IKabs(evalcond[1]) < 0.0000010000000000  && IKabs(evalcond[2]) < 0.0000010000000000  && IKabs(evalcond[3]) < 0.0000010000000000  )
{
{
IkReal dummyeval[1];
IkReal gconst36;
gconst36=IKsign((((px)*(px))+((py)*(py))));
dummyeval[0]=(((px)*(px))+((py)*(py)));
if( IKabs(dummyeval[0]) < 0.0000010000000000  )
{
{
IkReal dummyeval[1];
IkReal gconst37;
gconst37=IKsign(((((IkReal(-3.00000000000000))*((px)*(px))))+(((IkReal(-3.00000000000000))*((py)*(py))))));
dummyeval[0]=((((IkReal(-1.00000000000000))*((px)*(px))))+(((IkReal(-1.00000000000000))*((py)*(py)))));
if( IKabs(dummyeval[0]) < 0.0000010000000000  )
{
continue;

} else
{
{
IkReal j20array[1], cj20array[1], sj20array[1];
bool j20valid[1]={false};
_nj20 = 1;
IkReal x572=((IkReal(50.0000000000000))*(pp));
IkReal x573=((IkReal(30.0000000000000))*(pz));
if( IKabs(((gconst37)*(((((IkReal(0.423522000000000))*(py)))+(((py)*(x573)))+(((IkReal(-1.00000000000000))*(py)*(x572))))))) < IKFAST_ATAN2_MAGTHRESH && IKabs(((gconst37)*(((((IkReal(0.423522000000000))*(px)))+(((IkReal(-1.00000000000000))*(px)*(x572)))+(((px)*(x573))))))) < IKFAST_ATAN2_MAGTHRESH )
    continue;
j20array[0]=IKatan2(((gconst37)*(((((IkReal(0.423522000000000))*(py)))+(((py)*(x573)))+(((IkReal(-1.00000000000000))*(py)*(x572)))))), ((gconst37)*(((((IkReal(0.423522000000000))*(px)))+(((IkReal(-1.00000000000000))*(px)*(x572)))+(((px)*(x573)))))));
sj20array[0]=IKsin(j20array[0]);
cj20array[0]=IKcos(j20array[0]);
if( j20array[0] > IKPI )
{
    j20array[0]-=IK2PI;
}
else if( j20array[0] < -IKPI )
{    j20array[0]+=IK2PI;
}
j20valid[0] = true;
for(int ij20 = 0; ij20 < 1; ++ij20)
{
if( !j20valid[ij20] )
{
    continue;
}
_ij20[0] = ij20; _ij20[1] = -1;
for(int iij20 = ij20+1; iij20 < 1; ++iij20)
{
if( j20valid[iij20] && IKabs(cj20array[ij20]-cj20array[iij20]) < IKFAST_SOLUTION_THRESH && IKabs(sj20array[ij20]-sj20array[iij20]) < IKFAST_SOLUTION_THRESH )
{
    j20valid[iij20]=false; _ij20[1] = iij20; break;
}
}
j20 = j20array[ij20]; cj20 = cj20array[ij20]; sj20 = sj20array[ij20];
{
IkReal evalcond[3];
IkReal x574=IKcos(j20);
IkReal x575=IKsin(j20);
IkReal x576=((IkReal(1.00000000000000))*(px));
IkReal x577=((py)*(x575));
evalcond[0]=((IkReal(0.0300000000000000))+(((IkReal(-0.0300000000000000))*(cj23)))+(((IkReal(-1.00000000000000))*(x574)*(x576)))+(((IkReal(-1.00000000000000))*(x577)))+(((IkReal(-0.313800000000000))*(sj23))));
evalcond[1]=((((py)*(x574)))+(((IkReal(-1.00000000000000))*(x575)*(x576))));
evalcond[2]=((IkReal(0.00847044000000000))+(((IkReal(0.600000000000000))*(pz)))+(((IkReal(0.0600000000000000))*(x577)))+(((IkReal(-1.00000000000000))*(pp)))+(((IkReal(0.0600000000000000))*(px)*(x574))));
if( IKabs(evalcond[0]) > 0.000001  || IKabs(evalcond[1]) > 0.000001  || IKabs(evalcond[2]) > 0.000001  )
{
continue;
}
}

rotationfunction0(solutions);
}
}

}

}

} else
{
{
IkReal j20array[1], cj20array[1], sj20array[1];
bool j20valid[1]={false};
_nj20 = 1;
IkReal x578=((IkReal(0.0300000000000000))*(cj23));
IkReal x579=((IkReal(0.313800000000000))*(sj23));
if( IKabs(((gconst36)*(((((IkReal(-1.00000000000000))*(py)*(x579)))+(((IkReal(-1.00000000000000))*(py)*(x578)))+(((IkReal(0.0300000000000000))*(py))))))) < IKFAST_ATAN2_MAGTHRESH && IKabs(((gconst36)*(((((IkReal(-1.00000000000000))*(px)*(x578)))+(((IkReal(-1.00000000000000))*(px)*(x579)))+(((IkReal(0.0300000000000000))*(px))))))) < IKFAST_ATAN2_MAGTHRESH )
    continue;
j20array[0]=IKatan2(((gconst36)*(((((IkReal(-1.00000000000000))*(py)*(x579)))+(((IkReal(-1.00000000000000))*(py)*(x578)))+(((IkReal(0.0300000000000000))*(py)))))), ((gconst36)*(((((IkReal(-1.00000000000000))*(px)*(x578)))+(((IkReal(-1.00000000000000))*(px)*(x579)))+(((IkReal(0.0300000000000000))*(px)))))));
sj20array[0]=IKsin(j20array[0]);
cj20array[0]=IKcos(j20array[0]);
if( j20array[0] > IKPI )
{
    j20array[0]-=IK2PI;
}
else if( j20array[0] < -IKPI )
{    j20array[0]+=IK2PI;
}
j20valid[0] = true;
for(int ij20 = 0; ij20 < 1; ++ij20)
{
if( !j20valid[ij20] )
{
    continue;
}
_ij20[0] = ij20; _ij20[1] = -1;
for(int iij20 = ij20+1; iij20 < 1; ++iij20)
{
if( j20valid[iij20] && IKabs(cj20array[ij20]-cj20array[iij20]) < IKFAST_SOLUTION_THRESH && IKabs(sj20array[ij20]-sj20array[iij20]) < IKFAST_SOLUTION_THRESH )
{
    j20valid[iij20]=false; _ij20[1] = iij20; break;
}
}
j20 = j20array[ij20]; cj20 = cj20array[ij20]; sj20 = sj20array[ij20];
{
IkReal evalcond[3];
IkReal x580=IKcos(j20);
IkReal x581=IKsin(j20);
IkReal x582=((IkReal(1.00000000000000))*(px));
IkReal x583=((py)*(x581));
evalcond[0]=((IkReal(0.0300000000000000))+(((IkReal(-1.00000000000000))*(x580)*(x582)))+(((IkReal(-1.00000000000000))*(x583)))+(((IkReal(-0.0300000000000000))*(cj23)))+(((IkReal(-0.313800000000000))*(sj23))));
evalcond[1]=((((py)*(x580)))+(((IkReal(-1.00000000000000))*(x581)*(x582))));
evalcond[2]=((IkReal(0.00847044000000000))+(((IkReal(0.600000000000000))*(pz)))+(((IkReal(0.0600000000000000))*(x583)))+(((IkReal(-1.00000000000000))*(pp)))+(((IkReal(0.0600000000000000))*(px)*(x580))));
if( IKabs(evalcond[0]) > 0.000001  || IKabs(evalcond[1]) > 0.000001  || IKabs(evalcond[2]) > 0.000001  )
{
continue;
}
}

rotationfunction0(solutions);
}
}

}

}

} else
{
IkReal x584=x568;
evalcond[0]=((IkReal(-3.14159265358979))+(IKfmod(j22, IkReal(6.28318530717959))));
evalcond[1]=((IkReal(0.190270440000000))+(((IkReal(0.186480000000000))*(cj23)))+(((IkReal(-1.00000000000000))*(pp)))+(((IkReal(-0.0368280000000000))*(sj23))));
evalcond[2]=x584;
evalcond[3]=x584;
if( IKabs(evalcond[0]) < 0.0000010000000000  && IKabs(evalcond[1]) < 0.0000010000000000  && IKabs(evalcond[2]) < 0.0000010000000000  && IKabs(evalcond[3]) < 0.0000010000000000  )
{
{
IkReal dummyeval[1];
IkReal gconst38;
gconst38=IKsign((((px)*(px))+((py)*(py))));
dummyeval[0]=(((px)*(px))+((py)*(py)));
if( IKabs(dummyeval[0]) < 0.0000010000000000  )
{
{
IkReal dummyeval[1];
IkReal gconst39;
gconst39=IKsign(((((IkReal(3.00000000000000))*((py)*(py))))+(((IkReal(3.00000000000000))*((px)*(px))))));
dummyeval[0]=(((px)*(px))+((py)*(py)));
if( IKabs(dummyeval[0]) < 0.0000010000000000  )
{
continue;

} else
{
{
IkReal j20array[1], cj20array[1], sj20array[1];
bool j20valid[1]={false};
_nj20 = 1;
IkReal x585=((IkReal(50.0000000000000))*(pp));
IkReal x586=((IkReal(30.0000000000000))*(pz));
if( IKabs(((gconst39)*(((((IkReal(0.423522000000000))*(py)))+(((IkReal(-1.00000000000000))*(py)*(x585)))+(((py)*(x586))))))) < IKFAST_ATAN2_MAGTHRESH && IKabs(((gconst39)*(((((IkReal(0.423522000000000))*(px)))+(((px)*(x586)))+(((IkReal(-1.00000000000000))*(px)*(x585))))))) < IKFAST_ATAN2_MAGTHRESH )
    continue;
j20array[0]=IKatan2(((gconst39)*(((((IkReal(0.423522000000000))*(py)))+(((IkReal(-1.00000000000000))*(py)*(x585)))+(((py)*(x586)))))), ((gconst39)*(((((IkReal(0.423522000000000))*(px)))+(((px)*(x586)))+(((IkReal(-1.00000000000000))*(px)*(x585)))))));
sj20array[0]=IKsin(j20array[0]);
cj20array[0]=IKcos(j20array[0]);
if( j20array[0] > IKPI )
{
    j20array[0]-=IK2PI;
}
else if( j20array[0] < -IKPI )
{    j20array[0]+=IK2PI;
}
j20valid[0] = true;
for(int ij20 = 0; ij20 < 1; ++ij20)
{
if( !j20valid[ij20] )
{
    continue;
}
_ij20[0] = ij20; _ij20[1] = -1;
for(int iij20 = ij20+1; iij20 < 1; ++iij20)
{
if( j20valid[iij20] && IKabs(cj20array[ij20]-cj20array[iij20]) < IKFAST_SOLUTION_THRESH && IKabs(sj20array[ij20]-sj20array[iij20]) < IKFAST_SOLUTION_THRESH )
{
    j20valid[iij20]=false; _ij20[1] = iij20; break;
}
}
j20 = j20array[ij20]; cj20 = cj20array[ij20]; sj20 = sj20array[ij20];
{
IkReal evalcond[3];
IkReal x587=IKsin(j20);
IkReal x588=IKcos(j20);
IkReal x589=((py)*(x587));
IkReal x590=((px)*(x588));
evalcond[0]=((IkReal(-0.0300000000000000))+(((IkReal(-1.00000000000000))*(x589)))+(((IkReal(-1.00000000000000))*(x590)))+(((IkReal(0.313800000000000))*(sj23)))+(((IkReal(0.0300000000000000))*(cj23))));
evalcond[1]=((((px)*(x587)))+(((IkReal(-1.00000000000000))*(py)*(x588))));
evalcond[2]=((IkReal(0.00847044000000000))+(((IkReal(0.600000000000000))*(pz)))+(((IkReal(-0.0600000000000000))*(x590)))+(((IkReal(-1.00000000000000))*(pp)))+(((IkReal(-0.0600000000000000))*(x589))));
if( IKabs(evalcond[0]) > 0.000001  || IKabs(evalcond[1]) > 0.000001  || IKabs(evalcond[2]) > 0.000001  )
{
continue;
}
}

rotationfunction0(solutions);
}
}

}

}

} else
{
{
IkReal j20array[1], cj20array[1], sj20array[1];
bool j20valid[1]={false};
_nj20 = 1;
IkReal x591=((IkReal(0.0300000000000000))*(cj23));
IkReal x592=((IkReal(0.313800000000000))*(sj23));
if( IKabs(((gconst38)*(((((py)*(x592)))+(((py)*(x591)))+(((IkReal(-0.0300000000000000))*(py))))))) < IKFAST_ATAN2_MAGTHRESH && IKabs(((gconst38)*(((((px)*(x591)))+(((px)*(x592)))+(((IkReal(-0.0300000000000000))*(px))))))) < IKFAST_ATAN2_MAGTHRESH )
    continue;
j20array[0]=IKatan2(((gconst38)*(((((py)*(x592)))+(((py)*(x591)))+(((IkReal(-0.0300000000000000))*(py)))))), ((gconst38)*(((((px)*(x591)))+(((px)*(x592)))+(((IkReal(-0.0300000000000000))*(px)))))));
sj20array[0]=IKsin(j20array[0]);
cj20array[0]=IKcos(j20array[0]);
if( j20array[0] > IKPI )
{
    j20array[0]-=IK2PI;
}
else if( j20array[0] < -IKPI )
{    j20array[0]+=IK2PI;
}
j20valid[0] = true;
for(int ij20 = 0; ij20 < 1; ++ij20)
{
if( !j20valid[ij20] )
{
    continue;
}
_ij20[0] = ij20; _ij20[1] = -1;
for(int iij20 = ij20+1; iij20 < 1; ++iij20)
{
if( j20valid[iij20] && IKabs(cj20array[ij20]-cj20array[iij20]) < IKFAST_SOLUTION_THRESH && IKabs(sj20array[ij20]-sj20array[iij20]) < IKFAST_SOLUTION_THRESH )
{
    j20valid[iij20]=false; _ij20[1] = iij20; break;
}
}
j20 = j20array[ij20]; cj20 = cj20array[ij20]; sj20 = sj20array[ij20];
{
IkReal evalcond[3];
IkReal x593=IKsin(j20);
IkReal x594=IKcos(j20);
IkReal x595=((py)*(x593));
IkReal x596=((px)*(x594));
evalcond[0]=((IkReal(-0.0300000000000000))+(((IkReal(-1.00000000000000))*(x595)))+(((IkReal(-1.00000000000000))*(x596)))+(((IkReal(0.313800000000000))*(sj23)))+(((IkReal(0.0300000000000000))*(cj23))));
evalcond[1]=((((px)*(x593)))+(((IkReal(-1.00000000000000))*(py)*(x594))));
evalcond[2]=((IkReal(0.00847044000000000))+(((IkReal(0.600000000000000))*(pz)))+(((IkReal(-0.0600000000000000))*(x595)))+(((IkReal(-0.0600000000000000))*(x596)))+(((IkReal(-1.00000000000000))*(pp))));
if( IKabs(evalcond[0]) > 0.000001  || IKabs(evalcond[1]) > 0.000001  || IKabs(evalcond[2]) > 0.000001  )
{
continue;
}
}

rotationfunction0(solutions);
}
}

}

}

} else
{
if( 1 )
{
continue;

} else
{
}
}
}
}

} else
{
{
IkReal j20array[1], cj20array[1], sj20array[1];
bool j20valid[1]={false};
_nj20 = 1;
IkReal x597=(sj22)*(sj22);
IkReal x598=((IkReal(0.0300000000000000))*(cj23));
IkReal x599=((IkReal(0.313800000000000))*(sj23));
IkReal x600=((cj22)*(px)*(sj22));
IkReal x601=((py)*(x597));
IkReal x602=((px)*(x597));
IkReal x603=((cj22)*(py)*(sj22));
if( IKabs(((gconst35)*(((((IkReal(-0.0300000000000000))*(x602)))+(((IkReal(-0.0300000000000000))*(x603)))+(((x599)*(x602)))+(((x599)*(x603)))+(((x598)*(x603)))+(((x598)*(x602))))))) < IKFAST_ATAN2_MAGTHRESH && IKabs(((gconst35)*(((((IkReal(-0.0300000000000000))*(x600)))+(((IkReal(-1.00000000000000))*(x599)*(x601)))+(((IkReal(-1.00000000000000))*(x598)*(x601)))+(((IkReal(0.0300000000000000))*(x601)))+(((x599)*(x600)))+(((x598)*(x600))))))) < IKFAST_ATAN2_MAGTHRESH )
    continue;
j20array[0]=IKatan2(((gconst35)*(((((IkReal(-0.0300000000000000))*(x602)))+(((IkReal(-0.0300000000000000))*(x603)))+(((x599)*(x602)))+(((x599)*(x603)))+(((x598)*(x603)))+(((x598)*(x602)))))), ((gconst35)*(((((IkReal(-0.0300000000000000))*(x600)))+(((IkReal(-1.00000000000000))*(x599)*(x601)))+(((IkReal(-1.00000000000000))*(x598)*(x601)))+(((IkReal(0.0300000000000000))*(x601)))+(((x599)*(x600)))+(((x598)*(x600)))))));
sj20array[0]=IKsin(j20array[0]);
cj20array[0]=IKcos(j20array[0]);
if( j20array[0] > IKPI )
{
    j20array[0]-=IK2PI;
}
else if( j20array[0] < -IKPI )
{    j20array[0]+=IK2PI;
}
j20valid[0] = true;
for(int ij20 = 0; ij20 < 1; ++ij20)
{
if( !j20valid[ij20] )
{
    continue;
}
_ij20[0] = ij20; _ij20[1] = -1;
for(int iij20 = ij20+1; iij20 < 1; ++iij20)
{
if( j20valid[iij20] && IKabs(cj20array[ij20]-cj20array[iij20]) < IKFAST_SOLUTION_THRESH && IKabs(sj20array[ij20]-sj20array[iij20]) < IKFAST_SOLUTION_THRESH )
{
    j20valid[iij20]=false; _ij20[1] = iij20; break;
}
}
j20 = j20array[ij20]; cj20 = cj20array[ij20]; sj20 = sj20array[ij20];
{
IkReal evalcond[5];
IkReal x604=IKcos(j20);
IkReal x605=IKsin(j20);
IkReal x606=((IkReal(0.313800000000000))*(sj23));
IkReal x607=((IkReal(0.0300000000000000))*(cj23));
IkReal x608=((py)*(sj22));
IkReal x609=((cj22)*(py));
IkReal x610=((IkReal(1.00000000000000))*(py));
IkReal x611=((px)*(x604));
IkReal x612=((IkReal(0.0600000000000000))*(x605));
IkReal x613=((px)*(x605));
IkReal x614=((IkReal(1.00000000000000))*(cj22)*(x605));
evalcond[0]=((((IkReal(-1.00000000000000))*(x605)*(x610)))+(((IkReal(-1.00000000000000))*(x611)))+(((IkReal(-1.00000000000000))*(cj22)*(x606)))+(((IkReal(-1.00000000000000))*(cj22)*(x607)))+(((IkReal(0.0300000000000000))*(cj22))));
evalcond[1]=((((x605)*(x608)))+(((x604)*(x609)))+(((IkReal(-1.00000000000000))*(cj22)*(x613)))+(((sj22)*(x611))));
evalcond[2]=((IkReal(0.0300000000000000))+(((x604)*(x608)))+(((IkReal(-1.00000000000000))*(x605)*(x609)))+(((IkReal(-1.00000000000000))*(cj22)*(x611)))+(((IkReal(-1.00000000000000))*(x606)))+(((IkReal(-1.00000000000000))*(x607)))+(((IkReal(-1.00000000000000))*(sj22)*(x613))));
evalcond[3]=((((IkReal(-1.00000000000000))*(x604)*(x610)))+(x613)+(((IkReal(-0.0300000000000000))*(sj22)))+(((sj22)*(x606)))+(((sj22)*(x607))));
evalcond[4]=((IkReal(0.00847044000000000))+(((IkReal(0.600000000000000))*(pz)))+(((IkReal(0.0600000000000000))*(cj22)*(x611)))+(((IkReal(-1.00000000000000))*(pp)))+(((px)*(sj22)*(x612)))+(((x609)*(x612)))+(((IkReal(-0.0600000000000000))*(x604)*(x608))));
if( IKabs(evalcond[0]) > 0.000001  || IKabs(evalcond[1]) > 0.000001  || IKabs(evalcond[2]) > 0.000001  || IKabs(evalcond[3]) > 0.000001  || IKabs(evalcond[4]) > 0.000001  )
{
continue;
}
}

rotationfunction0(solutions);
}
}

}

}

} else
{
{
IkReal j20array[1], cj20array[1], sj20array[1];
bool j20valid[1]={false};
_nj20 = 1;
IkReal x615=((IkReal(0.0300000000000000))*(sj22));
IkReal x616=((IkReal(0.0300000000000000))*(cj22));
IkReal x617=((cj23)*(py));
IkReal x618=((cj23)*(px));
IkReal x619=((IkReal(0.313800000000000))*(py)*(sj23));
IkReal x620=((IkReal(0.313800000000000))*(px)*(sj23));
if( IKabs(((gconst34)*(((((px)*(x615)))+(((IkReal(-1.00000000000000))*(sj22)*(x620)))+(((py)*(x616)))+(((IkReal(-1.00000000000000))*(cj22)*(x619)))+(((IkReal(-1.00000000000000))*(x615)*(x618)))+(((IkReal(-1.00000000000000))*(x616)*(x617))))))) < IKFAST_ATAN2_MAGTHRESH && IKabs(((gconst34)*(((((IkReal(-1.00000000000000))*(cj22)*(x620)))+(((px)*(x616)))+(((sj22)*(x619)))+(((IkReal(-1.00000000000000))*(py)*(x615)))+(((x615)*(x617)))+(((IkReal(-1.00000000000000))*(x616)*(x618))))))) < IKFAST_ATAN2_MAGTHRESH )
    continue;
j20array[0]=IKatan2(((gconst34)*(((((px)*(x615)))+(((IkReal(-1.00000000000000))*(sj22)*(x620)))+(((py)*(x616)))+(((IkReal(-1.00000000000000))*(cj22)*(x619)))+(((IkReal(-1.00000000000000))*(x615)*(x618)))+(((IkReal(-1.00000000000000))*(x616)*(x617)))))), ((gconst34)*(((((IkReal(-1.00000000000000))*(cj22)*(x620)))+(((px)*(x616)))+(((sj22)*(x619)))+(((IkReal(-1.00000000000000))*(py)*(x615)))+(((x615)*(x617)))+(((IkReal(-1.00000000000000))*(x616)*(x618)))))));
sj20array[0]=IKsin(j20array[0]);
cj20array[0]=IKcos(j20array[0]);
if( j20array[0] > IKPI )
{
    j20array[0]-=IK2PI;
}
else if( j20array[0] < -IKPI )
{    j20array[0]+=IK2PI;
}
j20valid[0] = true;
for(int ij20 = 0; ij20 < 1; ++ij20)
{
if( !j20valid[ij20] )
{
    continue;
}
_ij20[0] = ij20; _ij20[1] = -1;
for(int iij20 = ij20+1; iij20 < 1; ++iij20)
{
if( j20valid[iij20] && IKabs(cj20array[ij20]-cj20array[iij20]) < IKFAST_SOLUTION_THRESH && IKabs(sj20array[ij20]-sj20array[iij20]) < IKFAST_SOLUTION_THRESH )
{
    j20valid[iij20]=false; _ij20[1] = iij20; break;
}
}
j20 = j20array[ij20]; cj20 = cj20array[ij20]; sj20 = sj20array[ij20];
{
IkReal evalcond[5];
IkReal x621=IKcos(j20);
IkReal x622=IKsin(j20);
IkReal x623=((IkReal(0.313800000000000))*(sj23));
IkReal x624=((IkReal(0.0300000000000000))*(cj23));
IkReal x625=((py)*(sj22));
IkReal x626=((cj22)*(py));
IkReal x627=((IkReal(1.00000000000000))*(py));
IkReal x628=((px)*(x621));
IkReal x629=((IkReal(0.0600000000000000))*(x622));
IkReal x630=((px)*(x622));
IkReal x631=((IkReal(1.00000000000000))*(cj22)*(x622));
evalcond[0]=((((IkReal(-1.00000000000000))*(cj22)*(x624)))+(((IkReal(-1.00000000000000))*(cj22)*(x623)))+(((IkReal(-1.00000000000000))*(x622)*(x627)))+(((IkReal(-1.00000000000000))*(x628)))+(((IkReal(0.0300000000000000))*(cj22))));
evalcond[1]=((((IkReal(-1.00000000000000))*(cj22)*(x630)))+(((sj22)*(x628)))+(((x621)*(x626)))+(((x622)*(x625))));
evalcond[2]=((IkReal(0.0300000000000000))+(((IkReal(-1.00000000000000))*(sj22)*(x630)))+(((IkReal(-1.00000000000000))*(cj22)*(x628)))+(((IkReal(-1.00000000000000))*(x622)*(x626)))+(((IkReal(-1.00000000000000))*(x624)))+(((IkReal(-1.00000000000000))*(x623)))+(((x621)*(x625))));
evalcond[3]=((((IkReal(-1.00000000000000))*(x621)*(x627)))+(((sj22)*(x623)))+(((sj22)*(x624)))+(x630)+(((IkReal(-0.0300000000000000))*(sj22))));
evalcond[4]=((IkReal(0.00847044000000000))+(((IkReal(0.600000000000000))*(pz)))+(((IkReal(-0.0600000000000000))*(x621)*(x625)))+(((IkReal(-1.00000000000000))*(pp)))+(((px)*(sj22)*(x629)))+(((IkReal(0.0600000000000000))*(cj22)*(x628)))+(((x626)*(x629))));
if( IKabs(evalcond[0]) > 0.000001  || IKabs(evalcond[1]) > 0.000001  || IKabs(evalcond[2]) > 0.000001  || IKabs(evalcond[3]) > 0.000001  || IKabs(evalcond[4]) > 0.000001  )
{
continue;
}
}

rotationfunction0(solutions);
}
}

}

}

} else
{
IkReal x632=((IkReal(0.0300000000000000))*(sj23));
IkReal x633=((IkReal(0.313800000000000))*(cj23));
evalcond[0]=((IkReal(-3.14159265358979))+(IKfmod(((IkReal(4.71238898038469))+(j21)), IkReal(6.28318530717959))));
evalcond[1]=((IkReal(0.190270440000000))+(((IkReal(0.186480000000000))*(cj23)))+(((IkReal(-1.00000000000000))*(pp)))+(((IkReal(-0.0368280000000000))*(sj23))));
evalcond[2]=((IkReal(0.300000000000000))+(((IkReal(-1.00000000000000))*(x632)))+(pz)+(x633));
evalcond[3]=((IkReal(-0.300000000000000))+(((IkReal(-1.00000000000000))*(x633)))+(((IkReal(-1.00000000000000))*(pz)))+(x632));
if( IKabs(evalcond[0]) < 0.0000010000000000  && IKabs(evalcond[1]) < 0.0000010000000000  && IKabs(evalcond[2]) < 0.0000010000000000  && IKabs(evalcond[3]) < 0.0000010000000000  )
{
{
IkReal dummyeval[1];
IkReal gconst40;
gconst40=IKsign((((px)*(px))+((py)*(py))));
dummyeval[0]=(((px)*(px))+((py)*(py)));
if( IKabs(dummyeval[0]) < 0.0000010000000000  )
{
{
IkReal dummyeval[1];
IkReal gconst41;
IkReal x634=((IkReal(1.00000000000000))*(sj22));
gconst41=IKsign(((((IkReal(-1.00000000000000))*(x634)*((py)*(py))))+(((IkReal(-1.00000000000000))*(x634)*((px)*(px))))));
IkReal x635=((IkReal(1.00000000000000))*(sj22));
dummyeval[0]=((((IkReal(-1.00000000000000))*(x635)*((py)*(py))))+(((IkReal(-1.00000000000000))*(x635)*((px)*(px)))));
if( IKabs(dummyeval[0]) < 0.0000010000000000  )
{
{
IkReal evalcond[4];
IkReal x636=((IkReal(0.0300000000000000))*(sj23));
IkReal x637=((IkReal(0.313800000000000))*(cj23));
evalcond[0]=((IkReal(-3.14159265358979))+(IKfmod(((IkReal(3.14159265358979))+(j22)), IkReal(6.28318530717959))));
evalcond[1]=((IkReal(0.190270440000000))+(((IkReal(0.186480000000000))*(cj23)))+(((IkReal(-1.00000000000000))*(pp)))+(((IkReal(-0.0368280000000000))*(sj23))));
evalcond[2]=((IkReal(0.300000000000000))+(((IkReal(-1.00000000000000))*(x636)))+(pz)+(x637));
evalcond[3]=((IkReal(-0.300000000000000))+(((IkReal(-1.00000000000000))*(x637)))+(((IkReal(-1.00000000000000))*(pz)))+(x636));
if( IKabs(evalcond[0]) < 0.0000010000000000  && IKabs(evalcond[1]) < 0.0000010000000000  && IKabs(evalcond[2]) < 0.0000010000000000  && IKabs(evalcond[3]) < 0.0000010000000000  )
{
{
IkReal dummyeval[1];
IkReal gconst42;
gconst42=IKsign((((px)*(px))+((py)*(py))));
dummyeval[0]=(((px)*(px))+((py)*(py)));
if( IKabs(dummyeval[0]) < 0.0000010000000000  )
{
{
IkReal dummyeval[1];
IkReal gconst43;
gconst43=IKsign(((((IkReal(-3.00000000000000))*((px)*(px))))+(((IkReal(-3.00000000000000))*((py)*(py))))));
dummyeval[0]=((((IkReal(-1.00000000000000))*((px)*(px))))+(((IkReal(-1.00000000000000))*((py)*(py)))));
if( IKabs(dummyeval[0]) < 0.0000010000000000  )
{
continue;

} else
{
{
IkReal j20array[1], cj20array[1], sj20array[1];
bool j20valid[1]={false};
_nj20 = 1;
IkReal x638=((IkReal(50.0000000000000))*(pp));
IkReal x639=((IkReal(30.0000000000000))*(pz));
if( IKabs(((gconst43)*(((((IkReal(0.423522000000000))*(py)))+(((IkReal(-1.00000000000000))*(py)*(x638)))+(((IkReal(-1.00000000000000))*(py)*(x639))))))) < IKFAST_ATAN2_MAGTHRESH && IKabs(((gconst43)*(((((IkReal(0.423522000000000))*(px)))+(((IkReal(-1.00000000000000))*(px)*(x639)))+(((IkReal(-1.00000000000000))*(px)*(x638))))))) < IKFAST_ATAN2_MAGTHRESH )
    continue;
j20array[0]=IKatan2(((gconst43)*(((((IkReal(0.423522000000000))*(py)))+(((IkReal(-1.00000000000000))*(py)*(x638)))+(((IkReal(-1.00000000000000))*(py)*(x639)))))), ((gconst43)*(((((IkReal(0.423522000000000))*(px)))+(((IkReal(-1.00000000000000))*(px)*(x639)))+(((IkReal(-1.00000000000000))*(px)*(x638)))))));
sj20array[0]=IKsin(j20array[0]);
cj20array[0]=IKcos(j20array[0]);
if( j20array[0] > IKPI )
{
    j20array[0]-=IK2PI;
}
else if( j20array[0] < -IKPI )
{    j20array[0]+=IK2PI;
}
j20valid[0] = true;
for(int ij20 = 0; ij20 < 1; ++ij20)
{
if( !j20valid[ij20] )
{
    continue;
}
_ij20[0] = ij20; _ij20[1] = -1;
for(int iij20 = ij20+1; iij20 < 1; ++iij20)
{
if( j20valid[iij20] && IKabs(cj20array[ij20]-cj20array[iij20]) < IKFAST_SOLUTION_THRESH && IKabs(sj20array[ij20]-sj20array[iij20]) < IKFAST_SOLUTION_THRESH )
{
    j20valid[iij20]=false; _ij20[1] = iij20; break;
}
}
j20 = j20array[ij20]; cj20 = cj20array[ij20]; sj20 = sj20array[ij20];
{
IkReal evalcond[3];
IkReal x640=IKsin(j20);
IkReal x641=IKcos(j20);
IkReal x642=((py)*(x640));
IkReal x643=((px)*(x641));
evalcond[0]=((IkReal(0.0300000000000000))+(((IkReal(-0.0300000000000000))*(cj23)))+(((IkReal(-1.00000000000000))*(x642)))+(((IkReal(-1.00000000000000))*(x643)))+(((IkReal(-0.313800000000000))*(sj23))));
evalcond[1]=((((IkReal(-1.00000000000000))*(py)*(x641)))+(((px)*(x640))));
evalcond[2]=((IkReal(0.00847044000000000))+(((IkReal(0.0600000000000000))*(x642)))+(((IkReal(0.0600000000000000))*(x643)))+(((IkReal(-0.600000000000000))*(pz)))+(((IkReal(-1.00000000000000))*(pp))));
if( IKabs(evalcond[0]) > 0.000001  || IKabs(evalcond[1]) > 0.000001  || IKabs(evalcond[2]) > 0.000001  )
{
continue;
}
}

rotationfunction0(solutions);
}
}

}

}

} else
{
{
IkReal j20array[1], cj20array[1], sj20array[1];
bool j20valid[1]={false};
_nj20 = 1;
IkReal x644=((IkReal(0.0300000000000000))*(cj23));
IkReal x645=((IkReal(0.313800000000000))*(sj23));
if( IKabs(((gconst42)*(((((IkReal(0.0300000000000000))*(py)))+(((IkReal(-1.00000000000000))*(py)*(x644)))+(((IkReal(-1.00000000000000))*(py)*(x645))))))) < IKFAST_ATAN2_MAGTHRESH && IKabs(((gconst42)*(((((IkReal(-1.00000000000000))*(px)*(x645)))+(((IkReal(-1.00000000000000))*(px)*(x644)))+(((IkReal(0.0300000000000000))*(px))))))) < IKFAST_ATAN2_MAGTHRESH )
    continue;
j20array[0]=IKatan2(((gconst42)*(((((IkReal(0.0300000000000000))*(py)))+(((IkReal(-1.00000000000000))*(py)*(x644)))+(((IkReal(-1.00000000000000))*(py)*(x645)))))), ((gconst42)*(((((IkReal(-1.00000000000000))*(px)*(x645)))+(((IkReal(-1.00000000000000))*(px)*(x644)))+(((IkReal(0.0300000000000000))*(px)))))));
sj20array[0]=IKsin(j20array[0]);
cj20array[0]=IKcos(j20array[0]);
if( j20array[0] > IKPI )
{
    j20array[0]-=IK2PI;
}
else if( j20array[0] < -IKPI )
{    j20array[0]+=IK2PI;
}
j20valid[0] = true;
for(int ij20 = 0; ij20 < 1; ++ij20)
{
if( !j20valid[ij20] )
{
    continue;
}
_ij20[0] = ij20; _ij20[1] = -1;
for(int iij20 = ij20+1; iij20 < 1; ++iij20)
{
if( j20valid[iij20] && IKabs(cj20array[ij20]-cj20array[iij20]) < IKFAST_SOLUTION_THRESH && IKabs(sj20array[ij20]-sj20array[iij20]) < IKFAST_SOLUTION_THRESH )
{
    j20valid[iij20]=false; _ij20[1] = iij20; break;
}
}
j20 = j20array[ij20]; cj20 = cj20array[ij20]; sj20 = sj20array[ij20];
{
IkReal evalcond[3];
IkReal x646=IKsin(j20);
IkReal x647=IKcos(j20);
IkReal x648=((py)*(x646));
IkReal x649=((px)*(x647));
evalcond[0]=((IkReal(0.0300000000000000))+(((IkReal(-0.0300000000000000))*(cj23)))+(((IkReal(-1.00000000000000))*(x649)))+(((IkReal(-1.00000000000000))*(x648)))+(((IkReal(-0.313800000000000))*(sj23))));
evalcond[1]=((((IkReal(-1.00000000000000))*(py)*(x647)))+(((px)*(x646))));
evalcond[2]=((IkReal(0.00847044000000000))+(((IkReal(0.0600000000000000))*(x649)))+(((IkReal(0.0600000000000000))*(x648)))+(((IkReal(-0.600000000000000))*(pz)))+(((IkReal(-1.00000000000000))*(pp))));
if( IKabs(evalcond[0]) > 0.000001  || IKabs(evalcond[1]) > 0.000001  || IKabs(evalcond[2]) > 0.000001  )
{
continue;
}
}

rotationfunction0(solutions);
}
}

}

}

} else
{
IkReal x650=((IkReal(0.0300000000000000))*(sj23));
IkReal x651=((IkReal(0.313800000000000))*(cj23));
evalcond[0]=((IkReal(-3.14159265358979))+(IKfmod(j22, IkReal(6.28318530717959))));
evalcond[1]=((IkReal(0.190270440000000))+(((IkReal(0.186480000000000))*(cj23)))+(((IkReal(-1.00000000000000))*(pp)))+(((IkReal(-0.0368280000000000))*(sj23))));
evalcond[2]=((IkReal(0.300000000000000))+(((IkReal(-1.00000000000000))*(x650)))+(pz)+(x651));
evalcond[3]=((IkReal(-0.300000000000000))+(((IkReal(-1.00000000000000))*(x651)))+(((IkReal(-1.00000000000000))*(pz)))+(x650));
if( IKabs(evalcond[0]) < 0.0000010000000000  && IKabs(evalcond[1]) < 0.0000010000000000  && IKabs(evalcond[2]) < 0.0000010000000000  && IKabs(evalcond[3]) < 0.0000010000000000  )
{
{
IkReal dummyeval[1];
IkReal gconst44;
gconst44=IKsign((((px)*(px))+((py)*(py))));
dummyeval[0]=(((px)*(px))+((py)*(py)));
if( IKabs(dummyeval[0]) < 0.0000010000000000  )
{
{
IkReal dummyeval[1];
IkReal gconst45;
gconst45=IKsign(((((IkReal(3.00000000000000))*((py)*(py))))+(((IkReal(3.00000000000000))*((px)*(px))))));
dummyeval[0]=(((px)*(px))+((py)*(py)));
if( IKabs(dummyeval[0]) < 0.0000010000000000  )
{
continue;

} else
{
{
IkReal j20array[1], cj20array[1], sj20array[1];
bool j20valid[1]={false};
_nj20 = 1;
IkReal x652=((IkReal(50.0000000000000))*(pp));
IkReal x653=((IkReal(30.0000000000000))*(pz));
if( IKabs(((gconst45)*(((((IkReal(0.423522000000000))*(py)))+(((IkReal(-1.00000000000000))*(py)*(x653)))+(((IkReal(-1.00000000000000))*(py)*(x652))))))) < IKFAST_ATAN2_MAGTHRESH && IKabs(((gconst45)*(((((IkReal(0.423522000000000))*(px)))+(((IkReal(-1.00000000000000))*(px)*(x652)))+(((IkReal(-1.00000000000000))*(px)*(x653))))))) < IKFAST_ATAN2_MAGTHRESH )
    continue;
j20array[0]=IKatan2(((gconst45)*(((((IkReal(0.423522000000000))*(py)))+(((IkReal(-1.00000000000000))*(py)*(x653)))+(((IkReal(-1.00000000000000))*(py)*(x652)))))), ((gconst45)*(((((IkReal(0.423522000000000))*(px)))+(((IkReal(-1.00000000000000))*(px)*(x652)))+(((IkReal(-1.00000000000000))*(px)*(x653)))))));
sj20array[0]=IKsin(j20array[0]);
cj20array[0]=IKcos(j20array[0]);
if( j20array[0] > IKPI )
{
    j20array[0]-=IK2PI;
}
else if( j20array[0] < -IKPI )
{    j20array[0]+=IK2PI;
}
j20valid[0] = true;
for(int ij20 = 0; ij20 < 1; ++ij20)
{
if( !j20valid[ij20] )
{
    continue;
}
_ij20[0] = ij20; _ij20[1] = -1;
for(int iij20 = ij20+1; iij20 < 1; ++iij20)
{
if( j20valid[iij20] && IKabs(cj20array[ij20]-cj20array[iij20]) < IKFAST_SOLUTION_THRESH && IKabs(sj20array[ij20]-sj20array[iij20]) < IKFAST_SOLUTION_THRESH )
{
    j20valid[iij20]=false; _ij20[1] = iij20; break;
}
}
j20 = j20array[ij20]; cj20 = cj20array[ij20]; sj20 = sj20array[ij20];
{
IkReal evalcond[3];
IkReal x654=IKcos(j20);
IkReal x655=IKsin(j20);
IkReal x656=((IkReal(1.00000000000000))*(px));
IkReal x657=((py)*(x655));
evalcond[0]=((IkReal(-0.0300000000000000))+(((IkReal(-1.00000000000000))*(x657)))+(((IkReal(0.313800000000000))*(sj23)))+(((IkReal(0.0300000000000000))*(cj23)))+(((IkReal(-1.00000000000000))*(x654)*(x656))));
evalcond[1]=((((py)*(x654)))+(((IkReal(-1.00000000000000))*(x655)*(x656))));
evalcond[2]=((IkReal(0.00847044000000000))+(((IkReal(-0.0600000000000000))*(x657)))+(((IkReal(-0.600000000000000))*(pz)))+(((IkReal(-1.00000000000000))*(pp)))+(((IkReal(-0.0600000000000000))*(px)*(x654))));
if( IKabs(evalcond[0]) > 0.000001  || IKabs(evalcond[1]) > 0.000001  || IKabs(evalcond[2]) > 0.000001  )
{
continue;
}
}

rotationfunction0(solutions);
}
}

}

}

} else
{
{
IkReal j20array[1], cj20array[1], sj20array[1];
bool j20valid[1]={false};
_nj20 = 1;
IkReal x658=((IkReal(0.0300000000000000))*(cj23));
IkReal x659=((IkReal(0.313800000000000))*(sj23));
if( IKabs(((gconst44)*(((((py)*(x659)))+(((py)*(x658)))+(((IkReal(-0.0300000000000000))*(py))))))) < IKFAST_ATAN2_MAGTHRESH && IKabs(((gconst44)*(((((px)*(x659)))+(((px)*(x658)))+(((IkReal(-0.0300000000000000))*(px))))))) < IKFAST_ATAN2_MAGTHRESH )
    continue;
j20array[0]=IKatan2(((gconst44)*(((((py)*(x659)))+(((py)*(x658)))+(((IkReal(-0.0300000000000000))*(py)))))), ((gconst44)*(((((px)*(x659)))+(((px)*(x658)))+(((IkReal(-0.0300000000000000))*(px)))))));
sj20array[0]=IKsin(j20array[0]);
cj20array[0]=IKcos(j20array[0]);
if( j20array[0] > IKPI )
{
    j20array[0]-=IK2PI;
}
else if( j20array[0] < -IKPI )
{    j20array[0]+=IK2PI;
}
j20valid[0] = true;
for(int ij20 = 0; ij20 < 1; ++ij20)
{
if( !j20valid[ij20] )
{
    continue;
}
_ij20[0] = ij20; _ij20[1] = -1;
for(int iij20 = ij20+1; iij20 < 1; ++iij20)
{
if( j20valid[iij20] && IKabs(cj20array[ij20]-cj20array[iij20]) < IKFAST_SOLUTION_THRESH && IKabs(sj20array[ij20]-sj20array[iij20]) < IKFAST_SOLUTION_THRESH )
{
    j20valid[iij20]=false; _ij20[1] = iij20; break;
}
}
j20 = j20array[ij20]; cj20 = cj20array[ij20]; sj20 = sj20array[ij20];
{
IkReal evalcond[3];
IkReal x660=IKcos(j20);
IkReal x661=IKsin(j20);
IkReal x662=((IkReal(1.00000000000000))*(px));
IkReal x663=((py)*(x661));
evalcond[0]=((IkReal(-0.0300000000000000))+(((IkReal(-1.00000000000000))*(x660)*(x662)))+(((IkReal(-1.00000000000000))*(x663)))+(((IkReal(0.313800000000000))*(sj23)))+(((IkReal(0.0300000000000000))*(cj23))));
evalcond[1]=((((IkReal(-1.00000000000000))*(x661)*(x662)))+(((py)*(x660))));
evalcond[2]=((IkReal(0.00847044000000000))+(((IkReal(-0.600000000000000))*(pz)))+(((IkReal(-1.00000000000000))*(pp)))+(((IkReal(-0.0600000000000000))*(px)*(x660)))+(((IkReal(-0.0600000000000000))*(x663))));
if( IKabs(evalcond[0]) > 0.000001  || IKabs(evalcond[1]) > 0.000001  || IKabs(evalcond[2]) > 0.000001  )
{
continue;
}
}

rotationfunction0(solutions);
}
}

}

}

} else
{
if( 1 )
{
continue;

} else
{
}
}
}
}

} else
{
{
IkReal j20array[1], cj20array[1], sj20array[1];
bool j20valid[1]={false};
_nj20 = 1;
IkReal x664=(sj22)*(sj22);
IkReal x665=((IkReal(0.0300000000000000))*(cj23));
IkReal x666=((IkReal(0.313800000000000))*(sj23));
IkReal x667=((cj22)*(px)*(sj22));
IkReal x668=((py)*(x664));
IkReal x669=((px)*(x664));
IkReal x670=((cj22)*(py)*(sj22));
if( IKabs(((gconst41)*(((((IkReal(-1.00000000000000))*(x665)*(x669)))+(((x665)*(x670)))+(((x666)*(x670)))+(((IkReal(0.0300000000000000))*(x669)))+(((IkReal(-1.00000000000000))*(x666)*(x669)))+(((IkReal(-0.0300000000000000))*(x670))))))) < IKFAST_ATAN2_MAGTHRESH && IKabs(((gconst41)*(((((IkReal(-0.0300000000000000))*(x667)))+(((IkReal(-0.0300000000000000))*(x668)))+(((x666)*(x668)))+(((x666)*(x667)))+(((x665)*(x667)))+(((x665)*(x668))))))) < IKFAST_ATAN2_MAGTHRESH )
    continue;
j20array[0]=IKatan2(((gconst41)*(((((IkReal(-1.00000000000000))*(x665)*(x669)))+(((x665)*(x670)))+(((x666)*(x670)))+(((IkReal(0.0300000000000000))*(x669)))+(((IkReal(-1.00000000000000))*(x666)*(x669)))+(((IkReal(-0.0300000000000000))*(x670)))))), ((gconst41)*(((((IkReal(-0.0300000000000000))*(x667)))+(((IkReal(-0.0300000000000000))*(x668)))+(((x666)*(x668)))+(((x666)*(x667)))+(((x665)*(x667)))+(((x665)*(x668)))))));
sj20array[0]=IKsin(j20array[0]);
cj20array[0]=IKcos(j20array[0]);
if( j20array[0] > IKPI )
{
    j20array[0]-=IK2PI;
}
else if( j20array[0] < -IKPI )
{    j20array[0]+=IK2PI;
}
j20valid[0] = true;
for(int ij20 = 0; ij20 < 1; ++ij20)
{
if( !j20valid[ij20] )
{
    continue;
}
_ij20[0] = ij20; _ij20[1] = -1;
for(int iij20 = ij20+1; iij20 < 1; ++iij20)
{
if( j20valid[iij20] && IKabs(cj20array[ij20]-cj20array[iij20]) < IKFAST_SOLUTION_THRESH && IKabs(sj20array[ij20]-sj20array[iij20]) < IKFAST_SOLUTION_THRESH )
{
    j20valid[iij20]=false; _ij20[1] = iij20; break;
}
}
j20 = j20array[ij20]; cj20 = cj20array[ij20]; sj20 = sj20array[ij20];
{
IkReal evalcond[5];
IkReal x671=IKsin(j20);
IkReal x672=IKcos(j20);
IkReal x673=((IkReal(0.313800000000000))*(sj23));
IkReal x674=((IkReal(1.00000000000000))*(py));
IkReal x675=((IkReal(0.0300000000000000))*(cj23));
IkReal x676=((py)*(sj22));
IkReal x677=((cj22)*(x671));
IkReal x678=((px)*(x672));
IkReal x679=((px)*(x671));
evalcond[0]=((((IkReal(-1.00000000000000))*(cj22)*(x673)))+(((IkReal(-1.00000000000000))*(cj22)*(x675)))+(((IkReal(-1.00000000000000))*(x678)))+(((IkReal(-1.00000000000000))*(x671)*(x674)))+(((IkReal(0.0300000000000000))*(cj22))));
evalcond[1]=((((x671)*(x676)))+(((sj22)*(x678)))+(((IkReal(-1.00000000000000))*(cj22)*(x672)*(x674)))+(((px)*(x677))));
evalcond[2]=((IkReal(0.0300000000000000))+(((IkReal(-1.00000000000000))*(sj22)*(x672)*(x674)))+(((IkReal(-1.00000000000000))*(cj22)*(x678)))+(((sj22)*(x679)))+(((IkReal(-1.00000000000000))*(x674)*(x677)))+(((IkReal(-1.00000000000000))*(x675)))+(((IkReal(-1.00000000000000))*(x673))));
evalcond[3]=((((IkReal(0.0300000000000000))*(sj22)))+(x679)+(((IkReal(-1.00000000000000))*(sj22)*(x673)))+(((IkReal(-1.00000000000000))*(sj22)*(x675)))+(((IkReal(-1.00000000000000))*(x672)*(x674))));
evalcond[4]=((IkReal(0.00847044000000000))+(((IkReal(0.0600000000000000))*(cj22)*(x678)))+(((IkReal(-0.0600000000000000))*(sj22)*(x679)))+(((IkReal(-0.600000000000000))*(pz)))+(((IkReal(0.0600000000000000))*(x672)*(x676)))+(((IkReal(-1.00000000000000))*(pp)))+(((IkReal(0.0600000000000000))*(py)*(x677))));
if( IKabs(evalcond[0]) > 0.000001  || IKabs(evalcond[1]) > 0.000001  || IKabs(evalcond[2]) > 0.000001  || IKabs(evalcond[3]) > 0.000001  || IKabs(evalcond[4]) > 0.000001  )
{
continue;
}
}

rotationfunction0(solutions);
}
}

}

}

} else
{
{
IkReal j20array[1], cj20array[1], sj20array[1];
bool j20valid[1]={false};
_nj20 = 1;
IkReal x680=((py)*(sj22));
IkReal x681=((IkReal(0.313800000000000))*(sj23));
IkReal x682=((IkReal(0.0300000000000000))*(px));
IkReal x683=((cj22)*(py));
IkReal x684=((IkReal(0.0300000000000000))*(cj23));
if( IKabs(((gconst40)*(((((IkReal(0.0300000000000000))*(x683)))+(((IkReal(-1.00000000000000))*(x681)*(x683)))+(((px)*(sj22)*(x681)))+(((cj23)*(sj22)*(x682)))+(((IkReal(-1.00000000000000))*(sj22)*(x682)))+(((IkReal(-1.00000000000000))*(x683)*(x684))))))) < IKFAST_ATAN2_MAGTHRESH && IKabs(((gconst40)*(((((IkReal(0.0300000000000000))*(x680)))+(((IkReal(-1.00000000000000))*(x680)*(x684)))+(((IkReal(-1.00000000000000))*(x680)*(x681)))+(((cj22)*(x682)))+(((IkReal(-1.00000000000000))*(cj22)*(px)*(x681)))+(((IkReal(-1.00000000000000))*(cj22)*(cj23)*(x682))))))) < IKFAST_ATAN2_MAGTHRESH )
    continue;
j20array[0]=IKatan2(((gconst40)*(((((IkReal(0.0300000000000000))*(x683)))+(((IkReal(-1.00000000000000))*(x681)*(x683)))+(((px)*(sj22)*(x681)))+(((cj23)*(sj22)*(x682)))+(((IkReal(-1.00000000000000))*(sj22)*(x682)))+(((IkReal(-1.00000000000000))*(x683)*(x684)))))), ((gconst40)*(((((IkReal(0.0300000000000000))*(x680)))+(((IkReal(-1.00000000000000))*(x680)*(x684)))+(((IkReal(-1.00000000000000))*(x680)*(x681)))+(((cj22)*(x682)))+(((IkReal(-1.00000000000000))*(cj22)*(px)*(x681)))+(((IkReal(-1.00000000000000))*(cj22)*(cj23)*(x682)))))));
sj20array[0]=IKsin(j20array[0]);
cj20array[0]=IKcos(j20array[0]);
if( j20array[0] > IKPI )
{
    j20array[0]-=IK2PI;
}
else if( j20array[0] < -IKPI )
{    j20array[0]+=IK2PI;
}
j20valid[0] = true;
for(int ij20 = 0; ij20 < 1; ++ij20)
{
if( !j20valid[ij20] )
{
    continue;
}
_ij20[0] = ij20; _ij20[1] = -1;
for(int iij20 = ij20+1; iij20 < 1; ++iij20)
{
if( j20valid[iij20] && IKabs(cj20array[ij20]-cj20array[iij20]) < IKFAST_SOLUTION_THRESH && IKabs(sj20array[ij20]-sj20array[iij20]) < IKFAST_SOLUTION_THRESH )
{
    j20valid[iij20]=false; _ij20[1] = iij20; break;
}
}
j20 = j20array[ij20]; cj20 = cj20array[ij20]; sj20 = sj20array[ij20];
{
IkReal evalcond[5];
IkReal x685=IKsin(j20);
IkReal x686=IKcos(j20);
IkReal x687=((IkReal(0.313800000000000))*(sj23));
IkReal x688=((IkReal(1.00000000000000))*(py));
IkReal x689=((IkReal(0.0300000000000000))*(cj23));
IkReal x690=((py)*(sj22));
IkReal x691=((cj22)*(x685));
IkReal x692=((px)*(x686));
IkReal x693=((px)*(x685));
evalcond[0]=((((IkReal(-1.00000000000000))*(x685)*(x688)))+(((IkReal(-1.00000000000000))*(cj22)*(x689)))+(((IkReal(-1.00000000000000))*(cj22)*(x687)))+(((IkReal(0.0300000000000000))*(cj22)))+(((IkReal(-1.00000000000000))*(x692))));
evalcond[1]=((((sj22)*(x692)))+(((IkReal(-1.00000000000000))*(cj22)*(x686)*(x688)))+(((px)*(x691)))+(((x685)*(x690))));
evalcond[2]=((IkReal(0.0300000000000000))+(((sj22)*(x693)))+(((IkReal(-1.00000000000000))*(x689)))+(((IkReal(-1.00000000000000))*(x687)))+(((IkReal(-1.00000000000000))*(sj22)*(x686)*(x688)))+(((IkReal(-1.00000000000000))*(x688)*(x691)))+(((IkReal(-1.00000000000000))*(cj22)*(x692))));
evalcond[3]=((((IkReal(0.0300000000000000))*(sj22)))+(((IkReal(-1.00000000000000))*(x686)*(x688)))+(x693)+(((IkReal(-1.00000000000000))*(sj22)*(x687)))+(((IkReal(-1.00000000000000))*(sj22)*(x689))));
evalcond[4]=((IkReal(0.00847044000000000))+(((IkReal(0.0600000000000000))*(x686)*(x690)))+(((IkReal(-0.600000000000000))*(pz)))+(((IkReal(0.0600000000000000))*(cj22)*(x692)))+(((IkReal(0.0600000000000000))*(py)*(x691)))+(((IkReal(-0.0600000000000000))*(sj22)*(x693)))+(((IkReal(-1.00000000000000))*(pp))));
if( IKabs(evalcond[0]) > 0.000001  || IKabs(evalcond[1]) > 0.000001  || IKabs(evalcond[2]) > 0.000001  || IKabs(evalcond[3]) > 0.000001  || IKabs(evalcond[4]) > 0.000001  )
{
continue;
}
}

rotationfunction0(solutions);
}
}

}

}

} else
{
if( 1 )
{
continue;

} else
{
}
}
}
}
}
}
}
}

} else
{
{
IkReal j20array[1], cj20array[1], sj20array[1];
bool j20valid[1]={false};
_nj20 = 1;
IkReal x694=(cj22)*(cj22);
IkReal x695=((IkReal(0.0300000000000000))*(px));
IkReal x696=((IkReal(0.0300000000000000))*(py));
IkReal x697=((cj22)*(sj22));
IkReal x698=((IkReal(0.313800000000000))*(sj23));
IkReal x699=((cj23)*(x697));
IkReal x700=((sj21)*(x694));
IkReal x701=((cj21)*(cj22)*(pz));
if( IKabs(((gconst1)*(((((IkReal(-1.00000000000000))*(px)*(x701)))+(((x695)*(x697)))+(((IkReal(-1.00000000000000))*(x695)*(x699)))+(((x696)*(x700)))+(((IkReal(-1.00000000000000))*(py)*(x698)*(x700)))+(((IkReal(-1.00000000000000))*(cj23)*(x696)*(x700)))+(((IkReal(-1.00000000000000))*(px)*(x697)*(x698))))))) < IKFAST_ATAN2_MAGTHRESH && IKabs(((gconst1)*(((((IkReal(-1.00000000000000))*(cj23)*(x695)*(x700)))+(((IkReal(-1.00000000000000))*(x696)*(x697)))+(((x696)*(x699)))+(((py)*(x697)*(x698)))+(((x695)*(x700)))+(((IkReal(-1.00000000000000))*(px)*(x698)*(x700)))+(((py)*(x701))))))) < IKFAST_ATAN2_MAGTHRESH )
    continue;
j20array[0]=IKatan2(((gconst1)*(((((IkReal(-1.00000000000000))*(px)*(x701)))+(((x695)*(x697)))+(((IkReal(-1.00000000000000))*(x695)*(x699)))+(((x696)*(x700)))+(((IkReal(-1.00000000000000))*(py)*(x698)*(x700)))+(((IkReal(-1.00000000000000))*(cj23)*(x696)*(x700)))+(((IkReal(-1.00000000000000))*(px)*(x697)*(x698)))))), ((gconst1)*(((((IkReal(-1.00000000000000))*(cj23)*(x695)*(x700)))+(((IkReal(-1.00000000000000))*(x696)*(x697)))+(((x696)*(x699)))+(((py)*(x697)*(x698)))+(((x695)*(x700)))+(((IkReal(-1.00000000000000))*(px)*(x698)*(x700)))+(((py)*(x701)))))));
sj20array[0]=IKsin(j20array[0]);
cj20array[0]=IKcos(j20array[0]);
if( j20array[0] > IKPI )
{
    j20array[0]-=IK2PI;
}
else if( j20array[0] < -IKPI )
{    j20array[0]+=IK2PI;
}
j20valid[0] = true;
for(int ij20 = 0; ij20 < 1; ++ij20)
{
if( !j20valid[ij20] )
{
    continue;
}
_ij20[0] = ij20; _ij20[1] = -1;
for(int iij20 = ij20+1; iij20 < 1; ++iij20)
{
if( j20valid[iij20] && IKabs(cj20array[ij20]-cj20array[iij20]) < IKFAST_SOLUTION_THRESH && IKabs(sj20array[ij20]-sj20array[iij20]) < IKFAST_SOLUTION_THRESH )
{
    j20valid[iij20]=false; _ij20[1] = iij20; break;
}
}
j20 = j20array[ij20]; cj20 = cj20array[ij20]; sj20 = sj20array[ij20];
{
IkReal evalcond[6];
IkReal x702=IKsin(j20);
IkReal x703=IKcos(j20);
IkReal x704=((IkReal(0.0300000000000000))*(sj23));
IkReal x705=((IkReal(0.313800000000000))*(cj23));
IkReal x706=((IkReal(0.313800000000000))*(sj23));
IkReal x707=((IkReal(1.00000000000000))*(py));
IkReal x708=((px)*(sj21));
IkReal x709=((IkReal(0.0300000000000000))*(cj23));
IkReal x710=((sj21)*(sj22));
IkReal x711=((IkReal(1.00000000000000))*(cj22));
IkReal x712=((pz)*(sj21));
IkReal x713=((cj21)*(pz));
IkReal x714=((cj22)*(x702));
IkReal x715=((cj21)*(x703));
IkReal x716=((sj22)*(x702));
IkReal x717=((px)*(x702));
IkReal x718=((py)*(x703));
IkReal x719=((px)*(x703));
evalcond[0]=((((IkReal(-1.00000000000000))*(x702)*(x707)))+(((IkReal(-1.00000000000000))*(x719)))+(((IkReal(0.0300000000000000))*(cj22)))+(((IkReal(-1.00000000000000))*(cj22)*(x709)))+(((IkReal(-1.00000000000000))*(cj22)*(x706))));
evalcond[1]=((IkReal(0.300000000000000))+(((IkReal(-1.00000000000000))*(x707)*(x715)))+(((IkReal(-1.00000000000000))*(x712)))+(((IkReal(-1.00000000000000))*(x704)))+(((cj21)*(x717)))+(x705));
evalcond[2]=((((IkReal(-1.00000000000000))*(x711)*(x713)))+(((cj22)*(sj21)*(x718)))+(((sj22)*(x719)))+(((IkReal(-1.00000000000000))*(x702)*(x708)*(x711)))+(((py)*(x716))));
evalcond[3]=((IkReal(0.0300000000000000))+(((IkReal(-1.00000000000000))*(sj22)*(x713)))+(((IkReal(-1.00000000000000))*(x707)*(x714)))+(((IkReal(-1.00000000000000))*(x711)*(x719)))+(((IkReal(-1.00000000000000))*(x708)*(x716)))+(((x710)*(x718)))+(((IkReal(-1.00000000000000))*(x709)))+(((IkReal(-1.00000000000000))*(x706))));
evalcond[4]=((((IkReal(-0.0300000000000000))*(x710)))+(((x706)*(x710)))+(((IkReal(-1.00000000000000))*(x703)*(x707)))+(((x709)*(x710)))+(((cj21)*(x705)))+(((IkReal(-1.00000000000000))*(cj21)*(x704)))+(x717)+(((IkReal(0.300000000000000))*(cj21))));
evalcond[5]=((IkReal(0.00847044000000000))+(((IkReal(0.0600000000000000))*(sj22)*(x713)))+(((IkReal(-0.0600000000000000))*(x710)*(x718)))+(((IkReal(0.0600000000000000))*(x708)*(x716)))+(((IkReal(-1.00000000000000))*(pp)))+(((IkReal(0.0600000000000000))*(py)*(x714)))+(((IkReal(0.600000000000000))*(py)*(x715)))+(((IkReal(-0.600000000000000))*(cj21)*(x717)))+(((IkReal(0.600000000000000))*(x712)))+(((IkReal(0.0600000000000000))*(cj22)*(x719))));
if( IKabs(evalcond[0]) > 0.000001  || IKabs(evalcond[1]) > 0.000001  || IKabs(evalcond[2]) > 0.000001  || IKabs(evalcond[3]) > 0.000001  || IKabs(evalcond[4]) > 0.000001  || IKabs(evalcond[5]) > 0.000001  )
{
continue;
}
}

rotationfunction0(solutions);
}
}

}

}

} else
{
{
IkReal j20array[1], cj20array[1], sj20array[1];
bool j20valid[1]={false};
_nj20 = 1;
IkReal x720=((pz)*(sj21));
IkReal x721=((cj23)*(px));
IkReal x722=((cj23)*(py));
IkReal x723=((IkReal(0.0300000000000000))*(sj23));
IkReal x724=((IkReal(0.0300000000000000))*(cj21)*(cj22));
IkReal x725=((IkReal(0.313800000000000))*(cj21)*(cj22)*(sj23));
if( IKabs(((gconst0)*(((((IkReal(-0.300000000000000))*(px)))+(((IkReal(-1.00000000000000))*(x722)*(x724)))+(((IkReal(-0.313800000000000))*(x721)))+(((py)*(x724)))+(((px)*(x720)))+(((px)*(x723)))+(((IkReal(-1.00000000000000))*(py)*(x725))))))) < IKFAST_ATAN2_MAGTHRESH && IKabs(((gconst0)*(((((IkReal(0.300000000000000))*(py)))+(((IkReal(-1.00000000000000))*(px)*(x725)))+(((IkReal(0.313800000000000))*(x722)))+(((IkReal(-1.00000000000000))*(x721)*(x724)))+(((IkReal(-1.00000000000000))*(py)*(x720)))+(((px)*(x724)))+(((IkReal(-1.00000000000000))*(py)*(x723))))))) < IKFAST_ATAN2_MAGTHRESH )
    continue;
j20array[0]=IKatan2(((gconst0)*(((((IkReal(-0.300000000000000))*(px)))+(((IkReal(-1.00000000000000))*(x722)*(x724)))+(((IkReal(-0.313800000000000))*(x721)))+(((py)*(x724)))+(((px)*(x720)))+(((px)*(x723)))+(((IkReal(-1.00000000000000))*(py)*(x725)))))), ((gconst0)*(((((IkReal(0.300000000000000))*(py)))+(((IkReal(-1.00000000000000))*(px)*(x725)))+(((IkReal(0.313800000000000))*(x722)))+(((IkReal(-1.00000000000000))*(x721)*(x724)))+(((IkReal(-1.00000000000000))*(py)*(x720)))+(((px)*(x724)))+(((IkReal(-1.00000000000000))*(py)*(x723)))))));
sj20array[0]=IKsin(j20array[0]);
cj20array[0]=IKcos(j20array[0]);
if( j20array[0] > IKPI )
{
    j20array[0]-=IK2PI;
}
else if( j20array[0] < -IKPI )
{    j20array[0]+=IK2PI;
}
j20valid[0] = true;
for(int ij20 = 0; ij20 < 1; ++ij20)
{
if( !j20valid[ij20] )
{
    continue;
}
_ij20[0] = ij20; _ij20[1] = -1;
for(int iij20 = ij20+1; iij20 < 1; ++iij20)
{
if( j20valid[iij20] && IKabs(cj20array[ij20]-cj20array[iij20]) < IKFAST_SOLUTION_THRESH && IKabs(sj20array[ij20]-sj20array[iij20]) < IKFAST_SOLUTION_THRESH )
{
    j20valid[iij20]=false; _ij20[1] = iij20; break;
}
}
j20 = j20array[ij20]; cj20 = cj20array[ij20]; sj20 = sj20array[ij20];
{
IkReal evalcond[6];
IkReal x726=IKsin(j20);
IkReal x727=IKcos(j20);
IkReal x728=((IkReal(0.0300000000000000))*(sj23));
IkReal x729=((IkReal(0.313800000000000))*(cj23));
IkReal x730=((IkReal(0.313800000000000))*(sj23));
IkReal x731=((IkReal(1.00000000000000))*(py));
IkReal x732=((px)*(sj21));
IkReal x733=((IkReal(0.0300000000000000))*(cj23));
IkReal x734=((sj21)*(sj22));
IkReal x735=((IkReal(1.00000000000000))*(cj22));
IkReal x736=((pz)*(sj21));
IkReal x737=((cj21)*(pz));
IkReal x738=((cj22)*(x726));
IkReal x739=((cj21)*(x727));
IkReal x740=((sj22)*(x726));
IkReal x741=((px)*(x726));
IkReal x742=((py)*(x727));
IkReal x743=((px)*(x727));
evalcond[0]=((((IkReal(-1.00000000000000))*(cj22)*(x730)))+(((IkReal(-1.00000000000000))*(cj22)*(x733)))+(((IkReal(-1.00000000000000))*(x743)))+(((IkReal(0.0300000000000000))*(cj22)))+(((IkReal(-1.00000000000000))*(x726)*(x731))));
evalcond[1]=((IkReal(0.300000000000000))+(((IkReal(-1.00000000000000))*(x731)*(x739)))+(((cj21)*(x741)))+(((IkReal(-1.00000000000000))*(x736)))+(((IkReal(-1.00000000000000))*(x728)))+(x729));
evalcond[2]=((((py)*(x740)))+(((IkReal(-1.00000000000000))*(x726)*(x732)*(x735)))+(((sj22)*(x743)))+(((IkReal(-1.00000000000000))*(x735)*(x737)))+(((cj22)*(sj21)*(x742))));
evalcond[3]=((IkReal(0.0300000000000000))+(((x734)*(x742)))+(((IkReal(-1.00000000000000))*(x731)*(x738)))+(((IkReal(-1.00000000000000))*(x732)*(x740)))+(((IkReal(-1.00000000000000))*(x733)))+(((IkReal(-1.00000000000000))*(x730)))+(((IkReal(-1.00000000000000))*(sj22)*(x737)))+(((IkReal(-1.00000000000000))*(x735)*(x743))));
evalcond[4]=((((IkReal(-1.00000000000000))*(x727)*(x731)))+(((x733)*(x734)))+(((IkReal(-1.00000000000000))*(cj21)*(x728)))+(x741)+(((cj21)*(x729)))+(((IkReal(0.300000000000000))*(cj21)))+(((IkReal(-0.0300000000000000))*(x734)))+(((x730)*(x734))));
evalcond[5]=((IkReal(0.00847044000000000))+(((IkReal(0.0600000000000000))*(x732)*(x740)))+(((IkReal(-0.600000000000000))*(cj21)*(x741)))+(((IkReal(0.0600000000000000))*(cj22)*(x743)))+(((IkReal(0.0600000000000000))*(sj22)*(x737)))+(((IkReal(0.600000000000000))*(x736)))+(((IkReal(-1.00000000000000))*(pp)))+(((IkReal(-0.0600000000000000))*(x734)*(x742)))+(((IkReal(0.600000000000000))*(py)*(x739)))+(((IkReal(0.0600000000000000))*(py)*(x738))));
if( IKabs(evalcond[0]) > 0.000001  || IKabs(evalcond[1]) > 0.000001  || IKabs(evalcond[2]) > 0.000001  || IKabs(evalcond[3]) > 0.000001  || IKabs(evalcond[4]) > 0.000001  || IKabs(evalcond[5]) > 0.000001  )
{
continue;
}
}

rotationfunction0(solutions);
}
}

}

}
}
}

}

}

} else
{
{
IkReal j20array[2], cj20array[2], sj20array[2];
bool j20valid[2]={false};
_nj20 = 2;
IkReal x744=((IkReal(0.0300000000000000))*(cj22));
if( IKabs(((IkReal(-1.00000000000000))*(px))) < IKFAST_ATAN2_MAGTHRESH && IKabs(((IkReal(-1.00000000000000))*(py))) < IKFAST_ATAN2_MAGTHRESH )
    continue;
IkReal x745=((IkReal(1.00000000000000))*(IKatan2(((IkReal(-1.00000000000000))*(px)), ((IkReal(-1.00000000000000))*(py)))));
if( ((((px)*(px))+((py)*(py)))) < (IkReal)-0.00001 )
    continue;
if( (((((IKabs(IKabs(IKsqrt((((px)*(px))+((py)*(py)))))) != 0)?((IkReal)1/(IKabs(IKsqrt((((px)*(px))+((py)*(py))))))):(IkReal)1.0e30))*(((((IkReal(-1.00000000000000))*(cj23)*(x744)))+(((IkReal(-0.313800000000000))*(cj22)*(sj23)))+(x744))))) < -1-IKFAST_SINCOS_THRESH || (((((IKabs(IKabs(IKsqrt((((px)*(px))+((py)*(py)))))) != 0)?((IkReal)1/(IKabs(IKsqrt((((px)*(px))+((py)*(py))))))):(IkReal)1.0e30))*(((((IkReal(-1.00000000000000))*(cj23)*(x744)))+(((IkReal(-0.313800000000000))*(cj22)*(sj23)))+(x744))))) > 1+IKFAST_SINCOS_THRESH )
    continue;
IkReal x746=IKasin(((((IKabs(IKabs(IKsqrt((((px)*(px))+((py)*(py)))))) != 0)?((IkReal)1/(IKabs(IKsqrt((((px)*(px))+((py)*(py))))))):(IkReal)1.0e30))*(((((IkReal(-1.00000000000000))*(cj23)*(x744)))+(((IkReal(-0.313800000000000))*(cj22)*(sj23)))+(x744)))));
j20array[0]=((((IkReal(-1.00000000000000))*(x746)))+(((IkReal(-1.00000000000000))*(x745))));
sj20array[0]=IKsin(j20array[0]);
cj20array[0]=IKcos(j20array[0]);
j20array[1]=((IkReal(3.14159265358979))+(x746)+(((IkReal(-1.00000000000000))*(x745))));
sj20array[1]=IKsin(j20array[1]);
cj20array[1]=IKcos(j20array[1]);
if( j20array[0] > IKPI )
{
    j20array[0]-=IK2PI;
}
else if( j20array[0] < -IKPI )
{    j20array[0]+=IK2PI;
}
j20valid[0] = true;
if( j20array[1] > IKPI )
{
    j20array[1]-=IK2PI;
}
else if( j20array[1] < -IKPI )
{    j20array[1]+=IK2PI;
}
j20valid[1] = true;
for(int ij20 = 0; ij20 < 2; ++ij20)
{
if( !j20valid[ij20] )
{
    continue;
}
_ij20[0] = ij20; _ij20[1] = -1;
for(int iij20 = ij20+1; iij20 < 2; ++iij20)
{
if( j20valid[iij20] && IKabs(cj20array[ij20]-cj20array[iij20]) < IKFAST_SOLUTION_THRESH && IKabs(sj20array[ij20]-sj20array[iij20]) < IKFAST_SOLUTION_THRESH )
{
    j20valid[iij20]=false; _ij20[1] = iij20; break;
}
}
j20 = j20array[ij20]; cj20 = cj20array[ij20]; sj20 = sj20array[ij20];
{
IkReal evalcond[2];
IkReal x747=(px)*(px);
IkReal x748=(cj22)*(cj22);
IkReal x749=(sj22)*(sj22);
IkReal x750=(py)*(py);
IkReal x751=IKsin(j20);
IkReal x752=IKcos(j20);
IkReal x753=((px)*(py));
IkReal x754=((IkReal(0.0300000000000000))*(cj22));
IkReal x755=((IkReal(1.00000000000000))*(x749));
IkReal x756=((IkReal(0.313800000000000))*(cj22)*(sj23));
IkReal x757=((IkReal(1.00000000000000))*(x748));
evalcond[0]=((((x752)*(((((IkReal(-1.00000000000000))*(x747)*(x755)))+(((IkReal(-1.00000000000000))*(x747)*(x757)))))))+(((IkReal(-1.00000000000000))*(px)*(x756)))+(((px)*(x754)))+(((x751)*(((((IkReal(-1.00000000000000))*(x753)*(x757)))+(((IkReal(-1.00000000000000))*(x753)*(x755)))))))+(((IkReal(-1.00000000000000))*(cj23)*(px)*(x754))));
evalcond[1]=((((py)*(x756)))+(((x752)*(((((x749)*(x753)))+(((x748)*(x753)))))))+(((IkReal(-1.00000000000000))*(py)*(x754)))+(((cj23)*(py)*(x754)))+(((x751)*(((((x749)*(x750)))+(((x748)*(x750))))))));
if( IKabs(evalcond[0]) > 0.000001  || IKabs(evalcond[1]) > 0.000001  )
{
continue;
}
}

{
IkReal dummyeval[1];
IkReal gconst47;
IkReal x758=((px)*(sj20));
IkReal x759=((IkReal(0.0300000000000000))*(sj23));
IkReal x760=((IkReal(0.313800000000000))*(cj23));
IkReal x761=((cj20)*(py));
IkReal x762=((IkReal(0.0300000000000000))*(pz)*(sj22));
gconst47=IKsign(((((x759)*(x761)))+(((IkReal(-0.313800000000000))*(pz)*(sj22)*(sj23)))+(((x758)*(x760)))+(((IkReal(0.300000000000000))*(x758)))+(((IkReal(-1.00000000000000))*(cj23)*(x762)))+(((IkReal(-0.300000000000000))*(x761)))+(x762)+(((IkReal(-1.00000000000000))*(x758)*(x759)))+(((IkReal(-1.00000000000000))*(x760)*(x761)))));
IkReal x763=((px)*(sj20));
IkReal x764=((IkReal(10.4600000000000))*(cj23));
IkReal x765=((pz)*(sj22));
IkReal x766=((cj20)*(py));
dummyeval[0]=((((IkReal(-1.00000000000000))*(sj23)*(x763)))+(((IkReal(-1.00000000000000))*(x764)*(x766)))+(((x763)*(x764)))+(((IkReal(-1.00000000000000))*(cj23)*(x765)))+(((IkReal(-10.4600000000000))*(sj23)*(x765)))+(x765)+(((IkReal(-10.0000000000000))*(x766)))+(((IkReal(10.0000000000000))*(x763)))+(((sj23)*(x766))));
if( IKabs(dummyeval[0]) < 0.0000010000000000  )
{
{
IkReal dummyeval[1];
IkReal gconst46;
gconst46=IKsign(((((cj22)*((px)*(px))*((sj20)*(sj20))))+(((IkReal(-2.00000000000000))*(cj20)*(cj22)*(px)*(py)*(sj20)))+(((cj22)*((cj20)*(cj20))*((py)*(py))))+(((cj22)*((pz)*(pz))))));
dummyeval[0]=((((cj22)*((px)*(px))*((sj20)*(sj20))))+(((IkReal(-2.00000000000000))*(cj20)*(cj22)*(px)*(py)*(sj20)))+(((cj22)*((cj20)*(cj20))*((py)*(py))))+(((cj22)*((pz)*(pz)))));
if( IKabs(dummyeval[0]) < 0.0000010000000000  )
{
{
IkReal evalcond[4];
IkReal x767=((py)*(sj20));
IkReal x768=((cj20)*(px));
evalcond[0]=((IkReal(-3.14159265358979))+(IKfmod(((IkReal(1.57079632679490))+(j22)), IkReal(6.28318530717959))));
evalcond[1]=((IkReal(0.190270440000000))+(((IkReal(0.186480000000000))*(cj23)))+(((IkReal(-1.00000000000000))*(pp)))+(((IkReal(-0.0368280000000000))*(sj23))));
evalcond[2]=((((IkReal(-1.00000000000000))*(x767)))+(((IkReal(-1.00000000000000))*(x768))));
evalcond[3]=((x768)+(x767));
if( IKabs(evalcond[0]) < 0.0000010000000000  && IKabs(evalcond[1]) < 0.0000010000000000  && IKabs(evalcond[2]) < 0.0000010000000000  && IKabs(evalcond[3]) < 0.0000010000000000  )
{
{
IkReal dummyeval[1];
IkReal gconst49;
IkReal x769=((px)*(sj20));
IkReal x770=((IkReal(0.313800000000000))*(cj23));
IkReal x771=((IkReal(0.0300000000000000))*(sj23));
IkReal x772=((cj20)*(py));
IkReal x773=((IkReal(0.0300000000000000))*(pz));
gconst49=IKsign(((((IkReal(-1.00000000000000))*(cj23)*(x773)))+(((x771)*(x772)))+(((x769)*(x770)))+(((IkReal(-0.300000000000000))*(x772)))+(((IkReal(-1.00000000000000))*(x769)*(x771)))+(((IkReal(-0.313800000000000))*(pz)*(sj23)))+(x773)+(((IkReal(0.300000000000000))*(x769)))+(((IkReal(-1.00000000000000))*(x770)*(x772)))));
IkReal x774=((px)*(sj20));
IkReal x775=((IkReal(10.4600000000000))*(cj23));
IkReal x776=((cj20)*(py));
dummyeval[0]=((((x774)*(x775)))+(((IkReal(-1.00000000000000))*(sj23)*(x774)))+(((IkReal(-10.4600000000000))*(pz)*(sj23)))+(((sj23)*(x776)))+(((IkReal(-10.0000000000000))*(x776)))+(pz)+(((IkReal(-1.00000000000000))*(x775)*(x776)))+(((IkReal(10.0000000000000))*(x774)))+(((IkReal(-1.00000000000000))*(cj23)*(pz))));
if( IKabs(dummyeval[0]) < 0.0000010000000000  )
{
{
IkReal dummyeval[1];
IkReal gconst48;
gconst48=IKsign((((((cj20)*(cj20))*((py)*(py))))+((pz)*(pz))+(((IkReal(-2.00000000000000))*(cj20)*(px)*(py)*(sj20)))+((((px)*(px))*((sj20)*(sj20))))));
dummyeval[0]=(((((cj20)*(cj20))*((py)*(py))))+((pz)*(pz))+(((IkReal(-2.00000000000000))*(cj20)*(px)*(py)*(sj20)))+((((px)*(px))*((sj20)*(sj20)))));
if( IKabs(dummyeval[0]) < 0.0000010000000000  )
{
continue;

} else
{
{
IkReal j21array[1], cj21array[1], sj21array[1];
bool j21valid[1]={false};
_nj21 = 1;
IkReal x777=((IkReal(0.0300000000000000))*(sj23));
IkReal x778=((cj20)*(py));
IkReal x779=((px)*(sj20));
IkReal x780=((IkReal(0.313800000000000))*(sj23));
IkReal x781=((IkReal(0.313800000000000))*(cj23));
IkReal x782=((IkReal(0.0300000000000000))*(pz));
IkReal x783=((IkReal(0.0300000000000000))*(cj23));
if( IKabs(((gconst48)*(((((IkReal(0.300000000000000))*(pz)))+(((pz)*(x781)))+(((x778)*(x783)))+(((x778)*(x780)))+(((IkReal(-1.00000000000000))*(pz)*(x777)))+(((IkReal(-0.0300000000000000))*(x778)))+(((IkReal(0.0300000000000000))*(x779)))+(((IkReal(-1.00000000000000))*(x779)*(x780)))+(((IkReal(-1.00000000000000))*(x779)*(x783))))))) < IKFAST_ATAN2_MAGTHRESH && IKabs(((gconst48)*(((((x777)*(x779)))+(((IkReal(0.300000000000000))*(x778)))+(((IkReal(-1.00000000000000))*(cj23)*(x782)))+(((x778)*(x781)))+(((IkReal(-0.300000000000000))*(x779)))+(x782)+(((IkReal(-1.00000000000000))*(x777)*(x778)))+(((IkReal(-1.00000000000000))*(pz)*(x780)))+(((IkReal(-1.00000000000000))*(x779)*(x781))))))) < IKFAST_ATAN2_MAGTHRESH )
    continue;
j21array[0]=IKatan2(((gconst48)*(((((IkReal(0.300000000000000))*(pz)))+(((pz)*(x781)))+(((x778)*(x783)))+(((x778)*(x780)))+(((IkReal(-1.00000000000000))*(pz)*(x777)))+(((IkReal(-0.0300000000000000))*(x778)))+(((IkReal(0.0300000000000000))*(x779)))+(((IkReal(-1.00000000000000))*(x779)*(x780)))+(((IkReal(-1.00000000000000))*(x779)*(x783)))))), ((gconst48)*(((((x777)*(x779)))+(((IkReal(0.300000000000000))*(x778)))+(((IkReal(-1.00000000000000))*(cj23)*(x782)))+(((x778)*(x781)))+(((IkReal(-0.300000000000000))*(x779)))+(x782)+(((IkReal(-1.00000000000000))*(x777)*(x778)))+(((IkReal(-1.00000000000000))*(pz)*(x780)))+(((IkReal(-1.00000000000000))*(x779)*(x781)))))));
sj21array[0]=IKsin(j21array[0]);
cj21array[0]=IKcos(j21array[0]);
if( j21array[0] > IKPI )
{
    j21array[0]-=IK2PI;
}
else if( j21array[0] < -IKPI )
{    j21array[0]+=IK2PI;
}
j21valid[0] = true;
for(int ij21 = 0; ij21 < 1; ++ij21)
{
if( !j21valid[ij21] )
{
    continue;
}
_ij21[0] = ij21; _ij21[1] = -1;
for(int iij21 = ij21+1; iij21 < 1; ++iij21)
{
if( j21valid[iij21] && IKabs(cj21array[ij21]-cj21array[iij21]) < IKFAST_SOLUTION_THRESH && IKabs(sj21array[ij21]-sj21array[iij21]) < IKFAST_SOLUTION_THRESH )
{
    j21valid[iij21]=false; _ij21[1] = iij21; break;
}
}
j21 = j21array[ij21]; cj21 = cj21array[ij21]; sj21 = sj21array[ij21];
{
IkReal evalcond[5];
IkReal x784=IKcos(j21);
IkReal x785=IKsin(j21);
IkReal x786=((cj20)*(py));
IkReal x787=((px)*(sj20));
IkReal x788=((IkReal(0.313800000000000))*(cj23));
IkReal x789=((IkReal(0.0300000000000000))*(cj23));
IkReal x790=((IkReal(1.00000000000000))*(pz));
IkReal x791=((IkReal(0.313800000000000))*(sj23));
IkReal x792=((IkReal(0.0300000000000000))*(x784));
IkReal x793=((IkReal(0.0300000000000000))*(x785));
IkReal x794=((IkReal(0.0600000000000000))*(x785));
IkReal x795=((IkReal(0.600000000000000))*(x784));
evalcond[0]=((IkReal(0.300000000000000))+(((x784)*(x787)))+(((IkReal(-1.00000000000000))*(x784)*(x786)))+(((IkReal(-0.0300000000000000))*(sj23)))+(((IkReal(-1.00000000000000))*(x785)*(x790)))+(x788));
evalcond[1]=((((IkReal(-1.00000000000000))*(sj23)*(x793)))+(((IkReal(-1.00000000000000))*(x790)))+(((x785)*(x788)))+(((IkReal(-1.00000000000000))*(x784)*(x791)))+(((IkReal(-1.00000000000000))*(x784)*(x789)))+(((IkReal(0.300000000000000))*(x785)))+(x792));
evalcond[2]=((IkReal(0.0300000000000000))+(((IkReal(-1.00000000000000))*(x785)*(x787)))+(((IkReal(-1.00000000000000))*(x791)))+(((x785)*(x786)))+(((IkReal(-1.00000000000000))*(x789)))+(((IkReal(-1.00000000000000))*(x784)*(x790))));
evalcond[3]=((((IkReal(-1.00000000000000))*(sj23)*(x792)))+(((IkReal(-1.00000000000000))*(x793)))+(((x785)*(x791)))+(((x785)*(x789)))+(((x784)*(x788)))+(((IkReal(0.300000000000000))*(x784)))+(x787)+(((IkReal(-1.00000000000000))*(x786))));
evalcond[4]=((IkReal(0.00847044000000000))+(((x786)*(x795)))+(((IkReal(0.0600000000000000))*(pz)*(x784)))+(((x787)*(x794)))+(((IkReal(-1.00000000000000))*(pp)))+(((IkReal(-1.00000000000000))*(x787)*(x795)))+(((IkReal(-1.00000000000000))*(x786)*(x794)))+(((IkReal(0.600000000000000))*(pz)*(x785))));
if( IKabs(evalcond[0]) > 0.000001  || IKabs(evalcond[1]) > 0.000001  || IKabs(evalcond[2]) > 0.000001  || IKabs(evalcond[3]) > 0.000001  || IKabs(evalcond[4]) > 0.000001  )
{
continue;
}
}

rotationfunction0(solutions);
}
}

}

}

} else
{
{
IkReal j21array[1], cj21array[1], sj21array[1];
bool j21valid[1]={false};
_nj21 = 1;
IkReal x796=(sj23)*(sj23);
IkReal x797=(cj23)*(cj23);
IkReal x798=((cj23)*(sj23));
if( IKabs(((gconst49)*(((IkReal(0.00900000000000000))+(((IkReal(0.000414000000000000))*(cj23)))+(((IkReal(-0.00941400000000000))*(x797)))+(((IkReal(-0.0950400000000000))*(sj23)))+(((IkReal(0.00941400000000000))*(x796)))+(((IkReal(-0.0975704400000000))*(x798)))+(((px)*(pz)*(sj20)))+(((IkReal(-1.00000000000000))*(cj20)*(py)*(pz))))))) < IKFAST_ATAN2_MAGTHRESH && IKabs(((gconst49)*(((IkReal(-0.0900000000000000))+(((IkReal(0.0180000000000000))*(sj23)))+(((IkReal(-0.188280000000000))*(cj23)))+((pz)*(pz))+(((IkReal(-0.000900000000000000))*(x796)))+(((IkReal(-0.0984704400000000))*(x797)))+(((IkReal(0.0188280000000000))*(x798))))))) < IKFAST_ATAN2_MAGTHRESH )
    continue;
j21array[0]=IKatan2(((gconst49)*(((IkReal(0.00900000000000000))+(((IkReal(0.000414000000000000))*(cj23)))+(((IkReal(-0.00941400000000000))*(x797)))+(((IkReal(-0.0950400000000000))*(sj23)))+(((IkReal(0.00941400000000000))*(x796)))+(((IkReal(-0.0975704400000000))*(x798)))+(((px)*(pz)*(sj20)))+(((IkReal(-1.00000000000000))*(cj20)*(py)*(pz)))))), ((gconst49)*(((IkReal(-0.0900000000000000))+(((IkReal(0.0180000000000000))*(sj23)))+(((IkReal(-0.188280000000000))*(cj23)))+((pz)*(pz))+(((IkReal(-0.000900000000000000))*(x796)))+(((IkReal(-0.0984704400000000))*(x797)))+(((IkReal(0.0188280000000000))*(x798)))))));
sj21array[0]=IKsin(j21array[0]);
cj21array[0]=IKcos(j21array[0]);
if( j21array[0] > IKPI )
{
    j21array[0]-=IK2PI;
}
else if( j21array[0] < -IKPI )
{    j21array[0]+=IK2PI;
}
j21valid[0] = true;
for(int ij21 = 0; ij21 < 1; ++ij21)
{
if( !j21valid[ij21] )
{
    continue;
}
_ij21[0] = ij21; _ij21[1] = -1;
for(int iij21 = ij21+1; iij21 < 1; ++iij21)
{
if( j21valid[iij21] && IKabs(cj21array[ij21]-cj21array[iij21]) < IKFAST_SOLUTION_THRESH && IKabs(sj21array[ij21]-sj21array[iij21]) < IKFAST_SOLUTION_THRESH )
{
    j21valid[iij21]=false; _ij21[1] = iij21; break;
}
}
j21 = j21array[ij21]; cj21 = cj21array[ij21]; sj21 = sj21array[ij21];
{
IkReal evalcond[5];
IkReal x799=IKcos(j21);
IkReal x800=IKsin(j21);
IkReal x801=((cj20)*(py));
IkReal x802=((px)*(sj20));
IkReal x803=((IkReal(0.313800000000000))*(cj23));
IkReal x804=((IkReal(0.0300000000000000))*(cj23));
IkReal x805=((IkReal(1.00000000000000))*(pz));
IkReal x806=((IkReal(0.313800000000000))*(sj23));
IkReal x807=((IkReal(0.0300000000000000))*(x799));
IkReal x808=((IkReal(0.0300000000000000))*(x800));
IkReal x809=((IkReal(0.0600000000000000))*(x800));
IkReal x810=((IkReal(0.600000000000000))*(x799));
evalcond[0]=((IkReal(0.300000000000000))+(((IkReal(-1.00000000000000))*(x799)*(x801)))+(((IkReal(-1.00000000000000))*(x800)*(x805)))+(((x799)*(x802)))+(((IkReal(-0.0300000000000000))*(sj23)))+(x803));
evalcond[1]=((((IkReal(-1.00000000000000))*(x799)*(x804)))+(((IkReal(-1.00000000000000))*(x799)*(x806)))+(((x800)*(x803)))+(x807)+(((IkReal(-1.00000000000000))*(sj23)*(x808)))+(((IkReal(-1.00000000000000))*(x805)))+(((IkReal(0.300000000000000))*(x800))));
evalcond[2]=((IkReal(0.0300000000000000))+(((IkReal(-1.00000000000000))*(x799)*(x805)))+(((x800)*(x801)))+(((IkReal(-1.00000000000000))*(x800)*(x802)))+(((IkReal(-1.00000000000000))*(x806)))+(((IkReal(-1.00000000000000))*(x804))));
evalcond[3]=((((IkReal(-1.00000000000000))*(x801)))+(((x800)*(x804)))+(((x800)*(x806)))+(((x799)*(x803)))+(((IkReal(0.300000000000000))*(x799)))+(x802)+(((IkReal(-1.00000000000000))*(sj23)*(x807)))+(((IkReal(-1.00000000000000))*(x808))));
evalcond[4]=((IkReal(0.00847044000000000))+(((x801)*(x810)))+(((IkReal(0.600000000000000))*(pz)*(x800)))+(((IkReal(0.0600000000000000))*(pz)*(x799)))+(((IkReal(-1.00000000000000))*(x802)*(x810)))+(((IkReal(-1.00000000000000))*(pp)))+(((IkReal(-1.00000000000000))*(x801)*(x809)))+(((x802)*(x809))));
if( IKabs(evalcond[0]) > 0.000001  || IKabs(evalcond[1]) > 0.000001  || IKabs(evalcond[2]) > 0.000001  || IKabs(evalcond[3]) > 0.000001  || IKabs(evalcond[4]) > 0.000001  )
{
continue;
}
}

rotationfunction0(solutions);
}
}

}

}

} else
{
IkReal x811=((((IkReal(-1.00000000000000))*(py)*(sj20)))+(((IkReal(-1.00000000000000))*(cj20)*(px))));
evalcond[0]=((IkReal(-3.14159265358979))+(IKfmod(((IkReal(4.71238898038469))+(j22)), IkReal(6.28318530717959))));
evalcond[1]=((IkReal(0.190270440000000))+(((IkReal(0.186480000000000))*(cj23)))+(((IkReal(-1.00000000000000))*(pp)))+(((IkReal(-0.0368280000000000))*(sj23))));
evalcond[2]=x811;
evalcond[3]=x811;
if( IKabs(evalcond[0]) < 0.0000010000000000  && IKabs(evalcond[1]) < 0.0000010000000000  && IKabs(evalcond[2]) < 0.0000010000000000  && IKabs(evalcond[3]) < 0.0000010000000000  )
{
{
IkReal dummyeval[1];
IkReal gconst51;
IkReal x812=((cj20)*(py));
IkReal x813=((IkReal(0.313800000000000))*(sj23));
IkReal x814=((px)*(sj20));
IkReal x815=((IkReal(0.0300000000000000))*(cj23));
gconst51=IKsign(((((IkReal(-1.00000000000000))*(x812)*(x815)))+(((IkReal(-1.00000000000000))*(x812)*(x813)))+(((IkReal(-0.300000000000000))*(pz)))+(((x813)*(x814)))+(((IkReal(-0.313800000000000))*(cj23)*(pz)))+(((x814)*(x815)))+(((IkReal(0.0300000000000000))*(x812)))+(((IkReal(0.0300000000000000))*(pz)*(sj23)))+(((IkReal(-0.0300000000000000))*(x814)))));
IkReal x816=((IkReal(10.4600000000000))*(sj23));
IkReal x817=((px)*(sj20));
IkReal x818=((cj20)*(py));
dummyeval[0]=((((IkReal(-10.4600000000000))*(cj23)*(pz)))+(((IkReal(-1.00000000000000))*(x816)*(x818)))+(((x816)*(x817)))+(((IkReal(-10.0000000000000))*(pz)))+(((IkReal(-1.00000000000000))*(x817)))+(((IkReal(-1.00000000000000))*(cj23)*(x818)))+(x818)+(((cj23)*(x817)))+(((pz)*(sj23))));
if( IKabs(dummyeval[0]) < 0.0000010000000000  )
{
{
IkReal dummyeval[1];
IkReal gconst50;
gconst50=IKsign((((((cj20)*(cj20))*((py)*(py))))+((pz)*(pz))+(((IkReal(-2.00000000000000))*(cj20)*(px)*(py)*(sj20)))+((((px)*(px))*((sj20)*(sj20))))));
dummyeval[0]=(((((cj20)*(cj20))*((py)*(py))))+((pz)*(pz))+(((IkReal(-2.00000000000000))*(cj20)*(px)*(py)*(sj20)))+((((px)*(px))*((sj20)*(sj20)))));
if( IKabs(dummyeval[0]) < 0.0000010000000000  )
{
{
IkReal evalcond[4];
IkReal x819=x811;
evalcond[0]=((IKabs(pz))+(IKabs(((IkReal(-3.14159265358979))+(IKfmod(((IkReal(3.14159265358979))+(j23)), IkReal(6.28318530717959)))))));
evalcond[1]=((IkReal(0.376750440000000))+(((IkReal(-1.00000000000000))*(pp))));
evalcond[2]=x819;
evalcond[3]=x819;
if( IKabs(evalcond[0]) < 0.0000010000000000  && IKabs(evalcond[1]) < 0.0000010000000000  && IKabs(evalcond[2]) < 0.0000010000000000  && IKabs(evalcond[3]) < 0.0000010000000000  )
{
{
IkReal dummyeval[1];
dummyeval[0]=((((cj20)*(py)))+(((IkReal(-1.00000000000000))*(px)*(sj20))));
if( IKabs(dummyeval[0]) < 0.0000010000000000  )
{
{
IkReal dummyeval[2];
IkReal x820=((cj20)*(py));
IkReal x821=((px)*(sj20));
dummyeval[0]=((((IkReal(-1.00000000000000))*((x821)*(x821))))+(((IkReal(-1.00000000000000))*((x820)*(x820))))+(((IkReal(2.00000000000000))*(x820)*(x821))));
dummyeval[1]=((((IkReal(-1.00000000000000))*(x820)))+(x821));
if( IKabs(dummyeval[0]) < 0.0000010000000000  || IKabs(dummyeval[1]) < 0.0000010000000000  )
{
{
IkReal evalcond[7];
IkReal x822=((IkReal(1.00000000000000))*(pp));
IkReal x823=((IkReal(-1.00000000000000))*(py));
evalcond[0]=((IKabs(px))+(IKabs(((IkReal(-3.14159265358979))+(IKfmod(((IkReal(1.57079632679490))+(j20)), IkReal(6.28318530717959)))))));
evalcond[1]=((IkReal(0.376750440000000))+(((IkReal(-1.00000000000000))*(x822))));
evalcond[2]=x823;
evalcond[3]=IkReal(0.613800000000000);
evalcond[4]=x823;
evalcond[5]=IkReal(0);
evalcond[6]=((IkReal(0.00847044000000000))+(((IkReal(-1.00000000000000))*(x822))));
if( IKabs(evalcond[0]) < 0.0000010000000000  && IKabs(evalcond[1]) < 0.0000010000000000  && IKabs(evalcond[2]) < 0.0000010000000000  && IKabs(evalcond[3]) < 0.0000010000000000  && IKabs(evalcond[4]) < 0.0000010000000000  && IKabs(evalcond[5]) < 0.0000010000000000  && IKabs(evalcond[6]) < 0.0000010000000000  )
{
{
IkReal dummyeval[1];
dummyeval[0]=IkReal(-1.00000000000000);
if( IKabs(dummyeval[0]) < 0.0000001000000000  )
{
continue;

} else
{
IkReal op[2+1], zeror[2];
int numroots;
op[0]=IkReal(-1.00000000000000);
op[1]=IkReal(0);
op[2]=IkReal(1.00000000000000);
polyroots2(op,zeror,numroots);
IkReal j21array[2], cj21array[2], sj21array[2], tempj21array[1];
int numsolutions = 0;
for(int ij21 = 0; ij21 < numroots; ++ij21)
{
IkReal htj21 = zeror[ij21];
tempj21array[0]=((IkReal(2.00000000000000))*(atan(htj21)));
for(int kj21 = 0; kj21 < 1; ++kj21)
{
j21array[numsolutions] = tempj21array[kj21];
if( j21array[numsolutions] > IKPI )
{
    j21array[numsolutions]-=IK2PI;
}
else if( j21array[numsolutions] < -IKPI )
{
    j21array[numsolutions]+=IK2PI;
}
sj21array[numsolutions] = IKsin(j21array[numsolutions]);
cj21array[numsolutions] = IKcos(j21array[numsolutions]);
numsolutions++;
}
}
bool j21valid[2]={true,true};
_nj21 = 2;
for(int ij21 = 0; ij21 < numsolutions; ++ij21)
    {
if( !j21valid[ij21] )
{
    continue;
}
    j21 = j21array[ij21]; cj21 = cj21array[ij21]; sj21 = sj21array[ij21];
htj21 = IKtan(j21/2);

_ij21[0] = ij21; _ij21[1] = -1;
for(int iij21 = ij21+1; iij21 < numsolutions; ++iij21)
{
if( j21valid[iij21] && IKabs(cj21array[ij21]-cj21array[iij21]) < IKFAST_SOLUTION_THRESH && IKabs(sj21array[ij21]-sj21array[iij21]) < IKFAST_SOLUTION_THRESH )
{
    j21valid[iij21]=false; _ij21[1] = iij21; break;
}
}
rotationfunction0(solutions);
    }

}

}

} else
{
IkReal x824=((IkReal(1.00000000000000))*(pp));
evalcond[0]=((IKabs(px))+(IKabs(((IkReal(-3.14159265358979))+(IKfmod(((IkReal(4.71238898038469))+(j20)), IkReal(6.28318530717959)))))));
evalcond[1]=((IkReal(0.376750440000000))+(((IkReal(-1.00000000000000))*(x824))));
evalcond[2]=py;
evalcond[3]=IkReal(0.613800000000000);
evalcond[4]=py;
evalcond[5]=IkReal(0);
evalcond[6]=((IkReal(0.00847044000000000))+(((IkReal(-1.00000000000000))*(x824))));
if( IKabs(evalcond[0]) < 0.0000010000000000  && IKabs(evalcond[1]) < 0.0000010000000000  && IKabs(evalcond[2]) < 0.0000010000000000  && IKabs(evalcond[3]) < 0.0000010000000000  && IKabs(evalcond[4]) < 0.0000010000000000  && IKabs(evalcond[5]) < 0.0000010000000000  && IKabs(evalcond[6]) < 0.0000010000000000  )
{
{
IkReal dummyeval[1];
dummyeval[0]=IkReal(-1.00000000000000);
if( IKabs(dummyeval[0]) < 0.0000001000000000  )
{
continue;

} else
{
IkReal op[2+1], zeror[2];
int numroots;
op[0]=IkReal(-1.00000000000000);
op[1]=IkReal(0);
op[2]=IkReal(1.00000000000000);
polyroots2(op,zeror,numroots);
IkReal j21array[2], cj21array[2], sj21array[2], tempj21array[1];
int numsolutions = 0;
for(int ij21 = 0; ij21 < numroots; ++ij21)
{
IkReal htj21 = zeror[ij21];
tempj21array[0]=((IkReal(2.00000000000000))*(atan(htj21)));
for(int kj21 = 0; kj21 < 1; ++kj21)
{
j21array[numsolutions] = tempj21array[kj21];
if( j21array[numsolutions] > IKPI )
{
    j21array[numsolutions]-=IK2PI;
}
else if( j21array[numsolutions] < -IKPI )
{
    j21array[numsolutions]+=IK2PI;
}
sj21array[numsolutions] = IKsin(j21array[numsolutions]);
cj21array[numsolutions] = IKcos(j21array[numsolutions]);
numsolutions++;
}
}
bool j21valid[2]={true,true};
_nj21 = 2;
for(int ij21 = 0; ij21 < numsolutions; ++ij21)
    {
if( !j21valid[ij21] )
{
    continue;
}
    j21 = j21array[ij21]; cj21 = cj21array[ij21]; sj21 = sj21array[ij21];
htj21 = IKtan(j21/2);

_ij21[0] = ij21; _ij21[1] = -1;
for(int iij21 = ij21+1; iij21 < numsolutions; ++iij21)
{
if( j21valid[iij21] && IKabs(cj21array[ij21]-cj21array[iij21]) < IKFAST_SOLUTION_THRESH && IKabs(sj21array[ij21]-sj21array[iij21]) < IKFAST_SOLUTION_THRESH )
{
    j21valid[iij21]=false; _ij21[1] = iij21; break;
}
}
rotationfunction0(solutions);
    }

}

}

} else
{
IkReal x825=((IkReal(1.00000000000000))*(pp));
IkReal x826=((IkReal(-1.00000000000000))*(px));
evalcond[0]=((IKabs(py))+(IKabs(((IkReal(-3.14159265358979))+(IKfmod(((IkReal(3.14159265358979))+(j20)), IkReal(6.28318530717959)))))));
evalcond[1]=((IkReal(0.376750440000000))+(((IkReal(-1.00000000000000))*(x825))));
evalcond[2]=x826;
evalcond[3]=IkReal(0.613800000000000);
evalcond[4]=x826;
evalcond[5]=IkReal(0);
evalcond[6]=((IkReal(0.00847044000000000))+(((IkReal(-1.00000000000000))*(x825))));
if( IKabs(evalcond[0]) < 0.0000010000000000  && IKabs(evalcond[1]) < 0.0000010000000000  && IKabs(evalcond[2]) < 0.0000010000000000  && IKabs(evalcond[3]) < 0.0000010000000000  && IKabs(evalcond[4]) < 0.0000010000000000  && IKabs(evalcond[5]) < 0.0000010000000000  && IKabs(evalcond[6]) < 0.0000010000000000  )
{
{
IkReal dummyeval[1];
dummyeval[0]=IkReal(-1.00000000000000);
if( IKabs(dummyeval[0]) < 0.0000001000000000  )
{
continue;

} else
{
IkReal op[2+1], zeror[2];
int numroots;
op[0]=IkReal(-1.00000000000000);
op[1]=IkReal(0);
op[2]=IkReal(1.00000000000000);
polyroots2(op,zeror,numroots);
IkReal j21array[2], cj21array[2], sj21array[2], tempj21array[1];
int numsolutions = 0;
for(int ij21 = 0; ij21 < numroots; ++ij21)
{
IkReal htj21 = zeror[ij21];
tempj21array[0]=((IkReal(2.00000000000000))*(atan(htj21)));
for(int kj21 = 0; kj21 < 1; ++kj21)
{
j21array[numsolutions] = tempj21array[kj21];
if( j21array[numsolutions] > IKPI )
{
    j21array[numsolutions]-=IK2PI;
}
else if( j21array[numsolutions] < -IKPI )
{
    j21array[numsolutions]+=IK2PI;
}
sj21array[numsolutions] = IKsin(j21array[numsolutions]);
cj21array[numsolutions] = IKcos(j21array[numsolutions]);
numsolutions++;
}
}
bool j21valid[2]={true,true};
_nj21 = 2;
for(int ij21 = 0; ij21 < numsolutions; ++ij21)
    {
if( !j21valid[ij21] )
{
    continue;
}
    j21 = j21array[ij21]; cj21 = cj21array[ij21]; sj21 = sj21array[ij21];
htj21 = IKtan(j21/2);

_ij21[0] = ij21; _ij21[1] = -1;
for(int iij21 = ij21+1; iij21 < numsolutions; ++iij21)
{
if( j21valid[iij21] && IKabs(cj21array[ij21]-cj21array[iij21]) < IKFAST_SOLUTION_THRESH && IKabs(sj21array[ij21]-sj21array[iij21]) < IKFAST_SOLUTION_THRESH )
{
    j21valid[iij21]=false; _ij21[1] = iij21; break;
}
}
rotationfunction0(solutions);
    }

}

}

} else
{
IkReal x827=((IkReal(1.00000000000000))*(pp));
evalcond[0]=((IKabs(py))+(IKabs(((IkReal(-3.14159265358979))+(IKfmod(j20, IkReal(6.28318530717959)))))));
evalcond[1]=((IkReal(0.376750440000000))+(((IkReal(-1.00000000000000))*(x827))));
evalcond[2]=px;
evalcond[3]=IkReal(0.613800000000000);
evalcond[4]=px;
evalcond[5]=IkReal(0);
evalcond[6]=((IkReal(0.00847044000000000))+(((IkReal(-1.00000000000000))*(x827))));
if( IKabs(evalcond[0]) < 0.0000010000000000  && IKabs(evalcond[1]) < 0.0000010000000000  && IKabs(evalcond[2]) < 0.0000010000000000  && IKabs(evalcond[3]) < 0.0000010000000000  && IKabs(evalcond[4]) < 0.0000010000000000  && IKabs(evalcond[5]) < 0.0000010000000000  && IKabs(evalcond[6]) < 0.0000010000000000  )
{
{
IkReal dummyeval[1];
dummyeval[0]=IkReal(-1.00000000000000);
if( IKabs(dummyeval[0]) < 0.0000001000000000  )
{
continue;

} else
{
IkReal op[2+1], zeror[2];
int numroots;
op[0]=IkReal(-1.00000000000000);
op[1]=IkReal(0);
op[2]=IkReal(1.00000000000000);
polyroots2(op,zeror,numroots);
IkReal j21array[2], cj21array[2], sj21array[2], tempj21array[1];
int numsolutions = 0;
for(int ij21 = 0; ij21 < numroots; ++ij21)
{
IkReal htj21 = zeror[ij21];
tempj21array[0]=((IkReal(2.00000000000000))*(atan(htj21)));
for(int kj21 = 0; kj21 < 1; ++kj21)
{
j21array[numsolutions] = tempj21array[kj21];
if( j21array[numsolutions] > IKPI )
{
    j21array[numsolutions]-=IK2PI;
}
else if( j21array[numsolutions] < -IKPI )
{
    j21array[numsolutions]+=IK2PI;
}
sj21array[numsolutions] = IKsin(j21array[numsolutions]);
cj21array[numsolutions] = IKcos(j21array[numsolutions]);
numsolutions++;
}
}
bool j21valid[2]={true,true};
_nj21 = 2;
for(int ij21 = 0; ij21 < numsolutions; ++ij21)
    {
if( !j21valid[ij21] )
{
    continue;
}
    j21 = j21array[ij21]; cj21 = cj21array[ij21]; sj21 = sj21array[ij21];
htj21 = IKtan(j21/2);

_ij21[0] = ij21; _ij21[1] = -1;
for(int iij21 = ij21+1; iij21 < numsolutions; ++iij21)
{
if( j21valid[iij21] && IKabs(cj21array[ij21]-cj21array[iij21]) < IKFAST_SOLUTION_THRESH && IKabs(sj21array[ij21]-sj21array[iij21]) < IKFAST_SOLUTION_THRESH )
{
    j21valid[iij21]=false; _ij21[1] = iij21; break;
}
}
rotationfunction0(solutions);
    }

}

}

} else
{
if( 1 )
{
continue;

} else
{
}
}
}
}
}
}

} else
{
{
IkReal j21array[1], cj21array[1], sj21array[1];
bool j21valid[1]={false};
_nj21 = 1;
IkReal x828=((px)*(sj20));
IkReal x829=((cj20)*(py));
IkReal x830=((IkReal(5000.00000000000))*(pp));
if( IKabs(((((IKabs(((((IkReal(-300.000000000000))*((x829)*(x829))))+(((IkReal(600.000000000000))*(x828)*(x829)))+(((IkReal(-300.000000000000))*((x828)*(x828)))))) != 0)?((IkReal)1/(((((IkReal(-300.000000000000))*((x829)*(x829))))+(((IkReal(600.000000000000))*(x828)*(x829)))+(((IkReal(-300.000000000000))*((x828)*(x828))))))):(IkReal)1.0e30))*(((((IkReal(-1883.75220000000))*(x828)))+(((IkReal(1883.75220000000))*(x829)))+(((x828)*(x830)))+(((IkReal(-1.00000000000000))*(x829)*(x830))))))) < IKFAST_ATAN2_MAGTHRESH && IKabs(((IkReal(-3069.00000000000))*(((IKabs(((((IkReal(-5000.00000000000))*(x829)))+(((IkReal(5000.00000000000))*(x828))))) != 0)?((IkReal)1/(((((IkReal(-5000.00000000000))*(x829)))+(((IkReal(5000.00000000000))*(x828)))))):(IkReal)1.0e30)))) < IKFAST_ATAN2_MAGTHRESH && IKabs(IKsqr(((((IKabs(((((IkReal(-300.000000000000))*((x829)*(x829))))+(((IkReal(600.000000000000))*(x828)*(x829)))+(((IkReal(-300.000000000000))*((x828)*(x828)))))) != 0)?((IkReal)1/(((((IkReal(-300.000000000000))*((x829)*(x829))))+(((IkReal(600.000000000000))*(x828)*(x829)))+(((IkReal(-300.000000000000))*((x828)*(x828))))))):(IkReal)1.0e30))*(((((IkReal(-1883.75220000000))*(x828)))+(((IkReal(1883.75220000000))*(x829)))+(((x828)*(x830)))+(((IkReal(-1.00000000000000))*(x829)*(x830)))))))+IKsqr(((IkReal(-3069.00000000000))*(((IKabs(((((IkReal(-5000.00000000000))*(x829)))+(((IkReal(5000.00000000000))*(x828))))) != 0)?((IkReal)1/(((((IkReal(-5000.00000000000))*(x829)))+(((IkReal(5000.00000000000))*(x828)))))):(IkReal)1.0e30))))-1) <= IKFAST_SINCOS_THRESH )
    continue;
j21array[0]=IKatan2(((((IKabs(((((IkReal(-300.000000000000))*((x829)*(x829))))+(((IkReal(600.000000000000))*(x828)*(x829)))+(((IkReal(-300.000000000000))*((x828)*(x828)))))) != 0)?((IkReal)1/(((((IkReal(-300.000000000000))*((x829)*(x829))))+(((IkReal(600.000000000000))*(x828)*(x829)))+(((IkReal(-300.000000000000))*((x828)*(x828))))))):(IkReal)1.0e30))*(((((IkReal(-1883.75220000000))*(x828)))+(((IkReal(1883.75220000000))*(x829)))+(((x828)*(x830)))+(((IkReal(-1.00000000000000))*(x829)*(x830)))))), ((IkReal(-3069.00000000000))*(((IKabs(((((IkReal(-5000.00000000000))*(x829)))+(((IkReal(5000.00000000000))*(x828))))) != 0)?((IkReal)1/(((((IkReal(-5000.00000000000))*(x829)))+(((IkReal(5000.00000000000))*(x828)))))):(IkReal)1.0e30))));
sj21array[0]=IKsin(j21array[0]);
cj21array[0]=IKcos(j21array[0]);
if( j21array[0] > IKPI )
{
    j21array[0]-=IK2PI;
}
else if( j21array[0] < -IKPI )
{    j21array[0]+=IK2PI;
}
j21valid[0] = true;
for(int ij21 = 0; ij21 < 1; ++ij21)
{
if( !j21valid[ij21] )
{
    continue;
}
_ij21[0] = ij21; _ij21[1] = -1;
for(int iij21 = ij21+1; iij21 < 1; ++iij21)
{
if( j21valid[iij21] && IKabs(cj21array[ij21]-cj21array[iij21]) < IKFAST_SOLUTION_THRESH && IKabs(sj21array[ij21]-sj21array[iij21]) < IKFAST_SOLUTION_THRESH )
{
    j21valid[iij21]=false; _ij21[1] = iij21; break;
}
}
j21 = j21array[ij21]; cj21 = cj21array[ij21]; sj21 = sj21array[ij21];
{
IkReal evalcond[5];
IkReal x831=IKcos(j21);
IkReal x832=IKsin(j21);
IkReal x833=((px)*(sj20));
IkReal x834=((cj20)*(py));
IkReal x835=((IkReal(0.600000000000000))*(x831));
IkReal x836=((IkReal(0.0600000000000000))*(x832));
evalcond[0]=((IkReal(0.613800000000000))+(((x831)*(x833)))+(((IkReal(-1.00000000000000))*(x831)*(x834))));
evalcond[1]=((IkReal(0.613800000000000))*(x832));
evalcond[2]=((((x832)*(x833)))+(((IkReal(-1.00000000000000))*(x832)*(x834))));
evalcond[3]=((((IkReal(-1.00000000000000))*(x834)))+(((IkReal(0.613800000000000))*(x831)))+(x833));
evalcond[4]=((IkReal(0.00847044000000000))+(((IkReal(-1.00000000000000))*(x833)*(x835)))+(((IkReal(-1.00000000000000))*(x833)*(x836)))+(((IkReal(-1.00000000000000))*(pp)))+(((x834)*(x835)))+(((x834)*(x836))));
if( IKabs(evalcond[0]) > 0.000001  || IKabs(evalcond[1]) > 0.000001  || IKabs(evalcond[2]) > 0.000001  || IKabs(evalcond[3]) > 0.000001  || IKabs(evalcond[4]) > 0.000001  )
{
continue;
}
}

rotationfunction0(solutions);
}
}

}

}

} else
{
{
IkReal j21array[1], cj21array[1], sj21array[1];
bool j21valid[1]={false};
_nj21 = 1;
IkReal x837=((cj20)*(py));
IkReal x838=((px)*(sj20));
if( IKabs(((((IKabs(((((IkReal(184.140000000000))*(x837)))+(((IkReal(-184.140000000000))*(x838))))) != 0)?((IkReal)1/(((((IkReal(184.140000000000))*(x837)))+(((IkReal(-184.140000000000))*(x838)))))):(IkReal)1.0e30))*(((IkReal(-25.9957803600000))+(((IkReal(-3000.00000000000))*((x838)*(x838))))+(((IkReal(-3000.00000000000))*((x837)*(x837))))+(((IkReal(6000.00000000000))*(x837)*(x838)))+(((IkReal(3069.00000000000))*(pp))))))) < IKFAST_ATAN2_MAGTHRESH && IKabs(((((IkReal(-1.62919517758227))*(x838)))+(((IkReal(1.62919517758227))*(x837))))) < IKFAST_ATAN2_MAGTHRESH && IKabs(IKsqr(((((IKabs(((((IkReal(184.140000000000))*(x837)))+(((IkReal(-184.140000000000))*(x838))))) != 0)?((IkReal)1/(((((IkReal(184.140000000000))*(x837)))+(((IkReal(-184.140000000000))*(x838)))))):(IkReal)1.0e30))*(((IkReal(-25.9957803600000))+(((IkReal(-3000.00000000000))*((x838)*(x838))))+(((IkReal(-3000.00000000000))*((x837)*(x837))))+(((IkReal(6000.00000000000))*(x837)*(x838)))+(((IkReal(3069.00000000000))*(pp)))))))+IKsqr(((((IkReal(-1.62919517758227))*(x838)))+(((IkReal(1.62919517758227))*(x837)))))-1) <= IKFAST_SINCOS_THRESH )
    continue;
j21array[0]=IKatan2(((((IKabs(((((IkReal(184.140000000000))*(x837)))+(((IkReal(-184.140000000000))*(x838))))) != 0)?((IkReal)1/(((((IkReal(184.140000000000))*(x837)))+(((IkReal(-184.140000000000))*(x838)))))):(IkReal)1.0e30))*(((IkReal(-25.9957803600000))+(((IkReal(-3000.00000000000))*((x838)*(x838))))+(((IkReal(-3000.00000000000))*((x837)*(x837))))+(((IkReal(6000.00000000000))*(x837)*(x838)))+(((IkReal(3069.00000000000))*(pp)))))), ((((IkReal(-1.62919517758227))*(x838)))+(((IkReal(1.62919517758227))*(x837)))));
sj21array[0]=IKsin(j21array[0]);
cj21array[0]=IKcos(j21array[0]);
if( j21array[0] > IKPI )
{
    j21array[0]-=IK2PI;
}
else if( j21array[0] < -IKPI )
{    j21array[0]+=IK2PI;
}
j21valid[0] = true;
for(int ij21 = 0; ij21 < 1; ++ij21)
{
if( !j21valid[ij21] )
{
    continue;
}
_ij21[0] = ij21; _ij21[1] = -1;
for(int iij21 = ij21+1; iij21 < 1; ++iij21)
{
if( j21valid[iij21] && IKabs(cj21array[ij21]-cj21array[iij21]) < IKFAST_SOLUTION_THRESH && IKabs(sj21array[ij21]-sj21array[iij21]) < IKFAST_SOLUTION_THRESH )
{
    j21valid[iij21]=false; _ij21[1] = iij21; break;
}
}
j21 = j21array[ij21]; cj21 = cj21array[ij21]; sj21 = sj21array[ij21];
{
IkReal evalcond[5];
IkReal x839=IKcos(j21);
IkReal x840=IKsin(j21);
IkReal x841=((px)*(sj20));
IkReal x842=((cj20)*(py));
IkReal x843=((IkReal(0.600000000000000))*(x839));
IkReal x844=((IkReal(0.0600000000000000))*(x840));
evalcond[0]=((IkReal(0.613800000000000))+(((x839)*(x841)))+(((IkReal(-1.00000000000000))*(x839)*(x842))));
evalcond[1]=((IkReal(0.613800000000000))*(x840));
evalcond[2]=((((x840)*(x841)))+(((IkReal(-1.00000000000000))*(x840)*(x842))));
evalcond[3]=((((IkReal(-1.00000000000000))*(x842)))+(((IkReal(0.613800000000000))*(x839)))+(x841));
evalcond[4]=((IkReal(0.00847044000000000))+(((IkReal(-1.00000000000000))*(x841)*(x843)))+(((IkReal(-1.00000000000000))*(x841)*(x844)))+(((IkReal(-1.00000000000000))*(pp)))+(((x842)*(x843)))+(((x842)*(x844))));
if( IKabs(evalcond[0]) > 0.000001  || IKabs(evalcond[1]) > 0.000001  || IKabs(evalcond[2]) > 0.000001  || IKabs(evalcond[3]) > 0.000001  || IKabs(evalcond[4]) > 0.000001  )
{
continue;
}
}

rotationfunction0(solutions);
}
}

}

}

} else
{
if( 1 )
{
continue;

} else
{
}
}
}

} else
{
{
IkReal j21array[1], cj21array[1], sj21array[1];
bool j21valid[1]={false};
_nj21 = 1;
IkReal x845=((cj20)*(py));
IkReal x846=((IkReal(0.0300000000000000))*(pz));
IkReal x847=((px)*(sj20));
IkReal x848=((IkReal(0.313800000000000))*(sj23));
IkReal x849=((IkReal(0.0300000000000000))*(sj23));
IkReal x850=((IkReal(0.313800000000000))*(cj23));
IkReal x851=((IkReal(0.0300000000000000))*(cj23));
if( IKabs(((gconst50)*(((((IkReal(-1.00000000000000))*(sj23)*(x846)))+(((IkReal(-1.00000000000000))*(x845)*(x851)))+(((IkReal(0.300000000000000))*(pz)))+(((x847)*(x851)))+(((IkReal(-0.0300000000000000))*(x847)))+(((IkReal(-1.00000000000000))*(x845)*(x848)))+(((x847)*(x848)))+(((IkReal(0.0300000000000000))*(x845)))+(((pz)*(x850))))))) < IKFAST_ATAN2_MAGTHRESH && IKabs(((gconst50)*(((((x845)*(x850)))+(((cj23)*(x846)))+(((IkReal(-0.300000000000000))*(x847)))+(((IkReal(-1.00000000000000))*(x847)*(x850)))+(((pz)*(x848)))+(((IkReal(-1.00000000000000))*(x846)))+(((IkReal(0.300000000000000))*(x845)))+(((IkReal(-1.00000000000000))*(x845)*(x849)))+(((x847)*(x849))))))) < IKFAST_ATAN2_MAGTHRESH )
    continue;
j21array[0]=IKatan2(((gconst50)*(((((IkReal(-1.00000000000000))*(sj23)*(x846)))+(((IkReal(-1.00000000000000))*(x845)*(x851)))+(((IkReal(0.300000000000000))*(pz)))+(((x847)*(x851)))+(((IkReal(-0.0300000000000000))*(x847)))+(((IkReal(-1.00000000000000))*(x845)*(x848)))+(((x847)*(x848)))+(((IkReal(0.0300000000000000))*(x845)))+(((pz)*(x850)))))), ((gconst50)*(((((x845)*(x850)))+(((cj23)*(x846)))+(((IkReal(-0.300000000000000))*(x847)))+(((IkReal(-1.00000000000000))*(x847)*(x850)))+(((pz)*(x848)))+(((IkReal(-1.00000000000000))*(x846)))+(((IkReal(0.300000000000000))*(x845)))+(((IkReal(-1.00000000000000))*(x845)*(x849)))+(((x847)*(x849)))))));
sj21array[0]=IKsin(j21array[0]);
cj21array[0]=IKcos(j21array[0]);
if( j21array[0] > IKPI )
{
    j21array[0]-=IK2PI;
}
else if( j21array[0] < -IKPI )
{    j21array[0]+=IK2PI;
}
j21valid[0] = true;
for(int ij21 = 0; ij21 < 1; ++ij21)
{
if( !j21valid[ij21] )
{
    continue;
}
_ij21[0] = ij21; _ij21[1] = -1;
for(int iij21 = ij21+1; iij21 < 1; ++iij21)
{
if( j21valid[iij21] && IKabs(cj21array[ij21]-cj21array[iij21]) < IKFAST_SOLUTION_THRESH && IKabs(sj21array[ij21]-sj21array[iij21]) < IKFAST_SOLUTION_THRESH )
{
    j21valid[iij21]=false; _ij21[1] = iij21; break;
}
}
j21 = j21array[ij21]; cj21 = cj21array[ij21]; sj21 = sj21array[ij21];
{
IkReal evalcond[5];
IkReal x852=IKcos(j21);
IkReal x853=IKsin(j21);
IkReal x854=((px)*(sj20));
IkReal x855=((IkReal(0.313800000000000))*(cj23));
IkReal x856=((IkReal(0.0300000000000000))*(cj23));
IkReal x857=((IkReal(1.00000000000000))*(pz));
IkReal x858=((IkReal(0.313800000000000))*(sj23));
IkReal x859=((cj20)*(py));
IkReal x860=((IkReal(0.0300000000000000))*(x852));
IkReal x861=((pz)*(x852));
IkReal x862=((IkReal(0.0300000000000000))*(x853));
IkReal x863=((IkReal(1.00000000000000))*(x859));
IkReal x864=((IkReal(0.0600000000000000))*(x853));
IkReal x865=((IkReal(0.600000000000000))*(x852));
evalcond[0]=((IkReal(0.300000000000000))+(((IkReal(-1.00000000000000))*(x853)*(x857)))+(((IkReal(-1.00000000000000))*(x852)*(x863)))+(((IkReal(-0.0300000000000000))*(sj23)))+(((x852)*(x854)))+(x855));
evalcond[1]=((((IkReal(-1.00000000000000))*(x860)))+(((IkReal(-1.00000000000000))*(x857)))+(((IkReal(0.300000000000000))*(x853)))+(((IkReal(-1.00000000000000))*(sj23)*(x862)))+(((x852)*(x856)))+(((x852)*(x858)))+(((x853)*(x855))));
evalcond[2]=((IkReal(0.0300000000000000))+(((IkReal(-1.00000000000000))*(x858)))+(((IkReal(-1.00000000000000))*(x856)))+(((IkReal(-1.00000000000000))*(x853)*(x863)))+(x861)+(((x853)*(x854))));
evalcond[3]=((((IkReal(-1.00000000000000))*(x863)))+(((IkReal(-1.00000000000000))*(x853)*(x856)))+(((IkReal(-1.00000000000000))*(x853)*(x858)))+(((IkReal(0.300000000000000))*(x852)))+(((IkReal(-1.00000000000000))*(sj23)*(x860)))+(((x852)*(x855)))+(x854)+(x862));
evalcond[4]=((IkReal(0.00847044000000000))+(((IkReal(-1.00000000000000))*(x854)*(x865)))+(((IkReal(-1.00000000000000))*(x854)*(x864)))+(((IkReal(0.600000000000000))*(pz)*(x853)))+(((IkReal(-1.00000000000000))*(pp)))+(((x859)*(x864)))+(((x859)*(x865)))+(((IkReal(-0.0600000000000000))*(x861))));
if( IKabs(evalcond[0]) > 0.000001  || IKabs(evalcond[1]) > 0.000001  || IKabs(evalcond[2]) > 0.000001  || IKabs(evalcond[3]) > 0.000001  || IKabs(evalcond[4]) > 0.000001  )
{
continue;
}
}

rotationfunction0(solutions);
}
}

}

}

} else
{
{
IkReal j21array[1], cj21array[1], sj21array[1];
bool j21valid[1]={false};
_nj21 = 1;
IkReal x866=(sj23)*(sj23);
IkReal x867=(cj23)*(cj23);
IkReal x868=((cj23)*(sj23));
if( IKabs(((gconst51)*(((IkReal(0.000900000000000000))+(((IkReal(0.000900000000000000))*(x867)))+(((IkReal(-1.00000000000000))*((pz)*(pz))))+(((IkReal(-0.0188280000000000))*(sj23)))+(((IkReal(0.0188280000000000))*(x868)))+(((IkReal(0.0984704400000000))*(x866)))+(((IkReal(-0.00180000000000000))*(cj23))))))) < IKFAST_ATAN2_MAGTHRESH && IKabs(((gconst51)*(((IkReal(0.00900000000000000))+(((IkReal(0.000414000000000000))*(cj23)))+(((IkReal(-0.00941400000000000))*(x867)))+(((IkReal(-0.0950400000000000))*(sj23)))+(((IkReal(-0.0975704400000000))*(x868)))+(((px)*(pz)*(sj20)))+(((IkReal(0.00941400000000000))*(x866)))+(((IkReal(-1.00000000000000))*(cj20)*(py)*(pz))))))) < IKFAST_ATAN2_MAGTHRESH )
    continue;
j21array[0]=IKatan2(((gconst51)*(((IkReal(0.000900000000000000))+(((IkReal(0.000900000000000000))*(x867)))+(((IkReal(-1.00000000000000))*((pz)*(pz))))+(((IkReal(-0.0188280000000000))*(sj23)))+(((IkReal(0.0188280000000000))*(x868)))+(((IkReal(0.0984704400000000))*(x866)))+(((IkReal(-0.00180000000000000))*(cj23)))))), ((gconst51)*(((IkReal(0.00900000000000000))+(((IkReal(0.000414000000000000))*(cj23)))+(((IkReal(-0.00941400000000000))*(x867)))+(((IkReal(-0.0950400000000000))*(sj23)))+(((IkReal(-0.0975704400000000))*(x868)))+(((px)*(pz)*(sj20)))+(((IkReal(0.00941400000000000))*(x866)))+(((IkReal(-1.00000000000000))*(cj20)*(py)*(pz)))))));
sj21array[0]=IKsin(j21array[0]);
cj21array[0]=IKcos(j21array[0]);
if( j21array[0] > IKPI )
{
    j21array[0]-=IK2PI;
}
else if( j21array[0] < -IKPI )
{    j21array[0]+=IK2PI;
}
j21valid[0] = true;
for(int ij21 = 0; ij21 < 1; ++ij21)
{
if( !j21valid[ij21] )
{
    continue;
}
_ij21[0] = ij21; _ij21[1] = -1;
for(int iij21 = ij21+1; iij21 < 1; ++iij21)
{
if( j21valid[iij21] && IKabs(cj21array[ij21]-cj21array[iij21]) < IKFAST_SOLUTION_THRESH && IKabs(sj21array[ij21]-sj21array[iij21]) < IKFAST_SOLUTION_THRESH )
{
    j21valid[iij21]=false; _ij21[1] = iij21; break;
}
}
j21 = j21array[ij21]; cj21 = cj21array[ij21]; sj21 = sj21array[ij21];
{
IkReal evalcond[5];
IkReal x869=IKcos(j21);
IkReal x870=IKsin(j21);
IkReal x871=((px)*(sj20));
IkReal x872=((IkReal(0.313800000000000))*(cj23));
IkReal x873=((IkReal(0.0300000000000000))*(cj23));
IkReal x874=((IkReal(1.00000000000000))*(pz));
IkReal x875=((IkReal(0.313800000000000))*(sj23));
IkReal x876=((cj20)*(py));
IkReal x877=((IkReal(0.0300000000000000))*(x869));
IkReal x878=((pz)*(x869));
IkReal x879=((IkReal(0.0300000000000000))*(x870));
IkReal x880=((IkReal(1.00000000000000))*(x876));
IkReal x881=((IkReal(0.0600000000000000))*(x870));
IkReal x882=((IkReal(0.600000000000000))*(x869));
evalcond[0]=((IkReal(0.300000000000000))+(((IkReal(-1.00000000000000))*(x870)*(x874)))+(((x869)*(x871)))+(((IkReal(-0.0300000000000000))*(sj23)))+(((IkReal(-1.00000000000000))*(x869)*(x880)))+(x872));
evalcond[1]=((((IkReal(0.300000000000000))*(x870)))+(((x870)*(x872)))+(((IkReal(-1.00000000000000))*(sj23)*(x879)))+(((x869)*(x875)))+(((x869)*(x873)))+(((IkReal(-1.00000000000000))*(x877)))+(((IkReal(-1.00000000000000))*(x874))));
evalcond[2]=((IkReal(0.0300000000000000))+(((x870)*(x871)))+(((IkReal(-1.00000000000000))*(x870)*(x880)))+(x878)+(((IkReal(-1.00000000000000))*(x875)))+(((IkReal(-1.00000000000000))*(x873))));
evalcond[3]=((((IkReal(0.300000000000000))*(x869)))+(((IkReal(-1.00000000000000))*(sj23)*(x877)))+(((IkReal(-1.00000000000000))*(x880)))+(((IkReal(-1.00000000000000))*(x870)*(x875)))+(((IkReal(-1.00000000000000))*(x870)*(x873)))+(((x869)*(x872)))+(x879)+(x871));
evalcond[4]=((IkReal(0.00847044000000000))+(((x876)*(x882)))+(((x876)*(x881)))+(((IkReal(-1.00000000000000))*(pp)))+(((IkReal(-1.00000000000000))*(x871)*(x882)))+(((IkReal(-1.00000000000000))*(x871)*(x881)))+(((IkReal(-0.0600000000000000))*(x878)))+(((IkReal(0.600000000000000))*(pz)*(x870))));
if( IKabs(evalcond[0]) > 0.000001  || IKabs(evalcond[1]) > 0.000001  || IKabs(evalcond[2]) > 0.000001  || IKabs(evalcond[3]) > 0.000001  || IKabs(evalcond[4]) > 0.000001  )
{
continue;
}
}

rotationfunction0(solutions);
}
}

}

}

} else
{
if( 1 )
{
continue;

} else
{
}
}
}
}

} else
{
{
IkReal j21array[1], cj21array[1], sj21array[1];
bool j21valid[1]={false};
_nj21 = 1;
IkReal x883=((cj20)*(py));
IkReal x884=((IkReal(0.0300000000000000))*(sj23));
IkReal x885=((cj22)*(pz));
IkReal x886=((cj20)*(sj22));
IkReal x887=((IkReal(0.313800000000000))*(cj22)*(cj23));
IkReal x888=((cj22)*(px)*(sj20));
IkReal x889=((px)*(py)*(sj22));
if( IKabs(((gconst46)*(((((sj20)*(x886)*((px)*(px))))+(((x889)*((sj20)*(sj20))))+(((IkReal(0.300000000000000))*(x885)))+(((IkReal(-1.00000000000000))*(py)*(sj20)*(sj22)*(x883)))+(((IkReal(-1.00000000000000))*(px)*(x883)*(x886)))+(((IkReal(0.313800000000000))*(cj23)*(x885)))+(((IkReal(-1.00000000000000))*(x884)*(x885))))))) < IKFAST_ATAN2_MAGTHRESH && IKabs(((gconst46)*(((((py)*(pz)*(sj20)*(sj22)))+(((px)*(pz)*(x886)))+(((x883)*(x887)))+(((IkReal(-1.00000000000000))*(px)*(sj20)*(x887)))+(((IkReal(-1.00000000000000))*(cj22)*(x883)*(x884)))+(((IkReal(-0.300000000000000))*(x888)))+(((IkReal(0.300000000000000))*(cj22)*(x883)))+(((x884)*(x888))))))) < IKFAST_ATAN2_MAGTHRESH )
    continue;
j21array[0]=IKatan2(((gconst46)*(((((sj20)*(x886)*((px)*(px))))+(((x889)*((sj20)*(sj20))))+(((IkReal(0.300000000000000))*(x885)))+(((IkReal(-1.00000000000000))*(py)*(sj20)*(sj22)*(x883)))+(((IkReal(-1.00000000000000))*(px)*(x883)*(x886)))+(((IkReal(0.313800000000000))*(cj23)*(x885)))+(((IkReal(-1.00000000000000))*(x884)*(x885)))))), ((gconst46)*(((((py)*(pz)*(sj20)*(sj22)))+(((px)*(pz)*(x886)))+(((x883)*(x887)))+(((IkReal(-1.00000000000000))*(px)*(sj20)*(x887)))+(((IkReal(-1.00000000000000))*(cj22)*(x883)*(x884)))+(((IkReal(-0.300000000000000))*(x888)))+(((IkReal(0.300000000000000))*(cj22)*(x883)))+(((x884)*(x888)))))));
sj21array[0]=IKsin(j21array[0]);
cj21array[0]=IKcos(j21array[0]);
if( j21array[0] > IKPI )
{
    j21array[0]-=IK2PI;
}
else if( j21array[0] < -IKPI )
{    j21array[0]+=IK2PI;
}
j21valid[0] = true;
for(int ij21 = 0; ij21 < 1; ++ij21)
{
if( !j21valid[ij21] )
{
    continue;
}
_ij21[0] = ij21; _ij21[1] = -1;
for(int iij21 = ij21+1; iij21 < 1; ++iij21)
{
if( j21valid[iij21] && IKabs(cj21array[ij21]-cj21array[iij21]) < IKFAST_SOLUTION_THRESH && IKabs(sj21array[ij21]-sj21array[iij21]) < IKFAST_SOLUTION_THRESH )
{
    j21valid[iij21]=false; _ij21[1] = iij21; break;
}
}
j21 = j21array[ij21]; cj21 = cj21array[ij21]; sj21 = sj21array[ij21];
{
IkReal evalcond[6];
IkReal x890=IKcos(j21);
IkReal x891=IKsin(j21);
IkReal x892=((IkReal(0.313800000000000))*(sj23));
IkReal x893=((IkReal(0.313800000000000))*(cj23));
IkReal x894=((cj22)*(py));
IkReal x895=((IkReal(0.0600000000000000))*(sj20));
IkReal x896=((IkReal(0.0300000000000000))*(cj23));
IkReal x897=((cj20)*(py));
IkReal x898=((IkReal(0.0300000000000000))*(sj23));
IkReal x899=((IkReal(1.00000000000000))*(pz));
IkReal x900=((px)*(sj20));
IkReal x901=((sj22)*(x891));
IkReal x902=((sj22)*(x890));
IkReal x903=((cj20)*(cj22)*(px));
IkReal x904=((IkReal(0.600000000000000))*(x890));
IkReal x905=((pz)*(x902));
evalcond[0]=((IkReal(0.300000000000000))+(((x890)*(x900)))+(((IkReal(-1.00000000000000))*(x898)))+(x893)+(((IkReal(-1.00000000000000))*(x890)*(x897)))+(((IkReal(-1.00000000000000))*(x891)*(x899))));
evalcond[1]=((((IkReal(-1.00000000000000))*(cj22)*(x891)*(x900)))+(((cj20)*(px)*(sj22)))+(((IkReal(-1.00000000000000))*(cj22)*(x890)*(x899)))+(((py)*(sj20)*(sj22)))+(((cj20)*(x891)*(x894))));
evalcond[2]=((((IkReal(-1.00000000000000))*(x896)*(x902)))+(((IkReal(0.0300000000000000))*(x902)))+(((IkReal(-1.00000000000000))*(x899)))+(((IkReal(0.300000000000000))*(x891)))+(((IkReal(-1.00000000000000))*(x892)*(x902)))+(((x891)*(x893)))+(((IkReal(-1.00000000000000))*(x891)*(x898))));
evalcond[3]=((IkReal(0.0300000000000000))+(((IkReal(-1.00000000000000))*(sj20)*(x894)))+(((IkReal(-1.00000000000000))*(x900)*(x901)))+(((IkReal(-1.00000000000000))*(x896)))+(((IkReal(-1.00000000000000))*(x892)))+(((x897)*(x901)))+(((IkReal(-1.00000000000000))*(x903)))+(((IkReal(-1.00000000000000))*(x899)*(x902))));
evalcond[4]=((((IkReal(-0.0300000000000000))*(x901)))+(((x892)*(x901)))+(((IkReal(0.300000000000000))*(x890)))+(((IkReal(-1.00000000000000))*(x897)))+(((x896)*(x901)))+(((x890)*(x893)))+(x900)+(((IkReal(-1.00000000000000))*(x890)*(x898))));
evalcond[5]=((IkReal(0.00847044000000000))+(((IkReal(-1.00000000000000))*(x900)*(x904)))+(((x894)*(x895)))+(((IkReal(-0.0600000000000000))*(x897)*(x901)))+(((x897)*(x904)))+(((IkReal(-1.00000000000000))*(pp)))+(((IkReal(0.0600000000000000))*(x903)))+(((IkReal(0.0600000000000000))*(x905)))+(((IkReal(0.600000000000000))*(pz)*(x891)))+(((px)*(x895)*(x901))));
if( IKabs(evalcond[0]) > 0.000001  || IKabs(evalcond[1]) > 0.000001  || IKabs(evalcond[2]) > 0.000001  || IKabs(evalcond[3]) > 0.000001  || IKabs(evalcond[4]) > 0.000001  || IKabs(evalcond[5]) > 0.000001  )
{
continue;
}
}

rotationfunction0(solutions);
}
}

}

}

} else
{
{
IkReal j21array[1], cj21array[1], sj21array[1];
bool j21valid[1]={false};
_nj21 = 1;
IkReal x906=(sj23)*(sj23);
IkReal x907=(cj23)*(cj23);
IkReal x908=((IkReal(0.00941400000000000))*(sj22));
IkReal x909=((cj23)*(sj22));
if( IKabs(((gconst47)*(((((IkReal(0.000414000000000000))*(x909)))+(((IkReal(0.00900000000000000))*(sj22)))+(((x906)*(x908)))+(((IkReal(-0.0950400000000000))*(sj22)*(sj23)))+(((px)*(pz)*(sj20)))+(((IkReal(-0.0975704400000000))*(sj23)*(x909)))+(((IkReal(-1.00000000000000))*(cj20)*(py)*(pz)))+(((IkReal(-1.00000000000000))*(x907)*(x908))))))) < IKFAST_ATAN2_MAGTHRESH && IKabs(((gconst47)*(((IkReal(-0.0900000000000000))+(((IkReal(-0.000900000000000000))*(x906)))+(((IkReal(0.0180000000000000))*(sj23)))+(((IkReal(-0.188280000000000))*(cj23)))+(((IkReal(0.0188280000000000))*(cj23)*(sj23)))+(((IkReal(-0.0984704400000000))*(x907)))+((pz)*(pz)))))) < IKFAST_ATAN2_MAGTHRESH )
    continue;
j21array[0]=IKatan2(((gconst47)*(((((IkReal(0.000414000000000000))*(x909)))+(((IkReal(0.00900000000000000))*(sj22)))+(((x906)*(x908)))+(((IkReal(-0.0950400000000000))*(sj22)*(sj23)))+(((px)*(pz)*(sj20)))+(((IkReal(-0.0975704400000000))*(sj23)*(x909)))+(((IkReal(-1.00000000000000))*(cj20)*(py)*(pz)))+(((IkReal(-1.00000000000000))*(x907)*(x908)))))), ((gconst47)*(((IkReal(-0.0900000000000000))+(((IkReal(-0.000900000000000000))*(x906)))+(((IkReal(0.0180000000000000))*(sj23)))+(((IkReal(-0.188280000000000))*(cj23)))+(((IkReal(0.0188280000000000))*(cj23)*(sj23)))+(((IkReal(-0.0984704400000000))*(x907)))+((pz)*(pz))))));
sj21array[0]=IKsin(j21array[0]);
cj21array[0]=IKcos(j21array[0]);
if( j21array[0] > IKPI )
{
    j21array[0]-=IK2PI;
}
else if( j21array[0] < -IKPI )
{    j21array[0]+=IK2PI;
}
j21valid[0] = true;
for(int ij21 = 0; ij21 < 1; ++ij21)
{
if( !j21valid[ij21] )
{
    continue;
}
_ij21[0] = ij21; _ij21[1] = -1;
for(int iij21 = ij21+1; iij21 < 1; ++iij21)
{
if( j21valid[iij21] && IKabs(cj21array[ij21]-cj21array[iij21]) < IKFAST_SOLUTION_THRESH && IKabs(sj21array[ij21]-sj21array[iij21]) < IKFAST_SOLUTION_THRESH )
{
    j21valid[iij21]=false; _ij21[1] = iij21; break;
}
}
j21 = j21array[ij21]; cj21 = cj21array[ij21]; sj21 = sj21array[ij21];
{
IkReal evalcond[6];
IkReal x910=IKcos(j21);
IkReal x911=IKsin(j21);
IkReal x912=((IkReal(0.313800000000000))*(sj23));
IkReal x913=((IkReal(0.313800000000000))*(cj23));
IkReal x914=((cj22)*(py));
IkReal x915=((IkReal(0.0600000000000000))*(sj20));
IkReal x916=((IkReal(0.0300000000000000))*(cj23));
IkReal x917=((cj20)*(py));
IkReal x918=((IkReal(0.0300000000000000))*(sj23));
IkReal x919=((IkReal(1.00000000000000))*(pz));
IkReal x920=((px)*(sj20));
IkReal x921=((sj22)*(x911));
IkReal x922=((sj22)*(x910));
IkReal x923=((cj20)*(cj22)*(px));
IkReal x924=((IkReal(0.600000000000000))*(x910));
IkReal x925=((pz)*(x922));
evalcond[0]=((IkReal(0.300000000000000))+(((IkReal(-1.00000000000000))*(x910)*(x917)))+(((IkReal(-1.00000000000000))*(x918)))+(((x910)*(x920)))+(x913)+(((IkReal(-1.00000000000000))*(x911)*(x919))));
evalcond[1]=((((cj20)*(x911)*(x914)))+(((cj20)*(px)*(sj22)))+(((IkReal(-1.00000000000000))*(cj22)*(x910)*(x919)))+(((py)*(sj20)*(sj22)))+(((IkReal(-1.00000000000000))*(cj22)*(x911)*(x920))));
evalcond[2]=((((IkReal(0.0300000000000000))*(x922)))+(((IkReal(-1.00000000000000))*(x912)*(x922)))+(((IkReal(-1.00000000000000))*(x919)))+(((x911)*(x913)))+(((IkReal(-1.00000000000000))*(x916)*(x922)))+(((IkReal(0.300000000000000))*(x911)))+(((IkReal(-1.00000000000000))*(x911)*(x918))));
evalcond[3]=((IkReal(0.0300000000000000))+(((IkReal(-1.00000000000000))*(x920)*(x921)))+(((IkReal(-1.00000000000000))*(x916)))+(((IkReal(-1.00000000000000))*(x912)))+(((IkReal(-1.00000000000000))*(sj20)*(x914)))+(((IkReal(-1.00000000000000))*(x923)))+(((x917)*(x921)))+(((IkReal(-1.00000000000000))*(x919)*(x922))));
evalcond[4]=((((x916)*(x921)))+(((x910)*(x913)))+(((IkReal(-0.0300000000000000))*(x921)))+(((IkReal(-1.00000000000000))*(x910)*(x918)))+(((IkReal(-1.00000000000000))*(x917)))+(((IkReal(0.300000000000000))*(x910)))+(x920)+(((x912)*(x921))));
evalcond[5]=((IkReal(0.00847044000000000))+(((px)*(x915)*(x921)))+(((IkReal(0.600000000000000))*(pz)*(x911)))+(((IkReal(0.0600000000000000))*(x925)))+(((IkReal(0.0600000000000000))*(x923)))+(((x914)*(x915)))+(((IkReal(-1.00000000000000))*(x920)*(x924)))+(((IkReal(-1.00000000000000))*(pp)))+(((IkReal(-0.0600000000000000))*(x917)*(x921)))+(((x917)*(x924))));
if( IKabs(evalcond[0]) > 0.000001  || IKabs(evalcond[1]) > 0.000001  || IKabs(evalcond[2]) > 0.000001  || IKabs(evalcond[3]) > 0.000001  || IKabs(evalcond[4]) > 0.000001  || IKabs(evalcond[5]) > 0.000001  )
{
continue;
}
}

rotationfunction0(solutions);
}
}

}

}
}
}

}

}

} else
{
{
IkReal j20array[2], cj20array[2], sj20array[2];
bool j20valid[2]={false};
_nj20 = 2;
IkReal x926=((IkReal(0.0300000000000000))*(cj22));
if( IKabs(((IkReal(-1.00000000000000))*(px))) < IKFAST_ATAN2_MAGTHRESH && IKabs(((IkReal(-1.00000000000000))*(py))) < IKFAST_ATAN2_MAGTHRESH )
    continue;
IkReal x927=((IkReal(1.00000000000000))*(IKatan2(((IkReal(-1.00000000000000))*(px)), ((IkReal(-1.00000000000000))*(py)))));
if( ((((px)*(px))+((py)*(py)))) < (IkReal)-0.00001 )
    continue;
if( (((((IKabs(IKabs(IKsqrt((((px)*(px))+((py)*(py)))))) != 0)?((IkReal)1/(IKabs(IKsqrt((((px)*(px))+((py)*(py))))))):(IkReal)1.0e30))*(((((IkReal(-0.313800000000000))*(cj22)*(sj23)))+(((IkReal(-1.00000000000000))*(cj23)*(x926)))+(x926))))) < -1-IKFAST_SINCOS_THRESH || (((((IKabs(IKabs(IKsqrt((((px)*(px))+((py)*(py)))))) != 0)?((IkReal)1/(IKabs(IKsqrt((((px)*(px))+((py)*(py))))))):(IkReal)1.0e30))*(((((IkReal(-0.313800000000000))*(cj22)*(sj23)))+(((IkReal(-1.00000000000000))*(cj23)*(x926)))+(x926))))) > 1+IKFAST_SINCOS_THRESH )
    continue;
IkReal x928=IKasin(((((IKabs(IKabs(IKsqrt((((px)*(px))+((py)*(py)))))) != 0)?((IkReal)1/(IKabs(IKsqrt((((px)*(px))+((py)*(py))))))):(IkReal)1.0e30))*(((((IkReal(-0.313800000000000))*(cj22)*(sj23)))+(((IkReal(-1.00000000000000))*(cj23)*(x926)))+(x926)))));
j20array[0]=((((IkReal(-1.00000000000000))*(x927)))+(((IkReal(-1.00000000000000))*(x928))));
sj20array[0]=IKsin(j20array[0]);
cj20array[0]=IKcos(j20array[0]);
j20array[1]=((IkReal(3.14159265358979))+(((IkReal(-1.00000000000000))*(x927)))+(x928));
sj20array[1]=IKsin(j20array[1]);
cj20array[1]=IKcos(j20array[1]);
if( j20array[0] > IKPI )
{
    j20array[0]-=IK2PI;
}
else if( j20array[0] < -IKPI )
{    j20array[0]+=IK2PI;
}
j20valid[0] = true;
if( j20array[1] > IKPI )
{
    j20array[1]-=IK2PI;
}
else if( j20array[1] < -IKPI )
{    j20array[1]+=IK2PI;
}
j20valid[1] = true;
for(int ij20 = 0; ij20 < 2; ++ij20)
{
if( !j20valid[ij20] )
{
    continue;
}
_ij20[0] = ij20; _ij20[1] = -1;
for(int iij20 = ij20+1; iij20 < 2; ++iij20)
{
if( j20valid[iij20] && IKabs(cj20array[ij20]-cj20array[iij20]) < IKFAST_SOLUTION_THRESH && IKabs(sj20array[ij20]-sj20array[iij20]) < IKFAST_SOLUTION_THRESH )
{
    j20valid[iij20]=false; _ij20[1] = iij20; break;
}
}
j20 = j20array[ij20]; cj20 = cj20array[ij20]; sj20 = sj20array[ij20];

{
IkReal dummyeval[1];
IkReal gconst47;
IkReal x929=((px)*(sj20));
IkReal x930=((IkReal(0.0300000000000000))*(sj23));
IkReal x931=((IkReal(0.313800000000000))*(cj23));
IkReal x932=((cj20)*(py));
IkReal x933=((IkReal(0.0300000000000000))*(pz)*(sj22));
gconst47=IKsign(((((IkReal(-1.00000000000000))*(x931)*(x932)))+(((IkReal(-0.313800000000000))*(pz)*(sj22)*(sj23)))+(((IkReal(0.300000000000000))*(x929)))+(((x930)*(x932)))+(((IkReal(-1.00000000000000))*(cj23)*(x933)))+(((IkReal(-1.00000000000000))*(x929)*(x930)))+(((IkReal(-0.300000000000000))*(x932)))+(x933)+(((x929)*(x931)))));
IkReal x934=((px)*(sj20));
IkReal x935=((IkReal(10.4600000000000))*(cj23));
IkReal x936=((pz)*(sj22));
IkReal x937=((cj20)*(py));
dummyeval[0]=((((IkReal(-1.00000000000000))*(x935)*(x937)))+(((IkReal(-10.0000000000000))*(x937)))+(((sj23)*(x937)))+(((IkReal(-10.4600000000000))*(sj23)*(x936)))+(((IkReal(-1.00000000000000))*(sj23)*(x934)))+(((IkReal(-1.00000000000000))*(cj23)*(x936)))+(((x934)*(x935)))+(x936)+(((IkReal(10.0000000000000))*(x934))));
if( IKabs(dummyeval[0]) < 0.0000010000000000  )
{
{
IkReal dummyeval[1];
IkReal gconst46;
gconst46=IKsign(((((cj22)*((px)*(px))*((sj20)*(sj20))))+(((IkReal(-2.00000000000000))*(cj20)*(cj22)*(px)*(py)*(sj20)))+(((cj22)*((cj20)*(cj20))*((py)*(py))))+(((cj22)*((pz)*(pz))))));
dummyeval[0]=((((cj22)*((px)*(px))*((sj20)*(sj20))))+(((IkReal(-2.00000000000000))*(cj20)*(cj22)*(px)*(py)*(sj20)))+(((cj22)*((cj20)*(cj20))*((py)*(py))))+(((cj22)*((pz)*(pz)))));
if( IKabs(dummyeval[0]) < 0.0000010000000000  )
{
{
IkReal evalcond[4];
IkReal x938=((py)*(sj20));
IkReal x939=((cj20)*(px));
evalcond[0]=((IkReal(-3.14159265358979))+(IKfmod(((IkReal(1.57079632679490))+(j22)), IkReal(6.28318530717959))));
evalcond[1]=((IkReal(0.190270440000000))+(((IkReal(0.186480000000000))*(cj23)))+(((IkReal(-1.00000000000000))*(pp)))+(((IkReal(-0.0368280000000000))*(sj23))));
evalcond[2]=((((IkReal(-1.00000000000000))*(x939)))+(((IkReal(-1.00000000000000))*(x938))));
evalcond[3]=((x939)+(x938));
if( IKabs(evalcond[0]) < 0.0000010000000000  && IKabs(evalcond[1]) < 0.0000010000000000  && IKabs(evalcond[2]) < 0.0000010000000000  && IKabs(evalcond[3]) < 0.0000010000000000  )
{
{
IkReal dummyeval[1];
IkReal gconst49;
IkReal x940=((px)*(sj20));
IkReal x941=((IkReal(0.313800000000000))*(cj23));
IkReal x942=((IkReal(0.0300000000000000))*(sj23));
IkReal x943=((cj20)*(py));
IkReal x944=((IkReal(0.0300000000000000))*(pz));
gconst49=IKsign(((((IkReal(-1.00000000000000))*(x941)*(x943)))+(((IkReal(-0.300000000000000))*(x943)))+(((x942)*(x943)))+(((IkReal(0.300000000000000))*(x940)))+(((IkReal(-0.313800000000000))*(pz)*(sj23)))+(((IkReal(-1.00000000000000))*(cj23)*(x944)))+(((x940)*(x941)))+(x944)+(((IkReal(-1.00000000000000))*(x940)*(x942)))));
IkReal x945=((px)*(sj20));
IkReal x946=((IkReal(10.4600000000000))*(cj23));
IkReal x947=((cj20)*(py));
dummyeval[0]=((((IkReal(-10.4600000000000))*(pz)*(sj23)))+(((x945)*(x946)))+(((IkReal(-10.0000000000000))*(x947)))+(((IkReal(-1.00000000000000))*(x946)*(x947)))+(((sj23)*(x947)))+(((IkReal(10.0000000000000))*(x945)))+(pz)+(((IkReal(-1.00000000000000))*(sj23)*(x945)))+(((IkReal(-1.00000000000000))*(cj23)*(pz))));
if( IKabs(dummyeval[0]) < 0.0000010000000000  )
{
{
IkReal dummyeval[1];
IkReal gconst48;
gconst48=IKsign((((((cj20)*(cj20))*((py)*(py))))+((pz)*(pz))+(((IkReal(-2.00000000000000))*(cj20)*(px)*(py)*(sj20)))+((((px)*(px))*((sj20)*(sj20))))));
dummyeval[0]=(((((cj20)*(cj20))*((py)*(py))))+((pz)*(pz))+(((IkReal(-2.00000000000000))*(cj20)*(px)*(py)*(sj20)))+((((px)*(px))*((sj20)*(sj20)))));
if( IKabs(dummyeval[0]) < 0.0000010000000000  )
{
continue;

} else
{
{
IkReal j21array[1], cj21array[1], sj21array[1];
bool j21valid[1]={false};
_nj21 = 1;
IkReal x948=((IkReal(0.0300000000000000))*(sj23));
IkReal x949=((cj20)*(py));
IkReal x950=((px)*(sj20));
IkReal x951=((IkReal(0.313800000000000))*(sj23));
IkReal x952=((IkReal(0.313800000000000))*(cj23));
IkReal x953=((IkReal(0.0300000000000000))*(pz));
IkReal x954=((IkReal(0.0300000000000000))*(cj23));
if( IKabs(((gconst48)*(((((IkReal(-1.00000000000000))*(pz)*(x948)))+(((IkReal(0.300000000000000))*(pz)))+(((x949)*(x954)))+(((x949)*(x951)))+(((pz)*(x952)))+(((IkReal(0.0300000000000000))*(x950)))+(((IkReal(-0.0300000000000000))*(x949)))+(((IkReal(-1.00000000000000))*(x950)*(x951)))+(((IkReal(-1.00000000000000))*(x950)*(x954))))))) < IKFAST_ATAN2_MAGTHRESH && IKabs(((gconst48)*(((((IkReal(-1.00000000000000))*(cj23)*(x953)))+(((IkReal(-1.00000000000000))*(pz)*(x951)))+(((x949)*(x952)))+(((IkReal(-1.00000000000000))*(x948)*(x949)))+(((x948)*(x950)))+(((IkReal(0.300000000000000))*(x949)))+(((IkReal(-1.00000000000000))*(x950)*(x952)))+(((IkReal(-0.300000000000000))*(x950)))+(x953))))) < IKFAST_ATAN2_MAGTHRESH )
    continue;
j21array[0]=IKatan2(((gconst48)*(((((IkReal(-1.00000000000000))*(pz)*(x948)))+(((IkReal(0.300000000000000))*(pz)))+(((x949)*(x954)))+(((x949)*(x951)))+(((pz)*(x952)))+(((IkReal(0.0300000000000000))*(x950)))+(((IkReal(-0.0300000000000000))*(x949)))+(((IkReal(-1.00000000000000))*(x950)*(x951)))+(((IkReal(-1.00000000000000))*(x950)*(x954)))))), ((gconst48)*(((((IkReal(-1.00000000000000))*(cj23)*(x953)))+(((IkReal(-1.00000000000000))*(pz)*(x951)))+(((x949)*(x952)))+(((IkReal(-1.00000000000000))*(x948)*(x949)))+(((x948)*(x950)))+(((IkReal(0.300000000000000))*(x949)))+(((IkReal(-1.00000000000000))*(x950)*(x952)))+(((IkReal(-0.300000000000000))*(x950)))+(x953)))));
sj21array[0]=IKsin(j21array[0]);
cj21array[0]=IKcos(j21array[0]);
if( j21array[0] > IKPI )
{
    j21array[0]-=IK2PI;
}
else if( j21array[0] < -IKPI )
{    j21array[0]+=IK2PI;
}
j21valid[0] = true;
for(int ij21 = 0; ij21 < 1; ++ij21)
{
if( !j21valid[ij21] )
{
    continue;
}
_ij21[0] = ij21; _ij21[1] = -1;
for(int iij21 = ij21+1; iij21 < 1; ++iij21)
{
if( j21valid[iij21] && IKabs(cj21array[ij21]-cj21array[iij21]) < IKFAST_SOLUTION_THRESH && IKabs(sj21array[ij21]-sj21array[iij21]) < IKFAST_SOLUTION_THRESH )
{
    j21valid[iij21]=false; _ij21[1] = iij21; break;
}
}
j21 = j21array[ij21]; cj21 = cj21array[ij21]; sj21 = sj21array[ij21];
{
IkReal evalcond[5];
IkReal x955=IKcos(j21);
IkReal x956=IKsin(j21);
IkReal x957=((cj20)*(py));
IkReal x958=((px)*(sj20));
IkReal x959=((IkReal(0.313800000000000))*(cj23));
IkReal x960=((IkReal(0.0300000000000000))*(cj23));
IkReal x961=((IkReal(1.00000000000000))*(pz));
IkReal x962=((IkReal(0.313800000000000))*(sj23));
IkReal x963=((IkReal(0.0300000000000000))*(x955));
IkReal x964=((IkReal(0.0300000000000000))*(x956));
IkReal x965=((IkReal(0.0600000000000000))*(x956));
IkReal x966=((IkReal(0.600000000000000))*(x955));
evalcond[0]=((IkReal(0.300000000000000))+(((x955)*(x958)))+(((IkReal(-1.00000000000000))*(x956)*(x961)))+(((IkReal(-0.0300000000000000))*(sj23)))+(((IkReal(-1.00000000000000))*(x955)*(x957)))+(x959));
evalcond[1]=((((IkReal(0.300000000000000))*(x956)))+(((IkReal(-1.00000000000000))*(sj23)*(x964)))+(((x956)*(x959)))+(((IkReal(-1.00000000000000))*(x955)*(x960)))+(((IkReal(-1.00000000000000))*(x955)*(x962)))+(x963)+(((IkReal(-1.00000000000000))*(x961))));
evalcond[2]=((IkReal(0.0300000000000000))+(((IkReal(-1.00000000000000))*(x956)*(x958)))+(((x956)*(x957)))+(((IkReal(-1.00000000000000))*(x955)*(x961)))+(((IkReal(-1.00000000000000))*(x962)))+(((IkReal(-1.00000000000000))*(x960))));
evalcond[3]=((((x955)*(x959)))+(((IkReal(0.300000000000000))*(x955)))+(((IkReal(-1.00000000000000))*(sj23)*(x963)))+(((IkReal(-1.00000000000000))*(x957)))+(((x956)*(x962)))+(((x956)*(x960)))+(x958)+(((IkReal(-1.00000000000000))*(x964))));
evalcond[4]=((IkReal(0.00847044000000000))+(((IkReal(-1.00000000000000))*(pp)))+(((IkReal(-1.00000000000000))*(x958)*(x966)))+(((x957)*(x966)))+(((IkReal(-1.00000000000000))*(x957)*(x965)))+(((x958)*(x965)))+(((IkReal(0.600000000000000))*(pz)*(x956)))+(((IkReal(0.0600000000000000))*(pz)*(x955))));
if( IKabs(evalcond[0]) > 0.000001  || IKabs(evalcond[1]) > 0.000001  || IKabs(evalcond[2]) > 0.000001  || IKabs(evalcond[3]) > 0.000001  || IKabs(evalcond[4]) > 0.000001  )
{
continue;
}
}

rotationfunction0(solutions);
}
}

}

}

} else
{
{
IkReal j21array[1], cj21array[1], sj21array[1];
bool j21valid[1]={false};
_nj21 = 1;
IkReal x967=(sj23)*(sj23);
IkReal x968=(cj23)*(cj23);
IkReal x969=((cj23)*(sj23));
if( IKabs(((gconst49)*(((IkReal(0.00900000000000000))+(((IkReal(0.000414000000000000))*(cj23)))+(((IkReal(-0.0950400000000000))*(sj23)))+(((px)*(pz)*(sj20)))+(((IkReal(0.00941400000000000))*(x967)))+(((IkReal(-0.0975704400000000))*(x969)))+(((IkReal(-1.00000000000000))*(cj20)*(py)*(pz)))+(((IkReal(-0.00941400000000000))*(x968))))))) < IKFAST_ATAN2_MAGTHRESH && IKabs(((gconst49)*(((IkReal(-0.0900000000000000))+(((IkReal(0.0180000000000000))*(sj23)))+(((IkReal(-0.188280000000000))*(cj23)))+((pz)*(pz))+(((IkReal(-0.000900000000000000))*(x967)))+(((IkReal(0.0188280000000000))*(x969)))+(((IkReal(-0.0984704400000000))*(x968))))))) < IKFAST_ATAN2_MAGTHRESH )
    continue;
j21array[0]=IKatan2(((gconst49)*(((IkReal(0.00900000000000000))+(((IkReal(0.000414000000000000))*(cj23)))+(((IkReal(-0.0950400000000000))*(sj23)))+(((px)*(pz)*(sj20)))+(((IkReal(0.00941400000000000))*(x967)))+(((IkReal(-0.0975704400000000))*(x969)))+(((IkReal(-1.00000000000000))*(cj20)*(py)*(pz)))+(((IkReal(-0.00941400000000000))*(x968)))))), ((gconst49)*(((IkReal(-0.0900000000000000))+(((IkReal(0.0180000000000000))*(sj23)))+(((IkReal(-0.188280000000000))*(cj23)))+((pz)*(pz))+(((IkReal(-0.000900000000000000))*(x967)))+(((IkReal(0.0188280000000000))*(x969)))+(((IkReal(-0.0984704400000000))*(x968)))))));
sj21array[0]=IKsin(j21array[0]);
cj21array[0]=IKcos(j21array[0]);
if( j21array[0] > IKPI )
{
    j21array[0]-=IK2PI;
}
else if( j21array[0] < -IKPI )
{    j21array[0]+=IK2PI;
}
j21valid[0] = true;
for(int ij21 = 0; ij21 < 1; ++ij21)
{
if( !j21valid[ij21] )
{
    continue;
}
_ij21[0] = ij21; _ij21[1] = -1;
for(int iij21 = ij21+1; iij21 < 1; ++iij21)
{
if( j21valid[iij21] && IKabs(cj21array[ij21]-cj21array[iij21]) < IKFAST_SOLUTION_THRESH && IKabs(sj21array[ij21]-sj21array[iij21]) < IKFAST_SOLUTION_THRESH )
{
    j21valid[iij21]=false; _ij21[1] = iij21; break;
}
}
j21 = j21array[ij21]; cj21 = cj21array[ij21]; sj21 = sj21array[ij21];
{
IkReal evalcond[5];
IkReal x970=IKcos(j21);
IkReal x971=IKsin(j21);
IkReal x972=((cj20)*(py));
IkReal x973=((px)*(sj20));
IkReal x974=((IkReal(0.313800000000000))*(cj23));
IkReal x975=((IkReal(0.0300000000000000))*(cj23));
IkReal x976=((IkReal(1.00000000000000))*(pz));
IkReal x977=((IkReal(0.313800000000000))*(sj23));
IkReal x978=((IkReal(0.0300000000000000))*(x970));
IkReal x979=((IkReal(0.0300000000000000))*(x971));
IkReal x980=((IkReal(0.0600000000000000))*(x971));
IkReal x981=((IkReal(0.600000000000000))*(x970));
evalcond[0]=((IkReal(0.300000000000000))+(((IkReal(-1.00000000000000))*(x971)*(x976)))+(((IkReal(-0.0300000000000000))*(sj23)))+(((x970)*(x973)))+(((IkReal(-1.00000000000000))*(x970)*(x972)))+(x974));
evalcond[1]=((((IkReal(0.300000000000000))*(x971)))+(((IkReal(-1.00000000000000))*(sj23)*(x979)))+(((IkReal(-1.00000000000000))*(x970)*(x977)))+(((IkReal(-1.00000000000000))*(x970)*(x975)))+(((x971)*(x974)))+(x978)+(((IkReal(-1.00000000000000))*(x976))));
evalcond[2]=((IkReal(0.0300000000000000))+(((IkReal(-1.00000000000000))*(x971)*(x973)))+(((IkReal(-1.00000000000000))*(x970)*(x976)))+(((x971)*(x972)))+(((IkReal(-1.00000000000000))*(x975)))+(((IkReal(-1.00000000000000))*(x977))));
evalcond[3]=((((IkReal(-1.00000000000000))*(x972)))+(((IkReal(0.300000000000000))*(x970)))+(((IkReal(-1.00000000000000))*(sj23)*(x978)))+(((x971)*(x977)))+(((x971)*(x975)))+(((x970)*(x974)))+(x973)+(((IkReal(-1.00000000000000))*(x979))));
evalcond[4]=((IkReal(0.00847044000000000))+(((IkReal(0.0600000000000000))*(pz)*(x970)))+(((x972)*(x981)))+(((x973)*(x980)))+(((IkReal(-1.00000000000000))*(pp)))+(((IkReal(-1.00000000000000))*(x972)*(x980)))+(((IkReal(-1.00000000000000))*(x973)*(x981)))+(((IkReal(0.600000000000000))*(pz)*(x971))));
if( IKabs(evalcond[0]) > 0.000001  || IKabs(evalcond[1]) > 0.000001  || IKabs(evalcond[2]) > 0.000001  || IKabs(evalcond[3]) > 0.000001  || IKabs(evalcond[4]) > 0.000001  )
{
continue;
}
}

rotationfunction0(solutions);
}
}

}

}

} else
{
IkReal x982=((((IkReal(-1.00000000000000))*(py)*(sj20)))+(((IkReal(-1.00000000000000))*(cj20)*(px))));
evalcond[0]=((IkReal(-3.14159265358979))+(IKfmod(((IkReal(4.71238898038469))+(j22)), IkReal(6.28318530717959))));
evalcond[1]=((IkReal(0.190270440000000))+(((IkReal(0.186480000000000))*(cj23)))+(((IkReal(-1.00000000000000))*(pp)))+(((IkReal(-0.0368280000000000))*(sj23))));
evalcond[2]=x982;
evalcond[3]=x982;
if( IKabs(evalcond[0]) < 0.0000010000000000  && IKabs(evalcond[1]) < 0.0000010000000000  && IKabs(evalcond[2]) < 0.0000010000000000  && IKabs(evalcond[3]) < 0.0000010000000000  )
{
{
IkReal dummyeval[1];
IkReal gconst51;
IkReal x983=((cj20)*(py));
IkReal x984=((IkReal(0.313800000000000))*(sj23));
IkReal x985=((px)*(sj20));
IkReal x986=((IkReal(0.0300000000000000))*(cj23));
gconst51=IKsign(((((IkReal(-0.300000000000000))*(pz)))+(((IkReal(-0.313800000000000))*(cj23)*(pz)))+(((IkReal(0.0300000000000000))*(pz)*(sj23)))+(((IkReal(0.0300000000000000))*(x983)))+(((x984)*(x985)))+(((x985)*(x986)))+(((IkReal(-0.0300000000000000))*(x985)))+(((IkReal(-1.00000000000000))*(x983)*(x984)))+(((IkReal(-1.00000000000000))*(x983)*(x986)))));
IkReal x987=((IkReal(10.4600000000000))*(sj23));
IkReal x988=((px)*(sj20));
IkReal x989=((cj20)*(py));
dummyeval[0]=((((cj23)*(x988)))+(((IkReal(-1.00000000000000))*(x988)))+(((IkReal(-10.4600000000000))*(cj23)*(pz)))+(((IkReal(-1.00000000000000))*(cj23)*(x989)))+(((IkReal(-10.0000000000000))*(pz)))+(((IkReal(-1.00000000000000))*(x987)*(x989)))+(((x987)*(x988)))+(x989)+(((pz)*(sj23))));
if( IKabs(dummyeval[0]) < 0.0000010000000000  )
{
{
IkReal dummyeval[1];
IkReal gconst50;
gconst50=IKsign((((((cj20)*(cj20))*((py)*(py))))+((pz)*(pz))+(((IkReal(-2.00000000000000))*(cj20)*(px)*(py)*(sj20)))+((((px)*(px))*((sj20)*(sj20))))));
dummyeval[0]=(((((cj20)*(cj20))*((py)*(py))))+((pz)*(pz))+(((IkReal(-2.00000000000000))*(cj20)*(px)*(py)*(sj20)))+((((px)*(px))*((sj20)*(sj20)))));
if( IKabs(dummyeval[0]) < 0.0000010000000000  )
{
{
IkReal evalcond[4];
IkReal x990=x982;
evalcond[0]=((IKabs(pz))+(IKabs(((IkReal(-3.14159265358979))+(IKfmod(((IkReal(3.14159265358979))+(j23)), IkReal(6.28318530717959)))))));
evalcond[1]=((IkReal(0.376750440000000))+(((IkReal(-1.00000000000000))*(pp))));
evalcond[2]=x990;
evalcond[3]=x990;
if( IKabs(evalcond[0]) < 0.0000010000000000  && IKabs(evalcond[1]) < 0.0000010000000000  && IKabs(evalcond[2]) < 0.0000010000000000  && IKabs(evalcond[3]) < 0.0000010000000000  )
{
{
IkReal dummyeval[1];
dummyeval[0]=((((cj20)*(py)))+(((IkReal(-1.00000000000000))*(px)*(sj20))));
if( IKabs(dummyeval[0]) < 0.0000010000000000  )
{
{
IkReal dummyeval[2];
IkReal x991=((cj20)*(py));
IkReal x992=((px)*(sj20));
dummyeval[0]=((((IkReal(2.00000000000000))*(x991)*(x992)))+(((IkReal(-1.00000000000000))*((x991)*(x991))))+(((IkReal(-1.00000000000000))*((x992)*(x992)))));
dummyeval[1]=((((IkReal(-1.00000000000000))*(x991)))+(x992));
if( IKabs(dummyeval[0]) < 0.0000010000000000  || IKabs(dummyeval[1]) < 0.0000010000000000  )
{
{
IkReal evalcond[7];
IkReal x993=((IkReal(1.00000000000000))*(pp));
IkReal x994=((IkReal(-1.00000000000000))*(py));
evalcond[0]=((IKabs(px))+(IKabs(((IkReal(-3.14159265358979))+(IKfmod(((IkReal(1.57079632679490))+(j20)), IkReal(6.28318530717959)))))));
evalcond[1]=((IkReal(0.376750440000000))+(((IkReal(-1.00000000000000))*(x993))));
evalcond[2]=x994;
evalcond[3]=IkReal(0.613800000000000);
evalcond[4]=x994;
evalcond[5]=IkReal(0);
evalcond[6]=((IkReal(0.00847044000000000))+(((IkReal(-1.00000000000000))*(x993))));
if( IKabs(evalcond[0]) < 0.0000010000000000  && IKabs(evalcond[1]) < 0.0000010000000000  && IKabs(evalcond[2]) < 0.0000010000000000  && IKabs(evalcond[3]) < 0.0000010000000000  && IKabs(evalcond[4]) < 0.0000010000000000  && IKabs(evalcond[5]) < 0.0000010000000000  && IKabs(evalcond[6]) < 0.0000010000000000  )
{
{
IkReal dummyeval[1];
dummyeval[0]=IkReal(-1.00000000000000);
if( IKabs(dummyeval[0]) < 0.0000001000000000  )
{
continue;

} else
{
IkReal op[2+1], zeror[2];
int numroots;
op[0]=IkReal(-1.00000000000000);
op[1]=IkReal(0);
op[2]=IkReal(1.00000000000000);
polyroots2(op,zeror,numroots);
IkReal j21array[2], cj21array[2], sj21array[2], tempj21array[1];
int numsolutions = 0;
for(int ij21 = 0; ij21 < numroots; ++ij21)
{
IkReal htj21 = zeror[ij21];
tempj21array[0]=((IkReal(2.00000000000000))*(atan(htj21)));
for(int kj21 = 0; kj21 < 1; ++kj21)
{
j21array[numsolutions] = tempj21array[kj21];
if( j21array[numsolutions] > IKPI )
{
    j21array[numsolutions]-=IK2PI;
}
else if( j21array[numsolutions] < -IKPI )
{
    j21array[numsolutions]+=IK2PI;
}
sj21array[numsolutions] = IKsin(j21array[numsolutions]);
cj21array[numsolutions] = IKcos(j21array[numsolutions]);
numsolutions++;
}
}
bool j21valid[2]={true,true};
_nj21 = 2;
for(int ij21 = 0; ij21 < numsolutions; ++ij21)
    {
if( !j21valid[ij21] )
{
    continue;
}
    j21 = j21array[ij21]; cj21 = cj21array[ij21]; sj21 = sj21array[ij21];
htj21 = IKtan(j21/2);

_ij21[0] = ij21; _ij21[1] = -1;
for(int iij21 = ij21+1; iij21 < numsolutions; ++iij21)
{
if( j21valid[iij21] && IKabs(cj21array[ij21]-cj21array[iij21]) < IKFAST_SOLUTION_THRESH && IKabs(sj21array[ij21]-sj21array[iij21]) < IKFAST_SOLUTION_THRESH )
{
    j21valid[iij21]=false; _ij21[1] = iij21; break;
}
}
rotationfunction0(solutions);
    }

}

}

} else
{
IkReal x995=((IkReal(1.00000000000000))*(pp));
evalcond[0]=((IKabs(px))+(IKabs(((IkReal(-3.14159265358979))+(IKfmod(((IkReal(4.71238898038469))+(j20)), IkReal(6.28318530717959)))))));
evalcond[1]=((IkReal(0.376750440000000))+(((IkReal(-1.00000000000000))*(x995))));
evalcond[2]=py;
evalcond[3]=IkReal(0.613800000000000);
evalcond[4]=py;
evalcond[5]=IkReal(0);
evalcond[6]=((IkReal(0.00847044000000000))+(((IkReal(-1.00000000000000))*(x995))));
if( IKabs(evalcond[0]) < 0.0000010000000000  && IKabs(evalcond[1]) < 0.0000010000000000  && IKabs(evalcond[2]) < 0.0000010000000000  && IKabs(evalcond[3]) < 0.0000010000000000  && IKabs(evalcond[4]) < 0.0000010000000000  && IKabs(evalcond[5]) < 0.0000010000000000  && IKabs(evalcond[6]) < 0.0000010000000000  )
{
{
IkReal dummyeval[1];
dummyeval[0]=IkReal(-1.00000000000000);
if( IKabs(dummyeval[0]) < 0.0000001000000000  )
{
continue;

} else
{
IkReal op[2+1], zeror[2];
int numroots;
op[0]=IkReal(-1.00000000000000);
op[1]=IkReal(0);
op[2]=IkReal(1.00000000000000);
polyroots2(op,zeror,numroots);
IkReal j21array[2], cj21array[2], sj21array[2], tempj21array[1];
int numsolutions = 0;
for(int ij21 = 0; ij21 < numroots; ++ij21)
{
IkReal htj21 = zeror[ij21];
tempj21array[0]=((IkReal(2.00000000000000))*(atan(htj21)));
for(int kj21 = 0; kj21 < 1; ++kj21)
{
j21array[numsolutions] = tempj21array[kj21];
if( j21array[numsolutions] > IKPI )
{
    j21array[numsolutions]-=IK2PI;
}
else if( j21array[numsolutions] < -IKPI )
{
    j21array[numsolutions]+=IK2PI;
}
sj21array[numsolutions] = IKsin(j21array[numsolutions]);
cj21array[numsolutions] = IKcos(j21array[numsolutions]);
numsolutions++;
}
}
bool j21valid[2]={true,true};
_nj21 = 2;
for(int ij21 = 0; ij21 < numsolutions; ++ij21)
    {
if( !j21valid[ij21] )
{
    continue;
}
    j21 = j21array[ij21]; cj21 = cj21array[ij21]; sj21 = sj21array[ij21];
htj21 = IKtan(j21/2);

_ij21[0] = ij21; _ij21[1] = -1;
for(int iij21 = ij21+1; iij21 < numsolutions; ++iij21)
{
if( j21valid[iij21] && IKabs(cj21array[ij21]-cj21array[iij21]) < IKFAST_SOLUTION_THRESH && IKabs(sj21array[ij21]-sj21array[iij21]) < IKFAST_SOLUTION_THRESH )
{
    j21valid[iij21]=false; _ij21[1] = iij21; break;
}
}
rotationfunction0(solutions);
    }

}

}

} else
{
IkReal x996=((IkReal(1.00000000000000))*(pp));
IkReal x997=((IkReal(-1.00000000000000))*(px));
evalcond[0]=((IKabs(py))+(IKabs(((IkReal(-3.14159265358979))+(IKfmod(((IkReal(3.14159265358979))+(j20)), IkReal(6.28318530717959)))))));
evalcond[1]=((IkReal(0.376750440000000))+(((IkReal(-1.00000000000000))*(x996))));
evalcond[2]=x997;
evalcond[3]=IkReal(0.613800000000000);
evalcond[4]=x997;
evalcond[5]=IkReal(0);
evalcond[6]=((IkReal(0.00847044000000000))+(((IkReal(-1.00000000000000))*(x996))));
if( IKabs(evalcond[0]) < 0.0000010000000000  && IKabs(evalcond[1]) < 0.0000010000000000  && IKabs(evalcond[2]) < 0.0000010000000000  && IKabs(evalcond[3]) < 0.0000010000000000  && IKabs(evalcond[4]) < 0.0000010000000000  && IKabs(evalcond[5]) < 0.0000010000000000  && IKabs(evalcond[6]) < 0.0000010000000000  )
{
{
IkReal dummyeval[1];
dummyeval[0]=IkReal(-1.00000000000000);
if( IKabs(dummyeval[0]) < 0.0000001000000000  )
{
continue;

} else
{
IkReal op[2+1], zeror[2];
int numroots;
op[0]=IkReal(-1.00000000000000);
op[1]=IkReal(0);
op[2]=IkReal(1.00000000000000);
polyroots2(op,zeror,numroots);
IkReal j21array[2], cj21array[2], sj21array[2], tempj21array[1];
int numsolutions = 0;
for(int ij21 = 0; ij21 < numroots; ++ij21)
{
IkReal htj21 = zeror[ij21];
tempj21array[0]=((IkReal(2.00000000000000))*(atan(htj21)));
for(int kj21 = 0; kj21 < 1; ++kj21)
{
j21array[numsolutions] = tempj21array[kj21];
if( j21array[numsolutions] > IKPI )
{
    j21array[numsolutions]-=IK2PI;
}
else if( j21array[numsolutions] < -IKPI )
{
    j21array[numsolutions]+=IK2PI;
}
sj21array[numsolutions] = IKsin(j21array[numsolutions]);
cj21array[numsolutions] = IKcos(j21array[numsolutions]);
numsolutions++;
}
}
bool j21valid[2]={true,true};
_nj21 = 2;
for(int ij21 = 0; ij21 < numsolutions; ++ij21)
    {
if( !j21valid[ij21] )
{
    continue;
}
    j21 = j21array[ij21]; cj21 = cj21array[ij21]; sj21 = sj21array[ij21];
htj21 = IKtan(j21/2);

_ij21[0] = ij21; _ij21[1] = -1;
for(int iij21 = ij21+1; iij21 < numsolutions; ++iij21)
{
if( j21valid[iij21] && IKabs(cj21array[ij21]-cj21array[iij21]) < IKFAST_SOLUTION_THRESH && IKabs(sj21array[ij21]-sj21array[iij21]) < IKFAST_SOLUTION_THRESH )
{
    j21valid[iij21]=false; _ij21[1] = iij21; break;
}
}
rotationfunction0(solutions);
    }

}

}

} else
{
IkReal x998=((IkReal(1.00000000000000))*(pp));
evalcond[0]=((IKabs(py))+(IKabs(((IkReal(-3.14159265358979))+(IKfmod(j20, IkReal(6.28318530717959)))))));
evalcond[1]=((IkReal(0.376750440000000))+(((IkReal(-1.00000000000000))*(x998))));
evalcond[2]=px;
evalcond[3]=IkReal(0.613800000000000);
evalcond[4]=px;
evalcond[5]=IkReal(0);
evalcond[6]=((IkReal(0.00847044000000000))+(((IkReal(-1.00000000000000))*(x998))));
if( IKabs(evalcond[0]) < 0.0000010000000000  && IKabs(evalcond[1]) < 0.0000010000000000  && IKabs(evalcond[2]) < 0.0000010000000000  && IKabs(evalcond[3]) < 0.0000010000000000  && IKabs(evalcond[4]) < 0.0000010000000000  && IKabs(evalcond[5]) < 0.0000010000000000  && IKabs(evalcond[6]) < 0.0000010000000000  )
{
{
IkReal dummyeval[1];
dummyeval[0]=IkReal(-1.00000000000000);
if( IKabs(dummyeval[0]) < 0.0000001000000000  )
{
continue;

} else
{
IkReal op[2+1], zeror[2];
int numroots;
op[0]=IkReal(-1.00000000000000);
op[1]=IkReal(0);
op[2]=IkReal(1.00000000000000);
polyroots2(op,zeror,numroots);
IkReal j21array[2], cj21array[2], sj21array[2], tempj21array[1];
int numsolutions = 0;
for(int ij21 = 0; ij21 < numroots; ++ij21)
{
IkReal htj21 = zeror[ij21];
tempj21array[0]=((IkReal(2.00000000000000))*(atan(htj21)));
for(int kj21 = 0; kj21 < 1; ++kj21)
{
j21array[numsolutions] = tempj21array[kj21];
if( j21array[numsolutions] > IKPI )
{
    j21array[numsolutions]-=IK2PI;
}
else if( j21array[numsolutions] < -IKPI )
{
    j21array[numsolutions]+=IK2PI;
}
sj21array[numsolutions] = IKsin(j21array[numsolutions]);
cj21array[numsolutions] = IKcos(j21array[numsolutions]);
numsolutions++;
}
}
bool j21valid[2]={true,true};
_nj21 = 2;
for(int ij21 = 0; ij21 < numsolutions; ++ij21)
    {
if( !j21valid[ij21] )
{
    continue;
}
    j21 = j21array[ij21]; cj21 = cj21array[ij21]; sj21 = sj21array[ij21];
htj21 = IKtan(j21/2);

_ij21[0] = ij21; _ij21[1] = -1;
for(int iij21 = ij21+1; iij21 < numsolutions; ++iij21)
{
if( j21valid[iij21] && IKabs(cj21array[ij21]-cj21array[iij21]) < IKFAST_SOLUTION_THRESH && IKabs(sj21array[ij21]-sj21array[iij21]) < IKFAST_SOLUTION_THRESH )
{
    j21valid[iij21]=false; _ij21[1] = iij21; break;
}
}
rotationfunction0(solutions);
    }

}

}

} else
{
if( 1 )
{
continue;

} else
{
}
}
}
}
}
}

} else
{
{
IkReal j21array[1], cj21array[1], sj21array[1];
bool j21valid[1]={false};
_nj21 = 1;
IkReal x999=((px)*(sj20));
IkReal x1000=((cj20)*(py));
IkReal x1001=((IkReal(5000.00000000000))*(pp));
if( IKabs(((((IKabs(((((IkReal(-300.000000000000))*((x1000)*(x1000))))+(((IkReal(600.000000000000))*(x1000)*(x999)))+(((IkReal(-300.000000000000))*((x999)*(x999)))))) != 0)?((IkReal)1/(((((IkReal(-300.000000000000))*((x1000)*(x1000))))+(((IkReal(600.000000000000))*(x1000)*(x999)))+(((IkReal(-300.000000000000))*((x999)*(x999))))))):(IkReal)1.0e30))*(((((IkReal(1883.75220000000))*(x1000)))+(((x1001)*(x999)))+(((IkReal(-1883.75220000000))*(x999)))+(((IkReal(-1.00000000000000))*(x1000)*(x1001))))))) < IKFAST_ATAN2_MAGTHRESH && IKabs(((IkReal(-3069.00000000000))*(((IKabs(((((IkReal(-5000.00000000000))*(x1000)))+(((IkReal(5000.00000000000))*(x999))))) != 0)?((IkReal)1/(((((IkReal(-5000.00000000000))*(x1000)))+(((IkReal(5000.00000000000))*(x999)))))):(IkReal)1.0e30)))) < IKFAST_ATAN2_MAGTHRESH && IKabs(IKsqr(((((IKabs(((((IkReal(-300.000000000000))*((x1000)*(x1000))))+(((IkReal(600.000000000000))*(x1000)*(x999)))+(((IkReal(-300.000000000000))*((x999)*(x999)))))) != 0)?((IkReal)1/(((((IkReal(-300.000000000000))*((x1000)*(x1000))))+(((IkReal(600.000000000000))*(x1000)*(x999)))+(((IkReal(-300.000000000000))*((x999)*(x999))))))):(IkReal)1.0e30))*(((((IkReal(1883.75220000000))*(x1000)))+(((x1001)*(x999)))+(((IkReal(-1883.75220000000))*(x999)))+(((IkReal(-1.00000000000000))*(x1000)*(x1001)))))))+IKsqr(((IkReal(-3069.00000000000))*(((IKabs(((((IkReal(-5000.00000000000))*(x1000)))+(((IkReal(5000.00000000000))*(x999))))) != 0)?((IkReal)1/(((((IkReal(-5000.00000000000))*(x1000)))+(((IkReal(5000.00000000000))*(x999)))))):(IkReal)1.0e30))))-1) <= IKFAST_SINCOS_THRESH )
    continue;
j21array[0]=IKatan2(((((IKabs(((((IkReal(-300.000000000000))*((x1000)*(x1000))))+(((IkReal(600.000000000000))*(x1000)*(x999)))+(((IkReal(-300.000000000000))*((x999)*(x999)))))) != 0)?((IkReal)1/(((((IkReal(-300.000000000000))*((x1000)*(x1000))))+(((IkReal(600.000000000000))*(x1000)*(x999)))+(((IkReal(-300.000000000000))*((x999)*(x999))))))):(IkReal)1.0e30))*(((((IkReal(1883.75220000000))*(x1000)))+(((x1001)*(x999)))+(((IkReal(-1883.75220000000))*(x999)))+(((IkReal(-1.00000000000000))*(x1000)*(x1001)))))), ((IkReal(-3069.00000000000))*(((IKabs(((((IkReal(-5000.00000000000))*(x1000)))+(((IkReal(5000.00000000000))*(x999))))) != 0)?((IkReal)1/(((((IkReal(-5000.00000000000))*(x1000)))+(((IkReal(5000.00000000000))*(x999)))))):(IkReal)1.0e30))));
sj21array[0]=IKsin(j21array[0]);
cj21array[0]=IKcos(j21array[0]);
if( j21array[0] > IKPI )
{
    j21array[0]-=IK2PI;
}
else if( j21array[0] < -IKPI )
{    j21array[0]+=IK2PI;
}
j21valid[0] = true;
for(int ij21 = 0; ij21 < 1; ++ij21)
{
if( !j21valid[ij21] )
{
    continue;
}
_ij21[0] = ij21; _ij21[1] = -1;
for(int iij21 = ij21+1; iij21 < 1; ++iij21)
{
if( j21valid[iij21] && IKabs(cj21array[ij21]-cj21array[iij21]) < IKFAST_SOLUTION_THRESH && IKabs(sj21array[ij21]-sj21array[iij21]) < IKFAST_SOLUTION_THRESH )
{
    j21valid[iij21]=false; _ij21[1] = iij21; break;
}
}
j21 = j21array[ij21]; cj21 = cj21array[ij21]; sj21 = sj21array[ij21];
{
IkReal evalcond[5];
IkReal x1002=IKcos(j21);
IkReal x1003=IKsin(j21);
IkReal x1004=((px)*(sj20));
IkReal x1005=((cj20)*(py));
IkReal x1006=((IkReal(0.600000000000000))*(x1002));
IkReal x1007=((IkReal(0.0600000000000000))*(x1003));
evalcond[0]=((IkReal(0.613800000000000))+(((IkReal(-1.00000000000000))*(x1002)*(x1005)))+(((x1002)*(x1004))));
evalcond[1]=((IkReal(0.613800000000000))*(x1003));
evalcond[2]=((((IkReal(-1.00000000000000))*(x1003)*(x1005)))+(((x1003)*(x1004))));
evalcond[3]=((((IkReal(-1.00000000000000))*(x1005)))+(x1004)+(((IkReal(0.613800000000000))*(x1002))));
evalcond[4]=((IkReal(0.00847044000000000))+(((IkReal(-1.00000000000000))*(pp)))+(((IkReal(-1.00000000000000))*(x1004)*(x1007)))+(((IkReal(-1.00000000000000))*(x1004)*(x1006)))+(((x1005)*(x1007)))+(((x1005)*(x1006))));
if( IKabs(evalcond[0]) > 0.000001  || IKabs(evalcond[1]) > 0.000001  || IKabs(evalcond[2]) > 0.000001  || IKabs(evalcond[3]) > 0.000001  || IKabs(evalcond[4]) > 0.000001  )
{
continue;
}
}

rotationfunction0(solutions);
}
}

}

}

} else
{
{
IkReal j21array[1], cj21array[1], sj21array[1];
bool j21valid[1]={false};
_nj21 = 1;
IkReal x1008=((cj20)*(py));
IkReal x1009=((px)*(sj20));
if( IKabs(((((IKabs(((((IkReal(184.140000000000))*(x1008)))+(((IkReal(-184.140000000000))*(x1009))))) != 0)?((IkReal)1/(((((IkReal(184.140000000000))*(x1008)))+(((IkReal(-184.140000000000))*(x1009)))))):(IkReal)1.0e30))*(((IkReal(-25.9957803600000))+(((IkReal(6000.00000000000))*(x1008)*(x1009)))+(((IkReal(-3000.00000000000))*((x1009)*(x1009))))+(((IkReal(-3000.00000000000))*((x1008)*(x1008))))+(((IkReal(3069.00000000000))*(pp))))))) < IKFAST_ATAN2_MAGTHRESH && IKabs(((((IkReal(1.62919517758227))*(x1008)))+(((IkReal(-1.62919517758227))*(x1009))))) < IKFAST_ATAN2_MAGTHRESH && IKabs(IKsqr(((((IKabs(((((IkReal(184.140000000000))*(x1008)))+(((IkReal(-184.140000000000))*(x1009))))) != 0)?((IkReal)1/(((((IkReal(184.140000000000))*(x1008)))+(((IkReal(-184.140000000000))*(x1009)))))):(IkReal)1.0e30))*(((IkReal(-25.9957803600000))+(((IkReal(6000.00000000000))*(x1008)*(x1009)))+(((IkReal(-3000.00000000000))*((x1009)*(x1009))))+(((IkReal(-3000.00000000000))*((x1008)*(x1008))))+(((IkReal(3069.00000000000))*(pp)))))))+IKsqr(((((IkReal(1.62919517758227))*(x1008)))+(((IkReal(-1.62919517758227))*(x1009)))))-1) <= IKFAST_SINCOS_THRESH )
    continue;
j21array[0]=IKatan2(((((IKabs(((((IkReal(184.140000000000))*(x1008)))+(((IkReal(-184.140000000000))*(x1009))))) != 0)?((IkReal)1/(((((IkReal(184.140000000000))*(x1008)))+(((IkReal(-184.140000000000))*(x1009)))))):(IkReal)1.0e30))*(((IkReal(-25.9957803600000))+(((IkReal(6000.00000000000))*(x1008)*(x1009)))+(((IkReal(-3000.00000000000))*((x1009)*(x1009))))+(((IkReal(-3000.00000000000))*((x1008)*(x1008))))+(((IkReal(3069.00000000000))*(pp)))))), ((((IkReal(1.62919517758227))*(x1008)))+(((IkReal(-1.62919517758227))*(x1009)))));
sj21array[0]=IKsin(j21array[0]);
cj21array[0]=IKcos(j21array[0]);
if( j21array[0] > IKPI )
{
    j21array[0]-=IK2PI;
}
else if( j21array[0] < -IKPI )
{    j21array[0]+=IK2PI;
}
j21valid[0] = true;
for(int ij21 = 0; ij21 < 1; ++ij21)
{
if( !j21valid[ij21] )
{
    continue;
}
_ij21[0] = ij21; _ij21[1] = -1;
for(int iij21 = ij21+1; iij21 < 1; ++iij21)
{
if( j21valid[iij21] && IKabs(cj21array[ij21]-cj21array[iij21]) < IKFAST_SOLUTION_THRESH && IKabs(sj21array[ij21]-sj21array[iij21]) < IKFAST_SOLUTION_THRESH )
{
    j21valid[iij21]=false; _ij21[1] = iij21; break;
}
}
j21 = j21array[ij21]; cj21 = cj21array[ij21]; sj21 = sj21array[ij21];
{
IkReal evalcond[5];
IkReal x1010=IKcos(j21);
IkReal x1011=IKsin(j21);
IkReal x1012=((px)*(sj20));
IkReal x1013=((cj20)*(py));
IkReal x1014=((IkReal(0.600000000000000))*(x1010));
IkReal x1015=((IkReal(0.0600000000000000))*(x1011));
evalcond[0]=((IkReal(0.613800000000000))+(((IkReal(-1.00000000000000))*(x1010)*(x1013)))+(((x1010)*(x1012))));
evalcond[1]=((IkReal(0.613800000000000))*(x1011));
evalcond[2]=((((IkReal(-1.00000000000000))*(x1011)*(x1013)))+(((x1011)*(x1012))));
evalcond[3]=((x1012)+(((IkReal(0.613800000000000))*(x1010)))+(((IkReal(-1.00000000000000))*(x1013))));
evalcond[4]=((IkReal(0.00847044000000000))+(((IkReal(-1.00000000000000))*(x1012)*(x1015)))+(((IkReal(-1.00000000000000))*(x1012)*(x1014)))+(((x1013)*(x1014)))+(((x1013)*(x1015)))+(((IkReal(-1.00000000000000))*(pp))));
if( IKabs(evalcond[0]) > 0.000001  || IKabs(evalcond[1]) > 0.000001  || IKabs(evalcond[2]) > 0.000001  || IKabs(evalcond[3]) > 0.000001  || IKabs(evalcond[4]) > 0.000001  )
{
continue;
}
}

rotationfunction0(solutions);
}
}

}

}

} else
{
if( 1 )
{
continue;

} else
{
}
}
}

} else
{
{
IkReal j21array[1], cj21array[1], sj21array[1];
bool j21valid[1]={false};
_nj21 = 1;
IkReal x1016=((cj20)*(py));
IkReal x1017=((IkReal(0.0300000000000000))*(pz));
IkReal x1018=((px)*(sj20));
IkReal x1019=((IkReal(0.313800000000000))*(sj23));
IkReal x1020=((IkReal(0.0300000000000000))*(sj23));
IkReal x1021=((IkReal(0.313800000000000))*(cj23));
IkReal x1022=((IkReal(0.0300000000000000))*(cj23));
if( IKabs(((gconst50)*(((((IkReal(-1.00000000000000))*(sj23)*(x1017)))+(((IkReal(0.300000000000000))*(pz)))+(((x1018)*(x1022)))+(((IkReal(-1.00000000000000))*(x1016)*(x1019)))+(((IkReal(0.0300000000000000))*(x1016)))+(((IkReal(-1.00000000000000))*(x1016)*(x1022)))+(((x1018)*(x1019)))+(((pz)*(x1021)))+(((IkReal(-0.0300000000000000))*(x1018))))))) < IKFAST_ATAN2_MAGTHRESH && IKabs(((gconst50)*(((((IkReal(-1.00000000000000))*(x1017)))+(((cj23)*(x1017)))+(((IkReal(-1.00000000000000))*(x1018)*(x1021)))+(((IkReal(0.300000000000000))*(x1016)))+(((x1018)*(x1020)))+(((IkReal(-1.00000000000000))*(x1016)*(x1020)))+(((pz)*(x1019)))+(((IkReal(-0.300000000000000))*(x1018)))+(((x1016)*(x1021))))))) < IKFAST_ATAN2_MAGTHRESH )
    continue;
j21array[0]=IKatan2(((gconst50)*(((((IkReal(-1.00000000000000))*(sj23)*(x1017)))+(((IkReal(0.300000000000000))*(pz)))+(((x1018)*(x1022)))+(((IkReal(-1.00000000000000))*(x1016)*(x1019)))+(((IkReal(0.0300000000000000))*(x1016)))+(((IkReal(-1.00000000000000))*(x1016)*(x1022)))+(((x1018)*(x1019)))+(((pz)*(x1021)))+(((IkReal(-0.0300000000000000))*(x1018)))))), ((gconst50)*(((((IkReal(-1.00000000000000))*(x1017)))+(((cj23)*(x1017)))+(((IkReal(-1.00000000000000))*(x1018)*(x1021)))+(((IkReal(0.300000000000000))*(x1016)))+(((x1018)*(x1020)))+(((IkReal(-1.00000000000000))*(x1016)*(x1020)))+(((pz)*(x1019)))+(((IkReal(-0.300000000000000))*(x1018)))+(((x1016)*(x1021)))))));
sj21array[0]=IKsin(j21array[0]);
cj21array[0]=IKcos(j21array[0]);
if( j21array[0] > IKPI )
{
    j21array[0]-=IK2PI;
}
else if( j21array[0] < -IKPI )
{    j21array[0]+=IK2PI;
}
j21valid[0] = true;
for(int ij21 = 0; ij21 < 1; ++ij21)
{
if( !j21valid[ij21] )
{
    continue;
}
_ij21[0] = ij21; _ij21[1] = -1;
for(int iij21 = ij21+1; iij21 < 1; ++iij21)
{
if( j21valid[iij21] && IKabs(cj21array[ij21]-cj21array[iij21]) < IKFAST_SOLUTION_THRESH && IKabs(sj21array[ij21]-sj21array[iij21]) < IKFAST_SOLUTION_THRESH )
{
    j21valid[iij21]=false; _ij21[1] = iij21; break;
}
}
j21 = j21array[ij21]; cj21 = cj21array[ij21]; sj21 = sj21array[ij21];
{
IkReal evalcond[5];
IkReal x1023=IKcos(j21);
IkReal x1024=IKsin(j21);
IkReal x1025=((px)*(sj20));
IkReal x1026=((IkReal(0.313800000000000))*(cj23));
IkReal x1027=((IkReal(0.0300000000000000))*(cj23));
IkReal x1028=((IkReal(1.00000000000000))*(pz));
IkReal x1029=((IkReal(0.313800000000000))*(sj23));
IkReal x1030=((cj20)*(py));
IkReal x1031=((IkReal(0.0300000000000000))*(x1023));
IkReal x1032=((pz)*(x1023));
IkReal x1033=((IkReal(0.0300000000000000))*(x1024));
IkReal x1034=((IkReal(1.00000000000000))*(x1030));
IkReal x1035=((IkReal(0.0600000000000000))*(x1024));
IkReal x1036=((IkReal(0.600000000000000))*(x1023));
evalcond[0]=((IkReal(0.300000000000000))+(x1026)+(((IkReal(-1.00000000000000))*(x1023)*(x1034)))+(((x1023)*(x1025)))+(((IkReal(-0.0300000000000000))*(sj23)))+(((IkReal(-1.00000000000000))*(x1024)*(x1028))));
evalcond[1]=((((IkReal(-1.00000000000000))*(x1031)))+(((IkReal(-1.00000000000000))*(x1028)))+(((x1023)*(x1029)))+(((x1023)*(x1027)))+(((x1024)*(x1026)))+(((IkReal(0.300000000000000))*(x1024)))+(((IkReal(-1.00000000000000))*(sj23)*(x1033))));
evalcond[2]=((IkReal(0.0300000000000000))+(((IkReal(-1.00000000000000))*(x1024)*(x1034)))+(x1032)+(((IkReal(-1.00000000000000))*(x1027)))+(((IkReal(-1.00000000000000))*(x1029)))+(((x1024)*(x1025))));
evalcond[3]=((((IkReal(-1.00000000000000))*(x1034)))+(x1033)+(x1025)+(((x1023)*(x1026)))+(((IkReal(0.300000000000000))*(x1023)))+(((IkReal(-1.00000000000000))*(x1024)*(x1029)))+(((IkReal(-1.00000000000000))*(x1024)*(x1027)))+(((IkReal(-1.00000000000000))*(sj23)*(x1031))));
evalcond[4]=((IkReal(0.00847044000000000))+(((IkReal(-0.0600000000000000))*(x1032)))+(((x1030)*(x1036)))+(((x1030)*(x1035)))+(((IkReal(-1.00000000000000))*(x1025)*(x1036)))+(((IkReal(-1.00000000000000))*(x1025)*(x1035)))+(((IkReal(-1.00000000000000))*(pp)))+(((IkReal(0.600000000000000))*(pz)*(x1024))));
if( IKabs(evalcond[0]) > 0.000001  || IKabs(evalcond[1]) > 0.000001  || IKabs(evalcond[2]) > 0.000001  || IKabs(evalcond[3]) > 0.000001  || IKabs(evalcond[4]) > 0.000001  )
{
continue;
}
}

rotationfunction0(solutions);
}
}

}

}

} else
{
{
IkReal j21array[1], cj21array[1], sj21array[1];
bool j21valid[1]={false};
_nj21 = 1;
IkReal x1037=(sj23)*(sj23);
IkReal x1038=(cj23)*(cj23);
IkReal x1039=((cj23)*(sj23));
if( IKabs(((gconst51)*(((IkReal(0.000900000000000000))+(((IkReal(0.0188280000000000))*(x1039)))+(((IkReal(0.000900000000000000))*(x1038)))+(((IkReal(-1.00000000000000))*((pz)*(pz))))+(((IkReal(-0.0188280000000000))*(sj23)))+(((IkReal(0.0984704400000000))*(x1037)))+(((IkReal(-0.00180000000000000))*(cj23))))))) < IKFAST_ATAN2_MAGTHRESH && IKabs(((gconst51)*(((IkReal(0.00900000000000000))+(((IkReal(0.000414000000000000))*(cj23)))+(((IkReal(-0.0950400000000000))*(sj23)))+(((IkReal(-0.00941400000000000))*(x1038)))+(((IkReal(-0.0975704400000000))*(x1039)))+(((px)*(pz)*(sj20)))+(((IkReal(-1.00000000000000))*(cj20)*(py)*(pz)))+(((IkReal(0.00941400000000000))*(x1037))))))) < IKFAST_ATAN2_MAGTHRESH )
    continue;
j21array[0]=IKatan2(((gconst51)*(((IkReal(0.000900000000000000))+(((IkReal(0.0188280000000000))*(x1039)))+(((IkReal(0.000900000000000000))*(x1038)))+(((IkReal(-1.00000000000000))*((pz)*(pz))))+(((IkReal(-0.0188280000000000))*(sj23)))+(((IkReal(0.0984704400000000))*(x1037)))+(((IkReal(-0.00180000000000000))*(cj23)))))), ((gconst51)*(((IkReal(0.00900000000000000))+(((IkReal(0.000414000000000000))*(cj23)))+(((IkReal(-0.0950400000000000))*(sj23)))+(((IkReal(-0.00941400000000000))*(x1038)))+(((IkReal(-0.0975704400000000))*(x1039)))+(((px)*(pz)*(sj20)))+(((IkReal(-1.00000000000000))*(cj20)*(py)*(pz)))+(((IkReal(0.00941400000000000))*(x1037)))))));
sj21array[0]=IKsin(j21array[0]);
cj21array[0]=IKcos(j21array[0]);
if( j21array[0] > IKPI )
{
    j21array[0]-=IK2PI;
}
else if( j21array[0] < -IKPI )
{    j21array[0]+=IK2PI;
}
j21valid[0] = true;
for(int ij21 = 0; ij21 < 1; ++ij21)
{
if( !j21valid[ij21] )
{
    continue;
}
_ij21[0] = ij21; _ij21[1] = -1;
for(int iij21 = ij21+1; iij21 < 1; ++iij21)
{
if( j21valid[iij21] && IKabs(cj21array[ij21]-cj21array[iij21]) < IKFAST_SOLUTION_THRESH && IKabs(sj21array[ij21]-sj21array[iij21]) < IKFAST_SOLUTION_THRESH )
{
    j21valid[iij21]=false; _ij21[1] = iij21; break;
}
}
j21 = j21array[ij21]; cj21 = cj21array[ij21]; sj21 = sj21array[ij21];
{
IkReal evalcond[5];
IkReal x1040=IKcos(j21);
IkReal x1041=IKsin(j21);
IkReal x1042=((px)*(sj20));
IkReal x1043=((IkReal(0.313800000000000))*(cj23));
IkReal x1044=((IkReal(0.0300000000000000))*(cj23));
IkReal x1045=((IkReal(1.00000000000000))*(pz));
IkReal x1046=((IkReal(0.313800000000000))*(sj23));
IkReal x1047=((cj20)*(py));
IkReal x1048=((IkReal(0.0300000000000000))*(x1040));
IkReal x1049=((pz)*(x1040));
IkReal x1050=((IkReal(0.0300000000000000))*(x1041));
IkReal x1051=((IkReal(1.00000000000000))*(x1047));
IkReal x1052=((IkReal(0.0600000000000000))*(x1041));
IkReal x1053=((IkReal(0.600000000000000))*(x1040));
evalcond[0]=((IkReal(0.300000000000000))+(x1043)+(((x1040)*(x1042)))+(((IkReal(-1.00000000000000))*(x1041)*(x1045)))+(((IkReal(-1.00000000000000))*(x1040)*(x1051)))+(((IkReal(-0.0300000000000000))*(sj23))));
evalcond[1]=((((IkReal(0.300000000000000))*(x1041)))+(((x1040)*(x1046)))+(((x1040)*(x1044)))+(((IkReal(-1.00000000000000))*(sj23)*(x1050)))+(((x1041)*(x1043)))+(((IkReal(-1.00000000000000))*(x1045)))+(((IkReal(-1.00000000000000))*(x1048))));
evalcond[2]=((IkReal(0.0300000000000000))+(x1049)+(((x1041)*(x1042)))+(((IkReal(-1.00000000000000))*(x1041)*(x1051)))+(((IkReal(-1.00000000000000))*(x1044)))+(((IkReal(-1.00000000000000))*(x1046))));
evalcond[3]=((((IkReal(-1.00000000000000))*(x1051)))+(x1050)+(x1042)+(((IkReal(0.300000000000000))*(x1040)))+(((x1040)*(x1043)))+(((IkReal(-1.00000000000000))*(sj23)*(x1048)))+(((IkReal(-1.00000000000000))*(x1041)*(x1046)))+(((IkReal(-1.00000000000000))*(x1041)*(x1044))));
evalcond[4]=((IkReal(0.00847044000000000))+(((IkReal(0.600000000000000))*(pz)*(x1041)))+(((IkReal(-0.0600000000000000))*(x1049)))+(((IkReal(-1.00000000000000))*(x1042)*(x1052)))+(((IkReal(-1.00000000000000))*(x1042)*(x1053)))+(((IkReal(-1.00000000000000))*(pp)))+(((x1047)*(x1053)))+(((x1047)*(x1052))));
if( IKabs(evalcond[0]) > 0.000001  || IKabs(evalcond[1]) > 0.000001  || IKabs(evalcond[2]) > 0.000001  || IKabs(evalcond[3]) > 0.000001  || IKabs(evalcond[4]) > 0.000001  )
{
continue;
}
}

rotationfunction0(solutions);
}
}

}

}

} else
{
if( 1 )
{
continue;

} else
{
}
}
}
}

} else
{
{
IkReal j21array[1], cj21array[1], sj21array[1];
bool j21valid[1]={false};
_nj21 = 1;
IkReal x1054=((cj20)*(py));
IkReal x1055=((IkReal(0.0300000000000000))*(sj23));
IkReal x1056=((cj22)*(pz));
IkReal x1057=((cj20)*(sj22));
IkReal x1058=((IkReal(0.313800000000000))*(cj22)*(cj23));
IkReal x1059=((cj22)*(px)*(sj20));
IkReal x1060=((px)*(py)*(sj22));
if( IKabs(((gconst46)*(((((IkReal(0.300000000000000))*(x1056)))+(((sj20)*(x1057)*((px)*(px))))+(((IkReal(-1.00000000000000))*(x1055)*(x1056)))+(((IkReal(-1.00000000000000))*(px)*(x1054)*(x1057)))+(((IkReal(-1.00000000000000))*(py)*(sj20)*(sj22)*(x1054)))+(((IkReal(0.313800000000000))*(cj23)*(x1056)))+(((x1060)*((sj20)*(sj20)))))))) < IKFAST_ATAN2_MAGTHRESH && IKabs(((gconst46)*(((((py)*(pz)*(sj20)*(sj22)))+(((x1054)*(x1058)))+(((IkReal(-0.300000000000000))*(x1059)))+(((x1055)*(x1059)))+(((IkReal(-1.00000000000000))*(cj22)*(x1054)*(x1055)))+(((px)*(pz)*(x1057)))+(((IkReal(-1.00000000000000))*(px)*(sj20)*(x1058)))+(((IkReal(0.300000000000000))*(cj22)*(x1054))))))) < IKFAST_ATAN2_MAGTHRESH )
    continue;
j21array[0]=IKatan2(((gconst46)*(((((IkReal(0.300000000000000))*(x1056)))+(((sj20)*(x1057)*((px)*(px))))+(((IkReal(-1.00000000000000))*(x1055)*(x1056)))+(((IkReal(-1.00000000000000))*(px)*(x1054)*(x1057)))+(((IkReal(-1.00000000000000))*(py)*(sj20)*(sj22)*(x1054)))+(((IkReal(0.313800000000000))*(cj23)*(x1056)))+(((x1060)*((sj20)*(sj20))))))), ((gconst46)*(((((py)*(pz)*(sj20)*(sj22)))+(((x1054)*(x1058)))+(((IkReal(-0.300000000000000))*(x1059)))+(((x1055)*(x1059)))+(((IkReal(-1.00000000000000))*(cj22)*(x1054)*(x1055)))+(((px)*(pz)*(x1057)))+(((IkReal(-1.00000000000000))*(px)*(sj20)*(x1058)))+(((IkReal(0.300000000000000))*(cj22)*(x1054)))))));
sj21array[0]=IKsin(j21array[0]);
cj21array[0]=IKcos(j21array[0]);
if( j21array[0] > IKPI )
{
    j21array[0]-=IK2PI;
}
else if( j21array[0] < -IKPI )
{    j21array[0]+=IK2PI;
}
j21valid[0] = true;
for(int ij21 = 0; ij21 < 1; ++ij21)
{
if( !j21valid[ij21] )
{
    continue;
}
_ij21[0] = ij21; _ij21[1] = -1;
for(int iij21 = ij21+1; iij21 < 1; ++iij21)
{
if( j21valid[iij21] && IKabs(cj21array[ij21]-cj21array[iij21]) < IKFAST_SOLUTION_THRESH && IKabs(sj21array[ij21]-sj21array[iij21]) < IKFAST_SOLUTION_THRESH )
{
    j21valid[iij21]=false; _ij21[1] = iij21; break;
}
}
j21 = j21array[ij21]; cj21 = cj21array[ij21]; sj21 = sj21array[ij21];
{
IkReal evalcond[6];
IkReal x1061=IKcos(j21);
IkReal x1062=IKsin(j21);
IkReal x1063=((IkReal(0.313800000000000))*(sj23));
IkReal x1064=((IkReal(0.313800000000000))*(cj23));
IkReal x1065=((cj22)*(py));
IkReal x1066=((IkReal(0.0600000000000000))*(sj20));
IkReal x1067=((IkReal(0.0300000000000000))*(cj23));
IkReal x1068=((cj20)*(py));
IkReal x1069=((IkReal(0.0300000000000000))*(sj23));
IkReal x1070=((IkReal(1.00000000000000))*(pz));
IkReal x1071=((px)*(sj20));
IkReal x1072=((sj22)*(x1062));
IkReal x1073=((sj22)*(x1061));
IkReal x1074=((cj20)*(cj22)*(px));
IkReal x1075=((IkReal(0.600000000000000))*(x1061));
IkReal x1076=((pz)*(x1073));
evalcond[0]=((IkReal(0.300000000000000))+(x1064)+(((x1061)*(x1071)))+(((IkReal(-1.00000000000000))*(x1062)*(x1070)))+(((IkReal(-1.00000000000000))*(x1061)*(x1068)))+(((IkReal(-1.00000000000000))*(x1069))));
evalcond[1]=((((IkReal(-1.00000000000000))*(cj22)*(x1062)*(x1071)))+(((cj20)*(x1062)*(x1065)))+(((IkReal(-1.00000000000000))*(cj22)*(x1061)*(x1070)))+(((cj20)*(px)*(sj22)))+(((py)*(sj20)*(sj22))));
evalcond[2]=((((IkReal(-1.00000000000000))*(x1063)*(x1073)))+(((IkReal(0.300000000000000))*(x1062)))+(((IkReal(0.0300000000000000))*(x1073)))+(((IkReal(-1.00000000000000))*(x1062)*(x1069)))+(((x1062)*(x1064)))+(((IkReal(-1.00000000000000))*(x1067)*(x1073)))+(((IkReal(-1.00000000000000))*(x1070))));
evalcond[3]=((IkReal(0.0300000000000000))+(((x1068)*(x1072)))+(((IkReal(-1.00000000000000))*(x1071)*(x1072)))+(((IkReal(-1.00000000000000))*(x1070)*(x1073)))+(((IkReal(-1.00000000000000))*(sj20)*(x1065)))+(((IkReal(-1.00000000000000))*(x1074)))+(((IkReal(-1.00000000000000))*(x1067)))+(((IkReal(-1.00000000000000))*(x1063))));
evalcond[4]=((((IkReal(-0.0300000000000000))*(x1072)))+(((IkReal(0.300000000000000))*(x1061)))+(((x1061)*(x1064)))+(x1071)+(((x1067)*(x1072)))+(((IkReal(-1.00000000000000))*(x1061)*(x1069)))+(((x1063)*(x1072)))+(((IkReal(-1.00000000000000))*(x1068))));
evalcond[5]=((IkReal(0.00847044000000000))+(((x1068)*(x1075)))+(((IkReal(0.600000000000000))*(pz)*(x1062)))+(((px)*(x1066)*(x1072)))+(((IkReal(-1.00000000000000))*(x1071)*(x1075)))+(((IkReal(0.0600000000000000))*(x1076)))+(((IkReal(0.0600000000000000))*(x1074)))+(((IkReal(-1.00000000000000))*(pp)))+(((IkReal(-0.0600000000000000))*(x1068)*(x1072)))+(((x1065)*(x1066))));
if( IKabs(evalcond[0]) > 0.000001  || IKabs(evalcond[1]) > 0.000001  || IKabs(evalcond[2]) > 0.000001  || IKabs(evalcond[3]) > 0.000001  || IKabs(evalcond[4]) > 0.000001  || IKabs(evalcond[5]) > 0.000001  )
{
continue;
}
}

rotationfunction0(solutions);
}
}

}

}

} else
{
{
IkReal j21array[1], cj21array[1], sj21array[1];
bool j21valid[1]={false};
_nj21 = 1;
IkReal x1077=(sj23)*(sj23);
IkReal x1078=(cj23)*(cj23);
IkReal x1079=((IkReal(0.00941400000000000))*(sj22));
IkReal x1080=((cj23)*(sj22));
if( IKabs(((gconst47)*(((((x1077)*(x1079)))+(((IkReal(-1.00000000000000))*(x1078)*(x1079)))+(((IkReal(0.00900000000000000))*(sj22)))+(((IkReal(-0.0950400000000000))*(sj22)*(sj23)))+(((px)*(pz)*(sj20)))+(((IkReal(-0.0975704400000000))*(sj23)*(x1080)))+(((IkReal(-1.00000000000000))*(cj20)*(py)*(pz)))+(((IkReal(0.000414000000000000))*(x1080))))))) < IKFAST_ATAN2_MAGTHRESH && IKabs(((gconst47)*(((IkReal(-0.0900000000000000))+(((IkReal(0.0180000000000000))*(sj23)))+(((IkReal(-0.188280000000000))*(cj23)))+(((IkReal(0.0188280000000000))*(cj23)*(sj23)))+((pz)*(pz))+(((IkReal(-0.0984704400000000))*(x1078)))+(((IkReal(-0.000900000000000000))*(x1077))))))) < IKFAST_ATAN2_MAGTHRESH )
    continue;
j21array[0]=IKatan2(((gconst47)*(((((x1077)*(x1079)))+(((IkReal(-1.00000000000000))*(x1078)*(x1079)))+(((IkReal(0.00900000000000000))*(sj22)))+(((IkReal(-0.0950400000000000))*(sj22)*(sj23)))+(((px)*(pz)*(sj20)))+(((IkReal(-0.0975704400000000))*(sj23)*(x1080)))+(((IkReal(-1.00000000000000))*(cj20)*(py)*(pz)))+(((IkReal(0.000414000000000000))*(x1080)))))), ((gconst47)*(((IkReal(-0.0900000000000000))+(((IkReal(0.0180000000000000))*(sj23)))+(((IkReal(-0.188280000000000))*(cj23)))+(((IkReal(0.0188280000000000))*(cj23)*(sj23)))+((pz)*(pz))+(((IkReal(-0.0984704400000000))*(x1078)))+(((IkReal(-0.000900000000000000))*(x1077)))))));
sj21array[0]=IKsin(j21array[0]);
cj21array[0]=IKcos(j21array[0]);
if( j21array[0] > IKPI )
{
    j21array[0]-=IK2PI;
}
else if( j21array[0] < -IKPI )
{    j21array[0]+=IK2PI;
}
j21valid[0] = true;
for(int ij21 = 0; ij21 < 1; ++ij21)
{
if( !j21valid[ij21] )
{
    continue;
}
_ij21[0] = ij21; _ij21[1] = -1;
for(int iij21 = ij21+1; iij21 < 1; ++iij21)
{
if( j21valid[iij21] && IKabs(cj21array[ij21]-cj21array[iij21]) < IKFAST_SOLUTION_THRESH && IKabs(sj21array[ij21]-sj21array[iij21]) < IKFAST_SOLUTION_THRESH )
{
    j21valid[iij21]=false; _ij21[1] = iij21; break;
}
}
j21 = j21array[ij21]; cj21 = cj21array[ij21]; sj21 = sj21array[ij21];
{
IkReal evalcond[6];
IkReal x1081=IKcos(j21);
IkReal x1082=IKsin(j21);
IkReal x1083=((IkReal(0.313800000000000))*(sj23));
IkReal x1084=((IkReal(0.313800000000000))*(cj23));
IkReal x1085=((cj22)*(py));
IkReal x1086=((IkReal(0.0600000000000000))*(sj20));
IkReal x1087=((IkReal(0.0300000000000000))*(cj23));
IkReal x1088=((cj20)*(py));
IkReal x1089=((IkReal(0.0300000000000000))*(sj23));
IkReal x1090=((IkReal(1.00000000000000))*(pz));
IkReal x1091=((px)*(sj20));
IkReal x1092=((sj22)*(x1082));
IkReal x1093=((sj22)*(x1081));
IkReal x1094=((cj20)*(cj22)*(px));
IkReal x1095=((IkReal(0.600000000000000))*(x1081));
IkReal x1096=((pz)*(x1093));
evalcond[0]=((IkReal(0.300000000000000))+(x1084)+(((IkReal(-1.00000000000000))*(x1081)*(x1088)))+(((x1081)*(x1091)))+(((IkReal(-1.00000000000000))*(x1089)))+(((IkReal(-1.00000000000000))*(x1082)*(x1090))));
evalcond[1]=((((IkReal(-1.00000000000000))*(cj22)*(x1082)*(x1091)))+(((cj20)*(px)*(sj22)))+(((cj20)*(x1082)*(x1085)))+(((py)*(sj20)*(sj22)))+(((IkReal(-1.00000000000000))*(cj22)*(x1081)*(x1090))));
evalcond[2]=((((x1082)*(x1084)))+(((IkReal(-1.00000000000000))*(x1083)*(x1093)))+(((IkReal(-1.00000000000000))*(x1090)))+(((IkReal(-1.00000000000000))*(x1087)*(x1093)))+(((IkReal(-1.00000000000000))*(x1082)*(x1089)))+(((IkReal(0.0300000000000000))*(x1093)))+(((IkReal(0.300000000000000))*(x1082))));
evalcond[3]=((IkReal(0.0300000000000000))+(((IkReal(-1.00000000000000))*(x1091)*(x1092)))+(((IkReal(-1.00000000000000))*(x1090)*(x1093)))+(((IkReal(-1.00000000000000))*(sj20)*(x1085)))+(((IkReal(-1.00000000000000))*(x1094)))+(((x1088)*(x1092)))+(((IkReal(-1.00000000000000))*(x1083)))+(((IkReal(-1.00000000000000))*(x1087))));
evalcond[4]=((((x1083)*(x1092)))+(((x1087)*(x1092)))+(x1091)+(((x1081)*(x1084)))+(((IkReal(-1.00000000000000))*(x1081)*(x1089)))+(((IkReal(-1.00000000000000))*(x1088)))+(((IkReal(-0.0300000000000000))*(x1092)))+(((IkReal(0.300000000000000))*(x1081))));
evalcond[5]=((IkReal(0.00847044000000000))+(((IkReal(-1.00000000000000))*(x1091)*(x1095)))+(((IkReal(-0.0600000000000000))*(x1088)*(x1092)))+(((x1088)*(x1095)))+(((IkReal(-1.00000000000000))*(pp)))+(((IkReal(0.600000000000000))*(pz)*(x1082)))+(((IkReal(0.0600000000000000))*(x1096)))+(((IkReal(0.0600000000000000))*(x1094)))+(((x1085)*(x1086)))+(((px)*(x1086)*(x1092))));
if( IKabs(evalcond[0]) > 0.000001  || IKabs(evalcond[1]) > 0.000001  || IKabs(evalcond[2]) > 0.000001  || IKabs(evalcond[3]) > 0.000001  || IKabs(evalcond[4]) > 0.000001  || IKabs(evalcond[5]) > 0.000001  )
{
continue;
}
}

rotationfunction0(solutions);
}
}

}

}
}
}

}

}
}
}
}
return solutions.GetNumSolutions()>0;
}
inline void rotationfunction0(IkSolutionListBase<IkReal>& solutions) {
for(int rotationiter = 0; rotationiter < 1; ++rotationiter) {
IkReal x88=((cj22)*(sj20));
IkReal x89=((cj21)*(cj23));
IkReal x90=((sj22)*(sj23));
IkReal x91=((cj20)*(cj22));
IkReal x92=((IkReal(1.00000000000000))*(sj21));
IkReal x93=((IkReal(1.00000000000000))*(sj22));
IkReal x94=((cj21)*(cj22));
IkReal x95=((IkReal(1.00000000000000))*(sj20));
IkReal x96=((cj23)*(x91));
IkReal x97=((sj23)*(x91));
IkReal x98=((IkReal(-1.00000000000000))*(sj20));
IkReal x99=((cj23)*(x92));
IkReal x100=((((cj21)*(sj23)))+(((IkReal(-1.00000000000000))*(sj22)*(x99))));
IkReal x101=((((sj22)*(x89)))+(((sj21)*(sj23))));
IkReal x102=((((sj21)*(x88)))+(((IkReal(-1.00000000000000))*(cj20)*(x93))));
IkReal x103=((((cj21)*(x90)))+(((IkReal(-1.00000000000000))*(x99))));
IkReal x104=((((IkReal(-1.00000000000000))*(sj20)*(x93)))+(((IkReal(-1.00000000000000))*(x91)*(x92))));
IkReal x105=((((IkReal(-1.00000000000000))*(x90)*(x92)))+(((IkReal(-1.00000000000000))*(x89))));
IkReal x106=((((cj23)*(x88)))+(((cj20)*(x100))));
IkReal x107=((((x100)*(x98)))+(x96));
IkReal x108=((((IkReal(-1.00000000000000))*(x105)*(x95)))+(x97));
IkReal x109=((((sj23)*(x88)))+(((cj20)*(x105))));
new_r00=((((r10)*(x106)))+(((r00)*(((x96)+(((IkReal(-1.00000000000000))*(x100)*(x95)))))))+(((r20)*(x101))));
new_r01=((((r21)*(x101)))+(((r01)*(x107)))+(((r11)*(x106))));
new_r02=((((r02)*(x107)))+(((r22)*(x101)))+(((r12)*(x106))));
new_r10=((((r10)*(x104)))+(((r20)*(x94)))+(((r00)*(x102))));
new_r11=((((r21)*(x94)))+(((r01)*(x102)))+(((r11)*(x104))));
new_r12=((((r02)*(x102)))+(((r12)*(x104)))+(((r22)*(x94))));
new_r20=((((r10)*(x109)))+(((r20)*(x103)))+(((r00)*(x108))));
new_r21=((((r21)*(x103)))+(((r01)*(x108)))+(((r11)*(x109))));
new_r22=((((r22)*(x103)))+(((r02)*(((x97)+(((x105)*(x98)))))))+(((r12)*(x109))));
{
IkReal j25array[2], cj25array[2], sj25array[2];
bool j25valid[2]={false};
_nj25 = 2;
cj25array[0]=((IkReal(-1.00000000000000))*(new_r22));
if( cj25array[0] >= -1-IKFAST_SINCOS_THRESH && cj25array[0] <= 1+IKFAST_SINCOS_THRESH )
{
    j25valid[0] = j25valid[1] = true;
    j25array[0] = IKacos(cj25array[0]);
    sj25array[0] = IKsin(j25array[0]);
    cj25array[1] = cj25array[0];
    j25array[1] = -j25array[0];
    sj25array[1] = -sj25array[0];
}
else if( isnan(cj25array[0]) )
{
    // probably any value will work
    j25valid[0] = true;
    cj25array[0] = 1; sj25array[0] = 0; j25array[0] = 0;
}
for(int ij25 = 0; ij25 < 2; ++ij25)
{
if( !j25valid[ij25] )
{
    continue;
}
_ij25[0] = ij25; _ij25[1] = -1;
for(int iij25 = ij25+1; iij25 < 2; ++iij25)
{
if( j25valid[iij25] && IKabs(cj25array[ij25]-cj25array[iij25]) < IKFAST_SOLUTION_THRESH && IKabs(sj25array[ij25]-sj25array[iij25]) < IKFAST_SOLUTION_THRESH )
{
    j25valid[iij25]=false; _ij25[1] = iij25; break;
}
}
j25 = j25array[ij25]; cj25 = cj25array[ij25]; sj25 = sj25array[ij25];

{
IkReal dummyeval[1];
IkReal gconst54;
gconst54=IKsign(sj25);
dummyeval[0]=sj25;
if( IKabs(dummyeval[0]) < 0.0000010000000000  )
{
{
IkReal dummyeval[1];
IkReal gconst52;
gconst52=IKsign(((((IkReal(-1.00000000000000))*((new_r02)*(new_r02))))+(((IkReal(-1.00000000000000))*((new_r12)*(new_r12))))));
dummyeval[0]=((((IkReal(-1.00000000000000))*((new_r02)*(new_r02))))+(((IkReal(-1.00000000000000))*((new_r12)*(new_r12)))));
if( IKabs(dummyeval[0]) < 0.0000010000000000  )
{
{
IkReal dummyeval[1];
IkReal gconst53;
gconst53=IKsign(((((cj25)*((new_r02)*(new_r02))))+(((cj25)*((new_r12)*(new_r12))))));
dummyeval[0]=((((cj25)*((new_r02)*(new_r02))))+(((cj25)*((new_r12)*(new_r12)))));
if( IKabs(dummyeval[0]) < 0.0000010000000000  )
{
{
IkReal evalcond[7];
evalcond[0]=((IkReal(-3.14159265358979))+(IKfmod(((IkReal(1.57079632679490))+(j25)), IkReal(6.28318530717959))));
evalcond[1]=new_r22;
evalcond[2]=((IkReal(-1.00000000000000))*(new_r22));
if( IKabs(evalcond[0]) < 0.0000010000000000  && IKabs(evalcond[1]) < 0.0000010000000000  && IKabs(evalcond[2]) < 0.0000010000000000  )
{
{
IkReal j27array[1], cj27array[1], sj27array[1];
bool j27valid[1]={false};
_nj27 = 1;
if( IKabs(((IkReal(-1.00000000000000))*(new_r21))) < IKFAST_ATAN2_MAGTHRESH && IKabs(new_r20) < IKFAST_ATAN2_MAGTHRESH && IKabs(IKsqr(((IkReal(-1.00000000000000))*(new_r21)))+IKsqr(new_r20)-1) <= IKFAST_SINCOS_THRESH )
    continue;
j27array[0]=IKatan2(((IkReal(-1.00000000000000))*(new_r21)), new_r20);
sj27array[0]=IKsin(j27array[0]);
cj27array[0]=IKcos(j27array[0]);
if( j27array[0] > IKPI )
{
    j27array[0]-=IK2PI;
}
else if( j27array[0] < -IKPI )
{    j27array[0]+=IK2PI;
}
j27valid[0] = true;
for(int ij27 = 0; ij27 < 1; ++ij27)
{
if( !j27valid[ij27] )
{
    continue;
}
_ij27[0] = ij27; _ij27[1] = -1;
for(int iij27 = ij27+1; iij27 < 1; ++iij27)
{
if( j27valid[iij27] && IKabs(cj27array[ij27]-cj27array[iij27]) < IKFAST_SOLUTION_THRESH && IKabs(sj27array[ij27]-sj27array[iij27]) < IKFAST_SOLUTION_THRESH )
{
    j27valid[iij27]=false; _ij27[1] = iij27; break;
}
}
j27 = j27array[ij27]; cj27 = cj27array[ij27]; sj27 = sj27array[ij27];
{
IkReal evalcond[2];
evalcond[0]=((new_r21)+(IKsin(j27)));
evalcond[1]=((((IkReal(-1.00000000000000))*(IKcos(j27))))+(new_r20));
if( IKabs(evalcond[0]) > 0.000001  || IKabs(evalcond[1]) > 0.000001  )
{
continue;
}
}

{
IkReal dummyeval[1];
IkReal gconst60;
gconst60=IKsign(((((IkReal(-1.00000000000000))*(new_r00)*(new_r12)))+(((new_r02)*(new_r10)))));
dummyeval[0]=((((IkReal(-1.00000000000000))*(new_r00)*(new_r12)))+(((new_r02)*(new_r10))));
if( IKabs(dummyeval[0]) < 0.0000010000000000  )
{
{
IkReal dummyeval[1];
IkReal gconst61;
gconst61=IKsign(((((IkReal(-1.00000000000000))*(new_r01)*(new_r12)))+(((new_r02)*(new_r11)))));
dummyeval[0]=((((IkReal(-1.00000000000000))*(new_r01)*(new_r12)))+(((new_r02)*(new_r11))));
if( IKabs(dummyeval[0]) < 0.0000010000000000  )
{
continue;

} else
{
{
IkReal j24array[1], cj24array[1], sj24array[1];
bool j24valid[1]={false};
_nj24 = 1;
if( IKabs(((gconst61)*(new_r01))) < IKFAST_ATAN2_MAGTHRESH && IKabs(((IkReal(-1.00000000000000))*(gconst61)*(new_r11))) < IKFAST_ATAN2_MAGTHRESH )
    continue;
j24array[0]=IKatan2(((gconst61)*(new_r01)), ((IkReal(-1.00000000000000))*(gconst61)*(new_r11)));
sj24array[0]=IKsin(j24array[0]);
cj24array[0]=IKcos(j24array[0]);
if( j24array[0] > IKPI )
{
    j24array[0]-=IK2PI;
}
else if( j24array[0] < -IKPI )
{    j24array[0]+=IK2PI;
}
j24valid[0] = true;
for(int ij24 = 0; ij24 < 1; ++ij24)
{
if( !j24valid[ij24] )
{
    continue;
}
_ij24[0] = ij24; _ij24[1] = -1;
for(int iij24 = ij24+1; iij24 < 1; ++iij24)
{
if( j24valid[iij24] && IKabs(cj24array[ij24]-cj24array[iij24]) < IKFAST_SOLUTION_THRESH && IKabs(sj24array[ij24]-sj24array[iij24]) < IKFAST_SOLUTION_THRESH )
{
    j24valid[iij24]=false; _ij24[1] = iij24; break;
}
}
j24 = j24array[ij24]; cj24 = cj24array[ij24]; sj24 = sj24array[ij24];
{
IkReal evalcond[6];
IkReal x110=IKsin(j24);
IkReal x111=IKcos(j24);
IkReal x112=((IkReal(1.00000000000000))*(x110));
evalcond[0]=((((IkReal(-1.00000000000000))*(new_r02)*(x112)))+(((new_r12)*(x111))));
evalcond[1]=((IkReal(1.00000000000000))+(((new_r02)*(x111)))+(((new_r12)*(x110))));
evalcond[2]=((((new_r10)*(x111)))+(((IkReal(-1.00000000000000))*(new_r00)*(x112)))+(((IkReal(-1.00000000000000))*(sj27))));
evalcond[3]=((((new_r11)*(x111)))+(((IkReal(-1.00000000000000))*(new_r01)*(x112)))+(((IkReal(-1.00000000000000))*(cj27))));
evalcond[4]=((((new_r10)*(x110)))+(((new_r00)*(x111))));
evalcond[5]=((((new_r11)*(x110)))+(((new_r01)*(x111))));
if( IKabs(evalcond[0]) > 0.000001  || IKabs(evalcond[1]) > 0.000001  || IKabs(evalcond[2]) > 0.000001  || IKabs(evalcond[3]) > 0.000001  || IKabs(evalcond[4]) > 0.000001  || IKabs(evalcond[5]) > 0.000001  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(7);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j20;
vinfos[0].indices[0] = _ij20[0];
vinfos[0].indices[1] = _ij20[1];
vinfos[0].maxsolutions = _nj20;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j21;
vinfos[1].indices[0] = _ij21[0];
vinfos[1].indices[1] = _ij21[1];
vinfos[1].maxsolutions = _nj21;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j22;
vinfos[2].indices[0] = _ij22[0];
vinfos[2].indices[1] = _ij22[1];
vinfos[2].maxsolutions = _nj22;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j23;
vinfos[3].indices[0] = _ij23[0];
vinfos[3].indices[1] = _ij23[1];
vinfos[3].maxsolutions = _nj23;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j24;
vinfos[4].indices[0] = _ij24[0];
vinfos[4].indices[1] = _ij24[1];
vinfos[4].maxsolutions = _nj24;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j25;
vinfos[5].indices[0] = _ij25[0];
vinfos[5].indices[1] = _ij25[1];
vinfos[5].maxsolutions = _nj25;
vinfos[6].jointtype = 1;
vinfos[6].foffset = j27;
vinfos[6].indices[0] = _ij27[0];
vinfos[6].indices[1] = _ij27[1];
vinfos[6].maxsolutions = _nj27;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j24array[1], cj24array[1], sj24array[1];
bool j24valid[1]={false};
_nj24 = 1;
if( IKabs(((gconst60)*(new_r00))) < IKFAST_ATAN2_MAGTHRESH && IKabs(((IkReal(-1.00000000000000))*(gconst60)*(new_r10))) < IKFAST_ATAN2_MAGTHRESH )
    continue;
j24array[0]=IKatan2(((gconst60)*(new_r00)), ((IkReal(-1.00000000000000))*(gconst60)*(new_r10)));
sj24array[0]=IKsin(j24array[0]);
cj24array[0]=IKcos(j24array[0]);
if( j24array[0] > IKPI )
{
    j24array[0]-=IK2PI;
}
else if( j24array[0] < -IKPI )
{    j24array[0]+=IK2PI;
}
j24valid[0] = true;
for(int ij24 = 0; ij24 < 1; ++ij24)
{
if( !j24valid[ij24] )
{
    continue;
}
_ij24[0] = ij24; _ij24[1] = -1;
for(int iij24 = ij24+1; iij24 < 1; ++iij24)
{
if( j24valid[iij24] && IKabs(cj24array[ij24]-cj24array[iij24]) < IKFAST_SOLUTION_THRESH && IKabs(sj24array[ij24]-sj24array[iij24]) < IKFAST_SOLUTION_THRESH )
{
    j24valid[iij24]=false; _ij24[1] = iij24; break;
}
}
j24 = j24array[ij24]; cj24 = cj24array[ij24]; sj24 = sj24array[ij24];
{
IkReal evalcond[6];
IkReal x113=IKsin(j24);
IkReal x114=IKcos(j24);
IkReal x115=((IkReal(1.00000000000000))*(x113));
evalcond[0]=((((IkReal(-1.00000000000000))*(new_r02)*(x115)))+(((new_r12)*(x114))));
evalcond[1]=((IkReal(1.00000000000000))+(((new_r02)*(x114)))+(((new_r12)*(x113))));
evalcond[2]=((((new_r10)*(x114)))+(((IkReal(-1.00000000000000))*(new_r00)*(x115)))+(((IkReal(-1.00000000000000))*(sj27))));
evalcond[3]=((((new_r11)*(x114)))+(((IkReal(-1.00000000000000))*(new_r01)*(x115)))+(((IkReal(-1.00000000000000))*(cj27))));
evalcond[4]=((((new_r10)*(x113)))+(((new_r00)*(x114))));
evalcond[5]=((((new_r11)*(x113)))+(((new_r01)*(x114))));
if( IKabs(evalcond[0]) > 0.000001  || IKabs(evalcond[1]) > 0.000001  || IKabs(evalcond[2]) > 0.000001  || IKabs(evalcond[3]) > 0.000001  || IKabs(evalcond[4]) > 0.000001  || IKabs(evalcond[5]) > 0.000001  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(7);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j20;
vinfos[0].indices[0] = _ij20[0];
vinfos[0].indices[1] = _ij20[1];
vinfos[0].maxsolutions = _nj20;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j21;
vinfos[1].indices[0] = _ij21[0];
vinfos[1].indices[1] = _ij21[1];
vinfos[1].maxsolutions = _nj21;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j22;
vinfos[2].indices[0] = _ij22[0];
vinfos[2].indices[1] = _ij22[1];
vinfos[2].maxsolutions = _nj22;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j23;
vinfos[3].indices[0] = _ij23[0];
vinfos[3].indices[1] = _ij23[1];
vinfos[3].maxsolutions = _nj23;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j24;
vinfos[4].indices[0] = _ij24[0];
vinfos[4].indices[1] = _ij24[1];
vinfos[4].maxsolutions = _nj24;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j25;
vinfos[5].indices[0] = _ij25[0];
vinfos[5].indices[1] = _ij25[1];
vinfos[5].maxsolutions = _nj25;
vinfos[6].jointtype = 1;
vinfos[6].foffset = j27;
vinfos[6].indices[0] = _ij27[0];
vinfos[6].indices[1] = _ij27[1];
vinfos[6].maxsolutions = _nj27;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}
}
}

} else
{
evalcond[0]=((IkReal(-3.14159265358979))+(IKfmod(((IkReal(4.71238898038469))+(j25)), IkReal(6.28318530717959))));
evalcond[1]=new_r22;
evalcond[2]=new_r22;
if( IKabs(evalcond[0]) < 0.0000010000000000  && IKabs(evalcond[1]) < 0.0000010000000000  && IKabs(evalcond[2]) < 0.0000010000000000  )
{
{
IkReal j27array[1], cj27array[1], sj27array[1];
bool j27valid[1]={false};
_nj27 = 1;
if( IKabs(new_r21) < IKFAST_ATAN2_MAGTHRESH && IKabs(((IkReal(-1.00000000000000))*(new_r20))) < IKFAST_ATAN2_MAGTHRESH && IKabs(IKsqr(new_r21)+IKsqr(((IkReal(-1.00000000000000))*(new_r20)))-1) <= IKFAST_SINCOS_THRESH )
    continue;
j27array[0]=IKatan2(new_r21, ((IkReal(-1.00000000000000))*(new_r20)));
sj27array[0]=IKsin(j27array[0]);
cj27array[0]=IKcos(j27array[0]);
if( j27array[0] > IKPI )
{
    j27array[0]-=IK2PI;
}
else if( j27array[0] < -IKPI )
{    j27array[0]+=IK2PI;
}
j27valid[0] = true;
for(int ij27 = 0; ij27 < 1; ++ij27)
{
if( !j27valid[ij27] )
{
    continue;
}
_ij27[0] = ij27; _ij27[1] = -1;
for(int iij27 = ij27+1; iij27 < 1; ++iij27)
{
if( j27valid[iij27] && IKabs(cj27array[ij27]-cj27array[iij27]) < IKFAST_SOLUTION_THRESH && IKabs(sj27array[ij27]-sj27array[iij27]) < IKFAST_SOLUTION_THRESH )
{
    j27valid[iij27]=false; _ij27[1] = iij27; break;
}
}
j27 = j27array[ij27]; cj27 = cj27array[ij27]; sj27 = sj27array[ij27];
{
IkReal evalcond[2];
evalcond[0]=((((IkReal(-1.00000000000000))*(IKsin(j27))))+(new_r21));
evalcond[1]=((IKcos(j27))+(new_r20));
if( IKabs(evalcond[0]) > 0.000001  || IKabs(evalcond[1]) > 0.000001  )
{
continue;
}
}

{
IkReal dummyeval[1];
IkReal gconst64;
gconst64=IKsign(((((new_r00)*(new_r12)))+(((IkReal(-1.00000000000000))*(new_r02)*(new_r10)))));
dummyeval[0]=((((new_r00)*(new_r12)))+(((IkReal(-1.00000000000000))*(new_r02)*(new_r10))));
if( IKabs(dummyeval[0]) < 0.0000010000000000  )
{
{
IkReal dummyeval[1];
IkReal gconst65;
gconst65=IKsign(((((new_r01)*(new_r12)))+(((IkReal(-1.00000000000000))*(new_r02)*(new_r11)))));
dummyeval[0]=((((new_r01)*(new_r12)))+(((IkReal(-1.00000000000000))*(new_r02)*(new_r11))));
if( IKabs(dummyeval[0]) < 0.0000010000000000  )
{
continue;

} else
{
{
IkReal j24array[1], cj24array[1], sj24array[1];
bool j24valid[1]={false};
_nj24 = 1;
if( IKabs(((gconst65)*(new_r01))) < IKFAST_ATAN2_MAGTHRESH && IKabs(((IkReal(-1.00000000000000))*(gconst65)*(new_r11))) < IKFAST_ATAN2_MAGTHRESH )
    continue;
j24array[0]=IKatan2(((gconst65)*(new_r01)), ((IkReal(-1.00000000000000))*(gconst65)*(new_r11)));
sj24array[0]=IKsin(j24array[0]);
cj24array[0]=IKcos(j24array[0]);
if( j24array[0] > IKPI )
{
    j24array[0]-=IK2PI;
}
else if( j24array[0] < -IKPI )
{    j24array[0]+=IK2PI;
}
j24valid[0] = true;
for(int ij24 = 0; ij24 < 1; ++ij24)
{
if( !j24valid[ij24] )
{
    continue;
}
_ij24[0] = ij24; _ij24[1] = -1;
for(int iij24 = ij24+1; iij24 < 1; ++iij24)
{
if( j24valid[iij24] && IKabs(cj24array[ij24]-cj24array[iij24]) < IKFAST_SOLUTION_THRESH && IKabs(sj24array[ij24]-sj24array[iij24]) < IKFAST_SOLUTION_THRESH )
{
    j24valid[iij24]=false; _ij24[1] = iij24; break;
}
}
j24 = j24array[ij24]; cj24 = cj24array[ij24]; sj24 = sj24array[ij24];
{
IkReal evalcond[6];
IkReal x116=IKsin(j24);
IkReal x117=IKcos(j24);
IkReal x118=((IkReal(1.00000000000000))*(x116));
evalcond[0]=((((IkReal(-1.00000000000000))*(new_r02)*(x118)))+(((new_r12)*(x117))));
evalcond[1]=((IkReal(-1.00000000000000))+(((new_r02)*(x117)))+(((new_r12)*(x116))));
evalcond[2]=((((new_r10)*(x117)))+(((IkReal(-1.00000000000000))*(new_r00)*(x118)))+(((IkReal(-1.00000000000000))*(sj27))));
evalcond[3]=((((new_r11)*(x117)))+(((IkReal(-1.00000000000000))*(new_r01)*(x118)))+(((IkReal(-1.00000000000000))*(cj27))));
evalcond[4]=((((new_r10)*(x116)))+(((new_r00)*(x117))));
evalcond[5]=((((new_r11)*(x116)))+(((new_r01)*(x117))));
if( IKabs(evalcond[0]) > 0.000001  || IKabs(evalcond[1]) > 0.000001  || IKabs(evalcond[2]) > 0.000001  || IKabs(evalcond[3]) > 0.000001  || IKabs(evalcond[4]) > 0.000001  || IKabs(evalcond[5]) > 0.000001  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(7);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j20;
vinfos[0].indices[0] = _ij20[0];
vinfos[0].indices[1] = _ij20[1];
vinfos[0].maxsolutions = _nj20;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j21;
vinfos[1].indices[0] = _ij21[0];
vinfos[1].indices[1] = _ij21[1];
vinfos[1].maxsolutions = _nj21;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j22;
vinfos[2].indices[0] = _ij22[0];
vinfos[2].indices[1] = _ij22[1];
vinfos[2].maxsolutions = _nj22;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j23;
vinfos[3].indices[0] = _ij23[0];
vinfos[3].indices[1] = _ij23[1];
vinfos[3].maxsolutions = _nj23;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j24;
vinfos[4].indices[0] = _ij24[0];
vinfos[4].indices[1] = _ij24[1];
vinfos[4].maxsolutions = _nj24;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j25;
vinfos[5].indices[0] = _ij25[0];
vinfos[5].indices[1] = _ij25[1];
vinfos[5].maxsolutions = _nj25;
vinfos[6].jointtype = 1;
vinfos[6].foffset = j27;
vinfos[6].indices[0] = _ij27[0];
vinfos[6].indices[1] = _ij27[1];
vinfos[6].maxsolutions = _nj27;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j24array[1], cj24array[1], sj24array[1];
bool j24valid[1]={false};
_nj24 = 1;
if( IKabs(((gconst64)*(new_r00))) < IKFAST_ATAN2_MAGTHRESH && IKabs(((IkReal(-1.00000000000000))*(gconst64)*(new_r10))) < IKFAST_ATAN2_MAGTHRESH )
    continue;
j24array[0]=IKatan2(((gconst64)*(new_r00)), ((IkReal(-1.00000000000000))*(gconst64)*(new_r10)));
sj24array[0]=IKsin(j24array[0]);
cj24array[0]=IKcos(j24array[0]);
if( j24array[0] > IKPI )
{
    j24array[0]-=IK2PI;
}
else if( j24array[0] < -IKPI )
{    j24array[0]+=IK2PI;
}
j24valid[0] = true;
for(int ij24 = 0; ij24 < 1; ++ij24)
{
if( !j24valid[ij24] )
{
    continue;
}
_ij24[0] = ij24; _ij24[1] = -1;
for(int iij24 = ij24+1; iij24 < 1; ++iij24)
{
if( j24valid[iij24] && IKabs(cj24array[ij24]-cj24array[iij24]) < IKFAST_SOLUTION_THRESH && IKabs(sj24array[ij24]-sj24array[iij24]) < IKFAST_SOLUTION_THRESH )
{
    j24valid[iij24]=false; _ij24[1] = iij24; break;
}
}
j24 = j24array[ij24]; cj24 = cj24array[ij24]; sj24 = sj24array[ij24];
{
IkReal evalcond[6];
IkReal x119=IKsin(j24);
IkReal x120=IKcos(j24);
IkReal x121=((IkReal(1.00000000000000))*(x119));
evalcond[0]=((((IkReal(-1.00000000000000))*(new_r02)*(x121)))+(((new_r12)*(x120))));
evalcond[1]=((IkReal(-1.00000000000000))+(((new_r02)*(x120)))+(((new_r12)*(x119))));
evalcond[2]=((((IkReal(-1.00000000000000))*(new_r00)*(x121)))+(((IkReal(-1.00000000000000))*(sj27)))+(((new_r10)*(x120))));
evalcond[3]=((((IkReal(-1.00000000000000))*(new_r01)*(x121)))+(((IkReal(-1.00000000000000))*(cj27)))+(((new_r11)*(x120))));
evalcond[4]=((((new_r10)*(x119)))+(((new_r00)*(x120))));
evalcond[5]=((((new_r11)*(x119)))+(((new_r01)*(x120))));
if( IKabs(evalcond[0]) > 0.000001  || IKabs(evalcond[1]) > 0.000001  || IKabs(evalcond[2]) > 0.000001  || IKabs(evalcond[3]) > 0.000001  || IKabs(evalcond[4]) > 0.000001  || IKabs(evalcond[5]) > 0.000001  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(7);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j20;
vinfos[0].indices[0] = _ij20[0];
vinfos[0].indices[1] = _ij20[1];
vinfos[0].maxsolutions = _nj20;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j21;
vinfos[1].indices[0] = _ij21[0];
vinfos[1].indices[1] = _ij21[1];
vinfos[1].maxsolutions = _nj21;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j22;
vinfos[2].indices[0] = _ij22[0];
vinfos[2].indices[1] = _ij22[1];
vinfos[2].maxsolutions = _nj22;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j23;
vinfos[3].indices[0] = _ij23[0];
vinfos[3].indices[1] = _ij23[1];
vinfos[3].maxsolutions = _nj23;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j24;
vinfos[4].indices[0] = _ij24[0];
vinfos[4].indices[1] = _ij24[1];
vinfos[4].maxsolutions = _nj24;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j25;
vinfos[5].indices[0] = _ij25[0];
vinfos[5].indices[1] = _ij25[1];
vinfos[5].maxsolutions = _nj25;
vinfos[6].jointtype = 1;
vinfos[6].foffset = j27;
vinfos[6].indices[0] = _ij27[0];
vinfos[6].indices[1] = _ij27[1];
vinfos[6].maxsolutions = _nj27;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}
}
}

} else
{
evalcond[0]=((IkReal(-3.14159265358979))+(IKfmod(((IkReal(3.14159265358979))+(j25)), IkReal(6.28318530717959))));
evalcond[1]=((IkReal(1.00000000000000))+(new_r22));
evalcond[2]=new_r21;
evalcond[3]=new_r20;
evalcond[4]=((IkReal(-1.00000000000000))*(new_r20));
evalcond[5]=((IkReal(-1.00000000000000))*(new_r21));
evalcond[6]=((IkReal(-1.00000000000000))+(((IkReal(-1.00000000000000))*(new_r22))));
if( IKabs(evalcond[0]) < 0.0000010000000000  && IKabs(evalcond[1]) < 0.0000010000000000  && IKabs(evalcond[2]) < 0.0000010000000000  && IKabs(evalcond[3]) < 0.0000010000000000  && IKabs(evalcond[4]) < 0.0000010000000000  && IKabs(evalcond[5]) < 0.0000010000000000  && IKabs(evalcond[6]) < 0.0000010000000000  )
{
{
IkReal j24array[2], cj24array[2], sj24array[2];
bool j24valid[2]={false};
_nj24 = 2;
if( IKabs(new_r02) < IKFAST_ATAN2_MAGTHRESH && IKabs(new_r12) < IKFAST_ATAN2_MAGTHRESH )
    continue;
IkReal x122=IKatan2(new_r02, new_r12);
j24array[0]=((IkReal(-1.00000000000000))*(x122));
sj24array[0]=IKsin(j24array[0]);
cj24array[0]=IKcos(j24array[0]);
j24array[1]=((IkReal(3.14159265358979))+(((IkReal(-1.00000000000000))*(x122))));
sj24array[1]=IKsin(j24array[1]);
cj24array[1]=IKcos(j24array[1]);
if( j24array[0] > IKPI )
{
    j24array[0]-=IK2PI;
}
else if( j24array[0] < -IKPI )
{    j24array[0]+=IK2PI;
}
j24valid[0] = true;
if( j24array[1] > IKPI )
{
    j24array[1]-=IK2PI;
}
else if( j24array[1] < -IKPI )
{    j24array[1]+=IK2PI;
}
j24valid[1] = true;
for(int ij24 = 0; ij24 < 2; ++ij24)
{
if( !j24valid[ij24] )
{
    continue;
}
_ij24[0] = ij24; _ij24[1] = -1;
for(int iij24 = ij24+1; iij24 < 2; ++iij24)
{
if( j24valid[iij24] && IKabs(cj24array[ij24]-cj24array[iij24]) < IKFAST_SOLUTION_THRESH && IKabs(sj24array[ij24]-sj24array[iij24]) < IKFAST_SOLUTION_THRESH )
{
    j24valid[iij24]=false; _ij24[1] = iij24; break;
}
}
j24 = j24array[ij24]; cj24 = cj24array[ij24]; sj24 = sj24array[ij24];
{
IkReal evalcond[1];
evalcond[0]=((((IkReal(-1.00000000000000))*(new_r02)*(IKsin(j24))))+(((new_r12)*(IKcos(j24)))));
if( IKabs(evalcond[0]) > 0.000001  )
{
continue;
}
}

{
IkReal j27array[1], cj27array[1], sj27array[1];
bool j27valid[1]={false};
_nj27 = 1;
if( IKabs(((((new_r11)*(sj24)))+(((cj24)*(new_r01))))) < IKFAST_ATAN2_MAGTHRESH && IKabs(((((IkReal(-1.00000000000000))*(new_r10)*(sj24)))+(((IkReal(-1.00000000000000))*(cj24)*(new_r00))))) < IKFAST_ATAN2_MAGTHRESH && IKabs(IKsqr(((((new_r11)*(sj24)))+(((cj24)*(new_r01)))))+IKsqr(((((IkReal(-1.00000000000000))*(new_r10)*(sj24)))+(((IkReal(-1.00000000000000))*(cj24)*(new_r00)))))-1) <= IKFAST_SINCOS_THRESH )
    continue;
j27array[0]=IKatan2(((((new_r11)*(sj24)))+(((cj24)*(new_r01)))), ((((IkReal(-1.00000000000000))*(new_r10)*(sj24)))+(((IkReal(-1.00000000000000))*(cj24)*(new_r00)))));
sj27array[0]=IKsin(j27array[0]);
cj27array[0]=IKcos(j27array[0]);
if( j27array[0] > IKPI )
{
    j27array[0]-=IK2PI;
}
else if( j27array[0] < -IKPI )
{    j27array[0]+=IK2PI;
}
j27valid[0] = true;
for(int ij27 = 0; ij27 < 1; ++ij27)
{
if( !j27valid[ij27] )
{
    continue;
}
_ij27[0] = ij27; _ij27[1] = -1;
for(int iij27 = ij27+1; iij27 < 1; ++iij27)
{
if( j27valid[iij27] && IKabs(cj27array[ij27]-cj27array[iij27]) < IKFAST_SOLUTION_THRESH && IKabs(sj27array[ij27]-sj27array[iij27]) < IKFAST_SOLUTION_THRESH )
{
    j27valid[iij27]=false; _ij27[1] = iij27; break;
}
}
j27 = j27array[ij27]; cj27 = cj27array[ij27]; sj27 = sj27array[ij27];
{
IkReal evalcond[4];
IkReal x123=IKcos(j27);
IkReal x124=((IkReal(1.00000000000000))*(sj24));
IkReal x125=((IkReal(1.00000000000000))*(IKsin(j27)));
evalcond[0]=((((IkReal(-1.00000000000000))*(new_r00)*(x124)))+(((IkReal(-1.00000000000000))*(x125)))+(((cj24)*(new_r10))));
evalcond[1]=((((IkReal(-1.00000000000000))*(new_r01)*(x124)))+(((cj24)*(new_r11)))+(((IkReal(-1.00000000000000))*(x123))));
evalcond[2]=((x123)+(((new_r10)*(sj24)))+(((cj24)*(new_r00))));
evalcond[3]=((((IkReal(-1.00000000000000))*(x125)))+(((new_r11)*(sj24)))+(((cj24)*(new_r01))));
if( IKabs(evalcond[0]) > 0.000001  || IKabs(evalcond[1]) > 0.000001  || IKabs(evalcond[2]) > 0.000001  || IKabs(evalcond[3]) > 0.000001  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(7);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j20;
vinfos[0].indices[0] = _ij20[0];
vinfos[0].indices[1] = _ij20[1];
vinfos[0].maxsolutions = _nj20;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j21;
vinfos[1].indices[0] = _ij21[0];
vinfos[1].indices[1] = _ij21[1];
vinfos[1].maxsolutions = _nj21;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j22;
vinfos[2].indices[0] = _ij22[0];
vinfos[2].indices[1] = _ij22[1];
vinfos[2].maxsolutions = _nj22;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j23;
vinfos[3].indices[0] = _ij23[0];
vinfos[3].indices[1] = _ij23[1];
vinfos[3].maxsolutions = _nj23;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j24;
vinfos[4].indices[0] = _ij24[0];
vinfos[4].indices[1] = _ij24[1];
vinfos[4].maxsolutions = _nj24;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j25;
vinfos[5].indices[0] = _ij25[0];
vinfos[5].indices[1] = _ij25[1];
vinfos[5].maxsolutions = _nj25;
vinfos[6].jointtype = 1;
vinfos[6].foffset = j27;
vinfos[6].indices[0] = _ij27[0];
vinfos[6].indices[1] = _ij27[1];
vinfos[6].maxsolutions = _nj27;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}
}
}

} else
{
IkReal x126=((IkReal(-1.00000000000000))+(new_r22));
evalcond[0]=((IkReal(-3.14159265358979))+(IKfmod(j25, IkReal(6.28318530717959))));
evalcond[1]=x126;
evalcond[2]=new_r21;
evalcond[3]=new_r20;
evalcond[4]=new_r20;
evalcond[5]=new_r21;
evalcond[6]=x126;
if( IKabs(evalcond[0]) < 0.0000010000000000  && IKabs(evalcond[1]) < 0.0000010000000000  && IKabs(evalcond[2]) < 0.0000010000000000  && IKabs(evalcond[3]) < 0.0000010000000000  && IKabs(evalcond[4]) < 0.0000010000000000  && IKabs(evalcond[5]) < 0.0000010000000000  && IKabs(evalcond[6]) < 0.0000010000000000  )
{
{
IkReal j24array[2], cj24array[2], sj24array[2];
bool j24valid[2]={false};
_nj24 = 2;
if( IKabs(new_r02) < IKFAST_ATAN2_MAGTHRESH && IKabs(new_r12) < IKFAST_ATAN2_MAGTHRESH )
    continue;
IkReal x127=IKatan2(new_r02, new_r12);
j24array[0]=((IkReal(-1.00000000000000))*(x127));
sj24array[0]=IKsin(j24array[0]);
cj24array[0]=IKcos(j24array[0]);
j24array[1]=((IkReal(3.14159265358979))+(((IkReal(-1.00000000000000))*(x127))));
sj24array[1]=IKsin(j24array[1]);
cj24array[1]=IKcos(j24array[1]);
if( j24array[0] > IKPI )
{
    j24array[0]-=IK2PI;
}
else if( j24array[0] < -IKPI )
{    j24array[0]+=IK2PI;
}
j24valid[0] = true;
if( j24array[1] > IKPI )
{
    j24array[1]-=IK2PI;
}
else if( j24array[1] < -IKPI )
{    j24array[1]+=IK2PI;
}
j24valid[1] = true;
for(int ij24 = 0; ij24 < 2; ++ij24)
{
if( !j24valid[ij24] )
{
    continue;
}
_ij24[0] = ij24; _ij24[1] = -1;
for(int iij24 = ij24+1; iij24 < 2; ++iij24)
{
if( j24valid[iij24] && IKabs(cj24array[ij24]-cj24array[iij24]) < IKFAST_SOLUTION_THRESH && IKabs(sj24array[ij24]-sj24array[iij24]) < IKFAST_SOLUTION_THRESH )
{
    j24valid[iij24]=false; _ij24[1] = iij24; break;
}
}
j24 = j24array[ij24]; cj24 = cj24array[ij24]; sj24 = sj24array[ij24];
{
IkReal evalcond[1];
evalcond[0]=((((IkReal(-1.00000000000000))*(new_r02)*(IKsin(j24))))+(((new_r12)*(IKcos(j24)))));
if( IKabs(evalcond[0]) > 0.000001  )
{
continue;
}
}

{
IkReal j27array[1], cj27array[1], sj27array[1];
bool j27valid[1]={false};
_nj27 = 1;
if( IKabs(((((IkReal(-1.00000000000000))*(new_r11)*(sj24)))+(((IkReal(-1.00000000000000))*(cj24)*(new_r01))))) < IKFAST_ATAN2_MAGTHRESH && IKabs(((((new_r10)*(sj24)))+(((cj24)*(new_r00))))) < IKFAST_ATAN2_MAGTHRESH && IKabs(IKsqr(((((IkReal(-1.00000000000000))*(new_r11)*(sj24)))+(((IkReal(-1.00000000000000))*(cj24)*(new_r01)))))+IKsqr(((((new_r10)*(sj24)))+(((cj24)*(new_r00)))))-1) <= IKFAST_SINCOS_THRESH )
    continue;
j27array[0]=IKatan2(((((IkReal(-1.00000000000000))*(new_r11)*(sj24)))+(((IkReal(-1.00000000000000))*(cj24)*(new_r01)))), ((((new_r10)*(sj24)))+(((cj24)*(new_r00)))));
sj27array[0]=IKsin(j27array[0]);
cj27array[0]=IKcos(j27array[0]);
if( j27array[0] > IKPI )
{
    j27array[0]-=IK2PI;
}
else if( j27array[0] < -IKPI )
{    j27array[0]+=IK2PI;
}
j27valid[0] = true;
for(int ij27 = 0; ij27 < 1; ++ij27)
{
if( !j27valid[ij27] )
{
    continue;
}
_ij27[0] = ij27; _ij27[1] = -1;
for(int iij27 = ij27+1; iij27 < 1; ++iij27)
{
if( j27valid[iij27] && IKabs(cj27array[ij27]-cj27array[iij27]) < IKFAST_SOLUTION_THRESH && IKabs(sj27array[ij27]-sj27array[iij27]) < IKFAST_SOLUTION_THRESH )
{
    j27valid[iij27]=false; _ij27[1] = iij27; break;
}
}
j27 = j27array[ij27]; cj27 = cj27array[ij27]; sj27 = sj27array[ij27];
{
IkReal evalcond[4];
IkReal x128=IKsin(j27);
IkReal x129=((IkReal(1.00000000000000))*(sj24));
IkReal x130=((IkReal(1.00000000000000))*(IKcos(j27)));
evalcond[0]=((((IkReal(-1.00000000000000))*(new_r00)*(x129)))+(((cj24)*(new_r10)))+(((IkReal(-1.00000000000000))*(x128))));
evalcond[1]=((((IkReal(-1.00000000000000))*(new_r01)*(x129)))+(((IkReal(-1.00000000000000))*(x130)))+(((cj24)*(new_r11))));
evalcond[2]=((((IkReal(-1.00000000000000))*(x130)))+(((new_r10)*(sj24)))+(((cj24)*(new_r00))));
evalcond[3]=((x128)+(((new_r11)*(sj24)))+(((cj24)*(new_r01))));
if( IKabs(evalcond[0]) > 0.000001  || IKabs(evalcond[1]) > 0.000001  || IKabs(evalcond[2]) > 0.000001  || IKabs(evalcond[3]) > 0.000001  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(7);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j20;
vinfos[0].indices[0] = _ij20[0];
vinfos[0].indices[1] = _ij20[1];
vinfos[0].maxsolutions = _nj20;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j21;
vinfos[1].indices[0] = _ij21[0];
vinfos[1].indices[1] = _ij21[1];
vinfos[1].maxsolutions = _nj21;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j22;
vinfos[2].indices[0] = _ij22[0];
vinfos[2].indices[1] = _ij22[1];
vinfos[2].maxsolutions = _nj22;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j23;
vinfos[3].indices[0] = _ij23[0];
vinfos[3].indices[1] = _ij23[1];
vinfos[3].maxsolutions = _nj23;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j24;
vinfos[4].indices[0] = _ij24[0];
vinfos[4].indices[1] = _ij24[1];
vinfos[4].maxsolutions = _nj24;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j25;
vinfos[5].indices[0] = _ij25[0];
vinfos[5].indices[1] = _ij25[1];
vinfos[5].maxsolutions = _nj25;
vinfos[6].jointtype = 1;
vinfos[6].foffset = j27;
vinfos[6].indices[0] = _ij27[0];
vinfos[6].indices[1] = _ij27[1];
vinfos[6].maxsolutions = _nj27;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}
}
}

} else
{
if( 1 )
{
continue;

} else
{
}
}
}
}
}
}

} else
{
{
IkReal j24array[1], cj24array[1], sj24array[1];
bool j24valid[1]={false};
_nj24 = 1;
IkReal x131=((gconst53)*(new_r22)*(sj25));
if( IKabs(((new_r12)*(x131))) < IKFAST_ATAN2_MAGTHRESH && IKabs(((new_r02)*(x131))) < IKFAST_ATAN2_MAGTHRESH )
    continue;
j24array[0]=IKatan2(((new_r12)*(x131)), ((new_r02)*(x131)));
sj24array[0]=IKsin(j24array[0]);
cj24array[0]=IKcos(j24array[0]);
if( j24array[0] > IKPI )
{
    j24array[0]-=IK2PI;
}
else if( j24array[0] < -IKPI )
{    j24array[0]+=IK2PI;
}
j24valid[0] = true;
for(int ij24 = 0; ij24 < 1; ++ij24)
{
if( !j24valid[ij24] )
{
    continue;
}
_ij24[0] = ij24; _ij24[1] = -1;
for(int iij24 = ij24+1; iij24 < 1; ++iij24)
{
if( j24valid[iij24] && IKabs(cj24array[ij24]-cj24array[iij24]) < IKFAST_SOLUTION_THRESH && IKabs(sj24array[ij24]-sj24array[iij24]) < IKFAST_SOLUTION_THRESH )
{
    j24valid[iij24]=false; _ij24[1] = iij24; break;
}
}
j24 = j24array[ij24]; cj24 = cj24array[ij24]; sj24 = sj24array[ij24];
{
IkReal evalcond[6];
IkReal x132=IKsin(j24);
IkReal x133=IKcos(j24);
IkReal x134=((IkReal(1.00000000000000))*(new_r22));
IkReal x135=((IkReal(1.00000000000000))*(cj25));
IkReal x136=((IkReal(1.00000000000000))*(sj25));
IkReal x137=((new_r02)*(x133));
IkReal x138=((IkReal(1.00000000000000))*(x132));
IkReal x139=((new_r12)*(x132));
evalcond[0]=((((new_r12)*(x133)))+(((IkReal(-1.00000000000000))*(new_r02)*(x138))));
evalcond[1]=((x137)+(x139)+(sj25));
evalcond[2]=((((cj25)*(x139)))+(((cj25)*(x137)))+(((IkReal(-1.00000000000000))*(sj25)*(x134))));
evalcond[3]=((((IkReal(-1.00000000000000))*(new_r20)*(x135)))+(((IkReal(-1.00000000000000))*(new_r00)*(x133)*(x136)))+(((IkReal(-1.00000000000000))*(new_r10)*(x132)*(x136))));
evalcond[4]=((((IkReal(-1.00000000000000))*(new_r11)*(x132)*(x136)))+(((IkReal(-1.00000000000000))*(new_r21)*(x135)))+(((IkReal(-1.00000000000000))*(new_r01)*(x133)*(x136))));
evalcond[5]=((IkReal(-1.00000000000000))+(((IkReal(-1.00000000000000))*(cj25)*(x134)))+(((IkReal(-1.00000000000000))*(x136)*(x137)))+(((IkReal(-1.00000000000000))*(x136)*(x139))));
if( IKabs(evalcond[0]) > 0.000001  || IKabs(evalcond[1]) > 0.000001  || IKabs(evalcond[2]) > 0.000001  || IKabs(evalcond[3]) > 0.000001  || IKabs(evalcond[4]) > 0.000001  || IKabs(evalcond[5]) > 0.000001  )
{
continue;
}
}

{
IkReal dummyeval[1];
IkReal gconst55;
gconst55=IKsign(sj25);
dummyeval[0]=sj25;
if( IKabs(dummyeval[0]) < 0.0000010000000000  )
{
{
IkReal dummyeval[1];
dummyeval[0]=sj25;
if( IKabs(dummyeval[0]) < 0.0000010000000000  )
{
{
IkReal dummyeval[1];
dummyeval[0]=sj25;
if( IKabs(dummyeval[0]) < 0.0000010000000000  )
{
{
IkReal evalcond[11];
IkReal x140=((((cj24)*(new_r12)))+(((IkReal(-1.00000000000000))*(new_r02)*(sj24))));
IkReal x141=((((new_r12)*(sj24)))+(((cj24)*(new_r02))));
evalcond[0]=((IkReal(-3.14159265358979))+(IKfmod(((IkReal(3.14159265358979))+(j25)), IkReal(6.28318530717959))));
evalcond[1]=((IkReal(1.00000000000000))+(new_r22));
evalcond[2]=new_r21;
evalcond[3]=new_r20;
evalcond[4]=x140;
evalcond[5]=x140;
evalcond[6]=x141;
evalcond[7]=x141;
evalcond[8]=((IkReal(-1.00000000000000))*(new_r20));
evalcond[9]=((IkReal(-1.00000000000000))*(new_r21));
evalcond[10]=((IkReal(-1.00000000000000))+(((IkReal(-1.00000000000000))*(new_r22))));
if( IKabs(evalcond[0]) < 0.0000010000000000  && IKabs(evalcond[1]) < 0.0000010000000000  && IKabs(evalcond[2]) < 0.0000010000000000  && IKabs(evalcond[3]) < 0.0000010000000000  && IKabs(evalcond[4]) < 0.0000010000000000  && IKabs(evalcond[5]) < 0.0000010000000000  && IKabs(evalcond[6]) < 0.0000010000000000  && IKabs(evalcond[7]) < 0.0000010000000000  && IKabs(evalcond[8]) < 0.0000010000000000  && IKabs(evalcond[9]) < 0.0000010000000000  && IKabs(evalcond[10]) < 0.0000010000000000  )
{
{
IkReal j27array[1], cj27array[1], sj27array[1];
bool j27valid[1]={false};
_nj27 = 1;
if( IKabs(((((new_r11)*(sj24)))+(((cj24)*(new_r01))))) < IKFAST_ATAN2_MAGTHRESH && IKabs(((((IkReal(-1.00000000000000))*(new_r10)*(sj24)))+(((IkReal(-1.00000000000000))*(cj24)*(new_r00))))) < IKFAST_ATAN2_MAGTHRESH && IKabs(IKsqr(((((new_r11)*(sj24)))+(((cj24)*(new_r01)))))+IKsqr(((((IkReal(-1.00000000000000))*(new_r10)*(sj24)))+(((IkReal(-1.00000000000000))*(cj24)*(new_r00)))))-1) <= IKFAST_SINCOS_THRESH )
    continue;
j27array[0]=IKatan2(((((new_r11)*(sj24)))+(((cj24)*(new_r01)))), ((((IkReal(-1.00000000000000))*(new_r10)*(sj24)))+(((IkReal(-1.00000000000000))*(cj24)*(new_r00)))));
sj27array[0]=IKsin(j27array[0]);
cj27array[0]=IKcos(j27array[0]);
if( j27array[0] > IKPI )
{
    j27array[0]-=IK2PI;
}
else if( j27array[0] < -IKPI )
{    j27array[0]+=IK2PI;
}
j27valid[0] = true;
for(int ij27 = 0; ij27 < 1; ++ij27)
{
if( !j27valid[ij27] )
{
    continue;
}
_ij27[0] = ij27; _ij27[1] = -1;
for(int iij27 = ij27+1; iij27 < 1; ++iij27)
{
if( j27valid[iij27] && IKabs(cj27array[ij27]-cj27array[iij27]) < IKFAST_SOLUTION_THRESH && IKabs(sj27array[ij27]-sj27array[iij27]) < IKFAST_SOLUTION_THRESH )
{
    j27valid[iij27]=false; _ij27[1] = iij27; break;
}
}
j27 = j27array[ij27]; cj27 = cj27array[ij27]; sj27 = sj27array[ij27];
{
IkReal evalcond[4];
IkReal x142=IKcos(j27);
IkReal x143=((IkReal(1.00000000000000))*(sj24));
IkReal x144=((IkReal(1.00000000000000))*(IKsin(j27)));
evalcond[0]=((((IkReal(-1.00000000000000))*(x144)))+(((cj24)*(new_r10)))+(((IkReal(-1.00000000000000))*(new_r00)*(x143))));
evalcond[1]=((((IkReal(-1.00000000000000))*(new_r01)*(x143)))+(((cj24)*(new_r11)))+(((IkReal(-1.00000000000000))*(x142))));
evalcond[2]=((x142)+(((new_r10)*(sj24)))+(((cj24)*(new_r00))));
evalcond[3]=((((IkReal(-1.00000000000000))*(x144)))+(((new_r11)*(sj24)))+(((cj24)*(new_r01))));
if( IKabs(evalcond[0]) > 0.000001  || IKabs(evalcond[1]) > 0.000001  || IKabs(evalcond[2]) > 0.000001  || IKabs(evalcond[3]) > 0.000001  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(7);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j20;
vinfos[0].indices[0] = _ij20[0];
vinfos[0].indices[1] = _ij20[1];
vinfos[0].maxsolutions = _nj20;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j21;
vinfos[1].indices[0] = _ij21[0];
vinfos[1].indices[1] = _ij21[1];
vinfos[1].maxsolutions = _nj21;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j22;
vinfos[2].indices[0] = _ij22[0];
vinfos[2].indices[1] = _ij22[1];
vinfos[2].maxsolutions = _nj22;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j23;
vinfos[3].indices[0] = _ij23[0];
vinfos[3].indices[1] = _ij23[1];
vinfos[3].maxsolutions = _nj23;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j24;
vinfos[4].indices[0] = _ij24[0];
vinfos[4].indices[1] = _ij24[1];
vinfos[4].maxsolutions = _nj24;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j25;
vinfos[5].indices[0] = _ij25[0];
vinfos[5].indices[1] = _ij25[1];
vinfos[5].maxsolutions = _nj25;
vinfos[6].jointtype = 1;
vinfos[6].foffset = j27;
vinfos[6].indices[0] = _ij27[0];
vinfos[6].indices[1] = _ij27[1];
vinfos[6].maxsolutions = _nj27;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

} else
{
IkReal x145=((IkReal(-1.00000000000000))+(new_r22));
IkReal x146=((new_r12)*(sj24));
IkReal x147=((IkReal(1.00000000000000))*(new_r02));
IkReal x148=((((IkReal(-1.00000000000000))*(sj24)*(x147)))+(((cj24)*(new_r12))));
evalcond[0]=((IkReal(-3.14159265358979))+(IKfmod(j25, IkReal(6.28318530717959))));
evalcond[1]=x145;
evalcond[2]=new_r21;
evalcond[3]=new_r20;
evalcond[4]=x148;
evalcond[5]=x148;
evalcond[6]=((x146)+(((cj24)*(new_r02))));
evalcond[7]=((((IkReal(-1.00000000000000))*(x146)))+(((IkReal(-1.00000000000000))*(cj24)*(x147))));
evalcond[8]=new_r20;
evalcond[9]=new_r21;
evalcond[10]=x145;
if( IKabs(evalcond[0]) < 0.0000010000000000  && IKabs(evalcond[1]) < 0.0000010000000000  && IKabs(evalcond[2]) < 0.0000010000000000  && IKabs(evalcond[3]) < 0.0000010000000000  && IKabs(evalcond[4]) < 0.0000010000000000  && IKabs(evalcond[5]) < 0.0000010000000000  && IKabs(evalcond[6]) < 0.0000010000000000  && IKabs(evalcond[7]) < 0.0000010000000000  && IKabs(evalcond[8]) < 0.0000010000000000  && IKabs(evalcond[9]) < 0.0000010000000000  && IKabs(evalcond[10]) < 0.0000010000000000  )
{
{
IkReal j27array[1], cj27array[1], sj27array[1];
bool j27valid[1]={false};
_nj27 = 1;
if( IKabs(((((IkReal(-1.00000000000000))*(new_r11)*(sj24)))+(((IkReal(-1.00000000000000))*(cj24)*(new_r01))))) < IKFAST_ATAN2_MAGTHRESH && IKabs(((((new_r10)*(sj24)))+(((cj24)*(new_r00))))) < IKFAST_ATAN2_MAGTHRESH && IKabs(IKsqr(((((IkReal(-1.00000000000000))*(new_r11)*(sj24)))+(((IkReal(-1.00000000000000))*(cj24)*(new_r01)))))+IKsqr(((((new_r10)*(sj24)))+(((cj24)*(new_r00)))))-1) <= IKFAST_SINCOS_THRESH )
    continue;
j27array[0]=IKatan2(((((IkReal(-1.00000000000000))*(new_r11)*(sj24)))+(((IkReal(-1.00000000000000))*(cj24)*(new_r01)))), ((((new_r10)*(sj24)))+(((cj24)*(new_r00)))));
sj27array[0]=IKsin(j27array[0]);
cj27array[0]=IKcos(j27array[0]);
if( j27array[0] > IKPI )
{
    j27array[0]-=IK2PI;
}
else if( j27array[0] < -IKPI )
{    j27array[0]+=IK2PI;
}
j27valid[0] = true;
for(int ij27 = 0; ij27 < 1; ++ij27)
{
if( !j27valid[ij27] )
{
    continue;
}
_ij27[0] = ij27; _ij27[1] = -1;
for(int iij27 = ij27+1; iij27 < 1; ++iij27)
{
if( j27valid[iij27] && IKabs(cj27array[ij27]-cj27array[iij27]) < IKFAST_SOLUTION_THRESH && IKabs(sj27array[ij27]-sj27array[iij27]) < IKFAST_SOLUTION_THRESH )
{
    j27valid[iij27]=false; _ij27[1] = iij27; break;
}
}
j27 = j27array[ij27]; cj27 = cj27array[ij27]; sj27 = sj27array[ij27];
{
IkReal evalcond[4];
IkReal x149=IKsin(j27);
IkReal x150=((IkReal(1.00000000000000))*(sj24));
IkReal x151=((IkReal(1.00000000000000))*(IKcos(j27)));
evalcond[0]=((((cj24)*(new_r10)))+(((IkReal(-1.00000000000000))*(x149)))+(((IkReal(-1.00000000000000))*(new_r00)*(x150))));
evalcond[1]=((((IkReal(-1.00000000000000))*(x151)))+(((cj24)*(new_r11)))+(((IkReal(-1.00000000000000))*(new_r01)*(x150))));
evalcond[2]=((((IkReal(-1.00000000000000))*(x151)))+(((new_r10)*(sj24)))+(((cj24)*(new_r00))));
evalcond[3]=((x149)+(((new_r11)*(sj24)))+(((cj24)*(new_r01))));
if( IKabs(evalcond[0]) > 0.000001  || IKabs(evalcond[1]) > 0.000001  || IKabs(evalcond[2]) > 0.000001  || IKabs(evalcond[3]) > 0.000001  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(7);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j20;
vinfos[0].indices[0] = _ij20[0];
vinfos[0].indices[1] = _ij20[1];
vinfos[0].maxsolutions = _nj20;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j21;
vinfos[1].indices[0] = _ij21[0];
vinfos[1].indices[1] = _ij21[1];
vinfos[1].maxsolutions = _nj21;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j22;
vinfos[2].indices[0] = _ij22[0];
vinfos[2].indices[1] = _ij22[1];
vinfos[2].maxsolutions = _nj22;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j23;
vinfos[3].indices[0] = _ij23[0];
vinfos[3].indices[1] = _ij23[1];
vinfos[3].maxsolutions = _nj23;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j24;
vinfos[4].indices[0] = _ij24[0];
vinfos[4].indices[1] = _ij24[1];
vinfos[4].maxsolutions = _nj24;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j25;
vinfos[5].indices[0] = _ij25[0];
vinfos[5].indices[1] = _ij25[1];
vinfos[5].maxsolutions = _nj25;
vinfos[6].jointtype = 1;
vinfos[6].foffset = j27;
vinfos[6].indices[0] = _ij27[0];
vinfos[6].indices[1] = _ij27[1];
vinfos[6].maxsolutions = _nj27;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

} else
{
if( 1 )
{
continue;

} else
{
}
}
}
}

} else
{
{
IkReal j27array[1], cj27array[1], sj27array[1];
bool j27valid[1]={false};
_nj27 = 1;
if( IKabs(((IkReal(-1.00000000000000))*(new_r21)*(((IKabs(sj25) != 0)?((IkReal)1/(sj25)):(IkReal)1.0e30)))) < IKFAST_ATAN2_MAGTHRESH && IKabs(((((IkReal(-1.00000000000000))*(new_r01)*(sj24)))+(((cj24)*(new_r11))))) < IKFAST_ATAN2_MAGTHRESH && IKabs(IKsqr(((IkReal(-1.00000000000000))*(new_r21)*(((IKabs(sj25) != 0)?((IkReal)1/(sj25)):(IkReal)1.0e30))))+IKsqr(((((IkReal(-1.00000000000000))*(new_r01)*(sj24)))+(((cj24)*(new_r11)))))-1) <= IKFAST_SINCOS_THRESH )
    continue;
j27array[0]=IKatan2(((IkReal(-1.00000000000000))*(new_r21)*(((IKabs(sj25) != 0)?((IkReal)1/(sj25)):(IkReal)1.0e30))), ((((IkReal(-1.00000000000000))*(new_r01)*(sj24)))+(((cj24)*(new_r11)))));
sj27array[0]=IKsin(j27array[0]);
cj27array[0]=IKcos(j27array[0]);
if( j27array[0] > IKPI )
{
    j27array[0]-=IK2PI;
}
else if( j27array[0] < -IKPI )
{    j27array[0]+=IK2PI;
}
j27valid[0] = true;
for(int ij27 = 0; ij27 < 1; ++ij27)
{
if( !j27valid[ij27] )
{
    continue;
}
_ij27[0] = ij27; _ij27[1] = -1;
for(int iij27 = ij27+1; iij27 < 1; ++iij27)
{
if( j27valid[iij27] && IKabs(cj27array[ij27]-cj27array[iij27]) < IKFAST_SOLUTION_THRESH && IKabs(sj27array[ij27]-sj27array[iij27]) < IKFAST_SOLUTION_THRESH )
{
    j27valid[iij27]=false; _ij27[1] = iij27; break;
}
}
j27 = j27array[ij27]; cj27 = cj27array[ij27]; sj27 = sj27array[ij27];
{
IkReal evalcond[8];
IkReal x152=IKsin(j27);
IkReal x153=IKcos(j27);
IkReal x154=((cj25)*(sj24));
IkReal x155=((cj24)*(new_r01));
IkReal x156=((IkReal(1.00000000000000))*(sj25));
IkReal x157=((IkReal(1.00000000000000))*(sj24));
IkReal x158=((cj24)*(new_r00));
IkReal x159=((IkReal(1.00000000000000))*(x152));
evalcond[0]=((((sj25)*(x152)))+(new_r21));
evalcond[1]=((((IkReal(-1.00000000000000))*(x153)*(x156)))+(new_r20));
evalcond[2]=((((IkReal(-1.00000000000000))*(x159)))+(((cj24)*(new_r10)))+(((IkReal(-1.00000000000000))*(new_r00)*(x157))));
evalcond[3]=((((IkReal(-1.00000000000000))*(x153)))+(((cj24)*(new_r11)))+(((IkReal(-1.00000000000000))*(new_r01)*(x157))));
evalcond[4]=((((cj25)*(x153)))+(x158)+(((new_r10)*(sj24))));
evalcond[5]=((((IkReal(-1.00000000000000))*(cj25)*(x159)))+(x155)+(((new_r11)*(sj24))));
evalcond[6]=((((IkReal(-1.00000000000000))*(new_r20)*(x156)))+(((cj25)*(x158)))+(((new_r10)*(x154)))+(x153));
evalcond[7]=((((IkReal(-1.00000000000000))*(x159)))+(((cj25)*(x155)))+(((new_r11)*(x154)))+(((IkReal(-1.00000000000000))*(new_r21)*(x156))));
if( IKabs(evalcond[0]) > 0.000001  || IKabs(evalcond[1]) > 0.000001  || IKabs(evalcond[2]) > 0.000001  || IKabs(evalcond[3]) > 0.000001  || IKabs(evalcond[4]) > 0.000001  || IKabs(evalcond[5]) > 0.000001  || IKabs(evalcond[6]) > 0.000001  || IKabs(evalcond[7]) > 0.000001  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(7);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j20;
vinfos[0].indices[0] = _ij20[0];
vinfos[0].indices[1] = _ij20[1];
vinfos[0].maxsolutions = _nj20;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j21;
vinfos[1].indices[0] = _ij21[0];
vinfos[1].indices[1] = _ij21[1];
vinfos[1].maxsolutions = _nj21;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j22;
vinfos[2].indices[0] = _ij22[0];
vinfos[2].indices[1] = _ij22[1];
vinfos[2].maxsolutions = _nj22;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j23;
vinfos[3].indices[0] = _ij23[0];
vinfos[3].indices[1] = _ij23[1];
vinfos[3].maxsolutions = _nj23;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j24;
vinfos[4].indices[0] = _ij24[0];
vinfos[4].indices[1] = _ij24[1];
vinfos[4].maxsolutions = _nj24;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j25;
vinfos[5].indices[0] = _ij25[0];
vinfos[5].indices[1] = _ij25[1];
vinfos[5].maxsolutions = _nj25;
vinfos[6].jointtype = 1;
vinfos[6].foffset = j27;
vinfos[6].indices[0] = _ij27[0];
vinfos[6].indices[1] = _ij27[1];
vinfos[6].maxsolutions = _nj27;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j27array[1], cj27array[1], sj27array[1];
bool j27valid[1]={false};
_nj27 = 1;
if( IKabs(((((IkReal(-1.00000000000000))*(new_r00)*(sj24)))+(((cj24)*(new_r10))))) < IKFAST_ATAN2_MAGTHRESH && IKabs(((new_r20)*(((IKabs(sj25) != 0)?((IkReal)1/(sj25)):(IkReal)1.0e30)))) < IKFAST_ATAN2_MAGTHRESH && IKabs(IKsqr(((((IkReal(-1.00000000000000))*(new_r00)*(sj24)))+(((cj24)*(new_r10)))))+IKsqr(((new_r20)*(((IKabs(sj25) != 0)?((IkReal)1/(sj25)):(IkReal)1.0e30))))-1) <= IKFAST_SINCOS_THRESH )
    continue;
j27array[0]=IKatan2(((((IkReal(-1.00000000000000))*(new_r00)*(sj24)))+(((cj24)*(new_r10)))), ((new_r20)*(((IKabs(sj25) != 0)?((IkReal)1/(sj25)):(IkReal)1.0e30))));
sj27array[0]=IKsin(j27array[0]);
cj27array[0]=IKcos(j27array[0]);
if( j27array[0] > IKPI )
{
    j27array[0]-=IK2PI;
}
else if( j27array[0] < -IKPI )
{    j27array[0]+=IK2PI;
}
j27valid[0] = true;
for(int ij27 = 0; ij27 < 1; ++ij27)
{
if( !j27valid[ij27] )
{
    continue;
}
_ij27[0] = ij27; _ij27[1] = -1;
for(int iij27 = ij27+1; iij27 < 1; ++iij27)
{
if( j27valid[iij27] && IKabs(cj27array[ij27]-cj27array[iij27]) < IKFAST_SOLUTION_THRESH && IKabs(sj27array[ij27]-sj27array[iij27]) < IKFAST_SOLUTION_THRESH )
{
    j27valid[iij27]=false; _ij27[1] = iij27; break;
}
}
j27 = j27array[ij27]; cj27 = cj27array[ij27]; sj27 = sj27array[ij27];
{
IkReal evalcond[8];
IkReal x160=IKsin(j27);
IkReal x161=IKcos(j27);
IkReal x162=((cj25)*(sj24));
IkReal x163=((cj24)*(new_r01));
IkReal x164=((IkReal(1.00000000000000))*(sj25));
IkReal x165=((IkReal(1.00000000000000))*(sj24));
IkReal x166=((cj24)*(new_r00));
IkReal x167=((IkReal(1.00000000000000))*(x160));
evalcond[0]=((((sj25)*(x160)))+(new_r21));
evalcond[1]=((((IkReal(-1.00000000000000))*(x161)*(x164)))+(new_r20));
evalcond[2]=((((IkReal(-1.00000000000000))*(new_r00)*(x165)))+(((IkReal(-1.00000000000000))*(x167)))+(((cj24)*(new_r10))));
evalcond[3]=((((IkReal(-1.00000000000000))*(x161)))+(((cj24)*(new_r11)))+(((IkReal(-1.00000000000000))*(new_r01)*(x165))));
evalcond[4]=((x166)+(((new_r10)*(sj24)))+(((cj25)*(x161))));
evalcond[5]=((x163)+(((new_r11)*(sj24)))+(((IkReal(-1.00000000000000))*(cj25)*(x167))));
evalcond[6]=((((new_r10)*(x162)))+(((IkReal(-1.00000000000000))*(new_r20)*(x164)))+(x161)+(((cj25)*(x166))));
evalcond[7]=((((new_r11)*(x162)))+(((IkReal(-1.00000000000000))*(new_r21)*(x164)))+(((IkReal(-1.00000000000000))*(x167)))+(((cj25)*(x163))));
if( IKabs(evalcond[0]) > 0.000001  || IKabs(evalcond[1]) > 0.000001  || IKabs(evalcond[2]) > 0.000001  || IKabs(evalcond[3]) > 0.000001  || IKabs(evalcond[4]) > 0.000001  || IKabs(evalcond[5]) > 0.000001  || IKabs(evalcond[6]) > 0.000001  || IKabs(evalcond[7]) > 0.000001  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(7);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j20;
vinfos[0].indices[0] = _ij20[0];
vinfos[0].indices[1] = _ij20[1];
vinfos[0].maxsolutions = _nj20;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j21;
vinfos[1].indices[0] = _ij21[0];
vinfos[1].indices[1] = _ij21[1];
vinfos[1].maxsolutions = _nj21;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j22;
vinfos[2].indices[0] = _ij22[0];
vinfos[2].indices[1] = _ij22[1];
vinfos[2].maxsolutions = _nj22;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j23;
vinfos[3].indices[0] = _ij23[0];
vinfos[3].indices[1] = _ij23[1];
vinfos[3].maxsolutions = _nj23;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j24;
vinfos[4].indices[0] = _ij24[0];
vinfos[4].indices[1] = _ij24[1];
vinfos[4].maxsolutions = _nj24;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j25;
vinfos[5].indices[0] = _ij25[0];
vinfos[5].indices[1] = _ij25[1];
vinfos[5].maxsolutions = _nj25;
vinfos[6].jointtype = 1;
vinfos[6].foffset = j27;
vinfos[6].indices[0] = _ij27[0];
vinfos[6].indices[1] = _ij27[1];
vinfos[6].maxsolutions = _nj27;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j27array[1], cj27array[1], sj27array[1];
bool j27valid[1]={false};
_nj27 = 1;
if( IKabs(((IkReal(-1.00000000000000))*(gconst55)*(new_r21))) < IKFAST_ATAN2_MAGTHRESH && IKabs(((gconst55)*(new_r20))) < IKFAST_ATAN2_MAGTHRESH )
    continue;
j27array[0]=IKatan2(((IkReal(-1.00000000000000))*(gconst55)*(new_r21)), ((gconst55)*(new_r20)));
sj27array[0]=IKsin(j27array[0]);
cj27array[0]=IKcos(j27array[0]);
if( j27array[0] > IKPI )
{
    j27array[0]-=IK2PI;
}
else if( j27array[0] < -IKPI )
{    j27array[0]+=IK2PI;
}
j27valid[0] = true;
for(int ij27 = 0; ij27 < 1; ++ij27)
{
if( !j27valid[ij27] )
{
    continue;
}
_ij27[0] = ij27; _ij27[1] = -1;
for(int iij27 = ij27+1; iij27 < 1; ++iij27)
{
if( j27valid[iij27] && IKabs(cj27array[ij27]-cj27array[iij27]) < IKFAST_SOLUTION_THRESH && IKabs(sj27array[ij27]-sj27array[iij27]) < IKFAST_SOLUTION_THRESH )
{
    j27valid[iij27]=false; _ij27[1] = iij27; break;
}
}
j27 = j27array[ij27]; cj27 = cj27array[ij27]; sj27 = sj27array[ij27];
{
IkReal evalcond[8];
IkReal x168=IKsin(j27);
IkReal x169=IKcos(j27);
IkReal x170=((cj25)*(sj24));
IkReal x171=((cj24)*(new_r01));
IkReal x172=((IkReal(1.00000000000000))*(sj25));
IkReal x173=((IkReal(1.00000000000000))*(sj24));
IkReal x174=((cj24)*(new_r00));
IkReal x175=((IkReal(1.00000000000000))*(x168));
evalcond[0]=((((sj25)*(x168)))+(new_r21));
evalcond[1]=((new_r20)+(((IkReal(-1.00000000000000))*(x169)*(x172))));
evalcond[2]=((((IkReal(-1.00000000000000))*(x175)))+(((cj24)*(new_r10)))+(((IkReal(-1.00000000000000))*(new_r00)*(x173))));
evalcond[3]=((((IkReal(-1.00000000000000))*(x169)))+(((cj24)*(new_r11)))+(((IkReal(-1.00000000000000))*(new_r01)*(x173))));
evalcond[4]=((x174)+(((new_r10)*(sj24)))+(((cj25)*(x169))));
evalcond[5]=((x171)+(((new_r11)*(sj24)))+(((IkReal(-1.00000000000000))*(cj25)*(x175))));
evalcond[6]=((((cj25)*(x174)))+(((new_r10)*(x170)))+(((IkReal(-1.00000000000000))*(new_r20)*(x172)))+(x169));
evalcond[7]=((((cj25)*(x171)))+(((IkReal(-1.00000000000000))*(new_r21)*(x172)))+(((new_r11)*(x170)))+(((IkReal(-1.00000000000000))*(x175))));
if( IKabs(evalcond[0]) > 0.000001  || IKabs(evalcond[1]) > 0.000001  || IKabs(evalcond[2]) > 0.000001  || IKabs(evalcond[3]) > 0.000001  || IKabs(evalcond[4]) > 0.000001  || IKabs(evalcond[5]) > 0.000001  || IKabs(evalcond[6]) > 0.000001  || IKabs(evalcond[7]) > 0.000001  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(7);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j20;
vinfos[0].indices[0] = _ij20[0];
vinfos[0].indices[1] = _ij20[1];
vinfos[0].maxsolutions = _nj20;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j21;
vinfos[1].indices[0] = _ij21[0];
vinfos[1].indices[1] = _ij21[1];
vinfos[1].maxsolutions = _nj21;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j22;
vinfos[2].indices[0] = _ij22[0];
vinfos[2].indices[1] = _ij22[1];
vinfos[2].maxsolutions = _nj22;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j23;
vinfos[3].indices[0] = _ij23[0];
vinfos[3].indices[1] = _ij23[1];
vinfos[3].maxsolutions = _nj23;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j24;
vinfos[4].indices[0] = _ij24[0];
vinfos[4].indices[1] = _ij24[1];
vinfos[4].maxsolutions = _nj24;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j25;
vinfos[5].indices[0] = _ij25[0];
vinfos[5].indices[1] = _ij25[1];
vinfos[5].maxsolutions = _nj25;
vinfos[6].jointtype = 1;
vinfos[6].foffset = j27;
vinfos[6].indices[0] = _ij27[0];
vinfos[6].indices[1] = _ij27[1];
vinfos[6].maxsolutions = _nj27;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}
}
}

}

}

} else
{
{
IkReal j24array[1], cj24array[1], sj24array[1];
bool j24valid[1]={false};
_nj24 = 1;
IkReal x176=((gconst52)*(sj25));
if( IKabs(((new_r12)*(x176))) < IKFAST_ATAN2_MAGTHRESH && IKabs(((new_r02)*(x176))) < IKFAST_ATAN2_MAGTHRESH )
    continue;
j24array[0]=IKatan2(((new_r12)*(x176)), ((new_r02)*(x176)));
sj24array[0]=IKsin(j24array[0]);
cj24array[0]=IKcos(j24array[0]);
if( j24array[0] > IKPI )
{
    j24array[0]-=IK2PI;
}
else if( j24array[0] < -IKPI )
{    j24array[0]+=IK2PI;
}
j24valid[0] = true;
for(int ij24 = 0; ij24 < 1; ++ij24)
{
if( !j24valid[ij24] )
{
    continue;
}
_ij24[0] = ij24; _ij24[1] = -1;
for(int iij24 = ij24+1; iij24 < 1; ++iij24)
{
if( j24valid[iij24] && IKabs(cj24array[ij24]-cj24array[iij24]) < IKFAST_SOLUTION_THRESH && IKabs(sj24array[ij24]-sj24array[iij24]) < IKFAST_SOLUTION_THRESH )
{
    j24valid[iij24]=false; _ij24[1] = iij24; break;
}
}
j24 = j24array[ij24]; cj24 = cj24array[ij24]; sj24 = sj24array[ij24];
{
IkReal evalcond[6];
IkReal x177=IKsin(j24);
IkReal x178=IKcos(j24);
IkReal x179=((IkReal(1.00000000000000))*(new_r22));
IkReal x180=((IkReal(1.00000000000000))*(cj25));
IkReal x181=((IkReal(1.00000000000000))*(sj25));
IkReal x182=((new_r02)*(x178));
IkReal x183=((IkReal(1.00000000000000))*(x177));
IkReal x184=((new_r12)*(x177));
evalcond[0]=((((new_r12)*(x178)))+(((IkReal(-1.00000000000000))*(new_r02)*(x183))));
evalcond[1]=((x184)+(x182)+(sj25));
evalcond[2]=((((IkReal(-1.00000000000000))*(sj25)*(x179)))+(((cj25)*(x182)))+(((cj25)*(x184))));
evalcond[3]=((((IkReal(-1.00000000000000))*(new_r10)*(x177)*(x181)))+(((IkReal(-1.00000000000000))*(new_r20)*(x180)))+(((IkReal(-1.00000000000000))*(new_r00)*(x178)*(x181))));
evalcond[4]=((((IkReal(-1.00000000000000))*(new_r21)*(x180)))+(((IkReal(-1.00000000000000))*(new_r01)*(x178)*(x181)))+(((IkReal(-1.00000000000000))*(new_r11)*(x177)*(x181))));
evalcond[5]=((IkReal(-1.00000000000000))+(((IkReal(-1.00000000000000))*(x181)*(x184)))+(((IkReal(-1.00000000000000))*(x181)*(x182)))+(((IkReal(-1.00000000000000))*(cj25)*(x179))));
if( IKabs(evalcond[0]) > 0.000001  || IKabs(evalcond[1]) > 0.000001  || IKabs(evalcond[2]) > 0.000001  || IKabs(evalcond[3]) > 0.000001  || IKabs(evalcond[4]) > 0.000001  || IKabs(evalcond[5]) > 0.000001  )
{
continue;
}
}

{
IkReal dummyeval[1];
IkReal gconst55;
gconst55=IKsign(sj25);
dummyeval[0]=sj25;
if( IKabs(dummyeval[0]) < 0.0000010000000000  )
{
{
IkReal dummyeval[1];
dummyeval[0]=sj25;
if( IKabs(dummyeval[0]) < 0.0000010000000000  )
{
{
IkReal dummyeval[1];
dummyeval[0]=sj25;
if( IKabs(dummyeval[0]) < 0.0000010000000000  )
{
{
IkReal evalcond[11];
IkReal x185=((((cj24)*(new_r12)))+(((IkReal(-1.00000000000000))*(new_r02)*(sj24))));
IkReal x186=((((new_r12)*(sj24)))+(((cj24)*(new_r02))));
evalcond[0]=((IkReal(-3.14159265358979))+(IKfmod(((IkReal(3.14159265358979))+(j25)), IkReal(6.28318530717959))));
evalcond[1]=((IkReal(1.00000000000000))+(new_r22));
evalcond[2]=new_r21;
evalcond[3]=new_r20;
evalcond[4]=x185;
evalcond[5]=x185;
evalcond[6]=x186;
evalcond[7]=x186;
evalcond[8]=((IkReal(-1.00000000000000))*(new_r20));
evalcond[9]=((IkReal(-1.00000000000000))*(new_r21));
evalcond[10]=((IkReal(-1.00000000000000))+(((IkReal(-1.00000000000000))*(new_r22))));
if( IKabs(evalcond[0]) < 0.0000010000000000  && IKabs(evalcond[1]) < 0.0000010000000000  && IKabs(evalcond[2]) < 0.0000010000000000  && IKabs(evalcond[3]) < 0.0000010000000000  && IKabs(evalcond[4]) < 0.0000010000000000  && IKabs(evalcond[5]) < 0.0000010000000000  && IKabs(evalcond[6]) < 0.0000010000000000  && IKabs(evalcond[7]) < 0.0000010000000000  && IKabs(evalcond[8]) < 0.0000010000000000  && IKabs(evalcond[9]) < 0.0000010000000000  && IKabs(evalcond[10]) < 0.0000010000000000  )
{
{
IkReal j27array[1], cj27array[1], sj27array[1];
bool j27valid[1]={false};
_nj27 = 1;
if( IKabs(((((new_r11)*(sj24)))+(((cj24)*(new_r01))))) < IKFAST_ATAN2_MAGTHRESH && IKabs(((((IkReal(-1.00000000000000))*(new_r10)*(sj24)))+(((IkReal(-1.00000000000000))*(cj24)*(new_r00))))) < IKFAST_ATAN2_MAGTHRESH && IKabs(IKsqr(((((new_r11)*(sj24)))+(((cj24)*(new_r01)))))+IKsqr(((((IkReal(-1.00000000000000))*(new_r10)*(sj24)))+(((IkReal(-1.00000000000000))*(cj24)*(new_r00)))))-1) <= IKFAST_SINCOS_THRESH )
    continue;
j27array[0]=IKatan2(((((new_r11)*(sj24)))+(((cj24)*(new_r01)))), ((((IkReal(-1.00000000000000))*(new_r10)*(sj24)))+(((IkReal(-1.00000000000000))*(cj24)*(new_r00)))));
sj27array[0]=IKsin(j27array[0]);
cj27array[0]=IKcos(j27array[0]);
if( j27array[0] > IKPI )
{
    j27array[0]-=IK2PI;
}
else if( j27array[0] < -IKPI )
{    j27array[0]+=IK2PI;
}
j27valid[0] = true;
for(int ij27 = 0; ij27 < 1; ++ij27)
{
if( !j27valid[ij27] )
{
    continue;
}
_ij27[0] = ij27; _ij27[1] = -1;
for(int iij27 = ij27+1; iij27 < 1; ++iij27)
{
if( j27valid[iij27] && IKabs(cj27array[ij27]-cj27array[iij27]) < IKFAST_SOLUTION_THRESH && IKabs(sj27array[ij27]-sj27array[iij27]) < IKFAST_SOLUTION_THRESH )
{
    j27valid[iij27]=false; _ij27[1] = iij27; break;
}
}
j27 = j27array[ij27]; cj27 = cj27array[ij27]; sj27 = sj27array[ij27];
{
IkReal evalcond[4];
IkReal x187=IKcos(j27);
IkReal x188=((IkReal(1.00000000000000))*(sj24));
IkReal x189=((IkReal(1.00000000000000))*(IKsin(j27)));
evalcond[0]=((((IkReal(-1.00000000000000))*(x189)))+(((cj24)*(new_r10)))+(((IkReal(-1.00000000000000))*(new_r00)*(x188))));
evalcond[1]=((((IkReal(-1.00000000000000))*(x187)))+(((cj24)*(new_r11)))+(((IkReal(-1.00000000000000))*(new_r01)*(x188))));
evalcond[2]=((x187)+(((new_r10)*(sj24)))+(((cj24)*(new_r00))));
evalcond[3]=((((IkReal(-1.00000000000000))*(x189)))+(((new_r11)*(sj24)))+(((cj24)*(new_r01))));
if( IKabs(evalcond[0]) > 0.000001  || IKabs(evalcond[1]) > 0.000001  || IKabs(evalcond[2]) > 0.000001  || IKabs(evalcond[3]) > 0.000001  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(7);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j20;
vinfos[0].indices[0] = _ij20[0];
vinfos[0].indices[1] = _ij20[1];
vinfos[0].maxsolutions = _nj20;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j21;
vinfos[1].indices[0] = _ij21[0];
vinfos[1].indices[1] = _ij21[1];
vinfos[1].maxsolutions = _nj21;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j22;
vinfos[2].indices[0] = _ij22[0];
vinfos[2].indices[1] = _ij22[1];
vinfos[2].maxsolutions = _nj22;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j23;
vinfos[3].indices[0] = _ij23[0];
vinfos[3].indices[1] = _ij23[1];
vinfos[3].maxsolutions = _nj23;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j24;
vinfos[4].indices[0] = _ij24[0];
vinfos[4].indices[1] = _ij24[1];
vinfos[4].maxsolutions = _nj24;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j25;
vinfos[5].indices[0] = _ij25[0];
vinfos[5].indices[1] = _ij25[1];
vinfos[5].maxsolutions = _nj25;
vinfos[6].jointtype = 1;
vinfos[6].foffset = j27;
vinfos[6].indices[0] = _ij27[0];
vinfos[6].indices[1] = _ij27[1];
vinfos[6].maxsolutions = _nj27;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

} else
{
IkReal x190=((IkReal(-1.00000000000000))+(new_r22));
IkReal x191=((new_r12)*(sj24));
IkReal x192=((IkReal(1.00000000000000))*(new_r02));
IkReal x193=((((IkReal(-1.00000000000000))*(sj24)*(x192)))+(((cj24)*(new_r12))));
evalcond[0]=((IkReal(-3.14159265358979))+(IKfmod(j25, IkReal(6.28318530717959))));
evalcond[1]=x190;
evalcond[2]=new_r21;
evalcond[3]=new_r20;
evalcond[4]=x193;
evalcond[5]=x193;
evalcond[6]=((x191)+(((cj24)*(new_r02))));
evalcond[7]=((((IkReal(-1.00000000000000))*(cj24)*(x192)))+(((IkReal(-1.00000000000000))*(x191))));
evalcond[8]=new_r20;
evalcond[9]=new_r21;
evalcond[10]=x190;
if( IKabs(evalcond[0]) < 0.0000010000000000  && IKabs(evalcond[1]) < 0.0000010000000000  && IKabs(evalcond[2]) < 0.0000010000000000  && IKabs(evalcond[3]) < 0.0000010000000000  && IKabs(evalcond[4]) < 0.0000010000000000  && IKabs(evalcond[5]) < 0.0000010000000000  && IKabs(evalcond[6]) < 0.0000010000000000  && IKabs(evalcond[7]) < 0.0000010000000000  && IKabs(evalcond[8]) < 0.0000010000000000  && IKabs(evalcond[9]) < 0.0000010000000000  && IKabs(evalcond[10]) < 0.0000010000000000  )
{
{
IkReal j27array[1], cj27array[1], sj27array[1];
bool j27valid[1]={false};
_nj27 = 1;
if( IKabs(((((IkReal(-1.00000000000000))*(new_r11)*(sj24)))+(((IkReal(-1.00000000000000))*(cj24)*(new_r01))))) < IKFAST_ATAN2_MAGTHRESH && IKabs(((((new_r10)*(sj24)))+(((cj24)*(new_r00))))) < IKFAST_ATAN2_MAGTHRESH && IKabs(IKsqr(((((IkReal(-1.00000000000000))*(new_r11)*(sj24)))+(((IkReal(-1.00000000000000))*(cj24)*(new_r01)))))+IKsqr(((((new_r10)*(sj24)))+(((cj24)*(new_r00)))))-1) <= IKFAST_SINCOS_THRESH )
    continue;
j27array[0]=IKatan2(((((IkReal(-1.00000000000000))*(new_r11)*(sj24)))+(((IkReal(-1.00000000000000))*(cj24)*(new_r01)))), ((((new_r10)*(sj24)))+(((cj24)*(new_r00)))));
sj27array[0]=IKsin(j27array[0]);
cj27array[0]=IKcos(j27array[0]);
if( j27array[0] > IKPI )
{
    j27array[0]-=IK2PI;
}
else if( j27array[0] < -IKPI )
{    j27array[0]+=IK2PI;
}
j27valid[0] = true;
for(int ij27 = 0; ij27 < 1; ++ij27)
{
if( !j27valid[ij27] )
{
    continue;
}
_ij27[0] = ij27; _ij27[1] = -1;
for(int iij27 = ij27+1; iij27 < 1; ++iij27)
{
if( j27valid[iij27] && IKabs(cj27array[ij27]-cj27array[iij27]) < IKFAST_SOLUTION_THRESH && IKabs(sj27array[ij27]-sj27array[iij27]) < IKFAST_SOLUTION_THRESH )
{
    j27valid[iij27]=false; _ij27[1] = iij27; break;
}
}
j27 = j27array[ij27]; cj27 = cj27array[ij27]; sj27 = sj27array[ij27];
{
IkReal evalcond[4];
IkReal x194=IKsin(j27);
IkReal x195=((IkReal(1.00000000000000))*(sj24));
IkReal x196=((IkReal(1.00000000000000))*(IKcos(j27)));
evalcond[0]=((((IkReal(-1.00000000000000))*(x194)))+(((cj24)*(new_r10)))+(((IkReal(-1.00000000000000))*(new_r00)*(x195))));
evalcond[1]=((((IkReal(-1.00000000000000))*(x196)))+(((IkReal(-1.00000000000000))*(new_r01)*(x195)))+(((cj24)*(new_r11))));
evalcond[2]=((((IkReal(-1.00000000000000))*(x196)))+(((new_r10)*(sj24)))+(((cj24)*(new_r00))));
evalcond[3]=((x194)+(((new_r11)*(sj24)))+(((cj24)*(new_r01))));
if( IKabs(evalcond[0]) > 0.000001  || IKabs(evalcond[1]) > 0.000001  || IKabs(evalcond[2]) > 0.000001  || IKabs(evalcond[3]) > 0.000001  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(7);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j20;
vinfos[0].indices[0] = _ij20[0];
vinfos[0].indices[1] = _ij20[1];
vinfos[0].maxsolutions = _nj20;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j21;
vinfos[1].indices[0] = _ij21[0];
vinfos[1].indices[1] = _ij21[1];
vinfos[1].maxsolutions = _nj21;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j22;
vinfos[2].indices[0] = _ij22[0];
vinfos[2].indices[1] = _ij22[1];
vinfos[2].maxsolutions = _nj22;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j23;
vinfos[3].indices[0] = _ij23[0];
vinfos[3].indices[1] = _ij23[1];
vinfos[3].maxsolutions = _nj23;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j24;
vinfos[4].indices[0] = _ij24[0];
vinfos[4].indices[1] = _ij24[1];
vinfos[4].maxsolutions = _nj24;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j25;
vinfos[5].indices[0] = _ij25[0];
vinfos[5].indices[1] = _ij25[1];
vinfos[5].maxsolutions = _nj25;
vinfos[6].jointtype = 1;
vinfos[6].foffset = j27;
vinfos[6].indices[0] = _ij27[0];
vinfos[6].indices[1] = _ij27[1];
vinfos[6].maxsolutions = _nj27;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

} else
{
if( 1 )
{
continue;

} else
{
}
}
}
}

} else
{
{
IkReal j27array[1], cj27array[1], sj27array[1];
bool j27valid[1]={false};
_nj27 = 1;
if( IKabs(((IkReal(-1.00000000000000))*(new_r21)*(((IKabs(sj25) != 0)?((IkReal)1/(sj25)):(IkReal)1.0e30)))) < IKFAST_ATAN2_MAGTHRESH && IKabs(((((IkReal(-1.00000000000000))*(new_r01)*(sj24)))+(((cj24)*(new_r11))))) < IKFAST_ATAN2_MAGTHRESH && IKabs(IKsqr(((IkReal(-1.00000000000000))*(new_r21)*(((IKabs(sj25) != 0)?((IkReal)1/(sj25)):(IkReal)1.0e30))))+IKsqr(((((IkReal(-1.00000000000000))*(new_r01)*(sj24)))+(((cj24)*(new_r11)))))-1) <= IKFAST_SINCOS_THRESH )
    continue;
j27array[0]=IKatan2(((IkReal(-1.00000000000000))*(new_r21)*(((IKabs(sj25) != 0)?((IkReal)1/(sj25)):(IkReal)1.0e30))), ((((IkReal(-1.00000000000000))*(new_r01)*(sj24)))+(((cj24)*(new_r11)))));
sj27array[0]=IKsin(j27array[0]);
cj27array[0]=IKcos(j27array[0]);
if( j27array[0] > IKPI )
{
    j27array[0]-=IK2PI;
}
else if( j27array[0] < -IKPI )
{    j27array[0]+=IK2PI;
}
j27valid[0] = true;
for(int ij27 = 0; ij27 < 1; ++ij27)
{
if( !j27valid[ij27] )
{
    continue;
}
_ij27[0] = ij27; _ij27[1] = -1;
for(int iij27 = ij27+1; iij27 < 1; ++iij27)
{
if( j27valid[iij27] && IKabs(cj27array[ij27]-cj27array[iij27]) < IKFAST_SOLUTION_THRESH && IKabs(sj27array[ij27]-sj27array[iij27]) < IKFAST_SOLUTION_THRESH )
{
    j27valid[iij27]=false; _ij27[1] = iij27; break;
}
}
j27 = j27array[ij27]; cj27 = cj27array[ij27]; sj27 = sj27array[ij27];
{
IkReal evalcond[8];
IkReal x197=IKsin(j27);
IkReal x198=IKcos(j27);
IkReal x199=((cj25)*(sj24));
IkReal x200=((cj24)*(new_r01));
IkReal x201=((IkReal(1.00000000000000))*(sj25));
IkReal x202=((IkReal(1.00000000000000))*(sj24));
IkReal x203=((cj24)*(new_r00));
IkReal x204=((IkReal(1.00000000000000))*(x197));
evalcond[0]=((((sj25)*(x197)))+(new_r21));
evalcond[1]=((((IkReal(-1.00000000000000))*(x198)*(x201)))+(new_r20));
evalcond[2]=((((IkReal(-1.00000000000000))*(new_r00)*(x202)))+(((IkReal(-1.00000000000000))*(x204)))+(((cj24)*(new_r10))));
evalcond[3]=((((IkReal(-1.00000000000000))*(x198)))+(((cj24)*(new_r11)))+(((IkReal(-1.00000000000000))*(new_r01)*(x202))));
evalcond[4]=((x203)+(((new_r10)*(sj24)))+(((cj25)*(x198))));
evalcond[5]=((((IkReal(-1.00000000000000))*(cj25)*(x204)))+(x200)+(((new_r11)*(sj24))));
evalcond[6]=((((new_r10)*(x199)))+(((cj25)*(x203)))+(((IkReal(-1.00000000000000))*(new_r20)*(x201)))+(x198));
evalcond[7]=((((IkReal(-1.00000000000000))*(new_r21)*(x201)))+(((new_r11)*(x199)))+(((cj25)*(x200)))+(((IkReal(-1.00000000000000))*(x204))));
if( IKabs(evalcond[0]) > 0.000001  || IKabs(evalcond[1]) > 0.000001  || IKabs(evalcond[2]) > 0.000001  || IKabs(evalcond[3]) > 0.000001  || IKabs(evalcond[4]) > 0.000001  || IKabs(evalcond[5]) > 0.000001  || IKabs(evalcond[6]) > 0.000001  || IKabs(evalcond[7]) > 0.000001  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(7);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j20;
vinfos[0].indices[0] = _ij20[0];
vinfos[0].indices[1] = _ij20[1];
vinfos[0].maxsolutions = _nj20;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j21;
vinfos[1].indices[0] = _ij21[0];
vinfos[1].indices[1] = _ij21[1];
vinfos[1].maxsolutions = _nj21;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j22;
vinfos[2].indices[0] = _ij22[0];
vinfos[2].indices[1] = _ij22[1];
vinfos[2].maxsolutions = _nj22;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j23;
vinfos[3].indices[0] = _ij23[0];
vinfos[3].indices[1] = _ij23[1];
vinfos[3].maxsolutions = _nj23;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j24;
vinfos[4].indices[0] = _ij24[0];
vinfos[4].indices[1] = _ij24[1];
vinfos[4].maxsolutions = _nj24;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j25;
vinfos[5].indices[0] = _ij25[0];
vinfos[5].indices[1] = _ij25[1];
vinfos[5].maxsolutions = _nj25;
vinfos[6].jointtype = 1;
vinfos[6].foffset = j27;
vinfos[6].indices[0] = _ij27[0];
vinfos[6].indices[1] = _ij27[1];
vinfos[6].maxsolutions = _nj27;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j27array[1], cj27array[1], sj27array[1];
bool j27valid[1]={false};
_nj27 = 1;
if( IKabs(((((IkReal(-1.00000000000000))*(new_r00)*(sj24)))+(((cj24)*(new_r10))))) < IKFAST_ATAN2_MAGTHRESH && IKabs(((new_r20)*(((IKabs(sj25) != 0)?((IkReal)1/(sj25)):(IkReal)1.0e30)))) < IKFAST_ATAN2_MAGTHRESH && IKabs(IKsqr(((((IkReal(-1.00000000000000))*(new_r00)*(sj24)))+(((cj24)*(new_r10)))))+IKsqr(((new_r20)*(((IKabs(sj25) != 0)?((IkReal)1/(sj25)):(IkReal)1.0e30))))-1) <= IKFAST_SINCOS_THRESH )
    continue;
j27array[0]=IKatan2(((((IkReal(-1.00000000000000))*(new_r00)*(sj24)))+(((cj24)*(new_r10)))), ((new_r20)*(((IKabs(sj25) != 0)?((IkReal)1/(sj25)):(IkReal)1.0e30))));
sj27array[0]=IKsin(j27array[0]);
cj27array[0]=IKcos(j27array[0]);
if( j27array[0] > IKPI )
{
    j27array[0]-=IK2PI;
}
else if( j27array[0] < -IKPI )
{    j27array[0]+=IK2PI;
}
j27valid[0] = true;
for(int ij27 = 0; ij27 < 1; ++ij27)
{
if( !j27valid[ij27] )
{
    continue;
}
_ij27[0] = ij27; _ij27[1] = -1;
for(int iij27 = ij27+1; iij27 < 1; ++iij27)
{
if( j27valid[iij27] && IKabs(cj27array[ij27]-cj27array[iij27]) < IKFAST_SOLUTION_THRESH && IKabs(sj27array[ij27]-sj27array[iij27]) < IKFAST_SOLUTION_THRESH )
{
    j27valid[iij27]=false; _ij27[1] = iij27; break;
}
}
j27 = j27array[ij27]; cj27 = cj27array[ij27]; sj27 = sj27array[ij27];
{
IkReal evalcond[8];
IkReal x205=IKsin(j27);
IkReal x206=IKcos(j27);
IkReal x207=((cj25)*(sj24));
IkReal x208=((cj24)*(new_r01));
IkReal x209=((IkReal(1.00000000000000))*(sj25));
IkReal x210=((IkReal(1.00000000000000))*(sj24));
IkReal x211=((cj24)*(new_r00));
IkReal x212=((IkReal(1.00000000000000))*(x205));
evalcond[0]=((new_r21)+(((sj25)*(x205))));
evalcond[1]=((((IkReal(-1.00000000000000))*(x206)*(x209)))+(new_r20));
evalcond[2]=((((cj24)*(new_r10)))+(((IkReal(-1.00000000000000))*(x212)))+(((IkReal(-1.00000000000000))*(new_r00)*(x210))));
evalcond[3]=((((cj24)*(new_r11)))+(((IkReal(-1.00000000000000))*(new_r01)*(x210)))+(((IkReal(-1.00000000000000))*(x206))));
evalcond[4]=((((cj25)*(x206)))+(x211)+(((new_r10)*(sj24))));
evalcond[5]=((((IkReal(-1.00000000000000))*(cj25)*(x212)))+(x208)+(((new_r11)*(sj24))));
evalcond[6]=((((new_r10)*(x207)))+(((IkReal(-1.00000000000000))*(new_r20)*(x209)))+(x206)+(((cj25)*(x211))));
evalcond[7]=((((IkReal(-1.00000000000000))*(new_r21)*(x209)))+(((new_r11)*(x207)))+(((cj25)*(x208)))+(((IkReal(-1.00000000000000))*(x212))));
if( IKabs(evalcond[0]) > 0.000001  || IKabs(evalcond[1]) > 0.000001  || IKabs(evalcond[2]) > 0.000001  || IKabs(evalcond[3]) > 0.000001  || IKabs(evalcond[4]) > 0.000001  || IKabs(evalcond[5]) > 0.000001  || IKabs(evalcond[6]) > 0.000001  || IKabs(evalcond[7]) > 0.000001  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(7);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j20;
vinfos[0].indices[0] = _ij20[0];
vinfos[0].indices[1] = _ij20[1];
vinfos[0].maxsolutions = _nj20;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j21;
vinfos[1].indices[0] = _ij21[0];
vinfos[1].indices[1] = _ij21[1];
vinfos[1].maxsolutions = _nj21;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j22;
vinfos[2].indices[0] = _ij22[0];
vinfos[2].indices[1] = _ij22[1];
vinfos[2].maxsolutions = _nj22;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j23;
vinfos[3].indices[0] = _ij23[0];
vinfos[3].indices[1] = _ij23[1];
vinfos[3].maxsolutions = _nj23;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j24;
vinfos[4].indices[0] = _ij24[0];
vinfos[4].indices[1] = _ij24[1];
vinfos[4].maxsolutions = _nj24;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j25;
vinfos[5].indices[0] = _ij25[0];
vinfos[5].indices[1] = _ij25[1];
vinfos[5].maxsolutions = _nj25;
vinfos[6].jointtype = 1;
vinfos[6].foffset = j27;
vinfos[6].indices[0] = _ij27[0];
vinfos[6].indices[1] = _ij27[1];
vinfos[6].maxsolutions = _nj27;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j27array[1], cj27array[1], sj27array[1];
bool j27valid[1]={false};
_nj27 = 1;
if( IKabs(((IkReal(-1.00000000000000))*(gconst55)*(new_r21))) < IKFAST_ATAN2_MAGTHRESH && IKabs(((gconst55)*(new_r20))) < IKFAST_ATAN2_MAGTHRESH )
    continue;
j27array[0]=IKatan2(((IkReal(-1.00000000000000))*(gconst55)*(new_r21)), ((gconst55)*(new_r20)));
sj27array[0]=IKsin(j27array[0]);
cj27array[0]=IKcos(j27array[0]);
if( j27array[0] > IKPI )
{
    j27array[0]-=IK2PI;
}
else if( j27array[0] < -IKPI )
{    j27array[0]+=IK2PI;
}
j27valid[0] = true;
for(int ij27 = 0; ij27 < 1; ++ij27)
{
if( !j27valid[ij27] )
{
    continue;
}
_ij27[0] = ij27; _ij27[1] = -1;
for(int iij27 = ij27+1; iij27 < 1; ++iij27)
{
if( j27valid[iij27] && IKabs(cj27array[ij27]-cj27array[iij27]) < IKFAST_SOLUTION_THRESH && IKabs(sj27array[ij27]-sj27array[iij27]) < IKFAST_SOLUTION_THRESH )
{
    j27valid[iij27]=false; _ij27[1] = iij27; break;
}
}
j27 = j27array[ij27]; cj27 = cj27array[ij27]; sj27 = sj27array[ij27];
{
IkReal evalcond[8];
IkReal x213=IKsin(j27);
IkReal x214=IKcos(j27);
IkReal x215=((cj25)*(sj24));
IkReal x216=((cj24)*(new_r01));
IkReal x217=((IkReal(1.00000000000000))*(sj25));
IkReal x218=((IkReal(1.00000000000000))*(sj24));
IkReal x219=((cj24)*(new_r00));
IkReal x220=((IkReal(1.00000000000000))*(x213));
evalcond[0]=((((sj25)*(x213)))+(new_r21));
evalcond[1]=((((IkReal(-1.00000000000000))*(x214)*(x217)))+(new_r20));
evalcond[2]=((((cj24)*(new_r10)))+(((IkReal(-1.00000000000000))*(new_r00)*(x218)))+(((IkReal(-1.00000000000000))*(x220))));
evalcond[3]=((((IkReal(-1.00000000000000))*(x214)))+(((cj24)*(new_r11)))+(((IkReal(-1.00000000000000))*(new_r01)*(x218))));
evalcond[4]=((x219)+(((new_r10)*(sj24)))+(((cj25)*(x214))));
evalcond[5]=((((IkReal(-1.00000000000000))*(cj25)*(x220)))+(x216)+(((new_r11)*(sj24))));
evalcond[6]=((x214)+(((cj25)*(x219)))+(((IkReal(-1.00000000000000))*(new_r20)*(x217)))+(((new_r10)*(x215))));
evalcond[7]=((((IkReal(-1.00000000000000))*(new_r21)*(x217)))+(((cj25)*(x216)))+(((new_r11)*(x215)))+(((IkReal(-1.00000000000000))*(x220))));
if( IKabs(evalcond[0]) > 0.000001  || IKabs(evalcond[1]) > 0.000001  || IKabs(evalcond[2]) > 0.000001  || IKabs(evalcond[3]) > 0.000001  || IKabs(evalcond[4]) > 0.000001  || IKabs(evalcond[5]) > 0.000001  || IKabs(evalcond[6]) > 0.000001  || IKabs(evalcond[7]) > 0.000001  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(7);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j20;
vinfos[0].indices[0] = _ij20[0];
vinfos[0].indices[1] = _ij20[1];
vinfos[0].maxsolutions = _nj20;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j21;
vinfos[1].indices[0] = _ij21[0];
vinfos[1].indices[1] = _ij21[1];
vinfos[1].maxsolutions = _nj21;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j22;
vinfos[2].indices[0] = _ij22[0];
vinfos[2].indices[1] = _ij22[1];
vinfos[2].maxsolutions = _nj22;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j23;
vinfos[3].indices[0] = _ij23[0];
vinfos[3].indices[1] = _ij23[1];
vinfos[3].maxsolutions = _nj23;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j24;
vinfos[4].indices[0] = _ij24[0];
vinfos[4].indices[1] = _ij24[1];
vinfos[4].maxsolutions = _nj24;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j25;
vinfos[5].indices[0] = _ij25[0];
vinfos[5].indices[1] = _ij25[1];
vinfos[5].maxsolutions = _nj25;
vinfos[6].jointtype = 1;
vinfos[6].foffset = j27;
vinfos[6].indices[0] = _ij27[0];
vinfos[6].indices[1] = _ij27[1];
vinfos[6].maxsolutions = _nj27;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}
}
}

}

}

} else
{
{
IkReal j27array[1], cj27array[1], sj27array[1];
bool j27valid[1]={false};
_nj27 = 1;
if( IKabs(((IkReal(-1.00000000000000))*(gconst54)*(new_r21))) < IKFAST_ATAN2_MAGTHRESH && IKabs(((gconst54)*(new_r20))) < IKFAST_ATAN2_MAGTHRESH )
    continue;
j27array[0]=IKatan2(((IkReal(-1.00000000000000))*(gconst54)*(new_r21)), ((gconst54)*(new_r20)));
sj27array[0]=IKsin(j27array[0]);
cj27array[0]=IKcos(j27array[0]);
if( j27array[0] > IKPI )
{
    j27array[0]-=IK2PI;
}
else if( j27array[0] < -IKPI )
{    j27array[0]+=IK2PI;
}
j27valid[0] = true;
for(int ij27 = 0; ij27 < 1; ++ij27)
{
if( !j27valid[ij27] )
{
    continue;
}
_ij27[0] = ij27; _ij27[1] = -1;
for(int iij27 = ij27+1; iij27 < 1; ++iij27)
{
if( j27valid[iij27] && IKabs(cj27array[ij27]-cj27array[iij27]) < IKFAST_SOLUTION_THRESH && IKabs(sj27array[ij27]-sj27array[iij27]) < IKFAST_SOLUTION_THRESH )
{
    j27valid[iij27]=false; _ij27[1] = iij27; break;
}
}
j27 = j27array[ij27]; cj27 = cj27array[ij27]; sj27 = sj27array[ij27];
{
IkReal evalcond[2];
evalcond[0]=((((sj25)*(IKsin(j27))))+(new_r21));
evalcond[1]=((((IkReal(-1.00000000000000))*(sj25)*(IKcos(j27))))+(new_r20));
if( IKabs(evalcond[0]) > 0.000001  || IKabs(evalcond[1]) > 0.000001  )
{
continue;
}
}

{
IkReal dummyeval[1];
IkReal gconst56;
gconst56=IKsign(((((IkReal(-1.00000000000000))*((new_r02)*(new_r02))))+(((IkReal(-1.00000000000000))*((new_r12)*(new_r12))))));
dummyeval[0]=((((IkReal(-1.00000000000000))*((new_r02)*(new_r02))))+(((IkReal(-1.00000000000000))*((new_r12)*(new_r12)))));
if( IKabs(dummyeval[0]) < 0.0000010000000000  )
{
{
IkReal dummyeval[1];
IkReal gconst57;
gconst57=IKsign(((((IkReal(-1.00000000000000))*(new_r00)*(new_r02)))+(((IkReal(-1.00000000000000))*(new_r10)*(new_r12)))));
dummyeval[0]=((((IkReal(-1.00000000000000))*(new_r00)*(new_r02)))+(((IkReal(-1.00000000000000))*(new_r10)*(new_r12))));
if( IKabs(dummyeval[0]) < 0.0000010000000000  )
{
continue;

} else
{
{
IkReal j24array[1], cj24array[1], sj24array[1];
bool j24valid[1]={false};
_nj24 = 1;
IkReal x221=((cj25)*(cj27)*(gconst57));
if( IKabs(((new_r12)*(x221))) < IKFAST_ATAN2_MAGTHRESH && IKabs(((new_r02)*(x221))) < IKFAST_ATAN2_MAGTHRESH )
    continue;
j24array[0]=IKatan2(((new_r12)*(x221)), ((new_r02)*(x221)));
sj24array[0]=IKsin(j24array[0]);
cj24array[0]=IKcos(j24array[0]);
if( j24array[0] > IKPI )
{
    j24array[0]-=IK2PI;
}
else if( j24array[0] < -IKPI )
{    j24array[0]+=IK2PI;
}
j24valid[0] = true;
for(int ij24 = 0; ij24 < 1; ++ij24)
{
if( !j24valid[ij24] )
{
    continue;
}
_ij24[0] = ij24; _ij24[1] = -1;
for(int iij24 = ij24+1; iij24 < 1; ++iij24)
{
if( j24valid[iij24] && IKabs(cj24array[ij24]-cj24array[iij24]) < IKFAST_SOLUTION_THRESH && IKabs(sj24array[ij24]-sj24array[iij24]) < IKFAST_SOLUTION_THRESH )
{
    j24valid[iij24]=false; _ij24[1] = iij24; break;
}
}
j24 = j24array[ij24]; cj24 = cj24array[ij24]; sj24 = sj24array[ij24];
{
IkReal evalcond[12];
IkReal x222=IKsin(j24);
IkReal x223=IKcos(j24);
IkReal x224=((IkReal(1.00000000000000))*(sj27));
IkReal x225=((IkReal(1.00000000000000))*(new_r22));
IkReal x226=((IkReal(1.00000000000000))*(new_r21));
IkReal x227=((IkReal(1.00000000000000))*(sj25));
IkReal x228=((IkReal(1.00000000000000))*(cj25));
IkReal x229=((IkReal(1.00000000000000))*(x222));
IkReal x230=((cj25)*(x223));
IkReal x231=((new_r11)*(x222));
IkReal x232=((new_r02)*(x223));
IkReal x233=((new_r00)*(x223));
IkReal x234=((cj25)*(x222));
IkReal x235=((new_r01)*(x223));
evalcond[0]=((((new_r12)*(x223)))+(((IkReal(-1.00000000000000))*(new_r02)*(x229))));
evalcond[1]=((x232)+(sj25)+(((new_r12)*(x222))));
evalcond[2]=((((new_r10)*(x223)))+(((IkReal(-1.00000000000000))*(x224)))+(((IkReal(-1.00000000000000))*(new_r00)*(x229))));
evalcond[3]=((((IkReal(-1.00000000000000))*(new_r01)*(x229)))+(((IkReal(-1.00000000000000))*(cj27)))+(((new_r11)*(x223))));
evalcond[4]=((((cj25)*(cj27)))+(x233)+(((new_r10)*(x222))));
evalcond[5]=((((IkReal(-1.00000000000000))*(cj25)*(x224)))+(x231)+(x235));
evalcond[6]=((((new_r02)*(x230)))+(((new_r12)*(x234)))+(((IkReal(-1.00000000000000))*(sj25)*(x225))));
evalcond[7]=((((IkReal(-1.00000000000000))*(x227)*(x233)))+(((IkReal(-1.00000000000000))*(new_r10)*(x222)*(x227)))+(((IkReal(-1.00000000000000))*(new_r20)*(x228))));
evalcond[8]=((((IkReal(-1.00000000000000))*(cj25)*(x226)))+(((IkReal(-1.00000000000000))*(x227)*(x231)))+(((IkReal(-1.00000000000000))*(x227)*(x235))));
evalcond[9]=((((new_r10)*(x234)))+(((new_r00)*(x230)))+(cj27)+(((IkReal(-1.00000000000000))*(new_r20)*(x227))));
evalcond[10]=((IkReal(-1.00000000000000))+(((IkReal(-1.00000000000000))*(cj25)*(x225)))+(((IkReal(-1.00000000000000))*(x227)*(x232)))+(((IkReal(-1.00000000000000))*(new_r12)*(x222)*(x227))));
evalcond[11]=((((cj25)*(x231)))+(((new_r01)*(x230)))+(((IkReal(-1.00000000000000))*(sj25)*(x226)))+(((IkReal(-1.00000000000000))*(x224))));
if( IKabs(evalcond[0]) > 0.000001  || IKabs(evalcond[1]) > 0.000001  || IKabs(evalcond[2]) > 0.000001  || IKabs(evalcond[3]) > 0.000001  || IKabs(evalcond[4]) > 0.000001  || IKabs(evalcond[5]) > 0.000001  || IKabs(evalcond[6]) > 0.000001  || IKabs(evalcond[7]) > 0.000001  || IKabs(evalcond[8]) > 0.000001  || IKabs(evalcond[9]) > 0.000001  || IKabs(evalcond[10]) > 0.000001  || IKabs(evalcond[11]) > 0.000001  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(7);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j20;
vinfos[0].indices[0] = _ij20[0];
vinfos[0].indices[1] = _ij20[1];
vinfos[0].maxsolutions = _nj20;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j21;
vinfos[1].indices[0] = _ij21[0];
vinfos[1].indices[1] = _ij21[1];
vinfos[1].maxsolutions = _nj21;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j22;
vinfos[2].indices[0] = _ij22[0];
vinfos[2].indices[1] = _ij22[1];
vinfos[2].maxsolutions = _nj22;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j23;
vinfos[3].indices[0] = _ij23[0];
vinfos[3].indices[1] = _ij23[1];
vinfos[3].maxsolutions = _nj23;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j24;
vinfos[4].indices[0] = _ij24[0];
vinfos[4].indices[1] = _ij24[1];
vinfos[4].maxsolutions = _nj24;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j25;
vinfos[5].indices[0] = _ij25[0];
vinfos[5].indices[1] = _ij25[1];
vinfos[5].maxsolutions = _nj25;
vinfos[6].jointtype = 1;
vinfos[6].foffset = j27;
vinfos[6].indices[0] = _ij27[0];
vinfos[6].indices[1] = _ij27[1];
vinfos[6].maxsolutions = _nj27;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j24array[1], cj24array[1], sj24array[1];
bool j24valid[1]={false};
_nj24 = 1;
IkReal x236=((gconst56)*(sj25));
if( IKabs(((new_r12)*(x236))) < IKFAST_ATAN2_MAGTHRESH && IKabs(((new_r02)*(x236))) < IKFAST_ATAN2_MAGTHRESH )
    continue;
j24array[0]=IKatan2(((new_r12)*(x236)), ((new_r02)*(x236)));
sj24array[0]=IKsin(j24array[0]);
cj24array[0]=IKcos(j24array[0]);
if( j24array[0] > IKPI )
{
    j24array[0]-=IK2PI;
}
else if( j24array[0] < -IKPI )
{    j24array[0]+=IK2PI;
}
j24valid[0] = true;
for(int ij24 = 0; ij24 < 1; ++ij24)
{
if( !j24valid[ij24] )
{
    continue;
}
_ij24[0] = ij24; _ij24[1] = -1;
for(int iij24 = ij24+1; iij24 < 1; ++iij24)
{
if( j24valid[iij24] && IKabs(cj24array[ij24]-cj24array[iij24]) < IKFAST_SOLUTION_THRESH && IKabs(sj24array[ij24]-sj24array[iij24]) < IKFAST_SOLUTION_THRESH )
{
    j24valid[iij24]=false; _ij24[1] = iij24; break;
}
}
j24 = j24array[ij24]; cj24 = cj24array[ij24]; sj24 = sj24array[ij24];
{
IkReal evalcond[12];
IkReal x237=IKsin(j24);
IkReal x238=IKcos(j24);
IkReal x239=((IkReal(1.00000000000000))*(sj27));
IkReal x240=((IkReal(1.00000000000000))*(new_r22));
IkReal x241=((IkReal(1.00000000000000))*(new_r21));
IkReal x242=((IkReal(1.00000000000000))*(sj25));
IkReal x243=((IkReal(1.00000000000000))*(cj25));
IkReal x244=((IkReal(1.00000000000000))*(x237));
IkReal x245=((cj25)*(x238));
IkReal x246=((new_r11)*(x237));
IkReal x247=((new_r02)*(x238));
IkReal x248=((new_r00)*(x238));
IkReal x249=((cj25)*(x237));
IkReal x250=((new_r01)*(x238));
evalcond[0]=((((new_r12)*(x238)))+(((IkReal(-1.00000000000000))*(new_r02)*(x244))));
evalcond[1]=((((new_r12)*(x237)))+(x247)+(sj25));
evalcond[2]=((((new_r10)*(x238)))+(((IkReal(-1.00000000000000))*(new_r00)*(x244)))+(((IkReal(-1.00000000000000))*(x239))));
evalcond[3]=((((IkReal(-1.00000000000000))*(new_r01)*(x244)))+(((new_r11)*(x238)))+(((IkReal(-1.00000000000000))*(cj27))));
evalcond[4]=((((new_r10)*(x237)))+(((cj25)*(cj27)))+(x248));
evalcond[5]=((((IkReal(-1.00000000000000))*(cj25)*(x239)))+(x250)+(x246));
evalcond[6]=((((new_r12)*(x249)))+(((IkReal(-1.00000000000000))*(sj25)*(x240)))+(((new_r02)*(x245))));
evalcond[7]=((((IkReal(-1.00000000000000))*(x242)*(x248)))+(((IkReal(-1.00000000000000))*(new_r10)*(x237)*(x242)))+(((IkReal(-1.00000000000000))*(new_r20)*(x243))));
evalcond[8]=((((IkReal(-1.00000000000000))*(x242)*(x246)))+(((IkReal(-1.00000000000000))*(x242)*(x250)))+(((IkReal(-1.00000000000000))*(cj25)*(x241))));
evalcond[9]=((cj27)+(((new_r00)*(x245)))+(((IkReal(-1.00000000000000))*(new_r20)*(x242)))+(((new_r10)*(x249))));
evalcond[10]=((IkReal(-1.00000000000000))+(((IkReal(-1.00000000000000))*(x242)*(x247)))+(((IkReal(-1.00000000000000))*(cj25)*(x240)))+(((IkReal(-1.00000000000000))*(new_r12)*(x237)*(x242))));
evalcond[11]=((((cj25)*(x246)))+(((IkReal(-1.00000000000000))*(x239)))+(((new_r01)*(x245)))+(((IkReal(-1.00000000000000))*(sj25)*(x241))));
if( IKabs(evalcond[0]) > 0.000001  || IKabs(evalcond[1]) > 0.000001  || IKabs(evalcond[2]) > 0.000001  || IKabs(evalcond[3]) > 0.000001  || IKabs(evalcond[4]) > 0.000001  || IKabs(evalcond[5]) > 0.000001  || IKabs(evalcond[6]) > 0.000001  || IKabs(evalcond[7]) > 0.000001  || IKabs(evalcond[8]) > 0.000001  || IKabs(evalcond[9]) > 0.000001  || IKabs(evalcond[10]) > 0.000001  || IKabs(evalcond[11]) > 0.000001  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(7);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j20;
vinfos[0].indices[0] = _ij20[0];
vinfos[0].indices[1] = _ij20[1];
vinfos[0].maxsolutions = _nj20;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j21;
vinfos[1].indices[0] = _ij21[0];
vinfos[1].indices[1] = _ij21[1];
vinfos[1].maxsolutions = _nj21;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j22;
vinfos[2].indices[0] = _ij22[0];
vinfos[2].indices[1] = _ij22[1];
vinfos[2].maxsolutions = _nj22;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j23;
vinfos[3].indices[0] = _ij23[0];
vinfos[3].indices[1] = _ij23[1];
vinfos[3].maxsolutions = _nj23;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j24;
vinfos[4].indices[0] = _ij24[0];
vinfos[4].indices[1] = _ij24[1];
vinfos[4].maxsolutions = _nj24;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j25;
vinfos[5].indices[0] = _ij25[0];
vinfos[5].indices[1] = _ij25[1];
vinfos[5].maxsolutions = _nj25;
vinfos[6].jointtype = 1;
vinfos[6].foffset = j27;
vinfos[6].indices[0] = _ij27[0];
vinfos[6].indices[1] = _ij27[1];
vinfos[6].maxsolutions = _nj27;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}
}
}

}

}
}
}
}
}static inline void polyroots2(IkReal rawcoeffs[2+1], IkReal rawroots[2], int& numroots) {
    IkReal det = rawcoeffs[1]*rawcoeffs[1]-4*rawcoeffs[0]*rawcoeffs[2];
    if( det < 0 ) {
        numroots=0;
    }
    else if( det == 0 ) {
        rawroots[0] = -0.5*rawcoeffs[1]/rawcoeffs[0];
        numroots = 1;
    }
    else {
        det = IKsqrt(det);
        rawroots[0] = (-rawcoeffs[1]+det)/(2*rawcoeffs[0]);
        rawroots[1] = (-rawcoeffs[1]-det)/(2*rawcoeffs[0]);//rawcoeffs[2]/(rawcoeffs[0]*rawroots[0]);
        numroots = 2;
    }
}
};


/// solves the inverse kinematics equations.
/// \param pfree is an array specifying the free joints of the chain.
IKFAST_API bool ComputeIk(const IkReal* eetrans, const IkReal* eerot, const IkReal* pfree, IkSolutionListBase<IkReal>& solutions) {
IKSolver solver;
return solver.ComputeIk(eetrans,eerot,pfree,solutions);
}

IKFAST_API const char* GetKinematicsHash() { return "be56fbcd9f3dc4f3423c4417642a0c6b"; }

IKFAST_API const char* GetIkFastVersion() { return IKFAST_STRINGIZE(IKFAST_VERSION); }

#ifdef IKFAST_NAMESPACE
} // end namespace
#endif

#ifndef IKFAST_NO_MAIN
#include <stdio.h>
#include <stdlib.h>
#ifdef IKFAST_NAMESPACE
using namespace IKFAST_NAMESPACE;
#endif
int main(int argc, char** argv)
{
    if( argc != 12+GetNumFreeParameters()+1 ) {
        printf("\nUsage: ./ik r00 r01 r02 t0 r10 r11 r12 t1 r20 r21 r22 t2 free0 ...\n\n"
               "Returns the ik solutions given the transformation of the end effector specified by\n"
               "a 3x3 rotation R (rXX), and a 3x1 translation (tX).\n"
               "There are %d free parameters that have to be specified.\n\n",GetNumFreeParameters());
        return 1;
    }

    IkSolutionList<IkReal> solutions;
    std::vector<IkReal> vfree(GetNumFreeParameters());
    IkReal eerot[9],eetrans[3];
    eerot[0] = atof(argv[1]); eerot[1] = atof(argv[2]); eerot[2] = atof(argv[3]); eetrans[0] = atof(argv[4]);
    eerot[3] = atof(argv[5]); eerot[4] = atof(argv[6]); eerot[5] = atof(argv[7]); eetrans[1] = atof(argv[8]);
    eerot[6] = atof(argv[9]); eerot[7] = atof(argv[10]); eerot[8] = atof(argv[11]); eetrans[2] = atof(argv[12]);
    for(std::size_t i = 0; i < vfree.size(); ++i)
        vfree[i] = atof(argv[13+i]);
    bool bSuccess = ComputeIk(eetrans, eerot, vfree.size() > 0 ? &vfree[0] : NULL, solutions);

    if( !bSuccess ) {
        fprintf(stderr,"Failed to get ik solution\n");
        return -1;
    }

    printf("Found %d ik solutions:\n", (int)solutions.GetNumSolutions());
    std::vector<IkReal> solvalues(GetNumJoints());
    for(std::size_t i = 0; i < solutions.GetNumSolutions(); ++i) {
        const IkSolutionBase<IkReal>& sol = solutions.GetSolution(i);
        printf("sol%d (free=%d): ", (int)i, (int)sol.GetFree().size());
        std::vector<IkReal> vsolfree(sol.GetFree().size());
        sol.GetSolution(&solvalues[0],vsolfree.size()>0?&vsolfree[0]:NULL);
        for( std::size_t j = 0; j < solvalues.size(); ++j)
            printf("%.15f, ", solvalues[j]);
        printf("\n");
    }
    return 0;
}

#endif

#include "plugindefs.h"
namespace IKFAST_NAMESPACE {
IkSolverBasePtr CreateIkSolver(EnvironmentBasePtr penv, std::istream& sinput, const std::vector<dReal>& vfreeinc) {
    boost::shared_ptr<ikfast::IkFastFunctions<IkReal> > ikfunctions(new ikfast::IkFastFunctions<IkReal>());
    ikfunctions->_ComputeIk = IKFAST_NAMESPACE::ComputeIk;
    ikfunctions->_ComputeFk = IKFAST_NAMESPACE::ComputeFk;
    ikfunctions->_GetNumFreeParameters = IKFAST_NAMESPACE::GetNumFreeParameters;
    ikfunctions->_GetFreeParameters = IKFAST_NAMESPACE::GetFreeParameters;
    ikfunctions->_GetNumJoints = IKFAST_NAMESPACE::GetNumJoints;
    ikfunctions->_GetIkRealSize = IKFAST_NAMESPACE::GetIkRealSize;
    ikfunctions->_GetIkFastVersion = IKFAST_NAMESPACE::GetIkFastVersion;
    ikfunctions->_GetIkType = IKFAST_NAMESPACE::GetIkType;
    ikfunctions->_GetKinematicsHash = IKFAST_NAMESPACE::GetKinematicsHash;
    return CreateIkFastSolver(penv,sinput,ikfunctions,vfreeinc);
}
} // end namespace
