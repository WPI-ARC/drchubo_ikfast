#define IKFAST_NAMESPACE drchubo_leftarm_ikfast
#include "plugindefs.h"

/// autogenerated analytical inverse kinematics code from ikfast program part of OpenRAVE
/// \author Rosen Diankov
///
/// Licensed under the Apache License, Version 2.0 (the "License");
/// you may not use this file except in compliance with the License.
/// You may obtain a copy of the License at
///     http://www.apache.org/licenses/LICENSE-2.0
/// 
/// Unless required by applicable law or agreed to in writing, software
/// distributed under the License is distributed on an "AS IS" BASIS,
/// WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
/// See the License for the specific language governing permissions and
/// limitations under the License.
///
/// ikfast version 61 generated on 2013-11-20 15:51:55.500672
/// To compile with gcc:
///     gcc -lstdc++ ik.cpp
/// To compile without any main function as a shared object (might need -llapack):
///     gcc -fPIC -lstdc++ -DIKFAST_NO_MAIN -DIKFAST_CLIBRARY -shared -Wl,-soname,libik.so -o libik.so ik.cpp
#define IKFAST_HAS_LIBRARY
#include "ikfast.h" // found inside share/openrave-X.Y/python/ikfast.h
using namespace ikfast;

// check if the included ikfast version matches what this file was compiled with
#define IKFAST_COMPILE_ASSERT(x) extern int __dummy[(int)x]
IKFAST_COMPILE_ASSERT(IKFAST_VERSION==61);

#include <cmath>
#include <vector>
#include <limits>
#include <algorithm>
#include <complex>

#define IKFAST_STRINGIZE2(s) #s
#define IKFAST_STRINGIZE(s) IKFAST_STRINGIZE2(s)

#ifndef IKFAST_ASSERT
#include <stdexcept>
#include <sstream>
#include <iostream>

#ifdef _MSC_VER
#ifndef __PRETTY_FUNCTION__
#define __PRETTY_FUNCTION__ __FUNCDNAME__
#endif
#endif

#ifndef __PRETTY_FUNCTION__
#define __PRETTY_FUNCTION__ __func__
#endif

#define IKFAST_ASSERT(b) { if( !(b) ) { std::stringstream ss; ss << "ikfast exception: " << __FILE__ << ":" << __LINE__ << ": " <<__PRETTY_FUNCTION__ << ": Assertion '" << #b << "' failed"; throw std::runtime_error(ss.str()); } }

#endif

#if defined(_MSC_VER)
#define IKFAST_ALIGNED16(x) __declspec(align(16)) x
#else
#define IKFAST_ALIGNED16(x) x __attribute((aligned(16)))
#endif

#define IK2PI  ((IkReal)6.28318530717959)
#define IKPI  ((IkReal)3.14159265358979)
#define IKPI_2  ((IkReal)1.57079632679490)

#ifdef _MSC_VER
#ifndef isnan
#define isnan _isnan
#endif
#endif // _MSC_VER

// lapack routines
extern "C" {
  void dgetrf_ (const int* m, const int* n, double* a, const int* lda, int* ipiv, int* info);
  void zgetrf_ (const int* m, const int* n, std::complex<double>* a, const int* lda, int* ipiv, int* info);
  void dgetri_(const int* n, const double* a, const int* lda, int* ipiv, double* work, const int* lwork, int* info);
  void dgesv_ (const int* n, const int* nrhs, double* a, const int* lda, int* ipiv, double* b, const int* ldb, int* info);
  void dgetrs_(const char *trans, const int *n, const int *nrhs, double *a, const int *lda, int *ipiv, double *b, const int *ldb, int *info);
  void dgeev_(const char *jobvl, const char *jobvr, const int *n, double *a, const int *lda, double *wr, double *wi,double *vl, const int *ldvl, double *vr, const int *ldvr, double *work, const int *lwork, int *info);
}

using namespace std; // necessary to get std math routines

#ifdef IKFAST_NAMESPACE
namespace IKFAST_NAMESPACE {
#endif

inline float IKabs(float f) { return fabsf(f); }
inline double IKabs(double f) { return fabs(f); }

inline float IKsqr(float f) { return f*f; }
inline double IKsqr(double f) { return f*f; }

inline float IKlog(float f) { return logf(f); }
inline double IKlog(double f) { return log(f); }

// allows asin and acos to exceed 1
#ifndef IKFAST_SINCOS_THRESH
#define IKFAST_SINCOS_THRESH ((IkReal)0.000001)
#endif

// used to check input to atan2 for degenerate cases
#ifndef IKFAST_ATAN2_MAGTHRESH
#define IKFAST_ATAN2_MAGTHRESH ((IkReal)2e-6)
#endif

// minimum distance of separate solutions
#ifndef IKFAST_SOLUTION_THRESH
#define IKFAST_SOLUTION_THRESH ((IkReal)1e-6)
#endif

inline float IKasin(float f)
{
IKFAST_ASSERT( f > -1-IKFAST_SINCOS_THRESH && f < 1+IKFAST_SINCOS_THRESH ); // any more error implies something is wrong with the solver
if( f <= -1 ) return float(-IKPI_2);
else if( f >= 1 ) return float(IKPI_2);
return asinf(f);
}
inline double IKasin(double f)
{
IKFAST_ASSERT( f > -1-IKFAST_SINCOS_THRESH && f < 1+IKFAST_SINCOS_THRESH ); // any more error implies something is wrong with the solver
if( f <= -1 ) return -IKPI_2;
else if( f >= 1 ) return IKPI_2;
return asin(f);
}

// return positive value in [0,y)
inline float IKfmod(float x, float y)
{
    while(x < 0) {
        x += y;
    }
    return fmodf(x,y);
}

// return positive value in [0,y)
inline double IKfmod(double x, double y)
{
    while(x < 0) {
        x += y;
    }
    return fmod(x,y);
}

inline float IKacos(float f)
{
IKFAST_ASSERT( f > -1-IKFAST_SINCOS_THRESH && f < 1+IKFAST_SINCOS_THRESH ); // any more error implies something is wrong with the solver
if( f <= -1 ) return float(IKPI);
else if( f >= 1 ) return float(0);
return acosf(f);
}
inline double IKacos(double f)
{
IKFAST_ASSERT( f > -1-IKFAST_SINCOS_THRESH && f < 1+IKFAST_SINCOS_THRESH ); // any more error implies something is wrong with the solver
if( f <= -1 ) return IKPI;
else if( f >= 1 ) return 0;
return acos(f);
}
inline float IKsin(float f) { return sinf(f); }
inline double IKsin(double f) { return sin(f); }
inline float IKcos(float f) { return cosf(f); }
inline double IKcos(double f) { return cos(f); }
inline float IKtan(float f) { return tanf(f); }
inline double IKtan(double f) { return tan(f); }
inline float IKsqrt(float f) { if( f <= 0.0f ) return 0.0f; return sqrtf(f); }
inline double IKsqrt(double f) { if( f <= 0.0 ) return 0.0; return sqrt(f); }
inline float IKatan2(float fy, float fx) {
    if( isnan(fy) ) {
        IKFAST_ASSERT(!isnan(fx)); // if both are nan, probably wrong value will be returned
        return float(IKPI_2);
    }
    else if( isnan(fx) ) {
        return 0;
    }
    return atan2f(fy,fx);
}
inline double IKatan2(double fy, double fx) {
    if( isnan(fy) ) {
        IKFAST_ASSERT(!isnan(fx)); // if both are nan, probably wrong value will be returned
        return IKPI_2;
    }
    else if( isnan(fx) ) {
        return 0;
    }
    return atan2(fy,fx);
}

inline float IKsign(float f) {
    if( f > 0 ) {
        return float(1);
    }
    else if( f < 0 ) {
        return float(-1);
    }
    return 0;
}

inline double IKsign(double f) {
    if( f > 0 ) {
        return 1.0;
    }
    else if( f < 0 ) {
        return -1.0;
    }
    return 0;
}

/// solves the forward kinematics equations.
/// \param pfree is an array specifying the free joints of the chain.
IKFAST_API void ComputeFk(const IkReal* j, IkReal* eetrans, IkReal* eerot) {
IkReal x0,x1,x2,x3,x4,x5,x6,x7,x8,x9,x10,x11,x12,x13,x14,x15,x16,x17,x18,x19,x20,x21,x22,x23,x24,x25,x26,x27,x28,x29,x30,x31,x32,x33,x34,x35,x36,x37,x38,x39,x40,x41,x42,x43,x44,x45,x46,x47,x48,x49,x50,x51,x52,x53,x54,x55,x56,x57,x58,x59,x60,x61,x62,x63,x64,x65,x66,x67,x68,x69,x70;
x0=IKsin(j[0]);
x1=IKcos(j[2]);
x2=IKsin(j[1]);
x3=IKcos(j[0]);
x4=IKsin(j[2]);
x5=IKsin(j[3]);
x6=IKcos(j[1]);
x7=IKcos(j[3]);
x8=IKsin(j[4]);
x9=IKcos(j[4]);
x10=IKcos(j[5]);
x11=IKsin(j[5]);
x12=IKcos(j[6]);
x13=IKsin(j[6]);
x14=((IkReal(0.127000000000000))*(x5));
x15=((IkReal(0.0300000000000000))*(x1));
x16=((IkReal(1.00000000000000))*(x8));
x17=((IkReal(1.00000000000000))*(x9));
x18=((IkReal(1.00000000000000))*(x7));
x19=((IkReal(1.00000000000000))*(x4));
x20=((IkReal(0.0300000000000000))*(x2));
x21=((IkReal(0.127000000000000))*(x8));
x22=((IkReal(1.00000000000000))*(x5));
x23=((IkReal(1.00000000000000))*(x11));
x24=((IkReal(0.127000000000000))*(x9));
x25=((IkReal(0.313800000000000))*(x2));
x26=((IkReal(0.313800000000000))*(x7));
x27=((IkReal(0.127000000000000))*(x7));
x28=((x0)*(x1));
x29=((x2)*(x7));
x30=((x4)*(x6));
x31=((x0)*(x4));
x32=((x0)*(x6));
x33=((x1)*(x6));
x34=((x1)*(x3));
x35=((x3)*(x6));
x36=((x3)*(x4));
x37=((x15)*(x3));
x38=((x0)*(x15));
x39=((x35)*(x5));
x40=((x22)*(x32));
x41=((x18)*(x32));
x42=((x20)*(x31));
x43=((x19)*(x5)*(x6));
x44=((x19)*(x2)*(x3));
x45=((x20)*(x36));
x46=((((IkReal(-1.00000000000000))*(x19)*(x3)))+(((x2)*(x28))));
x47=((((x2)*(x31)))+(x34));
x48=((((IkReal(-1.00000000000000))*(x43)))+(x29));
x49=((((x30)*(x7)))+(((x2)*(x5))));
x50=((((IkReal(-1.00000000000000))*(x44)))+(x28));
x51=((((IkReal(-1.00000000000000))*(x28)))+(x44));
x52=((((IkReal(-1.00000000000000))*(x34)))+(((IkReal(-1.00000000000000))*(x0)*(x19)*(x2))));
x53=((((IkReal(-1.00000000000000))*(x0)*(x19)))+(((IkReal(-1.00000000000000))*(x2)*(x34))));
x54=((x37)+(x42));
x55=((x50)*(x7));
x56=((x53)*(x8));
x57=((x5)*(x52));
x58=((((IkReal(-1.00000000000000))*(x40)))+(((x47)*(x7))));
x59=((((x33)*(x8)))+(((x49)*(x9))));
x60=((x39)+(x55));
x61=((((x35)*(x7)))+(((x5)*(x51))));
x62=((((IkReal(-1.00000000000000))*(x41)))+(x57));
x63=((((x8)*(((((IkReal(-1.00000000000000))*(x18)*(x30)))+(((IkReal(-1.00000000000000))*(x2)*(x22)))))))+(((x33)*(x9))));
x64=((x10)*(x59));
x65=((x11)*(x62));
x66=((((x46)*(x8)))+(((x58)*(x9))));
x67=((((x8)*(((((IkReal(-1.00000000000000))*(x18)*(x47)))+(x40)))))+(((x46)*(x9))));
x68=((((x60)*(x9)))+(x56));
x69=((x10)*(x66));
x70=((x10)*(x68));
eerot[0]=((((x12)*(x67)))+(((x13)*(((((IkReal(-1.00000000000000))*(x69)))+(((IkReal(-1.00000000000000))*(x65))))))));
eerot[1]=((((x11)*(x66)))+(((x10)*(((x41)+(((IkReal(-1.00000000000000))*(x22)*(x52))))))));
eerot[2]=((((x13)*(x67)))+(((x12)*(((x65)+(x69))))));
IkReal x71=((IkReal(1.00000000000000))*(x32));
eetrans[0]=((((x5)*(((((IkReal(-0.313800000000000))*(x34)))+(((IkReal(-1.00000000000000))*(x25)*(x31)))))))+(((IkReal(-1.00000000000000))*(x26)*(x71)))+(((IkReal(-1.00000000000000))*(x54)*(x7)))+(((x11)*(((((IkReal(-1.00000000000000))*(x21)*(x46)))+(((IkReal(-1.00000000000000))*(x24)*(x58)))))))+(((x10)*(((((x14)*(x52)))+(((IkReal(-1.00000000000000))*(x27)*(x71)))))))+(((IkReal(-0.300000000000000))*(x32)))+(x54)+(((IkReal(0.0300000000000000))*(x32)*(x5))));
eerot[3]=((((x12)*(x63)))+(((x13)*(((((IkReal(-1.00000000000000))*(x23)*(x48)))+(((IkReal(-1.00000000000000))*(x64))))))));
eerot[4]=((((x11)*(x59)))+(((x10)*(((((IkReal(-1.00000000000000))*(x18)*(x2)))+(x43))))));
eerot[5]=((((x13)*(x63)))+(((x12)*(((((x11)*(x48)))+(x64))))));
IkReal x72=((IkReal(0.0300000000000000))*(x30));
eetrans[1]=((IkReal(0.229500000000000))+(((x10)*(((((IkReal(-1.00000000000000))*(x14)*(x30)))+(((x2)*(x27)))))))+(((IkReal(-0.313800000000000))*(x30)*(x5)))+(((x11)*(((((IkReal(-1.00000000000000))*(x24)*(x49)))+(((IkReal(-1.00000000000000))*(x21)*(x33)))))))+(x72)+(((IkReal(0.300000000000000))*(x2)))+(((IkReal(-1.00000000000000))*(x20)*(x5)))+(((IkReal(-1.00000000000000))*(x7)*(x72)))+(((x25)*(x7))));
eerot[6]=((((IkReal(-1.00000000000000))*(x12)*(((((x17)*(x53)))+(((x16)*(((((IkReal(-1.00000000000000))*(x18)*(x50)))+(((IkReal(-1.00000000000000))*(x22)*(x35)))))))))))+(((x13)*(((((x11)*(x61)))+(x70))))));
eerot[7]=((((x11)*(((((IkReal(-1.00000000000000))*(x16)*(x53)))+(((IkReal(-1.00000000000000))*(x17)*(x60)))))))+(((x10)*(x61))));
eerot[8]=((((IkReal(-1.00000000000000))*(x13)*(((((IkReal(1.00000000000000))*(x53)*(x9)))+(((IkReal(1.00000000000000))*(x8)*(((((IkReal(-1.00000000000000))*(x39)))+(((IkReal(-1.00000000000000))*(x55)))))))))))+(((x12)*(((((IkReal(-1.00000000000000))*(x23)*(x61)))+(((IkReal(-1.00000000000000))*(x70))))))));
IkReal x73=((IkReal(1.00000000000000))*(x35));
eetrans[2]=((((IkReal(-1.00000000000000))*(x38)))+(((IkReal(0.0300000000000000))*(x39)))+(((IkReal(-1.00000000000000))*(x26)*(x73)))+(((x5)*(((((IkReal(-1.00000000000000))*(x25)*(x36)))+(((IkReal(0.313800000000000))*(x28)))))))+(((IkReal(-0.300000000000000))*(x35)))+(x45)+(((x10)*(((((IkReal(-1.00000000000000))*(x27)*(x73)))+(((IkReal(-1.00000000000000))*(x14)*(x51)))))))+(((x11)*(((((x24)*(x60)))+(((x21)*(x53)))))))+(((x7)*(((((IkReal(-1.00000000000000))*(x45)))+(x38))))));
}

IKFAST_API int GetNumFreeParameters() { return 1; }
IKFAST_API int* GetFreeParameters() { static int freeparams[] = {2}; return freeparams; }
IKFAST_API int GetNumJoints() { return 7; }

IKFAST_API int GetIkRealSize() { return sizeof(IkReal); }

IKFAST_API int GetIkType() { return 0x67000001; }

class IKSolver {
public:
IkReal j19,cj19,sj19,htj19,j20,cj20,sj20,htj20,j22,cj22,sj22,htj22,j23,cj23,sj23,htj23,j24,cj24,sj24,htj24,j25,cj25,sj25,htj25,j21,cj21,sj21,htj21,new_r00,r00,rxp0_0,new_r01,r01,rxp0_1,new_r02,r02,rxp0_2,new_r10,r10,rxp1_0,new_r11,r11,rxp1_1,new_r12,r12,rxp1_2,new_r20,r20,rxp2_0,new_r21,r21,rxp2_1,new_r22,r22,rxp2_2,new_px,px,npx,new_py,py,npy,new_pz,pz,npz,pp;
unsigned char _ij19[2], _nj19,_ij20[2], _nj20,_ij22[2], _nj22,_ij23[2], _nj23,_ij24[2], _nj24,_ij25[2], _nj25,_ij21[2], _nj21;

bool ComputeIk(const IkReal* eetrans, const IkReal* eerot, const IkReal* pfree, IkSolutionListBase<IkReal>& solutions) {
j19=numeric_limits<IkReal>::quiet_NaN(); _ij19[0] = -1; _ij19[1] = -1; _nj19 = -1; j20=numeric_limits<IkReal>::quiet_NaN(); _ij20[0] = -1; _ij20[1] = -1; _nj20 = -1; j22=numeric_limits<IkReal>::quiet_NaN(); _ij22[0] = -1; _ij22[1] = -1; _nj22 = -1; j23=numeric_limits<IkReal>::quiet_NaN(); _ij23[0] = -1; _ij23[1] = -1; _nj23 = -1; j24=numeric_limits<IkReal>::quiet_NaN(); _ij24[0] = -1; _ij24[1] = -1; _nj24 = -1; j25=numeric_limits<IkReal>::quiet_NaN(); _ij25[0] = -1; _ij25[1] = -1; _nj25 = -1;  _ij21[0] = -1; _ij21[1] = -1; _nj21 = 0; 
for(int dummyiter = 0; dummyiter < 1; ++dummyiter) {
    solutions.Clear();
j21=pfree[0]; cj21=cos(pfree[0]); sj21=sin(pfree[0]);
r00 = eerot[0*3+0];
r01 = eerot[0*3+1];
r02 = eerot[0*3+2];
r10 = eerot[1*3+0];
r11 = eerot[1*3+1];
r12 = eerot[1*3+2];
r20 = eerot[2*3+0];
r21 = eerot[2*3+1];
r22 = eerot[2*3+2];
px = eetrans[0]; py = eetrans[1]; pz = eetrans[2];

new_r00=r02;
new_r01=r00;
new_r02=r01;
new_px=((px)+(((IkReal(0.127000000000000))*(r01))));
new_r10=((IkReal(-1.00000000000000))*(r22));
new_r11=((IkReal(-1.00000000000000))*(r20));
new_r12=((IkReal(-1.00000000000000))*(r21));
new_py=((((IkReal(-1.00000000000000))*(pz)))+(((IkReal(-0.127000000000000))*(r21))));
new_r20=r12;
new_r21=r10;
new_r22=r11;
new_pz=((IkReal(-0.229500000000000))+(py)+(((IkReal(0.127000000000000))*(r11))));
r00 = new_r00; r01 = new_r01; r02 = new_r02; r10 = new_r10; r11 = new_r11; r12 = new_r12; r20 = new_r20; r21 = new_r21; r22 = new_r22; px = new_px; py = new_py; pz = new_pz;
pp=(((px)*(px))+((py)*(py))+((pz)*(pz)));
npx=((((px)*(r00)))+(((py)*(r10)))+(((pz)*(r20))));
npy=((((px)*(r01)))+(((py)*(r11)))+(((pz)*(r21))));
npz=((((px)*(r02)))+(((py)*(r12)))+(((pz)*(r22))));
rxp0_0=((((IkReal(-1.00000000000000))*(py)*(r20)))+(((pz)*(r10))));
rxp0_1=((((px)*(r20)))+(((IkReal(-1.00000000000000))*(pz)*(r00))));
rxp0_2=((((IkReal(-1.00000000000000))*(px)*(r10)))+(((py)*(r00))));
rxp1_0=((((IkReal(-1.00000000000000))*(py)*(r21)))+(((pz)*(r11))));
rxp1_1=((((px)*(r21)))+(((IkReal(-1.00000000000000))*(pz)*(r01))));
rxp1_2=((((IkReal(-1.00000000000000))*(px)*(r11)))+(((py)*(r01))));
rxp2_0=((((IkReal(-1.00000000000000))*(py)*(r22)))+(((pz)*(r12))));
rxp2_1=((((px)*(r22)))+(((IkReal(-1.00000000000000))*(pz)*(r02))));
rxp2_2=((((IkReal(-1.00000000000000))*(px)*(r12)))+(((py)*(r02))));
{
IkReal j22array[2], cj22array[2], sj22array[2];
bool j22valid[2]={false};
_nj22 = 2;
if( (((IkReal(1.00099239693695))+(((IkReal(-5.26089284776420))*(pp))))) < -1-IKFAST_SINCOS_THRESH || (((IkReal(1.00099239693695))+(((IkReal(-5.26089284776420))*(pp))))) > 1+IKFAST_SINCOS_THRESH )
    continue;
IkReal x74=IKasin(((IkReal(1.00099239693695))+(((IkReal(-5.26089284776420))*(pp)))));
j22array[0]=((IkReal(-1.76577759872331))+(((IkReal(-1.00000000000000))*(x74))));
sj22array[0]=IKsin(j22array[0]);
cj22array[0]=IKcos(j22array[0]);
j22array[1]=((IkReal(1.37581505486648))+(x74));
sj22array[1]=IKsin(j22array[1]);
cj22array[1]=IKcos(j22array[1]);
if( j22array[0] > IKPI )
{
    j22array[0]-=IK2PI;
}
else if( j22array[0] < -IKPI )
{    j22array[0]+=IK2PI;
}
j22valid[0] = true;
if( j22array[1] > IKPI )
{
    j22array[1]-=IK2PI;
}
else if( j22array[1] < -IKPI )
{    j22array[1]+=IK2PI;
}
j22valid[1] = true;
for(int ij22 = 0; ij22 < 2; ++ij22)
{
if( !j22valid[ij22] )
{
    continue;
}
_ij22[0] = ij22; _ij22[1] = -1;
for(int iij22 = ij22+1; iij22 < 2; ++iij22)
{
if( j22valid[iij22] && IKabs(cj22array[ij22]-cj22array[iij22]) < IKFAST_SOLUTION_THRESH && IKabs(sj22array[ij22]-sj22array[iij22]) < IKFAST_SOLUTION_THRESH )
{
    j22valid[iij22]=false; _ij22[1] = iij22; break; 
}
}
j22 = j22array[ij22]; cj22 = cj22array[ij22]; sj22 = sj22array[ij22];

{
IkReal dummyeval[1];
dummyeval[0]=(((px)*(px))+((py)*(py)));
if( IKabs(dummyeval[0]) < 0.0000010000000000  )
{
{
IkReal dummyeval[1];
dummyeval[0]=(((px)*(px))+((py)*(py)));
if( IKabs(dummyeval[0]) < 0.0000010000000000  )
{
{
IkReal dummyeval[1];
IkReal x75=(sj21)*(sj21);
IkReal x76=(sj22)*(sj22);
IkReal x77=(cj22)*(cj22);
IkReal x78=((IkReal(20.9200000000000))*(sj22));
IkReal x79=((cj22)*(x75));
dummyeval[0]=((IkReal(100.000000000000))+(((x78)*(x79)))+(((IkReal(-20.0000000000000))*(sj22)))+(((x75)*(x77)))+(((IkReal(-2.00000000000000))*(x79)))+(x76)+(x75)+(((IkReal(-1.00000000000000))*(cj22)*(x78)))+(((IkReal(109.411600000000))*(x75)*(x76)))+(((IkReal(209.200000000000))*(cj22)))+(((IkReal(109.411600000000))*(x77)))+(((IkReal(-1.00000000000000))*(x75)*(x78))));
if( IKabs(dummyeval[0]) < 0.0000010000000000  )
{
continue;

} else
{
{
IkReal j20array[2], cj20array[2], sj20array[2];
bool j20valid[2]={false};
_nj20 = 2;
IkReal x80=((IkReal(0.0300000000000000))*(sj21));
IkReal x81=((IkReal(0.300000000000000))+(((IkReal(0.313800000000000))*(cj22)))+(((IkReal(-0.0300000000000000))*(sj22))));
IkReal x82=((((IkReal(-1.00000000000000))*(cj22)*(x80)))+(x80)+(((IkReal(-0.313800000000000))*(sj21)*(sj22))));
if( IKabs(x82) < IKFAST_ATAN2_MAGTHRESH && IKabs(x81) < IKFAST_ATAN2_MAGTHRESH )
    continue;
IkReal x83=((IkReal(1.00000000000000))*(IKatan2(x82, x81)));
if( ((((x81)*(x81))+((x82)*(x82)))) < (IkReal)-0.00001 )
    continue;
if( (((pz)*(((IKabs(IKabs(IKsqrt((((x81)*(x81))+((x82)*(x82)))))) != 0)?((IkReal)1/(IKabs(IKsqrt((((x81)*(x81))+((x82)*(x82))))))):(IkReal)1.0e30)))) < -1-IKFAST_SINCOS_THRESH || (((pz)*(((IKabs(IKabs(IKsqrt((((x81)*(x81))+((x82)*(x82)))))) != 0)?((IkReal)1/(IKabs(IKsqrt((((x81)*(x81))+((x82)*(x82))))))):(IkReal)1.0e30)))) > 1+IKFAST_SINCOS_THRESH )
    continue;
IkReal x84=IKasin(((pz)*(((IKabs(IKabs(IKsqrt((((x81)*(x81))+((x82)*(x82)))))) != 0)?((IkReal)1/(IKabs(IKsqrt((((x81)*(x81))+((x82)*(x82))))))):(IkReal)1.0e30))));
j20array[0]=((x84)+(((IkReal(-1.00000000000000))*(x83))));
sj20array[0]=IKsin(j20array[0]);
cj20array[0]=IKcos(j20array[0]);
j20array[1]=((IkReal(3.14159265358979))+(((IkReal(-1.00000000000000))*(x84)))+(((IkReal(-1.00000000000000))*(x83))));
sj20array[1]=IKsin(j20array[1]);
cj20array[1]=IKcos(j20array[1]);
if( j20array[0] > IKPI )
{
    j20array[0]-=IK2PI;
}
else if( j20array[0] < -IKPI )
{    j20array[0]+=IK2PI;
}
j20valid[0] = true;
if( j20array[1] > IKPI )
{
    j20array[1]-=IK2PI;
}
else if( j20array[1] < -IKPI )
{    j20array[1]+=IK2PI;
}
j20valid[1] = true;
for(int ij20 = 0; ij20 < 2; ++ij20)
{
if( !j20valid[ij20] )
{
    continue;
}
_ij20[0] = ij20; _ij20[1] = -1;
for(int iij20 = ij20+1; iij20 < 2; ++iij20)
{
if( j20valid[iij20] && IKabs(cj20array[ij20]-cj20array[iij20]) < IKFAST_SOLUTION_THRESH && IKabs(sj20array[ij20]-sj20array[iij20]) < IKFAST_SOLUTION_THRESH )
{
    j20valid[iij20]=false; _ij20[1] = iij20; break; 
}
}
j20 = j20array[ij20]; cj20 = cj20array[ij20]; sj20 = sj20array[ij20];

{
IkReal dummyeval[1];
IkReal gconst0;
gconst0=IKsign(((((cj20)*((py)*(py))))+(((cj20)*((px)*(px))))));
dummyeval[0]=((((cj20)*((py)*(py))))+(((cj20)*((px)*(px)))));
if( IKabs(dummyeval[0]) < 0.0000010000000000  )
{
{
IkReal dummyeval[1];
IkReal gconst1;
IkReal x85=((cj21)*(sj20));
gconst1=IKsign(((((x85)*((px)*(px))))+(((x85)*((py)*(py))))));
IkReal x86=((cj21)*(sj20));
dummyeval[0]=((((x86)*((px)*(px))))+(((x86)*((py)*(py)))));
if( IKabs(dummyeval[0]) < 0.0000010000000000  )
{
{
IkReal evalcond[4];
IkReal x87=((IkReal(0.0300000000000000))*(cj20));
evalcond[0]=((IkReal(-3.14159265358979))+(IKfmod(((IkReal(1.57079632679490))+(j21)), IkReal(6.28318530717959))));
evalcond[1]=((IkReal(0.190270440000000))+(((IkReal(0.186480000000000))*(cj22)))+(((IkReal(-1.00000000000000))*(pp)))+(((IkReal(-0.0368280000000000))*(sj22))));
evalcond[2]=((((IkReal(-1.00000000000000))*(cj22)*(x87)))+(((IkReal(-0.313800000000000))*(cj20)*(sj22)))+(((IkReal(-1.00000000000000))*(pz)))+(((IkReal(0.300000000000000))*(sj20)))+(((IkReal(-0.0300000000000000))*(sj20)*(sj22)))+(x87)+(((IkReal(0.313800000000000))*(cj22)*(sj20))));
if( IKabs(evalcond[0]) < 0.0000010000000000  && IKabs(evalcond[1]) < 0.0000010000000000  && IKabs(evalcond[2]) < 0.0000010000000000  )
{
{
IkReal dummyeval[1];
IkReal gconst2;
gconst2=IKsign(((((cj20)*((py)*(py))))+(((cj20)*((px)*(px))))));
dummyeval[0]=((((cj20)*((py)*(py))))+(((cj20)*((px)*(px)))));
if( IKabs(dummyeval[0]) < 0.0000010000000000  )
{
{
IkReal dummyeval[1];
IkReal gconst3;
gconst3=IKsign(((((sj20)*((py)*(py))))+(((sj20)*((px)*(px))))));
dummyeval[0]=((((sj20)*((py)*(py))))+(((sj20)*((px)*(px)))));
if( IKabs(dummyeval[0]) < 0.0000010000000000  )
{
{
IkReal evalcond[4];
IkReal x88=((IkReal(0.0300000000000000))+(((IkReal(-0.0300000000000000))*(cj22)))+(((IkReal(-1.00000000000000))*(pz)))+(((IkReal(-0.313800000000000))*(sj22))));
evalcond[0]=((IkReal(-3.14159265358979))+(IKfmod(((IkReal(3.14159265358979))+(j20)), IkReal(6.28318530717959))));
evalcond[1]=((IkReal(0.190270440000000))+(((IkReal(0.186480000000000))*(cj22)))+(((IkReal(-1.00000000000000))*(pp)))+(((IkReal(-0.0368280000000000))*(sj22))));
evalcond[2]=x88;
evalcond[3]=x88;
if( IKabs(evalcond[0]) < 0.0000010000000000  && IKabs(evalcond[1]) < 0.0000010000000000  && IKabs(evalcond[2]) < 0.0000010000000000  && IKabs(evalcond[3]) < 0.0000010000000000  )
{
{
IkReal dummyeval[1];
IkReal gconst4;
gconst4=IKsign(((((IkReal(-1.00000000000000))*((px)*(px))))+(((IkReal(-1.00000000000000))*((py)*(py))))));
dummyeval[0]=((((IkReal(-1.00000000000000))*((px)*(px))))+(((IkReal(-1.00000000000000))*((py)*(py)))));
if( IKabs(dummyeval[0]) < 0.0000010000000000  )
{
{
IkReal dummyeval[1];
IkReal gconst5;
gconst5=IKsign(((((IkReal(3.00000000000000))*((py)*(py))))+(((IkReal(3.00000000000000))*((px)*(px))))));
dummyeval[0]=(((px)*(px))+((py)*(py)));
if( IKabs(dummyeval[0]) < 0.0000010000000000  )
{
continue;

} else
{
{
IkReal j19array[1], cj19array[1], sj19array[1];
bool j19valid[1]={false};
_nj19 = 1;
IkReal x89=((IkReal(5.00000000000000))*(pp));
IkReal x90=((IkReal(0.300000000000000))*(pz));
if( IKabs(((gconst5)*(((((IkReal(0.0423522000000000))*(px)))+(((px)*(x90)))+(((IkReal(-1.00000000000000))*(px)*(x89))))))) < IKFAST_ATAN2_MAGTHRESH && IKabs(((gconst5)*(((((IkReal(-0.0423522000000000))*(py)))+(((py)*(x89)))+(((IkReal(-1.00000000000000))*(py)*(x90))))))) < IKFAST_ATAN2_MAGTHRESH )
    continue;
j19array[0]=IKatan2(((gconst5)*(((((IkReal(0.0423522000000000))*(px)))+(((px)*(x90)))+(((IkReal(-1.00000000000000))*(px)*(x89)))))), ((gconst5)*(((((IkReal(-0.0423522000000000))*(py)))+(((py)*(x89)))+(((IkReal(-1.00000000000000))*(py)*(x90)))))));
sj19array[0]=IKsin(j19array[0]);
cj19array[0]=IKcos(j19array[0]);
if( j19array[0] > IKPI )
{
    j19array[0]-=IK2PI;
}
else if( j19array[0] < -IKPI )
{    j19array[0]+=IK2PI;
}
j19valid[0] = true;
for(int ij19 = 0; ij19 < 1; ++ij19)
{
if( !j19valid[ij19] )
{
    continue;
}
_ij19[0] = ij19; _ij19[1] = -1;
for(int iij19 = ij19+1; iij19 < 1; ++iij19)
{
if( j19valid[iij19] && IKabs(cj19array[ij19]-cj19array[iij19]) < IKFAST_SOLUTION_THRESH && IKabs(sj19array[ij19]-sj19array[iij19]) < IKFAST_SOLUTION_THRESH )
{
    j19valid[iij19]=false; _ij19[1] = iij19; break; 
}
}
j19 = j19array[ij19]; cj19 = cj19array[ij19]; sj19 = sj19array[ij19];
{
IkReal evalcond[3];
IkReal x91=IKsin(j19);
IkReal x92=IKcos(j19);
IkReal x93=((px)*(x91));
IkReal x94=((py)*(x92));
evalcond[0]=((((IkReal(-1.00000000000000))*(px)*(x92)))+(((IkReal(-1.00000000000000))*(py)*(x91))));
evalcond[1]=((IkReal(0.300000000000000))+(((IkReal(0.313800000000000))*(cj22)))+(x93)+(((IkReal(-0.0300000000000000))*(sj22)))+(((IkReal(-1.00000000000000))*(x94))));
evalcond[2]=((IkReal(0.00847044000000000))+(((IkReal(0.600000000000000))*(x94)))+(((IkReal(-1.00000000000000))*(pp)))+(((IkReal(0.0600000000000000))*(pz)))+(((IkReal(-0.600000000000000))*(x93))));
if( IKabs(evalcond[0]) > 0.000001  || IKabs(evalcond[1]) > 0.000001  || IKabs(evalcond[2]) > 0.000001  )
{
continue;
}
}

rotationfunction0(solutions);
}
}

}

}

} else
{
{
IkReal j19array[1], cj19array[1], sj19array[1];
bool j19valid[1]={false};
_nj19 = 1;
IkReal x262=((IkReal(0.313800000000000))*(cj22));
IkReal x263=((IkReal(0.0300000000000000))*(sj22));
if( IKabs(((gconst4)*(((((IkReal(0.300000000000000))*(px)))+(((IkReal(-1.00000000000000))*(px)*(x263)))+(((px)*(x262))))))) < IKFAST_ATAN2_MAGTHRESH && IKabs(((gconst4)*(((((IkReal(-0.300000000000000))*(py)))+(((py)*(x263)))+(((IkReal(-1.00000000000000))*(py)*(x262))))))) < IKFAST_ATAN2_MAGTHRESH )
    continue;
j19array[0]=IKatan2(((gconst4)*(((((IkReal(0.300000000000000))*(px)))+(((IkReal(-1.00000000000000))*(px)*(x263)))+(((px)*(x262)))))), ((gconst4)*(((((IkReal(-0.300000000000000))*(py)))+(((py)*(x263)))+(((IkReal(-1.00000000000000))*(py)*(x262)))))));
sj19array[0]=IKsin(j19array[0]);
cj19array[0]=IKcos(j19array[0]);
if( j19array[0] > IKPI )
{
    j19array[0]-=IK2PI;
}
else if( j19array[0] < -IKPI )
{    j19array[0]+=IK2PI;
}
j19valid[0] = true;
for(int ij19 = 0; ij19 < 1; ++ij19)
{
if( !j19valid[ij19] )
{
    continue;
}
_ij19[0] = ij19; _ij19[1] = -1;
for(int iij19 = ij19+1; iij19 < 1; ++iij19)
{
if( j19valid[iij19] && IKabs(cj19array[ij19]-cj19array[iij19]) < IKFAST_SOLUTION_THRESH && IKabs(sj19array[ij19]-sj19array[iij19]) < IKFAST_SOLUTION_THRESH )
{
    j19valid[iij19]=false; _ij19[1] = iij19; break; 
}
}
j19 = j19array[ij19]; cj19 = cj19array[ij19]; sj19 = sj19array[ij19];
{
IkReal evalcond[3];
IkReal x264=IKsin(j19);
IkReal x265=IKcos(j19);
IkReal x266=((px)*(x264));
IkReal x267=((py)*(x265));
evalcond[0]=((((IkReal(-1.00000000000000))*(px)*(x265)))+(((IkReal(-1.00000000000000))*(py)*(x264))));
evalcond[1]=((IkReal(0.300000000000000))+(((IkReal(-1.00000000000000))*(x267)))+(((IkReal(0.313800000000000))*(cj22)))+(x266)+(((IkReal(-0.0300000000000000))*(sj22))));
evalcond[2]=((IkReal(0.00847044000000000))+(((IkReal(-1.00000000000000))*(pp)))+(((IkReal(0.600000000000000))*(x267)))+(((IkReal(-0.600000000000000))*(x266)))+(((IkReal(0.0600000000000000))*(pz))));
if( IKabs(evalcond[0]) > 0.000001  || IKabs(evalcond[1]) > 0.000001  || IKabs(evalcond[2]) > 0.000001  )
{
continue;
}
}

rotationfunction0(solutions);
}
}

}

}

} else
{
IkReal x268=((IkReal(0.313800000000000))*(sj22));
IkReal x269=((IkReal(0.0300000000000000))*(cj22));
IkReal x270=((x269)+(x268));
evalcond[0]=((IkReal(-3.14159265358979))+(IKfmod(j20, IkReal(6.28318530717959))));
evalcond[1]=((IkReal(0.190270440000000))+(((IkReal(0.186480000000000))*(cj22)))+(((IkReal(-1.00000000000000))*(pp)))+(((IkReal(-0.0368280000000000))*(sj22))));
evalcond[2]=((IkReal(-0.0300000000000000))+(((IkReal(-1.00000000000000))*(pz)))+(x270));
evalcond[3]=((IkReal(0.0300000000000000))+(pz)+(((IkReal(-1.00000000000000))*(x270))));
if( IKabs(evalcond[0]) < 0.0000010000000000  && IKabs(evalcond[1]) < 0.0000010000000000  && IKabs(evalcond[2]) < 0.0000010000000000  && IKabs(evalcond[3]) < 0.0000010000000000  )
{
{
IkReal dummyeval[1];
IkReal gconst6;
gconst6=IKsign((((px)*(px))+((py)*(py))));
dummyeval[0]=(((px)*(px))+((py)*(py)));
if( IKabs(dummyeval[0]) < 0.0000010000000000  )
{
{
IkReal dummyeval[1];
IkReal gconst7;
gconst7=IKsign(((((IkReal(-3.00000000000000))*((px)*(px))))+(((IkReal(-3.00000000000000))*((py)*(py))))));
dummyeval[0]=((((IkReal(-1.00000000000000))*((px)*(px))))+(((IkReal(-1.00000000000000))*((py)*(py)))));
if( IKabs(dummyeval[0]) < 0.0000010000000000  )
{
continue;

} else
{
{
IkReal j19array[1], cj19array[1], sj19array[1];
bool j19valid[1]={false};
_nj19 = 1;
IkReal x271=((IkReal(5.00000000000000))*(pp));
IkReal x272=((IkReal(0.300000000000000))*(pz));
if( IKabs(((gconst7)*(((((IkReal(0.0423522000000000))*(px)))+(((IkReal(-1.00000000000000))*(px)*(x271)))+(((IkReal(-1.00000000000000))*(px)*(x272))))))) < IKFAST_ATAN2_MAGTHRESH && IKabs(((gconst7)*(((((IkReal(-0.0423522000000000))*(py)))+(((py)*(x271)))+(((py)*(x272))))))) < IKFAST_ATAN2_MAGTHRESH )
    continue;
j19array[0]=IKatan2(((gconst7)*(((((IkReal(0.0423522000000000))*(px)))+(((IkReal(-1.00000000000000))*(px)*(x271)))+(((IkReal(-1.00000000000000))*(px)*(x272)))))), ((gconst7)*(((((IkReal(-0.0423522000000000))*(py)))+(((py)*(x271)))+(((py)*(x272)))))));
sj19array[0]=IKsin(j19array[0]);
cj19array[0]=IKcos(j19array[0]);
if( j19array[0] > IKPI )
{
    j19array[0]-=IK2PI;
}
else if( j19array[0] < -IKPI )
{    j19array[0]+=IK2PI;
}
j19valid[0] = true;
for(int ij19 = 0; ij19 < 1; ++ij19)
{
if( !j19valid[ij19] )
{
    continue;
}
_ij19[0] = ij19; _ij19[1] = -1;
for(int iij19 = ij19+1; iij19 < 1; ++iij19)
{
if( j19valid[iij19] && IKabs(cj19array[ij19]-cj19array[iij19]) < IKFAST_SOLUTION_THRESH && IKabs(sj19array[ij19]-sj19array[iij19]) < IKFAST_SOLUTION_THRESH )
{
    j19valid[iij19]=false; _ij19[1] = iij19; break; 
}
}
j19 = j19array[ij19]; cj19 = cj19array[ij19]; sj19 = sj19array[ij19];
{
IkReal evalcond[3];
IkReal x273=IKcos(j19);
IkReal x274=IKsin(j19);
IkReal x275=((px)*(x274));
IkReal x276=((py)*(x273));
evalcond[0]=((((IkReal(-1.00000000000000))*(px)*(x273)))+(((IkReal(-1.00000000000000))*(py)*(x274))));
evalcond[1]=((IkReal(0.300000000000000))+(((IkReal(0.313800000000000))*(cj22)))+(((IkReal(-1.00000000000000))*(x275)))+(x276)+(((IkReal(-0.0300000000000000))*(sj22))));
evalcond[2]=((IkReal(0.00847044000000000))+(((IkReal(-1.00000000000000))*(pp)))+(((IkReal(-0.0600000000000000))*(pz)))+(((IkReal(0.600000000000000))*(x275)))+(((IkReal(-0.600000000000000))*(x276))));
if( IKabs(evalcond[0]) > 0.000001  || IKabs(evalcond[1]) > 0.000001  || IKabs(evalcond[2]) > 0.000001  )
{
continue;
}
}

rotationfunction0(solutions);
}
}

}

}

} else
{
{
IkReal j19array[1], cj19array[1], sj19array[1];
bool j19valid[1]={false};
_nj19 = 1;
IkReal x277=((IkReal(0.313800000000000))*(cj22));
IkReal x278=((IkReal(0.0300000000000000))*(sj22));
if( IKabs(((gconst6)*(((((px)*(x277)))+(((IkReal(0.300000000000000))*(px)))+(((IkReal(-1.00000000000000))*(px)*(x278))))))) < IKFAST_ATAN2_MAGTHRESH && IKabs(((gconst6)*(((((IkReal(-0.300000000000000))*(py)))+(((py)*(x278)))+(((IkReal(-1.00000000000000))*(py)*(x277))))))) < IKFAST_ATAN2_MAGTHRESH )
    continue;
j19array[0]=IKatan2(((gconst6)*(((((px)*(x277)))+(((IkReal(0.300000000000000))*(px)))+(((IkReal(-1.00000000000000))*(px)*(x278)))))), ((gconst6)*(((((IkReal(-0.300000000000000))*(py)))+(((py)*(x278)))+(((IkReal(-1.00000000000000))*(py)*(x277)))))));
sj19array[0]=IKsin(j19array[0]);
cj19array[0]=IKcos(j19array[0]);
if( j19array[0] > IKPI )
{
    j19array[0]-=IK2PI;
}
else if( j19array[0] < -IKPI )
{    j19array[0]+=IK2PI;
}
j19valid[0] = true;
for(int ij19 = 0; ij19 < 1; ++ij19)
{
if( !j19valid[ij19] )
{
    continue;
}
_ij19[0] = ij19; _ij19[1] = -1;
for(int iij19 = ij19+1; iij19 < 1; ++iij19)
{
if( j19valid[iij19] && IKabs(cj19array[ij19]-cj19array[iij19]) < IKFAST_SOLUTION_THRESH && IKabs(sj19array[ij19]-sj19array[iij19]) < IKFAST_SOLUTION_THRESH )
{
    j19valid[iij19]=false; _ij19[1] = iij19; break; 
}
}
j19 = j19array[ij19]; cj19 = cj19array[ij19]; sj19 = sj19array[ij19];
{
IkReal evalcond[3];
IkReal x279=IKcos(j19);
IkReal x280=IKsin(j19);
IkReal x281=((px)*(x280));
IkReal x282=((py)*(x279));
evalcond[0]=((((IkReal(-1.00000000000000))*(px)*(x279)))+(((IkReal(-1.00000000000000))*(py)*(x280))));
evalcond[1]=((IkReal(0.300000000000000))+(((IkReal(0.313800000000000))*(cj22)))+(x282)+(((IkReal(-1.00000000000000))*(x281)))+(((IkReal(-0.0300000000000000))*(sj22))));
evalcond[2]=((IkReal(0.00847044000000000))+(((IkReal(-0.600000000000000))*(x282)))+(((IkReal(0.600000000000000))*(x281)))+(((IkReal(-1.00000000000000))*(pp)))+(((IkReal(-0.0600000000000000))*(pz))));
if( IKabs(evalcond[0]) > 0.000001  || IKabs(evalcond[1]) > 0.000001  || IKabs(evalcond[2]) > 0.000001  )
{
continue;
}
}

rotationfunction0(solutions);
}
}

}

}

} else
{
IkReal x283=((IkReal(0.300000000000000))+(((IkReal(0.313800000000000))*(cj22)))+(((IkReal(-1.00000000000000))*(pz)))+(((IkReal(-0.0300000000000000))*(sj22))));
evalcond[0]=((IkReal(-3.14159265358979))+(IKfmod(((IkReal(1.57079632679490))+(j20)), IkReal(6.28318530717959))));
evalcond[1]=((IkReal(0.190270440000000))+(((IkReal(0.186480000000000))*(cj22)))+(((IkReal(-1.00000000000000))*(pp)))+(((IkReal(-0.0368280000000000))*(sj22))));
evalcond[2]=x283;
evalcond[3]=x283;
if( IKabs(evalcond[0]) < 0.0000010000000000  && IKabs(evalcond[1]) < 0.0000010000000000  && IKabs(evalcond[2]) < 0.0000010000000000  && IKabs(evalcond[3]) < 0.0000010000000000  )
{
{
IkReal dummyeval[1];
IkReal gconst8;
gconst8=IKsign((((px)*(px))+((py)*(py))));
dummyeval[0]=(((px)*(px))+((py)*(py)));
if( IKabs(dummyeval[0]) < 0.0000010000000000  )
{
{
IkReal dummyeval[1];
IkReal gconst9;
gconst9=IKsign(((((IkReal(-3.00000000000000))*((px)*(px))))+(((IkReal(-3.00000000000000))*((py)*(py))))));
dummyeval[0]=((((IkReal(-1.00000000000000))*((px)*(px))))+(((IkReal(-1.00000000000000))*((py)*(py)))));
if( IKabs(dummyeval[0]) < 0.0000010000000000  )
{
continue;

} else
{
{
IkReal j19array[1], cj19array[1], sj19array[1];
bool j19valid[1]={false};
_nj19 = 1;
IkReal x284=((IkReal(50.0000000000000))*(pp));
IkReal x285=((IkReal(30.0000000000000))*(pz));
if( IKabs(((gconst9)*(((((IkReal(0.423522000000000))*(px)))+(((IkReal(-1.00000000000000))*(px)*(x284)))+(((px)*(x285))))))) < IKFAST_ATAN2_MAGTHRESH && IKabs(((gconst9)*(((((IkReal(-1.00000000000000))*(py)*(x285)))+(((IkReal(-0.423522000000000))*(py)))+(((py)*(x284))))))) < IKFAST_ATAN2_MAGTHRESH )
    continue;
j19array[0]=IKatan2(((gconst9)*(((((IkReal(0.423522000000000))*(px)))+(((IkReal(-1.00000000000000))*(px)*(x284)))+(((px)*(x285)))))), ((gconst9)*(((((IkReal(-1.00000000000000))*(py)*(x285)))+(((IkReal(-0.423522000000000))*(py)))+(((py)*(x284)))))));
sj19array[0]=IKsin(j19array[0]);
cj19array[0]=IKcos(j19array[0]);
if( j19array[0] > IKPI )
{
    j19array[0]-=IK2PI;
}
else if( j19array[0] < -IKPI )
{    j19array[0]+=IK2PI;
}
j19valid[0] = true;
for(int ij19 = 0; ij19 < 1; ++ij19)
{
if( !j19valid[ij19] )
{
    continue;
}
_ij19[0] = ij19; _ij19[1] = -1;
for(int iij19 = ij19+1; iij19 < 1; ++iij19)
{
if( j19valid[iij19] && IKabs(cj19array[ij19]-cj19array[iij19]) < IKFAST_SOLUTION_THRESH && IKabs(sj19array[ij19]-sj19array[iij19]) < IKFAST_SOLUTION_THRESH )
{
    j19valid[iij19]=false; _ij19[1] = iij19; break; 
}
}
j19 = j19array[ij19]; cj19 = cj19array[ij19]; sj19 = sj19array[ij19];
{
IkReal evalcond[3];
IkReal x286=IKcos(j19);
IkReal x287=IKsin(j19);
IkReal x288=((py)*(x286));
IkReal x289=((px)*(x287));
evalcond[0]=((((IkReal(-1.00000000000000))*(py)*(x287)))+(((IkReal(-1.00000000000000))*(px)*(x286))));
evalcond[1]=((IkReal(0.0300000000000000))+(((IkReal(-0.0300000000000000))*(cj22)))+(x288)+(((IkReal(-1.00000000000000))*(x289)))+(((IkReal(-0.313800000000000))*(sj22))));
evalcond[2]=((IkReal(0.00847044000000000))+(((IkReal(0.600000000000000))*(pz)))+(((IkReal(-0.0600000000000000))*(x288)))+(((IkReal(0.0600000000000000))*(x289)))+(((IkReal(-1.00000000000000))*(pp))));
if( IKabs(evalcond[0]) > 0.000001  || IKabs(evalcond[1]) > 0.000001  || IKabs(evalcond[2]) > 0.000001  )
{
continue;
}
}

rotationfunction0(solutions);
}
}

}

}

} else
{
{
IkReal j19array[1], cj19array[1], sj19array[1];
bool j19valid[1]={false};
_nj19 = 1;
IkReal x290=((IkReal(0.313800000000000))*(sj22));
IkReal x291=((IkReal(0.0300000000000000))*(px));
IkReal x292=((IkReal(0.0300000000000000))*(py));
if( IKabs(((gconst8)*(((((IkReal(-1.00000000000000))*(cj22)*(x291)))+(x291)+(((IkReal(-1.00000000000000))*(px)*(x290))))))) < IKFAST_ATAN2_MAGTHRESH && IKabs(((gconst8)*(((((IkReal(-1.00000000000000))*(x292)))+(((py)*(x290)))+(((cj22)*(x292))))))) < IKFAST_ATAN2_MAGTHRESH )
    continue;
j19array[0]=IKatan2(((gconst8)*(((((IkReal(-1.00000000000000))*(cj22)*(x291)))+(x291)+(((IkReal(-1.00000000000000))*(px)*(x290)))))), ((gconst8)*(((((IkReal(-1.00000000000000))*(x292)))+(((py)*(x290)))+(((cj22)*(x292)))))));
sj19array[0]=IKsin(j19array[0]);
cj19array[0]=IKcos(j19array[0]);
if( j19array[0] > IKPI )
{
    j19array[0]-=IK2PI;
}
else if( j19array[0] < -IKPI )
{    j19array[0]+=IK2PI;
}
j19valid[0] = true;
for(int ij19 = 0; ij19 < 1; ++ij19)
{
if( !j19valid[ij19] )
{
    continue;
}
_ij19[0] = ij19; _ij19[1] = -1;
for(int iij19 = ij19+1; iij19 < 1; ++iij19)
{
if( j19valid[iij19] && IKabs(cj19array[ij19]-cj19array[iij19]) < IKFAST_SOLUTION_THRESH && IKabs(sj19array[ij19]-sj19array[iij19]) < IKFAST_SOLUTION_THRESH )
{
    j19valid[iij19]=false; _ij19[1] = iij19; break; 
}
}
j19 = j19array[ij19]; cj19 = cj19array[ij19]; sj19 = sj19array[ij19];
{
IkReal evalcond[3];
IkReal x293=IKcos(j19);
IkReal x294=IKsin(j19);
IkReal x295=((py)*(x293));
IkReal x296=((px)*(x294));
evalcond[0]=((((IkReal(-1.00000000000000))*(py)*(x294)))+(((IkReal(-1.00000000000000))*(px)*(x293))));
evalcond[1]=((IkReal(0.0300000000000000))+(((IkReal(-1.00000000000000))*(x296)))+(((IkReal(-0.0300000000000000))*(cj22)))+(x295)+(((IkReal(-0.313800000000000))*(sj22))));
evalcond[2]=((IkReal(0.00847044000000000))+(((IkReal(0.600000000000000))*(pz)))+(((IkReal(-1.00000000000000))*(pp)))+(((IkReal(-0.0600000000000000))*(x295)))+(((IkReal(0.0600000000000000))*(x296))));
if( IKabs(evalcond[0]) > 0.000001  || IKabs(evalcond[1]) > 0.000001  || IKabs(evalcond[2]) > 0.000001  )
{
continue;
}
}

rotationfunction0(solutions);
}
}

}

}

} else
{
IkReal x297=((IkReal(0.0300000000000000))*(sj22));
IkReal x298=((IkReal(0.313800000000000))*(cj22));
evalcond[0]=((IkReal(-3.14159265358979))+(IKfmod(((IkReal(4.71238898038469))+(j20)), IkReal(6.28318530717959))));
evalcond[1]=((IkReal(0.190270440000000))+(((IkReal(0.186480000000000))*(cj22)))+(((IkReal(-1.00000000000000))*(pp)))+(((IkReal(-0.0368280000000000))*(sj22))));
evalcond[2]=((IkReal(0.300000000000000))+(((IkReal(-1.00000000000000))*(x297)))+(x298)+(pz));
evalcond[3]=((IkReal(-0.300000000000000))+(((IkReal(-1.00000000000000))*(x298)))+(((IkReal(-1.00000000000000))*(pz)))+(x297));
if( IKabs(evalcond[0]) < 0.0000010000000000  && IKabs(evalcond[1]) < 0.0000010000000000  && IKabs(evalcond[2]) < 0.0000010000000000  && IKabs(evalcond[3]) < 0.0000010000000000  )
{
{
IkReal dummyeval[1];
IkReal gconst10;
gconst10=IKsign(((((IkReal(-1.00000000000000))*((px)*(px))))+(((IkReal(-1.00000000000000))*((py)*(py))))));
dummyeval[0]=((((IkReal(-1.00000000000000))*((px)*(px))))+(((IkReal(-1.00000000000000))*((py)*(py)))));
if( IKabs(dummyeval[0]) < 0.0000010000000000  )
{
{
IkReal dummyeval[1];
IkReal gconst11;
gconst11=IKsign(((((IkReal(3.00000000000000))*((py)*(py))))+(((IkReal(3.00000000000000))*((px)*(px))))));
dummyeval[0]=(((px)*(px))+((py)*(py)));
if( IKabs(dummyeval[0]) < 0.0000010000000000  )
{
continue;

} else
{
{
IkReal j19array[1], cj19array[1], sj19array[1];
bool j19valid[1]={false};
_nj19 = 1;
IkReal x299=((IkReal(50.0000000000000))*(pp));
IkReal x300=((IkReal(30.0000000000000))*(pz));
if( IKabs(((gconst11)*(((((IkReal(0.423522000000000))*(px)))+(((IkReal(-1.00000000000000))*(px)*(x300)))+(((IkReal(-1.00000000000000))*(px)*(x299))))))) < IKFAST_ATAN2_MAGTHRESH && IKabs(((gconst11)*(((((py)*(x299)))+(((IkReal(-0.423522000000000))*(py)))+(((py)*(x300))))))) < IKFAST_ATAN2_MAGTHRESH )
    continue;
j19array[0]=IKatan2(((gconst11)*(((((IkReal(0.423522000000000))*(px)))+(((IkReal(-1.00000000000000))*(px)*(x300)))+(((IkReal(-1.00000000000000))*(px)*(x299)))))), ((gconst11)*(((((py)*(x299)))+(((IkReal(-0.423522000000000))*(py)))+(((py)*(x300)))))));
sj19array[0]=IKsin(j19array[0]);
cj19array[0]=IKcos(j19array[0]);
if( j19array[0] > IKPI )
{
    j19array[0]-=IK2PI;
}
else if( j19array[0] < -IKPI )
{    j19array[0]+=IK2PI;
}
j19valid[0] = true;
for(int ij19 = 0; ij19 < 1; ++ij19)
{
if( !j19valid[ij19] )
{
    continue;
}
_ij19[0] = ij19; _ij19[1] = -1;
for(int iij19 = ij19+1; iij19 < 1; ++iij19)
{
if( j19valid[iij19] && IKabs(cj19array[ij19]-cj19array[iij19]) < IKFAST_SOLUTION_THRESH && IKabs(sj19array[ij19]-sj19array[iij19]) < IKFAST_SOLUTION_THRESH )
{
    j19valid[iij19]=false; _ij19[1] = iij19; break; 
}
}
j19 = j19array[ij19]; cj19 = cj19array[ij19]; sj19 = sj19array[ij19];
{
IkReal evalcond[3];
IkReal x301=IKsin(j19);
IkReal x302=IKcos(j19);
IkReal x303=((py)*(x302));
IkReal x304=((px)*(x301));
evalcond[0]=((((IkReal(-1.00000000000000))*(px)*(x302)))+(((IkReal(-1.00000000000000))*(py)*(x301))));
evalcond[1]=((IkReal(0.0300000000000000))+(((IkReal(-0.0300000000000000))*(cj22)))+(((IkReal(-1.00000000000000))*(x303)))+(x304)+(((IkReal(-0.313800000000000))*(sj22))));
evalcond[2]=((IkReal(0.00847044000000000))+(((IkReal(0.0600000000000000))*(x303)))+(((IkReal(-0.600000000000000))*(pz)))+(((IkReal(-0.0600000000000000))*(x304)))+(((IkReal(-1.00000000000000))*(pp))));
if( IKabs(evalcond[0]) > 0.000001  || IKabs(evalcond[1]) > 0.000001  || IKabs(evalcond[2]) > 0.000001  )
{
continue;
}
}

rotationfunction0(solutions);
}
}

}

}

} else
{
{
IkReal j19array[1], cj19array[1], sj19array[1];
bool j19valid[1]={false};
_nj19 = 1;
IkReal x305=((IkReal(0.313800000000000))*(sj22));
IkReal x306=((IkReal(0.0300000000000000))*(px));
IkReal x307=((IkReal(0.0300000000000000))*(py));
if( IKabs(((gconst10)*(((((IkReal(-1.00000000000000))*(cj22)*(x306)))+(((IkReal(-1.00000000000000))*(px)*(x305)))+(x306))))) < IKFAST_ATAN2_MAGTHRESH && IKabs(((gconst10)*(((((cj22)*(x307)))+(((py)*(x305)))+(((IkReal(-1.00000000000000))*(x307))))))) < IKFAST_ATAN2_MAGTHRESH )
    continue;
j19array[0]=IKatan2(((gconst10)*(((((IkReal(-1.00000000000000))*(cj22)*(x306)))+(((IkReal(-1.00000000000000))*(px)*(x305)))+(x306)))), ((gconst10)*(((((cj22)*(x307)))+(((py)*(x305)))+(((IkReal(-1.00000000000000))*(x307)))))));
sj19array[0]=IKsin(j19array[0]);
cj19array[0]=IKcos(j19array[0]);
if( j19array[0] > IKPI )
{
    j19array[0]-=IK2PI;
}
else if( j19array[0] < -IKPI )
{    j19array[0]+=IK2PI;
}
j19valid[0] = true;
for(int ij19 = 0; ij19 < 1; ++ij19)
{
if( !j19valid[ij19] )
{
    continue;
}
_ij19[0] = ij19; _ij19[1] = -1;
for(int iij19 = ij19+1; iij19 < 1; ++iij19)
{
if( j19valid[iij19] && IKabs(cj19array[ij19]-cj19array[iij19]) < IKFAST_SOLUTION_THRESH && IKabs(sj19array[ij19]-sj19array[iij19]) < IKFAST_SOLUTION_THRESH )
{
    j19valid[iij19]=false; _ij19[1] = iij19; break; 
}
}
j19 = j19array[ij19]; cj19 = cj19array[ij19]; sj19 = sj19array[ij19];
{
IkReal evalcond[3];
IkReal x308=IKsin(j19);
IkReal x309=IKcos(j19);
IkReal x310=((py)*(x309));
IkReal x311=((px)*(x308));
evalcond[0]=((((IkReal(-1.00000000000000))*(px)*(x309)))+(((IkReal(-1.00000000000000))*(py)*(x308))));
evalcond[1]=((IkReal(0.0300000000000000))+(((IkReal(-0.0300000000000000))*(cj22)))+(x311)+(((IkReal(-0.313800000000000))*(sj22)))+(((IkReal(-1.00000000000000))*(x310))));
evalcond[2]=((IkReal(0.00847044000000000))+(((IkReal(-0.600000000000000))*(pz)))+(((IkReal(-1.00000000000000))*(pp)))+(((IkReal(-0.0600000000000000))*(x311)))+(((IkReal(0.0600000000000000))*(x310))));
if( IKabs(evalcond[0]) > 0.000001  || IKabs(evalcond[1]) > 0.000001  || IKabs(evalcond[2]) > 0.000001  )
{
continue;
}
}

rotationfunction0(solutions);
}
}

}

}

} else
{
if( 1 )
{
continue;

} else
{
}
}
}
}
}
}

} else
{
{
IkReal j19array[1], cj19array[1], sj19array[1];
bool j19valid[1]={false};
_nj19 = 1;
IkReal x312=((IkReal(0.313800000000000))*(sj22));
IkReal x313=((cj20)*(pz));
IkReal x314=((IkReal(0.0300000000000000))*(px));
IkReal x315=((IkReal(0.0300000000000000))*(py));
if( IKabs(((gconst3)*(((((IkReal(-1.00000000000000))*(px)*(x313)))+(x314)+(((IkReal(-1.00000000000000))*(px)*(x312)))+(((IkReal(-1.00000000000000))*(cj22)*(x314))))))) < IKFAST_ATAN2_MAGTHRESH && IKabs(((gconst3)*(((((IkReal(-1.00000000000000))*(x315)))+(((py)*(x313)))+(((py)*(x312)))+(((cj22)*(x315))))))) < IKFAST_ATAN2_MAGTHRESH )
    continue;
j19array[0]=IKatan2(((gconst3)*(((((IkReal(-1.00000000000000))*(px)*(x313)))+(x314)+(((IkReal(-1.00000000000000))*(px)*(x312)))+(((IkReal(-1.00000000000000))*(cj22)*(x314)))))), ((gconst3)*(((((IkReal(-1.00000000000000))*(x315)))+(((py)*(x313)))+(((py)*(x312)))+(((cj22)*(x315)))))));
sj19array[0]=IKsin(j19array[0]);
cj19array[0]=IKcos(j19array[0]);
if( j19array[0] > IKPI )
{
    j19array[0]-=IK2PI;
}
else if( j19array[0] < -IKPI )
{    j19array[0]+=IK2PI;
}
j19valid[0] = true;
for(int ij19 = 0; ij19 < 1; ++ij19)
{
if( !j19valid[ij19] )
{
    continue;
}
_ij19[0] = ij19; _ij19[1] = -1;
for(int iij19 = ij19+1; iij19 < 1; ++iij19)
{
if( j19valid[iij19] && IKabs(cj19array[ij19]-cj19array[iij19]) < IKFAST_SOLUTION_THRESH && IKabs(sj19array[ij19]-sj19array[iij19]) < IKFAST_SOLUTION_THRESH )
{
    j19valid[iij19]=false; _ij19[1] = iij19; break; 
}
}
j19 = j19array[ij19]; cj19 = cj19array[ij19]; sj19 = sj19array[ij19];
{
IkReal evalcond[5];
IkReal x316=IKsin(j19);
IkReal x317=IKcos(j19);
IkReal x318=((cj20)*(pz));
IkReal x319=((IkReal(0.0300000000000000))*(sj20));
IkReal x320=((IkReal(1.00000000000000))*(sj20));
IkReal x321=((IkReal(0.0600000000000000))*(sj20));
IkReal x322=((IkReal(0.0300000000000000))*(sj22));
IkReal x323=((IkReal(0.313800000000000))*(cj22));
IkReal x324=((IkReal(0.600000000000000))*(cj20));
IkReal x325=((IkReal(0.313800000000000))*(sj22));
IkReal x326=((py)*(x317));
IkReal x327=((px)*(x316));
evalcond[0]=((((IkReal(-1.00000000000000))*(px)*(x317)))+(((IkReal(-1.00000000000000))*(py)*(x316))));
evalcond[1]=((IkReal(0.300000000000000))+(((IkReal(-1.00000000000000))*(x322)))+(x323)+(((cj20)*(x327)))+(((IkReal(-1.00000000000000))*(pz)*(x320)))+(((IkReal(-1.00000000000000))*(cj20)*(x326))));
evalcond[2]=((IkReal(0.0300000000000000))+(((IkReal(-0.0300000000000000))*(cj22)))+(((IkReal(-1.00000000000000))*(x325)))+(((IkReal(-1.00000000000000))*(x320)*(x327)))+(((sj20)*(x326)))+(((IkReal(-1.00000000000000))*(x318))));
evalcond[3]=((((IkReal(-1.00000000000000))*(cj20)*(x322)))+(((IkReal(-1.00000000000000))*(x326)))+(x327)+(((IkReal(-1.00000000000000))*(x319)))+(((sj20)*(x325)))+(((cj22)*(x319)))+(((cj20)*(x323)))+(((IkReal(0.300000000000000))*(cj20))));
evalcond[4]=((IkReal(0.00847044000000000))+(((IkReal(-1.00000000000000))*(x321)*(x326)))+(((IkReal(0.600000000000000))*(pz)*(sj20)))+(((IkReal(-1.00000000000000))*(pp)))+(((x324)*(x326)))+(((IkReal(-1.00000000000000))*(x324)*(x327)))+(((x321)*(x327)))+(((IkReal(0.0600000000000000))*(x318))));
if( IKabs(evalcond[0]) > 0.000001  || IKabs(evalcond[1]) > 0.000001  || IKabs(evalcond[2]) > 0.000001  || IKabs(evalcond[3]) > 0.000001  || IKabs(evalcond[4]) > 0.000001  )
{
continue;
}
}

rotationfunction0(solutions);
}
}

}

}

} else
{
{
IkReal j19array[1], cj19array[1], sj19array[1];
bool j19valid[1]={false};
_nj19 = 1;
IkReal x328=((IkReal(0.313800000000000))*(cj22));
IkReal x329=((IkReal(0.0300000000000000))*(sj22));
IkReal x330=((pz)*(sj20));
if( IKabs(((gconst2)*(((((IkReal(-0.300000000000000))*(px)))+(((px)*(x330)))+(((IkReal(-1.00000000000000))*(px)*(x328)))+(((px)*(x329))))))) < IKFAST_ATAN2_MAGTHRESH && IKabs(((gconst2)*(((((IkReal(0.300000000000000))*(py)))+(((py)*(x328)))+(((IkReal(-1.00000000000000))*(py)*(x330)))+(((IkReal(-1.00000000000000))*(py)*(x329))))))) < IKFAST_ATAN2_MAGTHRESH )
    continue;
j19array[0]=IKatan2(((gconst2)*(((((IkReal(-0.300000000000000))*(px)))+(((px)*(x330)))+(((IkReal(-1.00000000000000))*(px)*(x328)))+(((px)*(x329)))))), ((gconst2)*(((((IkReal(0.300000000000000))*(py)))+(((py)*(x328)))+(((IkReal(-1.00000000000000))*(py)*(x330)))+(((IkReal(-1.00000000000000))*(py)*(x329)))))));
sj19array[0]=IKsin(j19array[0]);
cj19array[0]=IKcos(j19array[0]);
if( j19array[0] > IKPI )
{
    j19array[0]-=IK2PI;
}
else if( j19array[0] < -IKPI )
{    j19array[0]+=IK2PI;
}
j19valid[0] = true;
for(int ij19 = 0; ij19 < 1; ++ij19)
{
if( !j19valid[ij19] )
{
    continue;
}
_ij19[0] = ij19; _ij19[1] = -1;
for(int iij19 = ij19+1; iij19 < 1; ++iij19)
{
if( j19valid[iij19] && IKabs(cj19array[ij19]-cj19array[iij19]) < IKFAST_SOLUTION_THRESH && IKabs(sj19array[ij19]-sj19array[iij19]) < IKFAST_SOLUTION_THRESH )
{
    j19valid[iij19]=false; _ij19[1] = iij19; break; 
}
}
j19 = j19array[ij19]; cj19 = cj19array[ij19]; sj19 = sj19array[ij19];
{
IkReal evalcond[5];
IkReal x331=IKsin(j19);
IkReal x332=IKcos(j19);
IkReal x333=((cj20)*(pz));
IkReal x334=((IkReal(0.0300000000000000))*(sj20));
IkReal x335=((IkReal(1.00000000000000))*(sj20));
IkReal x336=((IkReal(0.0600000000000000))*(sj20));
IkReal x337=((IkReal(0.0300000000000000))*(sj22));
IkReal x338=((IkReal(0.313800000000000))*(cj22));
IkReal x339=((IkReal(0.600000000000000))*(cj20));
IkReal x340=((IkReal(0.313800000000000))*(sj22));
IkReal x341=((py)*(x332));
IkReal x342=((px)*(x331));
evalcond[0]=((((IkReal(-1.00000000000000))*(px)*(x332)))+(((IkReal(-1.00000000000000))*(py)*(x331))));
evalcond[1]=((IkReal(0.300000000000000))+(((cj20)*(x342)))+(((IkReal(-1.00000000000000))*(pz)*(x335)))+(x338)+(((IkReal(-1.00000000000000))*(x337)))+(((IkReal(-1.00000000000000))*(cj20)*(x341))));
evalcond[2]=((IkReal(0.0300000000000000))+(((IkReal(-1.00000000000000))*(x335)*(x342)))+(((IkReal(-0.0300000000000000))*(cj22)))+(((IkReal(-1.00000000000000))*(x333)))+(((sj20)*(x341)))+(((IkReal(-1.00000000000000))*(x340))));
evalcond[3]=((((cj20)*(x338)))+(((IkReal(-1.00000000000000))*(cj20)*(x337)))+(x342)+(((IkReal(-1.00000000000000))*(x334)))+(((sj20)*(x340)))+(((cj22)*(x334)))+(((IkReal(0.300000000000000))*(cj20)))+(((IkReal(-1.00000000000000))*(x341))));
evalcond[4]=((IkReal(0.00847044000000000))+(((x336)*(x342)))+(((IkReal(-1.00000000000000))*(x336)*(x341)))+(((IkReal(0.0600000000000000))*(x333)))+(((IkReal(0.600000000000000))*(pz)*(sj20)))+(((IkReal(-1.00000000000000))*(pp)))+(((x339)*(x341)))+(((IkReal(-1.00000000000000))*(x339)*(x342))));
if( IKabs(evalcond[0]) > 0.000001  || IKabs(evalcond[1]) > 0.000001  || IKabs(evalcond[2]) > 0.000001  || IKabs(evalcond[3]) > 0.000001  || IKabs(evalcond[4]) > 0.000001  )
{
continue;
}
}

rotationfunction0(solutions);
}
}

}

}

} else
{
IkReal x343=((IkReal(0.0300000000000000))*(cj20));
evalcond[0]=((IkReal(-3.14159265358979))+(IKfmod(((IkReal(4.71238898038469))+(j21)), IkReal(6.28318530717959))));
evalcond[1]=((IkReal(0.190270440000000))+(((IkReal(0.186480000000000))*(cj22)))+(((IkReal(-1.00000000000000))*(pp)))+(((IkReal(-0.0368280000000000))*(sj22))));
evalcond[2]=((((IkReal(0.313800000000000))*(cj20)*(sj22)))+(((IkReal(-1.00000000000000))*(pz)))+(((IkReal(0.300000000000000))*(sj20)))+(((IkReal(-0.0300000000000000))*(sj20)*(sj22)))+(((cj22)*(x343)))+(((IkReal(-1.00000000000000))*(x343)))+(((IkReal(0.313800000000000))*(cj22)*(sj20))));
if( IKabs(evalcond[0]) < 0.0000010000000000  && IKabs(evalcond[1]) < 0.0000010000000000  && IKabs(evalcond[2]) < 0.0000010000000000  )
{
{
IkReal dummyeval[1];
IkReal gconst12;
gconst12=IKsign(((((sj20)*((py)*(py))))+(((sj20)*((px)*(px))))));
dummyeval[0]=((((sj20)*((py)*(py))))+(((sj20)*((px)*(px)))));
if( IKabs(dummyeval[0]) < 0.0000010000000000  )
{
{
IkReal dummyeval[1];
IkReal gconst13;
gconst13=IKsign(((((cj20)*((py)*(py))))+(((cj20)*((px)*(px))))));
dummyeval[0]=((((cj20)*((py)*(py))))+(((cj20)*((px)*(px)))));
if( IKabs(dummyeval[0]) < 0.0000010000000000  )
{
{
IkReal evalcond[4];
IkReal x344=((IkReal(0.300000000000000))+(((IkReal(0.313800000000000))*(cj22)))+(((IkReal(-1.00000000000000))*(pz)))+(((IkReal(-0.0300000000000000))*(sj22))));
evalcond[0]=((IkReal(-3.14159265358979))+(IKfmod(((IkReal(1.57079632679490))+(j20)), IkReal(6.28318530717959))));
evalcond[1]=((IkReal(0.190270440000000))+(((IkReal(0.186480000000000))*(cj22)))+(((IkReal(-1.00000000000000))*(pp)))+(((IkReal(-0.0368280000000000))*(sj22))));
evalcond[2]=x344;
evalcond[3]=x344;
if( IKabs(evalcond[0]) < 0.0000010000000000  && IKabs(evalcond[1]) < 0.0000010000000000  && IKabs(evalcond[2]) < 0.0000010000000000  && IKabs(evalcond[3]) < 0.0000010000000000  )
{
{
IkReal dummyeval[1];
IkReal gconst14;
gconst14=IKsign(((((IkReal(-1.00000000000000))*((px)*(px))))+(((IkReal(-1.00000000000000))*((py)*(py))))));
dummyeval[0]=((((IkReal(-1.00000000000000))*((px)*(px))))+(((IkReal(-1.00000000000000))*((py)*(py)))));
if( IKabs(dummyeval[0]) < 0.0000010000000000  )
{
{
IkReal dummyeval[1];
IkReal gconst15;
gconst15=IKsign(((((IkReal(3.00000000000000))*((py)*(py))))+(((IkReal(3.00000000000000))*((px)*(px))))));
dummyeval[0]=(((px)*(px))+((py)*(py)));
if( IKabs(dummyeval[0]) < 0.0000010000000000  )
{
continue;

} else
{
{
IkReal j19array[1], cj19array[1], sj19array[1];
bool j19valid[1]={false};
_nj19 = 1;
IkReal x345=((IkReal(50.0000000000000))*(pp));
IkReal x346=((IkReal(30.0000000000000))*(pz));
if( IKabs(((gconst15)*(((((IkReal(-1.00000000000000))*(px)*(x345)))+(((IkReal(0.423522000000000))*(px)))+(((px)*(x346))))))) < IKFAST_ATAN2_MAGTHRESH && IKabs(((gconst15)*(((((py)*(x345)))+(((IkReal(-0.423522000000000))*(py)))+(((IkReal(-1.00000000000000))*(py)*(x346))))))) < IKFAST_ATAN2_MAGTHRESH )
    continue;
j19array[0]=IKatan2(((gconst15)*(((((IkReal(-1.00000000000000))*(px)*(x345)))+(((IkReal(0.423522000000000))*(px)))+(((px)*(x346)))))), ((gconst15)*(((((py)*(x345)))+(((IkReal(-0.423522000000000))*(py)))+(((IkReal(-1.00000000000000))*(py)*(x346)))))));
sj19array[0]=IKsin(j19array[0]);
cj19array[0]=IKcos(j19array[0]);
if( j19array[0] > IKPI )
{
    j19array[0]-=IK2PI;
}
else if( j19array[0] < -IKPI )
{    j19array[0]+=IK2PI;
}
j19valid[0] = true;
for(int ij19 = 0; ij19 < 1; ++ij19)
{
if( !j19valid[ij19] )
{
    continue;
}
_ij19[0] = ij19; _ij19[1] = -1;
for(int iij19 = ij19+1; iij19 < 1; ++iij19)
{
if( j19valid[iij19] && IKabs(cj19array[ij19]-cj19array[iij19]) < IKFAST_SOLUTION_THRESH && IKabs(sj19array[ij19]-sj19array[iij19]) < IKFAST_SOLUTION_THRESH )
{
    j19valid[iij19]=false; _ij19[1] = iij19; break; 
}
}
j19 = j19array[ij19]; cj19 = cj19array[ij19]; sj19 = sj19array[ij19];
{
IkReal evalcond[3];
IkReal x347=IKsin(j19);
IkReal x348=IKcos(j19);
IkReal x349=((py)*(x348));
IkReal x350=((px)*(x347));
evalcond[0]=((((IkReal(-1.00000000000000))*(px)*(x348)))+(((IkReal(-1.00000000000000))*(py)*(x347))));
evalcond[1]=((IkReal(0.0300000000000000))+(((IkReal(-0.0300000000000000))*(cj22)))+(x350)+(((IkReal(-0.313800000000000))*(sj22)))+(((IkReal(-1.00000000000000))*(x349))));
evalcond[2]=((IkReal(0.00847044000000000))+(((IkReal(-0.0600000000000000))*(x350)))+(((IkReal(0.600000000000000))*(pz)))+(((IkReal(-1.00000000000000))*(pp)))+(((IkReal(0.0600000000000000))*(x349))));
if( IKabs(evalcond[0]) > 0.000001  || IKabs(evalcond[1]) > 0.000001  || IKabs(evalcond[2]) > 0.000001  )
{
continue;
}
}

rotationfunction0(solutions);
}
}

}

}

} else
{
{
IkReal j19array[1], cj19array[1], sj19array[1];
bool j19valid[1]={false};
_nj19 = 1;
IkReal x351=((IkReal(0.313800000000000))*(sj22));
IkReal x352=((IkReal(0.0300000000000000))*(px));
IkReal x353=((IkReal(0.0300000000000000))*(py));
if( IKabs(((gconst14)*(((((IkReal(-1.00000000000000))*(px)*(x351)))+(((IkReal(-1.00000000000000))*(cj22)*(x352)))+(x352))))) < IKFAST_ATAN2_MAGTHRESH && IKabs(((gconst14)*(((((cj22)*(x353)))+(((IkReal(-1.00000000000000))*(x353)))+(((py)*(x351))))))) < IKFAST_ATAN2_MAGTHRESH )
    continue;
j19array[0]=IKatan2(((gconst14)*(((((IkReal(-1.00000000000000))*(px)*(x351)))+(((IkReal(-1.00000000000000))*(cj22)*(x352)))+(x352)))), ((gconst14)*(((((cj22)*(x353)))+(((IkReal(-1.00000000000000))*(x353)))+(((py)*(x351)))))));
sj19array[0]=IKsin(j19array[0]);
cj19array[0]=IKcos(j19array[0]);
if( j19array[0] > IKPI )
{
    j19array[0]-=IK2PI;
}
else if( j19array[0] < -IKPI )
{    j19array[0]+=IK2PI;
}
j19valid[0] = true;
for(int ij19 = 0; ij19 < 1; ++ij19)
{
if( !j19valid[ij19] )
{
    continue;
}
_ij19[0] = ij19; _ij19[1] = -1;
for(int iij19 = ij19+1; iij19 < 1; ++iij19)
{
if( j19valid[iij19] && IKabs(cj19array[ij19]-cj19array[iij19]) < IKFAST_SOLUTION_THRESH && IKabs(sj19array[ij19]-sj19array[iij19]) < IKFAST_SOLUTION_THRESH )
{
    j19valid[iij19]=false; _ij19[1] = iij19; break; 
}
}
j19 = j19array[ij19]; cj19 = cj19array[ij19]; sj19 = sj19array[ij19];
{
IkReal evalcond[3];
IkReal x354=IKsin(j19);
IkReal x355=IKcos(j19);
IkReal x356=((py)*(x355));
IkReal x357=((px)*(x354));
evalcond[0]=((((IkReal(-1.00000000000000))*(py)*(x354)))+(((IkReal(-1.00000000000000))*(px)*(x355))));
evalcond[1]=((IkReal(0.0300000000000000))+(((IkReal(-0.0300000000000000))*(cj22)))+(((IkReal(-1.00000000000000))*(x356)))+(x357)+(((IkReal(-0.313800000000000))*(sj22))));
evalcond[2]=((IkReal(0.00847044000000000))+(((IkReal(-0.0600000000000000))*(x357)))+(((IkReal(0.600000000000000))*(pz)))+(((IkReal(-1.00000000000000))*(pp)))+(((IkReal(0.0600000000000000))*(x356))));
if( IKabs(evalcond[0]) > 0.000001  || IKabs(evalcond[1]) > 0.000001  || IKabs(evalcond[2]) > 0.000001  )
{
continue;
}
}

rotationfunction0(solutions);
}
}

}

}

} else
{
IkReal x358=((IkReal(0.0300000000000000))*(sj22));
IkReal x359=((IkReal(0.313800000000000))*(cj22));
evalcond[0]=((IkReal(-3.14159265358979))+(IKfmod(((IkReal(4.71238898038469))+(j20)), IkReal(6.28318530717959))));
evalcond[1]=((IkReal(0.190270440000000))+(((IkReal(0.186480000000000))*(cj22)))+(((IkReal(-1.00000000000000))*(pp)))+(((IkReal(-0.0368280000000000))*(sj22))));
evalcond[2]=((IkReal(0.300000000000000))+(((IkReal(-1.00000000000000))*(x358)))+(x359)+(pz));
evalcond[3]=((IkReal(-0.300000000000000))+(((IkReal(-1.00000000000000))*(x359)))+(x358)+(((IkReal(-1.00000000000000))*(pz))));
if( IKabs(evalcond[0]) < 0.0000010000000000  && IKabs(evalcond[1]) < 0.0000010000000000  && IKabs(evalcond[2]) < 0.0000010000000000  && IKabs(evalcond[3]) < 0.0000010000000000  )
{
{
IkReal dummyeval[1];
IkReal gconst16;
gconst16=IKsign((((px)*(px))+((py)*(py))));
dummyeval[0]=(((px)*(px))+((py)*(py)));
if( IKabs(dummyeval[0]) < 0.0000010000000000  )
{
{
IkReal dummyeval[1];
IkReal gconst17;
gconst17=IKsign(((((IkReal(-3.00000000000000))*((px)*(px))))+(((IkReal(-3.00000000000000))*((py)*(py))))));
dummyeval[0]=((((IkReal(-1.00000000000000))*((px)*(px))))+(((IkReal(-1.00000000000000))*((py)*(py)))));
if( IKabs(dummyeval[0]) < 0.0000010000000000  )
{
continue;

} else
{
{
IkReal j19array[1], cj19array[1], sj19array[1];
bool j19valid[1]={false};
_nj19 = 1;
IkReal x360=((IkReal(50.0000000000000))*(pp));
IkReal x361=((IkReal(30.0000000000000))*(pz));
if( IKabs(((gconst17)*(((((IkReal(0.423522000000000))*(px)))+(((IkReal(-1.00000000000000))*(px)*(x361)))+(((IkReal(-1.00000000000000))*(px)*(x360))))))) < IKFAST_ATAN2_MAGTHRESH && IKabs(((gconst17)*(((((py)*(x361)))+(((py)*(x360)))+(((IkReal(-0.423522000000000))*(py))))))) < IKFAST_ATAN2_MAGTHRESH )
    continue;
j19array[0]=IKatan2(((gconst17)*(((((IkReal(0.423522000000000))*(px)))+(((IkReal(-1.00000000000000))*(px)*(x361)))+(((IkReal(-1.00000000000000))*(px)*(x360)))))), ((gconst17)*(((((py)*(x361)))+(((py)*(x360)))+(((IkReal(-0.423522000000000))*(py)))))));
sj19array[0]=IKsin(j19array[0]);
cj19array[0]=IKcos(j19array[0]);
if( j19array[0] > IKPI )
{
    j19array[0]-=IK2PI;
}
else if( j19array[0] < -IKPI )
{    j19array[0]+=IK2PI;
}
j19valid[0] = true;
for(int ij19 = 0; ij19 < 1; ++ij19)
{
if( !j19valid[ij19] )
{
    continue;
}
_ij19[0] = ij19; _ij19[1] = -1;
for(int iij19 = ij19+1; iij19 < 1; ++iij19)
{
if( j19valid[iij19] && IKabs(cj19array[ij19]-cj19array[iij19]) < IKFAST_SOLUTION_THRESH && IKabs(sj19array[ij19]-sj19array[iij19]) < IKFAST_SOLUTION_THRESH )
{
    j19valid[iij19]=false; _ij19[1] = iij19; break; 
}
}
j19 = j19array[ij19]; cj19 = cj19array[ij19]; sj19 = sj19array[ij19];
{
IkReal evalcond[3];
IkReal x362=IKcos(j19);
IkReal x363=IKsin(j19);
IkReal x364=((py)*(x362));
IkReal x365=((px)*(x363));
evalcond[0]=((((IkReal(-1.00000000000000))*(px)*(x362)))+(((IkReal(-1.00000000000000))*(py)*(x363))));
evalcond[1]=((IkReal(0.0300000000000000))+(((IkReal(-1.00000000000000))*(x365)))+(((IkReal(-0.0300000000000000))*(cj22)))+(x364)+(((IkReal(-0.313800000000000))*(sj22))));
evalcond[2]=((IkReal(0.00847044000000000))+(((IkReal(-0.600000000000000))*(pz)))+(((IkReal(-1.00000000000000))*(pp)))+(((IkReal(0.0600000000000000))*(x365)))+(((IkReal(-0.0600000000000000))*(x364))));
if( IKabs(evalcond[0]) > 0.000001  || IKabs(evalcond[1]) > 0.000001  || IKabs(evalcond[2]) > 0.000001  )
{
continue;
}
}

rotationfunction0(solutions);
}
}

}

}

} else
{
{
IkReal j19array[1], cj19array[1], sj19array[1];
bool j19valid[1]={false};
_nj19 = 1;
IkReal x366=((IkReal(0.313800000000000))*(sj22));
IkReal x367=((IkReal(0.0300000000000000))*(px));
IkReal x368=((IkReal(0.0300000000000000))*(py));
if( IKabs(((gconst16)*(((x367)+(((IkReal(-1.00000000000000))*(cj22)*(x367)))+(((IkReal(-1.00000000000000))*(px)*(x366))))))) < IKFAST_ATAN2_MAGTHRESH && IKabs(((gconst16)*(((((IkReal(-1.00000000000000))*(x368)))+(((py)*(x366)))+(((cj22)*(x368))))))) < IKFAST_ATAN2_MAGTHRESH )
    continue;
j19array[0]=IKatan2(((gconst16)*(((x367)+(((IkReal(-1.00000000000000))*(cj22)*(x367)))+(((IkReal(-1.00000000000000))*(px)*(x366)))))), ((gconst16)*(((((IkReal(-1.00000000000000))*(x368)))+(((py)*(x366)))+(((cj22)*(x368)))))));
sj19array[0]=IKsin(j19array[0]);
cj19array[0]=IKcos(j19array[0]);
if( j19array[0] > IKPI )
{
    j19array[0]-=IK2PI;
}
else if( j19array[0] < -IKPI )
{    j19array[0]+=IK2PI;
}
j19valid[0] = true;
for(int ij19 = 0; ij19 < 1; ++ij19)
{
if( !j19valid[ij19] )
{
    continue;
}
_ij19[0] = ij19; _ij19[1] = -1;
for(int iij19 = ij19+1; iij19 < 1; ++iij19)
{
if( j19valid[iij19] && IKabs(cj19array[ij19]-cj19array[iij19]) < IKFAST_SOLUTION_THRESH && IKabs(sj19array[ij19]-sj19array[iij19]) < IKFAST_SOLUTION_THRESH )
{
    j19valid[iij19]=false; _ij19[1] = iij19; break; 
}
}
j19 = j19array[ij19]; cj19 = cj19array[ij19]; sj19 = sj19array[ij19];
{
IkReal evalcond[3];
IkReal x369=IKcos(j19);
IkReal x370=IKsin(j19);
IkReal x371=((py)*(x369));
IkReal x372=((px)*(x370));
evalcond[0]=((((IkReal(-1.00000000000000))*(px)*(x369)))+(((IkReal(-1.00000000000000))*(py)*(x370))));
evalcond[1]=((IkReal(0.0300000000000000))+(((IkReal(-1.00000000000000))*(x372)))+(((IkReal(-0.0300000000000000))*(cj22)))+(x371)+(((IkReal(-0.313800000000000))*(sj22))));
evalcond[2]=((IkReal(0.00847044000000000))+(((IkReal(-0.600000000000000))*(pz)))+(((IkReal(-1.00000000000000))*(pp)))+(((IkReal(0.0600000000000000))*(x372)))+(((IkReal(-0.0600000000000000))*(x371))));
if( IKabs(evalcond[0]) > 0.000001  || IKabs(evalcond[1]) > 0.000001  || IKabs(evalcond[2]) > 0.000001  )
{
continue;
}
}

rotationfunction0(solutions);
}
}

}

}

} else
{
IkReal x373=((IkReal(0.313800000000000))*(sj22));
IkReal x374=((IkReal(0.0300000000000000))*(cj22));
IkReal x375=((x374)+(x373));
evalcond[0]=((IkReal(-3.14159265358979))+(IKfmod(((IkReal(3.14159265358979))+(j20)), IkReal(6.28318530717959))));
evalcond[1]=((IkReal(0.190270440000000))+(((IkReal(0.186480000000000))*(cj22)))+(((IkReal(-1.00000000000000))*(pp)))+(((IkReal(-0.0368280000000000))*(sj22))));
evalcond[2]=((IkReal(-0.0300000000000000))+(x375)+(((IkReal(-1.00000000000000))*(pz))));
evalcond[3]=((IkReal(0.0300000000000000))+(((IkReal(-1.00000000000000))*(x375)))+(pz));
if( IKabs(evalcond[0]) < 0.0000010000000000  && IKabs(evalcond[1]) < 0.0000010000000000  && IKabs(evalcond[2]) < 0.0000010000000000  && IKabs(evalcond[3]) < 0.0000010000000000  )
{
{
IkReal dummyeval[1];
IkReal gconst18;
gconst18=IKsign(((((IkReal(-1.00000000000000))*((px)*(px))))+(((IkReal(-1.00000000000000))*((py)*(py))))));
dummyeval[0]=((((IkReal(-1.00000000000000))*((px)*(px))))+(((IkReal(-1.00000000000000))*((py)*(py)))));
if( IKabs(dummyeval[0]) < 0.0000010000000000  )
{
{
IkReal dummyeval[1];
IkReal gconst19;
gconst19=IKsign(((((IkReal(3.00000000000000))*((py)*(py))))+(((IkReal(3.00000000000000))*((px)*(px))))));
dummyeval[0]=(((px)*(px))+((py)*(py)));
if( IKabs(dummyeval[0]) < 0.0000010000000000  )
{
continue;

} else
{
{
IkReal j19array[1], cj19array[1], sj19array[1];
bool j19valid[1]={false};
_nj19 = 1;
IkReal x376=((IkReal(5.00000000000000))*(pp));
IkReal x377=((IkReal(0.300000000000000))*(pz));
if( IKabs(((gconst19)*(((((IkReal(0.0423522000000000))*(px)))+(((IkReal(-1.00000000000000))*(px)*(x377)))+(((IkReal(-1.00000000000000))*(px)*(x376))))))) < IKFAST_ATAN2_MAGTHRESH && IKabs(((gconst19)*(((((IkReal(-0.0423522000000000))*(py)))+(((py)*(x377)))+(((py)*(x376))))))) < IKFAST_ATAN2_MAGTHRESH )
    continue;
j19array[0]=IKatan2(((gconst19)*(((((IkReal(0.0423522000000000))*(px)))+(((IkReal(-1.00000000000000))*(px)*(x377)))+(((IkReal(-1.00000000000000))*(px)*(x376)))))), ((gconst19)*(((((IkReal(-0.0423522000000000))*(py)))+(((py)*(x377)))+(((py)*(x376)))))));
sj19array[0]=IKsin(j19array[0]);
cj19array[0]=IKcos(j19array[0]);
if( j19array[0] > IKPI )
{
    j19array[0]-=IK2PI;
}
else if( j19array[0] < -IKPI )
{    j19array[0]+=IK2PI;
}
j19valid[0] = true;
for(int ij19 = 0; ij19 < 1; ++ij19)
{
if( !j19valid[ij19] )
{
    continue;
}
_ij19[0] = ij19; _ij19[1] = -1;
for(int iij19 = ij19+1; iij19 < 1; ++iij19)
{
if( j19valid[iij19] && IKabs(cj19array[ij19]-cj19array[iij19]) < IKFAST_SOLUTION_THRESH && IKabs(sj19array[ij19]-sj19array[iij19]) < IKFAST_SOLUTION_THRESH )
{
    j19valid[iij19]=false; _ij19[1] = iij19; break; 
}
}
j19 = j19array[ij19]; cj19 = cj19array[ij19]; sj19 = sj19array[ij19];
{
IkReal evalcond[3];
IkReal x378=IKsin(j19);
IkReal x379=IKcos(j19);
IkReal x380=((px)*(x378));
IkReal x381=((py)*(x379));
evalcond[0]=((((IkReal(-1.00000000000000))*(py)*(x378)))+(((IkReal(-1.00000000000000))*(px)*(x379))));
evalcond[1]=((IkReal(0.300000000000000))+(((IkReal(0.313800000000000))*(cj22)))+(x380)+(((IkReal(-1.00000000000000))*(x381)))+(((IkReal(-0.0300000000000000))*(sj22))));
evalcond[2]=((IkReal(0.00847044000000000))+(((IkReal(-1.00000000000000))*(pp)))+(((IkReal(-0.0600000000000000))*(pz)))+(((IkReal(0.600000000000000))*(x381)))+(((IkReal(-0.600000000000000))*(x380))));
if( IKabs(evalcond[0]) > 0.000001  || IKabs(evalcond[1]) > 0.000001  || IKabs(evalcond[2]) > 0.000001  )
{
continue;
}
}

rotationfunction0(solutions);
}
}

}

}

} else
{
{
IkReal j19array[1], cj19array[1], sj19array[1];
bool j19valid[1]={false};
_nj19 = 1;
IkReal x382=((IkReal(0.313800000000000))*(cj22));
IkReal x383=((IkReal(0.0300000000000000))*(sj22));
if( IKabs(((gconst18)*(((((px)*(x382)))+(((IkReal(0.300000000000000))*(px)))+(((IkReal(-1.00000000000000))*(px)*(x383))))))) < IKFAST_ATAN2_MAGTHRESH && IKabs(((gconst18)*(((((IkReal(-1.00000000000000))*(py)*(x382)))+(((IkReal(-0.300000000000000))*(py)))+(((py)*(x383))))))) < IKFAST_ATAN2_MAGTHRESH )
    continue;
j19array[0]=IKatan2(((gconst18)*(((((px)*(x382)))+(((IkReal(0.300000000000000))*(px)))+(((IkReal(-1.00000000000000))*(px)*(x383)))))), ((gconst18)*(((((IkReal(-1.00000000000000))*(py)*(x382)))+(((IkReal(-0.300000000000000))*(py)))+(((py)*(x383)))))));
sj19array[0]=IKsin(j19array[0]);
cj19array[0]=IKcos(j19array[0]);
if( j19array[0] > IKPI )
{
    j19array[0]-=IK2PI;
}
else if( j19array[0] < -IKPI )
{    j19array[0]+=IK2PI;
}
j19valid[0] = true;
for(int ij19 = 0; ij19 < 1; ++ij19)
{
if( !j19valid[ij19] )
{
    continue;
}
_ij19[0] = ij19; _ij19[1] = -1;
for(int iij19 = ij19+1; iij19 < 1; ++iij19)
{
if( j19valid[iij19] && IKabs(cj19array[ij19]-cj19array[iij19]) < IKFAST_SOLUTION_THRESH && IKabs(sj19array[ij19]-sj19array[iij19]) < IKFAST_SOLUTION_THRESH )
{
    j19valid[iij19]=false; _ij19[1] = iij19; break; 
}
}
j19 = j19array[ij19]; cj19 = cj19array[ij19]; sj19 = sj19array[ij19];
{
IkReal evalcond[3];
IkReal x384=IKsin(j19);
IkReal x385=IKcos(j19);
IkReal x386=((px)*(x384));
IkReal x387=((py)*(x385));
evalcond[0]=((((IkReal(-1.00000000000000))*(px)*(x385)))+(((IkReal(-1.00000000000000))*(py)*(x384))));
evalcond[1]=((IkReal(0.300000000000000))+(((IkReal(0.313800000000000))*(cj22)))+(x386)+(((IkReal(-1.00000000000000))*(x387)))+(((IkReal(-0.0300000000000000))*(sj22))));
evalcond[2]=((IkReal(0.00847044000000000))+(((IkReal(-1.00000000000000))*(pp)))+(((IkReal(-0.0600000000000000))*(pz)))+(((IkReal(0.600000000000000))*(x387)))+(((IkReal(-0.600000000000000))*(x386))));
if( IKabs(evalcond[0]) > 0.000001  || IKabs(evalcond[1]) > 0.000001  || IKabs(evalcond[2]) > 0.000001  )
{
continue;
}
}

rotationfunction0(solutions);
}
}

}

}

} else
{
IkReal x388=((IkReal(0.0300000000000000))+(((IkReal(-0.0300000000000000))*(cj22)))+(((IkReal(-1.00000000000000))*(pz)))+(((IkReal(-0.313800000000000))*(sj22))));
evalcond[0]=((IkReal(-3.14159265358979))+(IKfmod(j20, IkReal(6.28318530717959))));
evalcond[1]=((IkReal(0.190270440000000))+(((IkReal(0.186480000000000))*(cj22)))+(((IkReal(-1.00000000000000))*(pp)))+(((IkReal(-0.0368280000000000))*(sj22))));
evalcond[2]=x388;
evalcond[3]=x388;
if( IKabs(evalcond[0]) < 0.0000010000000000  && IKabs(evalcond[1]) < 0.0000010000000000  && IKabs(evalcond[2]) < 0.0000010000000000  && IKabs(evalcond[3]) < 0.0000010000000000  )
{
{
IkReal dummyeval[1];
IkReal gconst20;
gconst20=IKsign((((px)*(px))+((py)*(py))));
dummyeval[0]=(((px)*(px))+((py)*(py)));
if( IKabs(dummyeval[0]) < 0.0000010000000000  )
{
{
IkReal dummyeval[1];
IkReal gconst21;
gconst21=IKsign(((((IkReal(-3.00000000000000))*((px)*(px))))+(((IkReal(-3.00000000000000))*((py)*(py))))));
dummyeval[0]=((((IkReal(-1.00000000000000))*((px)*(px))))+(((IkReal(-1.00000000000000))*((py)*(py)))));
if( IKabs(dummyeval[0]) < 0.0000010000000000  )
{
continue;

} else
{
{
IkReal j19array[1], cj19array[1], sj19array[1];
bool j19valid[1]={false};
_nj19 = 1;
IkReal x389=((IkReal(5.00000000000000))*(pp));
IkReal x390=((IkReal(0.300000000000000))*(pz));
if( IKabs(((gconst21)*(((((IkReal(0.0423522000000000))*(px)))+(((IkReal(-1.00000000000000))*(px)*(x389)))+(((px)*(x390))))))) < IKFAST_ATAN2_MAGTHRESH && IKabs(((gconst21)*(((((IkReal(-0.0423522000000000))*(py)))+(((IkReal(-1.00000000000000))*(py)*(x390)))+(((py)*(x389))))))) < IKFAST_ATAN2_MAGTHRESH )
    continue;
j19array[0]=IKatan2(((gconst21)*(((((IkReal(0.0423522000000000))*(px)))+(((IkReal(-1.00000000000000))*(px)*(x389)))+(((px)*(x390)))))), ((gconst21)*(((((IkReal(-0.0423522000000000))*(py)))+(((IkReal(-1.00000000000000))*(py)*(x390)))+(((py)*(x389)))))));
sj19array[0]=IKsin(j19array[0]);
cj19array[0]=IKcos(j19array[0]);
if( j19array[0] > IKPI )
{
    j19array[0]-=IK2PI;
}
else if( j19array[0] < -IKPI )
{    j19array[0]+=IK2PI;
}
j19valid[0] = true;
for(int ij19 = 0; ij19 < 1; ++ij19)
{
if( !j19valid[ij19] )
{
    continue;
}
_ij19[0] = ij19; _ij19[1] = -1;
for(int iij19 = ij19+1; iij19 < 1; ++iij19)
{
if( j19valid[iij19] && IKabs(cj19array[ij19]-cj19array[iij19]) < IKFAST_SOLUTION_THRESH && IKabs(sj19array[ij19]-sj19array[iij19]) < IKFAST_SOLUTION_THRESH )
{
    j19valid[iij19]=false; _ij19[1] = iij19; break; 
}
}
j19 = j19array[ij19]; cj19 = cj19array[ij19]; sj19 = sj19array[ij19];
{
IkReal evalcond[3];
IkReal x391=IKcos(j19);
IkReal x392=IKsin(j19);
IkReal x393=((px)*(x392));
IkReal x394=((py)*(x391));
evalcond[0]=((((IkReal(-1.00000000000000))*(py)*(x392)))+(((IkReal(-1.00000000000000))*(px)*(x391))));
evalcond[1]=((IkReal(0.300000000000000))+(((IkReal(0.313800000000000))*(cj22)))+(((IkReal(-1.00000000000000))*(x393)))+(x394)+(((IkReal(-0.0300000000000000))*(sj22))));
evalcond[2]=((IkReal(0.00847044000000000))+(((IkReal(0.600000000000000))*(x393)))+(((IkReal(-0.600000000000000))*(x394)))+(((IkReal(-1.00000000000000))*(pp)))+(((IkReal(0.0600000000000000))*(pz))));
if( IKabs(evalcond[0]) > 0.000001  || IKabs(evalcond[1]) > 0.000001  || IKabs(evalcond[2]) > 0.000001  )
{
continue;
}
}

rotationfunction0(solutions);
}
}

}

}

} else
{
{
IkReal j19array[1], cj19array[1], sj19array[1];
bool j19valid[1]={false};
_nj19 = 1;
IkReal x395=((IkReal(0.313800000000000))*(cj22));
IkReal x396=((IkReal(0.0300000000000000))*(sj22));
if( IKabs(((gconst20)*(((((IkReal(0.300000000000000))*(px)))+(((px)*(x395)))+(((IkReal(-1.00000000000000))*(px)*(x396))))))) < IKFAST_ATAN2_MAGTHRESH && IKabs(((gconst20)*(((((IkReal(-0.300000000000000))*(py)))+(((py)*(x396)))+(((IkReal(-1.00000000000000))*(py)*(x395))))))) < IKFAST_ATAN2_MAGTHRESH )
    continue;
j19array[0]=IKatan2(((gconst20)*(((((IkReal(0.300000000000000))*(px)))+(((px)*(x395)))+(((IkReal(-1.00000000000000))*(px)*(x396)))))), ((gconst20)*(((((IkReal(-0.300000000000000))*(py)))+(((py)*(x396)))+(((IkReal(-1.00000000000000))*(py)*(x395)))))));
sj19array[0]=IKsin(j19array[0]);
cj19array[0]=IKcos(j19array[0]);
if( j19array[0] > IKPI )
{
    j19array[0]-=IK2PI;
}
else if( j19array[0] < -IKPI )
{    j19array[0]+=IK2PI;
}
j19valid[0] = true;
for(int ij19 = 0; ij19 < 1; ++ij19)
{
if( !j19valid[ij19] )
{
    continue;
}
_ij19[0] = ij19; _ij19[1] = -1;
for(int iij19 = ij19+1; iij19 < 1; ++iij19)
{
if( j19valid[iij19] && IKabs(cj19array[ij19]-cj19array[iij19]) < IKFAST_SOLUTION_THRESH && IKabs(sj19array[ij19]-sj19array[iij19]) < IKFAST_SOLUTION_THRESH )
{
    j19valid[iij19]=false; _ij19[1] = iij19; break; 
}
}
j19 = j19array[ij19]; cj19 = cj19array[ij19]; sj19 = sj19array[ij19];
{
IkReal evalcond[3];
IkReal x397=IKcos(j19);
IkReal x398=IKsin(j19);
IkReal x399=((px)*(x398));
IkReal x400=((py)*(x397));
evalcond[0]=((((IkReal(-1.00000000000000))*(py)*(x398)))+(((IkReal(-1.00000000000000))*(px)*(x397))));
evalcond[1]=((IkReal(0.300000000000000))+(((IkReal(0.313800000000000))*(cj22)))+(((IkReal(-1.00000000000000))*(x399)))+(x400)+(((IkReal(-0.0300000000000000))*(sj22))));
evalcond[2]=((IkReal(0.00847044000000000))+(((IkReal(0.600000000000000))*(x399)))+(((IkReal(-1.00000000000000))*(pp)))+(((IkReal(-0.600000000000000))*(x400)))+(((IkReal(0.0600000000000000))*(pz))));
if( IKabs(evalcond[0]) > 0.000001  || IKabs(evalcond[1]) > 0.000001  || IKabs(evalcond[2]) > 0.000001  )
{
continue;
}
}

rotationfunction0(solutions);
}
}

}

}

} else
{
if( 1 )
{
continue;

} else
{
}
}
}
}
}
}

} else
{
{
IkReal j19array[1], cj19array[1], sj19array[1];
bool j19valid[1]={false};
_nj19 = 1;
IkReal x401=((pz)*(sj20));
IkReal x402=((IkReal(0.313800000000000))*(cj22));
IkReal x403=((IkReal(0.0300000000000000))*(sj22));
if( IKabs(((gconst13)*(((((IkReal(-0.300000000000000))*(px)))+(((IkReal(-1.00000000000000))*(px)*(x402)))+(((px)*(x403)))+(((px)*(x401))))))) < IKFAST_ATAN2_MAGTHRESH && IKabs(((gconst13)*(((((py)*(x402)))+(((IkReal(-1.00000000000000))*(py)*(x401)))+(((IkReal(0.300000000000000))*(py)))+(((IkReal(-1.00000000000000))*(py)*(x403))))))) < IKFAST_ATAN2_MAGTHRESH )
    continue;
j19array[0]=IKatan2(((gconst13)*(((((IkReal(-0.300000000000000))*(px)))+(((IkReal(-1.00000000000000))*(px)*(x402)))+(((px)*(x403)))+(((px)*(x401)))))), ((gconst13)*(((((py)*(x402)))+(((IkReal(-1.00000000000000))*(py)*(x401)))+(((IkReal(0.300000000000000))*(py)))+(((IkReal(-1.00000000000000))*(py)*(x403)))))));
sj19array[0]=IKsin(j19array[0]);
cj19array[0]=IKcos(j19array[0]);
if( j19array[0] > IKPI )
{
    j19array[0]-=IK2PI;
}
else if( j19array[0] < -IKPI )
{    j19array[0]+=IK2PI;
}
j19valid[0] = true;
for(int ij19 = 0; ij19 < 1; ++ij19)
{
if( !j19valid[ij19] )
{
    continue;
}
_ij19[0] = ij19; _ij19[1] = -1;
for(int iij19 = ij19+1; iij19 < 1; ++iij19)
{
if( j19valid[iij19] && IKabs(cj19array[ij19]-cj19array[iij19]) < IKFAST_SOLUTION_THRESH && IKabs(sj19array[ij19]-sj19array[iij19]) < IKFAST_SOLUTION_THRESH )
{
    j19valid[iij19]=false; _ij19[1] = iij19; break; 
}
}
j19 = j19array[ij19]; cj19 = cj19array[ij19]; sj19 = sj19array[ij19];
{
IkReal evalcond[5];
IkReal x404=IKsin(j19);
IkReal x405=IKcos(j19);
IkReal x406=((cj20)*(pz));
IkReal x407=((IkReal(0.0300000000000000))*(sj20));
IkReal x408=((pz)*(sj20));
IkReal x409=((IkReal(0.0600000000000000))*(sj20));
IkReal x410=((IkReal(0.0300000000000000))*(sj22));
IkReal x411=((IkReal(0.313800000000000))*(cj22));
IkReal x412=((IkReal(0.600000000000000))*(cj20));
IkReal x413=((IkReal(0.313800000000000))*(sj22));
IkReal x414=((py)*(x405));
IkReal x415=((px)*(x404));
evalcond[0]=((((IkReal(-1.00000000000000))*(py)*(x404)))+(((IkReal(-1.00000000000000))*(px)*(x405))));
evalcond[1]=((IkReal(0.300000000000000))+(((IkReal(-1.00000000000000))*(cj20)*(x414)))+(((cj20)*(x415)))+(x411)+(((IkReal(-1.00000000000000))*(x410)))+(((IkReal(-1.00000000000000))*(x408))));
evalcond[2]=((IkReal(0.0300000000000000))+(((IkReal(-0.0300000000000000))*(cj22)))+(((sj20)*(x415)))+(x406)+(((IkReal(-1.00000000000000))*(x413)))+(((IkReal(-1.00000000000000))*(sj20)*(x414))));
evalcond[3]=((((IkReal(-1.00000000000000))*(cj22)*(x407)))+(((IkReal(-1.00000000000000))*(cj20)*(x410)))+(((IkReal(-1.00000000000000))*(sj20)*(x413)))+(((cj20)*(x411)))+(x407)+(x415)+(((IkReal(0.300000000000000))*(cj20)))+(((IkReal(-1.00000000000000))*(x414))));
evalcond[4]=((IkReal(0.00847044000000000))+(((IkReal(-0.0600000000000000))*(x406)))+(((IkReal(-1.00000000000000))*(x412)*(x415)))+(((x409)*(x414)))+(((IkReal(-1.00000000000000))*(pp)))+(((x412)*(x414)))+(((IkReal(0.600000000000000))*(x408)))+(((IkReal(-1.00000000000000))*(x409)*(x415))));
if( IKabs(evalcond[0]) > 0.000001  || IKabs(evalcond[1]) > 0.000001  || IKabs(evalcond[2]) > 0.000001  || IKabs(evalcond[3]) > 0.000001  || IKabs(evalcond[4]) > 0.000001  )
{
continue;
}
}

rotationfunction0(solutions);
}
}

}

}

} else
{
{
IkReal j19array[1], cj19array[1], sj19array[1];
bool j19valid[1]={false};
_nj19 = 1;
IkReal x416=((IkReal(0.313800000000000))*(sj22));
IkReal x417=((cj20)*(pz));
IkReal x418=((IkReal(0.0300000000000000))*(px));
IkReal x419=((IkReal(0.0300000000000000))*(py));
if( IKabs(((gconst12)*(((((cj22)*(x418)))+(((px)*(x416)))+(((IkReal(-1.00000000000000))*(px)*(x417)))+(((IkReal(-1.00000000000000))*(x418))))))) < IKFAST_ATAN2_MAGTHRESH && IKabs(((gconst12)*(((((py)*(x417)))+(((IkReal(-1.00000000000000))*(cj22)*(x419)))+(x419)+(((IkReal(-1.00000000000000))*(py)*(x416))))))) < IKFAST_ATAN2_MAGTHRESH )
    continue;
j19array[0]=IKatan2(((gconst12)*(((((cj22)*(x418)))+(((px)*(x416)))+(((IkReal(-1.00000000000000))*(px)*(x417)))+(((IkReal(-1.00000000000000))*(x418)))))), ((gconst12)*(((((py)*(x417)))+(((IkReal(-1.00000000000000))*(cj22)*(x419)))+(x419)+(((IkReal(-1.00000000000000))*(py)*(x416)))))));
sj19array[0]=IKsin(j19array[0]);
cj19array[0]=IKcos(j19array[0]);
if( j19array[0] > IKPI )
{
    j19array[0]-=IK2PI;
}
else if( j19array[0] < -IKPI )
{    j19array[0]+=IK2PI;
}
j19valid[0] = true;
for(int ij19 = 0; ij19 < 1; ++ij19)
{
if( !j19valid[ij19] )
{
    continue;
}
_ij19[0] = ij19; _ij19[1] = -1;
for(int iij19 = ij19+1; iij19 < 1; ++iij19)
{
if( j19valid[iij19] && IKabs(cj19array[ij19]-cj19array[iij19]) < IKFAST_SOLUTION_THRESH && IKabs(sj19array[ij19]-sj19array[iij19]) < IKFAST_SOLUTION_THRESH )
{
    j19valid[iij19]=false; _ij19[1] = iij19; break; 
}
}
j19 = j19array[ij19]; cj19 = cj19array[ij19]; sj19 = sj19array[ij19];
{
IkReal evalcond[5];
IkReal x420=IKsin(j19);
IkReal x421=IKcos(j19);
IkReal x422=((cj20)*(pz));
IkReal x423=((IkReal(0.0300000000000000))*(sj20));
IkReal x424=((pz)*(sj20));
IkReal x425=((IkReal(0.0600000000000000))*(sj20));
IkReal x426=((IkReal(0.0300000000000000))*(sj22));
IkReal x427=((IkReal(0.313800000000000))*(cj22));
IkReal x428=((IkReal(0.600000000000000))*(cj20));
IkReal x429=((IkReal(0.313800000000000))*(sj22));
IkReal x430=((py)*(x421));
IkReal x431=((px)*(x420));
evalcond[0]=((((IkReal(-1.00000000000000))*(py)*(x420)))+(((IkReal(-1.00000000000000))*(px)*(x421))));
evalcond[1]=((IkReal(0.300000000000000))+(((IkReal(-1.00000000000000))*(x424)))+(((IkReal(-1.00000000000000))*(x426)))+(((IkReal(-1.00000000000000))*(cj20)*(x430)))+(x427)+(((cj20)*(x431))));
evalcond[2]=((IkReal(0.0300000000000000))+(((IkReal(-0.0300000000000000))*(cj22)))+(((IkReal(-1.00000000000000))*(x429)))+(x422)+(((sj20)*(x431)))+(((IkReal(-1.00000000000000))*(sj20)*(x430))));
evalcond[3]=((((IkReal(-1.00000000000000))*(x430)))+(((IkReal(-1.00000000000000))*(sj20)*(x429)))+(x423)+(x431)+(((IkReal(-1.00000000000000))*(cj20)*(x426)))+(((IkReal(-1.00000000000000))*(cj22)*(x423)))+(((IkReal(0.300000000000000))*(cj20)))+(((cj20)*(x427))));
evalcond[4]=((IkReal(0.00847044000000000))+(((x428)*(x430)))+(((x425)*(x430)))+(((IkReal(-1.00000000000000))*(pp)))+(((IkReal(0.600000000000000))*(x424)))+(((IkReal(-1.00000000000000))*(x425)*(x431)))+(((IkReal(-1.00000000000000))*(x428)*(x431)))+(((IkReal(-0.0600000000000000))*(x422))));
if( IKabs(evalcond[0]) > 0.000001  || IKabs(evalcond[1]) > 0.000001  || IKabs(evalcond[2]) > 0.000001  || IKabs(evalcond[3]) > 0.000001  || IKabs(evalcond[4]) > 0.000001  )
{
continue;
}
}

rotationfunction0(solutions);
}
}

}

}

} else
{
IkReal x432=((IkReal(0.0300000000000000))*(sj21));
evalcond[0]=((IkReal(-3.14159265358979))+(IKfmod(((IkReal(3.14159265358979))+(j20)), IkReal(6.28318530717959))));
evalcond[1]=((IkReal(0.190270440000000))+(((IkReal(0.186480000000000))*(cj22)))+(((IkReal(-1.00000000000000))*(pp)))+(((IkReal(-0.0368280000000000))*(sj22))));
evalcond[2]=((((IkReal(-1.00000000000000))*(pz)))+(x432)+(((IkReal(-1.00000000000000))*(cj22)*(x432)))+(((IkReal(-0.313800000000000))*(sj21)*(sj22))));
if( IKabs(evalcond[0]) < 0.0000010000000000  && IKabs(evalcond[1]) < 0.0000010000000000  && IKabs(evalcond[2]) < 0.0000010000000000  )
{
{
IkReal dummyeval[1];
IkReal gconst22;
gconst22=IKsign(((((sj21)*((py)*(py))))+(((sj21)*((px)*(px))))));
dummyeval[0]=((((sj21)*((py)*(py))))+(((sj21)*((px)*(px)))));
if( IKabs(dummyeval[0]) < 0.0000010000000000  )
{
{
IkReal dummyeval[1];
IkReal gconst23;
gconst23=IKsign((((px)*(px))+((py)*(py))));
dummyeval[0]=(((px)*(px))+((py)*(py)));
if( IKabs(dummyeval[0]) < 0.0000010000000000  )
{
{
IkReal evalcond[4];
IkReal x433=((IkReal(-1.00000000000000))*(pz));
evalcond[0]=((IkReal(-3.14159265358979))+(IKfmod(((IkReal(3.14159265358979))+(j21)), IkReal(6.28318530717959))));
evalcond[1]=((IkReal(0.190270440000000))+(((IkReal(0.186480000000000))*(cj22)))+(((IkReal(-1.00000000000000))*(pp)))+(((IkReal(-0.0368280000000000))*(sj22))));
evalcond[2]=x433;
evalcond[3]=x433;
if( IKabs(evalcond[0]) < 0.0000010000000000  && IKabs(evalcond[1]) < 0.0000010000000000  && IKabs(evalcond[2]) < 0.0000010000000000  && IKabs(evalcond[3]) < 0.0000010000000000  )
{
{
IkReal dummyeval[1];
IkReal gconst24;
gconst24=IKsign((((px)*(px))+((py)*(py))));
dummyeval[0]=(((px)*(px))+((py)*(py)));
if( IKabs(dummyeval[0]) < 0.0000010000000000  )
{
{
IkReal dummyeval[1];
IkReal gconst25;
gconst25=IKsign(((((IkReal(-0.0600000000000000))*((px)*(px))))+(((IkReal(-0.0600000000000000))*((py)*(py))))));
dummyeval[0]=((((IkReal(-1.00000000000000))*((px)*(px))))+(((IkReal(-1.00000000000000))*((py)*(py)))));
if( IKabs(dummyeval[0]) < 0.0000010000000000  )
{
continue;

} else
{
{
IkReal j19array[1], cj19array[1], sj19array[1];
bool j19valid[1]={false};
_nj19 = 1;
IkReal x434=((py)*(sj22));
IkReal x435=((IkReal(0.0180000000000000))*(px));
IkReal x436=((IkReal(0.188280000000000))*(cj22));
IkReal x437=((IkReal(1.00000000000000))*(pp));
IkReal x438=((IkReal(0.0188280000000000))*(cj22));
if( IKabs(((gconst25)*(((((IkReal(-0.00180000000000000))*(px)*(sj22)))+(((px)*(x438)))+(((py)*(x436)))+(x435)+(((IkReal(-0.0180000000000000))*(x434)))+(((IkReal(-1.00000000000000))*(py)*(x437)))+(((IkReal(0.188470440000000))*(py))))))) < IKFAST_ATAN2_MAGTHRESH && IKabs(((gconst25)*(((((px)*(x436)))+(((IkReal(0.00180000000000000))*(x434)))+(((IkReal(-0.0180000000000000))*(py)))+(((IkReal(-1.00000000000000))*(sj22)*(x435)))+(((IkReal(-1.00000000000000))*(py)*(x438)))+(((IkReal(0.188470440000000))*(px)))+(((IkReal(-1.00000000000000))*(px)*(x437))))))) < IKFAST_ATAN2_MAGTHRESH )
    continue;
j19array[0]=IKatan2(((gconst25)*(((((IkReal(-0.00180000000000000))*(px)*(sj22)))+(((px)*(x438)))+(((py)*(x436)))+(x435)+(((IkReal(-0.0180000000000000))*(x434)))+(((IkReal(-1.00000000000000))*(py)*(x437)))+(((IkReal(0.188470440000000))*(py)))))), ((gconst25)*(((((px)*(x436)))+(((IkReal(0.00180000000000000))*(x434)))+(((IkReal(-0.0180000000000000))*(py)))+(((IkReal(-1.00000000000000))*(sj22)*(x435)))+(((IkReal(-1.00000000000000))*(py)*(x438)))+(((IkReal(0.188470440000000))*(px)))+(((IkReal(-1.00000000000000))*(px)*(x437)))))));
sj19array[0]=IKsin(j19array[0]);
cj19array[0]=IKcos(j19array[0]);
if( j19array[0] > IKPI )
{
    j19array[0]-=IK2PI;
}
else if( j19array[0] < -IKPI )
{    j19array[0]+=IK2PI;
}
j19valid[0] = true;
for(int ij19 = 0; ij19 < 1; ++ij19)
{
if( !j19valid[ij19] )
{
    continue;
}
_ij19[0] = ij19; _ij19[1] = -1;
for(int iij19 = ij19+1; iij19 < 1; ++iij19)
{
if( j19valid[iij19] && IKabs(cj19array[ij19]-cj19array[iij19]) < IKFAST_SOLUTION_THRESH && IKabs(sj19array[ij19]-sj19array[iij19]) < IKFAST_SOLUTION_THRESH )
{
    j19valid[iij19]=false; _ij19[1] = iij19; break; 
}
}
j19 = j19array[ij19]; cj19 = cj19array[ij19]; sj19 = sj19array[ij19];
{
IkReal evalcond[3];
IkReal x439=IKsin(j19);
IkReal x440=IKcos(j19);
IkReal x441=((px)*(x439));
IkReal x442=((py)*(x439));
IkReal x443=((px)*(x440));
IkReal x444=((py)*(x440));
evalcond[0]=((IkReal(0.0300000000000000))+(((IkReal(-0.0300000000000000))*(cj22)))+(((IkReal(-1.00000000000000))*(x443)))+(((IkReal(-1.00000000000000))*(x442)))+(((IkReal(-0.313800000000000))*(sj22))));
evalcond[1]=((IkReal(0.300000000000000))+(((IkReal(0.313800000000000))*(cj22)))+(((IkReal(-1.00000000000000))*(x444)))+(x441)+(((IkReal(-0.0300000000000000))*(sj22))));
evalcond[2]=((IkReal(0.00847044000000000))+(((IkReal(-0.600000000000000))*(x441)))+(((IkReal(-1.00000000000000))*(pp)))+(((IkReal(0.0600000000000000))*(x443)))+(((IkReal(0.0600000000000000))*(x442)))+(((IkReal(0.600000000000000))*(x444))));
if( IKabs(evalcond[0]) > 0.000001  || IKabs(evalcond[1]) > 0.000001  || IKabs(evalcond[2]) > 0.000001  )
{
continue;
}
}

rotationfunction0(solutions);
}
}

}

}

} else
{
{
IkReal j19array[1], cj19array[1], sj19array[1];
bool j19valid[1]={false};
_nj19 = 1;
IkReal x445=((IkReal(0.313800000000000))*(px));
IkReal x446=((IkReal(0.313800000000000))*(py));
IkReal x447=((IkReal(0.0300000000000000))*(px));
IkReal x448=((IkReal(0.0300000000000000))*(py));
if( IKabs(((gconst24)*(((((IkReal(-0.300000000000000))*(px)))+(((sj22)*(x447)))+(x448)+(((IkReal(-1.00000000000000))*(sj22)*(x446)))+(((IkReal(-1.00000000000000))*(cj22)*(x445)))+(((IkReal(-1.00000000000000))*(cj22)*(x448))))))) < IKFAST_ATAN2_MAGTHRESH && IKabs(((gconst24)*(((((cj22)*(x446)))+(((IkReal(0.300000000000000))*(py)))+(x447)+(((IkReal(-1.00000000000000))*(sj22)*(x445)))+(((IkReal(-1.00000000000000))*(sj22)*(x448)))+(((IkReal(-1.00000000000000))*(cj22)*(x447))))))) < IKFAST_ATAN2_MAGTHRESH )
    continue;
j19array[0]=IKatan2(((gconst24)*(((((IkReal(-0.300000000000000))*(px)))+(((sj22)*(x447)))+(x448)+(((IkReal(-1.00000000000000))*(sj22)*(x446)))+(((IkReal(-1.00000000000000))*(cj22)*(x445)))+(((IkReal(-1.00000000000000))*(cj22)*(x448)))))), ((gconst24)*(((((cj22)*(x446)))+(((IkReal(0.300000000000000))*(py)))+(x447)+(((IkReal(-1.00000000000000))*(sj22)*(x445)))+(((IkReal(-1.00000000000000))*(sj22)*(x448)))+(((IkReal(-1.00000000000000))*(cj22)*(x447)))))));
sj19array[0]=IKsin(j19array[0]);
cj19array[0]=IKcos(j19array[0]);
if( j19array[0] > IKPI )
{
    j19array[0]-=IK2PI;
}
else if( j19array[0] < -IKPI )
{    j19array[0]+=IK2PI;
}
j19valid[0] = true;
for(int ij19 = 0; ij19 < 1; ++ij19)
{
if( !j19valid[ij19] )
{
    continue;
}
_ij19[0] = ij19; _ij19[1] = -1;
for(int iij19 = ij19+1; iij19 < 1; ++iij19)
{
if( j19valid[iij19] && IKabs(cj19array[ij19]-cj19array[iij19]) < IKFAST_SOLUTION_THRESH && IKabs(sj19array[ij19]-sj19array[iij19]) < IKFAST_SOLUTION_THRESH )
{
    j19valid[iij19]=false; _ij19[1] = iij19; break; 
}
}
j19 = j19array[ij19]; cj19 = cj19array[ij19]; sj19 = sj19array[ij19];
{
IkReal evalcond[3];
IkReal x449=IKsin(j19);
IkReal x450=IKcos(j19);
IkReal x451=((px)*(x449));
IkReal x452=((py)*(x449));
IkReal x453=((px)*(x450));
IkReal x454=((py)*(x450));
evalcond[0]=((IkReal(0.0300000000000000))+(((IkReal(-0.0300000000000000))*(cj22)))+(((IkReal(-1.00000000000000))*(x452)))+(((IkReal(-1.00000000000000))*(x453)))+(((IkReal(-0.313800000000000))*(sj22))));
evalcond[1]=((IkReal(0.300000000000000))+(((IkReal(0.313800000000000))*(cj22)))+(((IkReal(-1.00000000000000))*(x454)))+(x451)+(((IkReal(-0.0300000000000000))*(sj22))));
evalcond[2]=((IkReal(0.00847044000000000))+(((IkReal(-0.600000000000000))*(x451)))+(((IkReal(0.600000000000000))*(x454)))+(((IkReal(-1.00000000000000))*(pp)))+(((IkReal(0.0600000000000000))*(x452)))+(((IkReal(0.0600000000000000))*(x453))));
if( IKabs(evalcond[0]) > 0.000001  || IKabs(evalcond[1]) > 0.000001  || IKabs(evalcond[2]) > 0.000001  )
{
continue;
}
}

rotationfunction0(solutions);
}
}

}

}

} else
{
evalcond[0]=((IkReal(-3.14159265358979))+(IKfmod(j21, IkReal(6.28318530717959))));
evalcond[1]=((IkReal(0.190270440000000))+(((IkReal(0.186480000000000))*(cj22)))+(((IkReal(-1.00000000000000))*(pp)))+(((IkReal(-0.0368280000000000))*(sj22))));
evalcond[2]=pz;
evalcond[3]=((IkReal(-1.00000000000000))*(pz));
if( IKabs(evalcond[0]) < 0.0000010000000000  && IKabs(evalcond[1]) < 0.0000010000000000  && IKabs(evalcond[2]) < 0.0000010000000000  && IKabs(evalcond[3]) < 0.0000010000000000  )
{
{
IkReal dummyeval[1];
IkReal gconst26;
gconst26=IKsign((((px)*(px))+((py)*(py))));
dummyeval[0]=(((px)*(px))+((py)*(py)));
if( IKabs(dummyeval[0]) < 0.0000010000000000  )
{
{
IkReal dummyeval[1];
IkReal gconst27;
gconst27=IKsign(((((IkReal(0.0600000000000000))*((py)*(py))))+(((IkReal(0.0600000000000000))*((px)*(px))))));
dummyeval[0]=(((px)*(px))+((py)*(py)));
if( IKabs(dummyeval[0]) < 0.0000010000000000  )
{
continue;

} else
{
{
IkReal j19array[1], cj19array[1], sj19array[1];
bool j19valid[1]={false};
_nj19 = 1;
IkReal x455=((py)*(sj22));
IkReal x456=((IkReal(0.0180000000000000))*(px));
IkReal x457=((IkReal(1.00000000000000))*(pp));
IkReal x458=((cj22)*(py));
IkReal x459=((cj22)*(px));
if( IKabs(((gconst27)*(((((IkReal(-0.0180000000000000))*(x455)))+(((IkReal(-1.00000000000000))*(x456)))+(((IkReal(-1.00000000000000))*(py)*(x457)))+(((IkReal(-0.0188280000000000))*(x459)))+(((IkReal(0.188280000000000))*(x458)))+(((IkReal(0.188470440000000))*(py)))+(((IkReal(0.00180000000000000))*(px)*(sj22))))))) < IKFAST_ATAN2_MAGTHRESH && IKabs(((gconst27)*(((((IkReal(0.0180000000000000))*(py)))+(((IkReal(-1.00000000000000))*(sj22)*(x456)))+(((IkReal(-0.00180000000000000))*(x455)))+(((IkReal(0.188280000000000))*(x459)))+(((IkReal(0.0188280000000000))*(x458)))+(((IkReal(0.188470440000000))*(px)))+(((IkReal(-1.00000000000000))*(px)*(x457))))))) < IKFAST_ATAN2_MAGTHRESH )
    continue;
j19array[0]=IKatan2(((gconst27)*(((((IkReal(-0.0180000000000000))*(x455)))+(((IkReal(-1.00000000000000))*(x456)))+(((IkReal(-1.00000000000000))*(py)*(x457)))+(((IkReal(-0.0188280000000000))*(x459)))+(((IkReal(0.188280000000000))*(x458)))+(((IkReal(0.188470440000000))*(py)))+(((IkReal(0.00180000000000000))*(px)*(sj22)))))), ((gconst27)*(((((IkReal(0.0180000000000000))*(py)))+(((IkReal(-1.00000000000000))*(sj22)*(x456)))+(((IkReal(-0.00180000000000000))*(x455)))+(((IkReal(0.188280000000000))*(x459)))+(((IkReal(0.0188280000000000))*(x458)))+(((IkReal(0.188470440000000))*(px)))+(((IkReal(-1.00000000000000))*(px)*(x457)))))));
sj19array[0]=IKsin(j19array[0]);
cj19array[0]=IKcos(j19array[0]);
if( j19array[0] > IKPI )
{
    j19array[0]-=IK2PI;
}
else if( j19array[0] < -IKPI )
{    j19array[0]+=IK2PI;
}
j19valid[0] = true;
for(int ij19 = 0; ij19 < 1; ++ij19)
{
if( !j19valid[ij19] )
{
    continue;
}
_ij19[0] = ij19; _ij19[1] = -1;
for(int iij19 = ij19+1; iij19 < 1; ++iij19)
{
if( j19valid[iij19] && IKabs(cj19array[ij19]-cj19array[iij19]) < IKFAST_SOLUTION_THRESH && IKabs(sj19array[ij19]-sj19array[iij19]) < IKFAST_SOLUTION_THRESH )
{
    j19valid[iij19]=false; _ij19[1] = iij19; break; 
}
}
j19 = j19array[ij19]; cj19 = cj19array[ij19]; sj19 = sj19array[ij19];
{
IkReal evalcond[3];
IkReal x460=IKsin(j19);
IkReal x461=IKcos(j19);
IkReal x462=((px)*(x460));
IkReal x463=((py)*(x460));
IkReal x464=((px)*(x461));
IkReal x465=((py)*(x461));
evalcond[0]=((IkReal(-0.0300000000000000))+(((IkReal(-1.00000000000000))*(x464)))+(((IkReal(-1.00000000000000))*(x463)))+(((IkReal(0.313800000000000))*(sj22)))+(((IkReal(0.0300000000000000))*(cj22))));
evalcond[1]=((IkReal(0.300000000000000))+(((IkReal(0.313800000000000))*(cj22)))+(((IkReal(-1.00000000000000))*(x465)))+(x462)+(((IkReal(-0.0300000000000000))*(sj22))));
evalcond[2]=((IkReal(0.00847044000000000))+(((IkReal(-0.600000000000000))*(x462)))+(((IkReal(0.600000000000000))*(x465)))+(((IkReal(-1.00000000000000))*(pp)))+(((IkReal(-0.0600000000000000))*(x463)))+(((IkReal(-0.0600000000000000))*(x464))));
if( IKabs(evalcond[0]) > 0.000001  || IKabs(evalcond[1]) > 0.000001  || IKabs(evalcond[2]) > 0.000001  )
{
continue;
}
}

rotationfunction0(solutions);
}
}

}

}

} else
{
{
IkReal j19array[1], cj19array[1], sj19array[1];
bool j19valid[1]={false};
_nj19 = 1;
IkReal x466=((IkReal(0.313800000000000))*(px));
IkReal x467=((IkReal(0.313800000000000))*(py));
IkReal x468=((IkReal(0.0300000000000000))*(px));
IkReal x469=((IkReal(0.0300000000000000))*(py));
if( IKabs(((gconst26)*(((((cj22)*(x469)))+(((IkReal(-0.300000000000000))*(px)))+(((sj22)*(x467)))+(((sj22)*(x468)))+(((IkReal(-1.00000000000000))*(x469)))+(((IkReal(-1.00000000000000))*(cj22)*(x466))))))) < IKFAST_ATAN2_MAGTHRESH && IKabs(((gconst26)*(((((cj22)*(x468)))+(((cj22)*(x467)))+(((IkReal(-1.00000000000000))*(sj22)*(x469)))+(((sj22)*(x466)))+(((IkReal(0.300000000000000))*(py)))+(((IkReal(-1.00000000000000))*(x468))))))) < IKFAST_ATAN2_MAGTHRESH )
    continue;
j19array[0]=IKatan2(((gconst26)*(((((cj22)*(x469)))+(((IkReal(-0.300000000000000))*(px)))+(((sj22)*(x467)))+(((sj22)*(x468)))+(((IkReal(-1.00000000000000))*(x469)))+(((IkReal(-1.00000000000000))*(cj22)*(x466)))))), ((gconst26)*(((((cj22)*(x468)))+(((cj22)*(x467)))+(((IkReal(-1.00000000000000))*(sj22)*(x469)))+(((sj22)*(x466)))+(((IkReal(0.300000000000000))*(py)))+(((IkReal(-1.00000000000000))*(x468)))))));
sj19array[0]=IKsin(j19array[0]);
cj19array[0]=IKcos(j19array[0]);
if( j19array[0] > IKPI )
{
    j19array[0]-=IK2PI;
}
else if( j19array[0] < -IKPI )
{    j19array[0]+=IK2PI;
}
j19valid[0] = true;
for(int ij19 = 0; ij19 < 1; ++ij19)
{
if( !j19valid[ij19] )
{
    continue;
}
_ij19[0] = ij19; _ij19[1] = -1;
for(int iij19 = ij19+1; iij19 < 1; ++iij19)
{
if( j19valid[iij19] && IKabs(cj19array[ij19]-cj19array[iij19]) < IKFAST_SOLUTION_THRESH && IKabs(sj19array[ij19]-sj19array[iij19]) < IKFAST_SOLUTION_THRESH )
{
    j19valid[iij19]=false; _ij19[1] = iij19; break; 
}
}
j19 = j19array[ij19]; cj19 = cj19array[ij19]; sj19 = sj19array[ij19];
{
IkReal evalcond[3];
IkReal x470=IKsin(j19);
IkReal x471=IKcos(j19);
IkReal x472=((px)*(x470));
IkReal x473=((py)*(x470));
IkReal x474=((px)*(x471));
IkReal x475=((py)*(x471));
evalcond[0]=((IkReal(-0.0300000000000000))+(((IkReal(-1.00000000000000))*(x473)))+(((IkReal(-1.00000000000000))*(x474)))+(((IkReal(0.313800000000000))*(sj22)))+(((IkReal(0.0300000000000000))*(cj22))));
evalcond[1]=((IkReal(0.300000000000000))+(((IkReal(0.313800000000000))*(cj22)))+(((IkReal(-1.00000000000000))*(x475)))+(x472)+(((IkReal(-0.0300000000000000))*(sj22))));
evalcond[2]=((IkReal(0.00847044000000000))+(((IkReal(-0.600000000000000))*(x472)))+(((IkReal(0.600000000000000))*(x475)))+(((IkReal(-0.0600000000000000))*(x474)))+(((IkReal(-0.0600000000000000))*(x473)))+(((IkReal(-1.00000000000000))*(pp))));
if( IKabs(evalcond[0]) > 0.000001  || IKabs(evalcond[1]) > 0.000001  || IKabs(evalcond[2]) > 0.000001  )
{
continue;
}
}

rotationfunction0(solutions);
}
}

}

}

} else
{
if( 1 )
{
continue;

} else
{
}
}
}
}

} else
{
{
IkReal j19array[1], cj19array[1], sj19array[1];
bool j19valid[1]={false};
_nj19 = 1;
IkReal x476=((IkReal(0.0300000000000000))*(cj21));
IkReal x477=((cj22)*(py));
IkReal x478=((cj22)*(px));
IkReal x479=((px)*(sj22));
IkReal x480=((IkReal(0.313800000000000))*(cj21));
IkReal x481=((py)*(sj22));
if( IKabs(((gconst23)*(((((IkReal(-0.300000000000000))*(px)))+(((IkReal(-1.00000000000000))*(x476)*(x477)))+(((IkReal(0.0300000000000000))*(x479)))+(((IkReal(-0.313800000000000))*(x478)))+(((IkReal(-1.00000000000000))*(x480)*(x481)))+(((py)*(x476))))))) < IKFAST_ATAN2_MAGTHRESH && IKabs(((gconst23)*(((((IkReal(0.313800000000000))*(x477)))+(((IkReal(0.300000000000000))*(py)))+(((IkReal(-1.00000000000000))*(x476)*(x478)))+(((IkReal(-1.00000000000000))*(x479)*(x480)))+(((px)*(x476)))+(((IkReal(-0.0300000000000000))*(x481))))))) < IKFAST_ATAN2_MAGTHRESH )
    continue;
j19array[0]=IKatan2(((gconst23)*(((((IkReal(-0.300000000000000))*(px)))+(((IkReal(-1.00000000000000))*(x476)*(x477)))+(((IkReal(0.0300000000000000))*(x479)))+(((IkReal(-0.313800000000000))*(x478)))+(((IkReal(-1.00000000000000))*(x480)*(x481)))+(((py)*(x476)))))), ((gconst23)*(((((IkReal(0.313800000000000))*(x477)))+(((IkReal(0.300000000000000))*(py)))+(((IkReal(-1.00000000000000))*(x476)*(x478)))+(((IkReal(-1.00000000000000))*(x479)*(x480)))+(((px)*(x476)))+(((IkReal(-0.0300000000000000))*(x481)))))));
sj19array[0]=IKsin(j19array[0]);
cj19array[0]=IKcos(j19array[0]);
if( j19array[0] > IKPI )
{
    j19array[0]-=IK2PI;
}
else if( j19array[0] < -IKPI )
{    j19array[0]+=IK2PI;
}
j19valid[0] = true;
for(int ij19 = 0; ij19 < 1; ++ij19)
{
if( !j19valid[ij19] )
{
    continue;
}
_ij19[0] = ij19; _ij19[1] = -1;
for(int iij19 = ij19+1; iij19 < 1; ++iij19)
{
if( j19valid[iij19] && IKabs(cj19array[ij19]-cj19array[iij19]) < IKFAST_SOLUTION_THRESH && IKabs(sj19array[ij19]-sj19array[iij19]) < IKFAST_SOLUTION_THRESH )
{
    j19valid[iij19]=false; _ij19[1] = iij19; break; 
}
}
j19 = j19array[ij19]; cj19 = cj19array[ij19]; sj19 = sj19array[ij19];
{
IkReal evalcond[5];
IkReal x482=IKsin(j19);
IkReal x483=IKcos(j19);
IkReal x484=((IkReal(0.0300000000000000))*(cj21));
IkReal x485=((pz)*(sj21));
IkReal x486=((IkReal(1.00000000000000))*(cj21));
IkReal x487=((IkReal(0.313800000000000))*(sj22));
IkReal x488=((py)*(x483));
IkReal x489=((px)*(x483));
IkReal x490=((px)*(x482));
IkReal x491=((py)*(x482));
IkReal x492=((cj21)*(x491));
evalcond[0]=((((IkReal(-1.00000000000000))*(cj21)*(x487)))+(((IkReal(-1.00000000000000))*(x489)))+(((IkReal(-1.00000000000000))*(x491)))+(x484)+(((IkReal(-1.00000000000000))*(cj22)*(x484))));
evalcond[1]=((IkReal(0.300000000000000))+(((IkReal(0.313800000000000))*(cj22)))+(((IkReal(-1.00000000000000))*(x488)))+(x490)+(((IkReal(-0.0300000000000000))*(sj22))));
evalcond[2]=((((IkReal(-1.00000000000000))*(pz)*(x486)))+(((sj21)*(x489)))+(((sj21)*(x491))));
evalcond[3]=((IkReal(0.0300000000000000))+(((IkReal(-1.00000000000000))*(x486)*(x489)))+(((IkReal(-0.0300000000000000))*(cj22)))+(((IkReal(-1.00000000000000))*(x487)))+(((IkReal(-1.00000000000000))*(x486)*(x491)))+(((IkReal(-1.00000000000000))*(x485))));
evalcond[4]=((IkReal(0.00847044000000000))+(((IkReal(-0.600000000000000))*(x490)))+(((IkReal(0.0600000000000000))*(x485)))+(((IkReal(0.0600000000000000))*(cj21)*(x489)))+(((IkReal(0.0600000000000000))*(x492)))+(((IkReal(-1.00000000000000))*(pp)))+(((IkReal(0.600000000000000))*(x488))));
if( IKabs(evalcond[0]) > 0.000001  || IKabs(evalcond[1]) > 0.000001  || IKabs(evalcond[2]) > 0.000001  || IKabs(evalcond[3]) > 0.000001  || IKabs(evalcond[4]) > 0.000001  )
{
continue;
}
}

rotationfunction0(solutions);
}
}

}

}

} else
{
{
IkReal j19array[1], cj19array[1], sj19array[1];
bool j19valid[1]={false};
_nj19 = 1;
IkReal x493=((px)*(sj21));
IkReal x494=((IkReal(0.313800000000000))*(cj22));
IkReal x495=((cj21)*(pz));
IkReal x496=((py)*(sj21));
IkReal x497=((IkReal(0.0300000000000000))*(sj22));
if( IKabs(((gconst22)*(((((py)*(x495)))+(((x493)*(x497)))+(((IkReal(-1.00000000000000))*(x493)*(x494)))+(((IkReal(-0.300000000000000))*(x493))))))) < IKFAST_ATAN2_MAGTHRESH && IKabs(((gconst22)*(((((IkReal(-1.00000000000000))*(x496)*(x497)))+(((x494)*(x496)))+(((px)*(x495)))+(((IkReal(0.300000000000000))*(x496))))))) < IKFAST_ATAN2_MAGTHRESH )
    continue;
j19array[0]=IKatan2(((gconst22)*(((((py)*(x495)))+(((x493)*(x497)))+(((IkReal(-1.00000000000000))*(x493)*(x494)))+(((IkReal(-0.300000000000000))*(x493)))))), ((gconst22)*(((((IkReal(-1.00000000000000))*(x496)*(x497)))+(((x494)*(x496)))+(((px)*(x495)))+(((IkReal(0.300000000000000))*(x496)))))));
sj19array[0]=IKsin(j19array[0]);
cj19array[0]=IKcos(j19array[0]);
if( j19array[0] > IKPI )
{
    j19array[0]-=IK2PI;
}
else if( j19array[0] < -IKPI )
{    j19array[0]+=IK2PI;
}
j19valid[0] = true;
for(int ij19 = 0; ij19 < 1; ++ij19)
{
if( !j19valid[ij19] )
{
    continue;
}
_ij19[0] = ij19; _ij19[1] = -1;
for(int iij19 = ij19+1; iij19 < 1; ++iij19)
{
if( j19valid[iij19] && IKabs(cj19array[ij19]-cj19array[iij19]) < IKFAST_SOLUTION_THRESH && IKabs(sj19array[ij19]-sj19array[iij19]) < IKFAST_SOLUTION_THRESH )
{
    j19valid[iij19]=false; _ij19[1] = iij19; break; 
}
}
j19 = j19array[ij19]; cj19 = cj19array[ij19]; sj19 = sj19array[ij19];
{
IkReal evalcond[5];
IkReal x498=IKsin(j19);
IkReal x499=IKcos(j19);
IkReal x500=((IkReal(0.0300000000000000))*(cj21));
IkReal x501=((pz)*(sj21));
IkReal x502=((IkReal(1.00000000000000))*(cj21));
IkReal x503=((IkReal(0.313800000000000))*(sj22));
IkReal x504=((py)*(x499));
IkReal x505=((px)*(x499));
IkReal x506=((px)*(x498));
IkReal x507=((py)*(x498));
IkReal x508=((cj21)*(x507));
evalcond[0]=((((IkReal(-1.00000000000000))*(cj21)*(x503)))+(x500)+(((IkReal(-1.00000000000000))*(x505)))+(((IkReal(-1.00000000000000))*(x507)))+(((IkReal(-1.00000000000000))*(cj22)*(x500))));
evalcond[1]=((IkReal(0.300000000000000))+(((IkReal(0.313800000000000))*(cj22)))+(x506)+(((IkReal(-0.0300000000000000))*(sj22)))+(((IkReal(-1.00000000000000))*(x504))));
evalcond[2]=((((IkReal(-1.00000000000000))*(pz)*(x502)))+(((sj21)*(x505)))+(((sj21)*(x507))));
evalcond[3]=((IkReal(0.0300000000000000))+(((IkReal(-0.0300000000000000))*(cj22)))+(((IkReal(-1.00000000000000))*(x503)))+(((IkReal(-1.00000000000000))*(x502)*(x507)))+(((IkReal(-1.00000000000000))*(x502)*(x505)))+(((IkReal(-1.00000000000000))*(x501))));
evalcond[4]=((IkReal(0.00847044000000000))+(((IkReal(-0.600000000000000))*(x506)))+(((IkReal(-1.00000000000000))*(pp)))+(((IkReal(0.600000000000000))*(x504)))+(((IkReal(0.0600000000000000))*(x501)))+(((IkReal(0.0600000000000000))*(x508)))+(((IkReal(0.0600000000000000))*(cj21)*(x505))));
if( IKabs(evalcond[0]) > 0.000001  || IKabs(evalcond[1]) > 0.000001  || IKabs(evalcond[2]) > 0.000001  || IKabs(evalcond[3]) > 0.000001  || IKabs(evalcond[4]) > 0.000001  )
{
continue;
}
}

rotationfunction0(solutions);
}
}

}

}

} else
{
IkReal x509=((IkReal(0.0300000000000000))*(sj21));
evalcond[0]=((IkReal(-3.14159265358979))+(IKfmod(j20, IkReal(6.28318530717959))));
evalcond[1]=((IkReal(0.190270440000000))+(((IkReal(0.186480000000000))*(cj22)))+(((IkReal(-1.00000000000000))*(pp)))+(((IkReal(-0.0368280000000000))*(sj22))));
evalcond[2]=((((cj22)*(x509)))+(((IkReal(-1.00000000000000))*(x509)))+(((IkReal(-1.00000000000000))*(pz)))+(((IkReal(0.313800000000000))*(sj21)*(sj22))));
if( IKabs(evalcond[0]) < 0.0000010000000000  && IKabs(evalcond[1]) < 0.0000010000000000  && IKabs(evalcond[2]) < 0.0000010000000000  )
{
{
IkReal dummyeval[1];
IkReal gconst28;
gconst28=IKsign(((((sj21)*((py)*(py))))+(((sj21)*((px)*(px))))));
dummyeval[0]=((((sj21)*((py)*(py))))+(((sj21)*((px)*(px)))));
if( IKabs(dummyeval[0]) < 0.0000010000000000  )
{
{
IkReal dummyeval[1];
IkReal gconst29;
gconst29=IKsign((((px)*(px))+((py)*(py))));
dummyeval[0]=(((px)*(px))+((py)*(py)));
if( IKabs(dummyeval[0]) < 0.0000010000000000  )
{
{
IkReal evalcond[4];
evalcond[0]=((IkReal(-3.14159265358979))+(IKfmod(((IkReal(3.14159265358979))+(j21)), IkReal(6.28318530717959))));
evalcond[1]=((IkReal(0.190270440000000))+(((IkReal(0.186480000000000))*(cj22)))+(((IkReal(-1.00000000000000))*(pp)))+(((IkReal(-0.0368280000000000))*(sj22))));
evalcond[2]=pz;
evalcond[3]=((IkReal(-1.00000000000000))*(pz));
if( IKabs(evalcond[0]) < 0.0000010000000000  && IKabs(evalcond[1]) < 0.0000010000000000  && IKabs(evalcond[2]) < 0.0000010000000000  && IKabs(evalcond[3]) < 0.0000010000000000  )
{
{
IkReal dummyeval[1];
IkReal gconst30;
gconst30=IKsign((((px)*(px))+((py)*(py))));
dummyeval[0]=(((px)*(px))+((py)*(py)));
if( IKabs(dummyeval[0]) < 0.0000010000000000  )
{
{
IkReal dummyeval[1];
IkReal gconst31;
gconst31=IKsign(((((IkReal(0.0600000000000000))*((py)*(py))))+(((IkReal(0.0600000000000000))*((px)*(px))))));
dummyeval[0]=(((px)*(px))+((py)*(py)));
if( IKabs(dummyeval[0]) < 0.0000010000000000  )
{
continue;

} else
{
{
IkReal j19array[1], cj19array[1], sj19array[1];
bool j19valid[1]={false};
_nj19 = 1;
IkReal x510=((py)*(sj22));
IkReal x511=((IkReal(0.0180000000000000))*(px));
IkReal x512=((cj22)*(py));
IkReal x513=((cj22)*(px));
if( IKabs(((gconst31)*(((((IkReal(0.0188280000000000))*(x513)))+(((IkReal(-0.00180000000000000))*(px)*(sj22)))+(((IkReal(-0.188280000000000))*(x512)))+(x511)+(((IkReal(0.0180000000000000))*(x510)))+(((pp)*(py)))+(((IkReal(-0.188470440000000))*(py))))))) < IKFAST_ATAN2_MAGTHRESH && IKabs(((gconst31)*(((((IkReal(-0.188280000000000))*(x513)))+(((sj22)*(x511)))+(((IkReal(-0.0188280000000000))*(x512)))+(((IkReal(-0.0180000000000000))*(py)))+(((IkReal(0.00180000000000000))*(x510)))+(((pp)*(px)))+(((IkReal(-0.188470440000000))*(px))))))) < IKFAST_ATAN2_MAGTHRESH )
    continue;
j19array[0]=IKatan2(((gconst31)*(((((IkReal(0.0188280000000000))*(x513)))+(((IkReal(-0.00180000000000000))*(px)*(sj22)))+(((IkReal(-0.188280000000000))*(x512)))+(x511)+(((IkReal(0.0180000000000000))*(x510)))+(((pp)*(py)))+(((IkReal(-0.188470440000000))*(py)))))), ((gconst31)*(((((IkReal(-0.188280000000000))*(x513)))+(((sj22)*(x511)))+(((IkReal(-0.0188280000000000))*(x512)))+(((IkReal(-0.0180000000000000))*(py)))+(((IkReal(0.00180000000000000))*(x510)))+(((pp)*(px)))+(((IkReal(-0.188470440000000))*(px)))))));
sj19array[0]=IKsin(j19array[0]);
cj19array[0]=IKcos(j19array[0]);
if( j19array[0] > IKPI )
{
    j19array[0]-=IK2PI;
}
else if( j19array[0] < -IKPI )
{    j19array[0]+=IK2PI;
}
j19valid[0] = true;
for(int ij19 = 0; ij19 < 1; ++ij19)
{
if( !j19valid[ij19] )
{
    continue;
}
_ij19[0] = ij19; _ij19[1] = -1;
for(int iij19 = ij19+1; iij19 < 1; ++iij19)
{
if( j19valid[iij19] && IKabs(cj19array[ij19]-cj19array[iij19]) < IKFAST_SOLUTION_THRESH && IKabs(sj19array[ij19]-sj19array[iij19]) < IKFAST_SOLUTION_THRESH )
{
    j19valid[iij19]=false; _ij19[1] = iij19; break; 
}
}
j19 = j19array[ij19]; cj19 = cj19array[ij19]; sj19 = sj19array[ij19];
{
IkReal evalcond[3];
IkReal x514=IKcos(j19);
IkReal x515=IKsin(j19);
IkReal x516=((px)*(x515));
IkReal x517=((py)*(x515));
IkReal x518=((py)*(x514));
IkReal x519=((px)*(x514));
evalcond[0]=((IkReal(0.0300000000000000))+(((IkReal(-0.0300000000000000))*(cj22)))+(((IkReal(-1.00000000000000))*(x519)))+(((IkReal(-1.00000000000000))*(x517)))+(((IkReal(-0.313800000000000))*(sj22))));
evalcond[1]=((IkReal(0.300000000000000))+(((IkReal(0.313800000000000))*(cj22)))+(((IkReal(-1.00000000000000))*(x516)))+(x518)+(((IkReal(-0.0300000000000000))*(sj22))));
evalcond[2]=((IkReal(0.00847044000000000))+(((IkReal(0.600000000000000))*(x516)))+(((IkReal(0.0600000000000000))*(x519)))+(((IkReal(0.0600000000000000))*(x517)))+(((IkReal(-1.00000000000000))*(pp)))+(((IkReal(-0.600000000000000))*(x518))));
if( IKabs(evalcond[0]) > 0.000001  || IKabs(evalcond[1]) > 0.000001  || IKabs(evalcond[2]) > 0.000001  )
{
continue;
}
}

rotationfunction0(solutions);
}
}

}

}

} else
{
{
IkReal j19array[1], cj19array[1], sj19array[1];
bool j19valid[1]={false};
_nj19 = 1;
IkReal x520=((IkReal(0.313800000000000))*(px));
IkReal x521=((IkReal(0.313800000000000))*(py));
IkReal x522=((IkReal(0.0300000000000000))*(px));
IkReal x523=((IkReal(0.0300000000000000))*(py));
if( IKabs(((gconst30)*(((((IkReal(-1.00000000000000))*(sj22)*(x521)))+(((IkReal(-1.00000000000000))*(sj22)*(x522)))+(((IkReal(0.300000000000000))*(px)))+(x523)+(((IkReal(-1.00000000000000))*(cj22)*(x523)))+(((cj22)*(x520))))))) < IKFAST_ATAN2_MAGTHRESH && IKabs(((gconst30)*(((((IkReal(-0.300000000000000))*(py)))+(((IkReal(-1.00000000000000))*(sj22)*(x520)))+(((sj22)*(x523)))+(x522)+(((IkReal(-1.00000000000000))*(cj22)*(x522)))+(((IkReal(-1.00000000000000))*(cj22)*(x521))))))) < IKFAST_ATAN2_MAGTHRESH )
    continue;
j19array[0]=IKatan2(((gconst30)*(((((IkReal(-1.00000000000000))*(sj22)*(x521)))+(((IkReal(-1.00000000000000))*(sj22)*(x522)))+(((IkReal(0.300000000000000))*(px)))+(x523)+(((IkReal(-1.00000000000000))*(cj22)*(x523)))+(((cj22)*(x520)))))), ((gconst30)*(((((IkReal(-0.300000000000000))*(py)))+(((IkReal(-1.00000000000000))*(sj22)*(x520)))+(((sj22)*(x523)))+(x522)+(((IkReal(-1.00000000000000))*(cj22)*(x522)))+(((IkReal(-1.00000000000000))*(cj22)*(x521)))))));
sj19array[0]=IKsin(j19array[0]);
cj19array[0]=IKcos(j19array[0]);
if( j19array[0] > IKPI )
{
    j19array[0]-=IK2PI;
}
else if( j19array[0] < -IKPI )
{    j19array[0]+=IK2PI;
}
j19valid[0] = true;
for(int ij19 = 0; ij19 < 1; ++ij19)
{
if( !j19valid[ij19] )
{
    continue;
}
_ij19[0] = ij19; _ij19[1] = -1;
for(int iij19 = ij19+1; iij19 < 1; ++iij19)
{
if( j19valid[iij19] && IKabs(cj19array[ij19]-cj19array[iij19]) < IKFAST_SOLUTION_THRESH && IKabs(sj19array[ij19]-sj19array[iij19]) < IKFAST_SOLUTION_THRESH )
{
    j19valid[iij19]=false; _ij19[1] = iij19; break; 
}
}
j19 = j19array[ij19]; cj19 = cj19array[ij19]; sj19 = sj19array[ij19];
{
IkReal evalcond[3];
IkReal x524=IKcos(j19);
IkReal x525=IKsin(j19);
IkReal x526=((px)*(x525));
IkReal x527=((py)*(x525));
IkReal x528=((py)*(x524));
IkReal x529=((px)*(x524));
evalcond[0]=((IkReal(0.0300000000000000))+(((IkReal(-0.0300000000000000))*(cj22)))+(((IkReal(-1.00000000000000))*(x529)))+(((IkReal(-1.00000000000000))*(x527)))+(((IkReal(-0.313800000000000))*(sj22))));
evalcond[1]=((IkReal(0.300000000000000))+(((IkReal(0.313800000000000))*(cj22)))+(((IkReal(-1.00000000000000))*(x526)))+(x528)+(((IkReal(-0.0300000000000000))*(sj22))));
evalcond[2]=((IkReal(0.00847044000000000))+(((IkReal(0.0600000000000000))*(x529)))+(((IkReal(0.0600000000000000))*(x527)))+(((IkReal(0.600000000000000))*(x526)))+(((IkReal(-1.00000000000000))*(pp)))+(((IkReal(-0.600000000000000))*(x528))));
if( IKabs(evalcond[0]) > 0.000001  || IKabs(evalcond[1]) > 0.000001  || IKabs(evalcond[2]) > 0.000001  )
{
continue;
}
}

rotationfunction0(solutions);
}
}

}

}

} else
{
IkReal x530=((IkReal(-1.00000000000000))*(pz));
evalcond[0]=((IkReal(-3.14159265358979))+(IKfmod(j21, IkReal(6.28318530717959))));
evalcond[1]=((IkReal(0.190270440000000))+(((IkReal(0.186480000000000))*(cj22)))+(((IkReal(-1.00000000000000))*(pp)))+(((IkReal(-0.0368280000000000))*(sj22))));
evalcond[2]=x530;
evalcond[3]=x530;
if( IKabs(evalcond[0]) < 0.0000010000000000  && IKabs(evalcond[1]) < 0.0000010000000000  && IKabs(evalcond[2]) < 0.0000010000000000  && IKabs(evalcond[3]) < 0.0000010000000000  )
{
{
IkReal dummyeval[1];
IkReal gconst32;
gconst32=IKsign((((px)*(px))+((py)*(py))));
dummyeval[0]=(((px)*(px))+((py)*(py)));
if( IKabs(dummyeval[0]) < 0.0000010000000000  )
{
{
IkReal dummyeval[1];
IkReal gconst33;
gconst33=IKsign(((((IkReal(-0.0600000000000000))*((px)*(px))))+(((IkReal(-0.0600000000000000))*((py)*(py))))));
dummyeval[0]=((((IkReal(-1.00000000000000))*((px)*(px))))+(((IkReal(-1.00000000000000))*((py)*(py)))));
if( IKabs(dummyeval[0]) < 0.0000010000000000  )
{
continue;

} else
{
{
IkReal j19array[1], cj19array[1], sj19array[1];
bool j19valid[1]={false};
_nj19 = 1;
IkReal x531=((py)*(sj22));
IkReal x532=((IkReal(0.0180000000000000))*(px));
IkReal x533=((cj22)*(py));
IkReal x534=((cj22)*(px));
if( IKabs(((gconst33)*(((((IkReal(-0.0188280000000000))*(x534)))+(((IkReal(-1.00000000000000))*(x532)))+(((IkReal(-0.188280000000000))*(x533)))+(((IkReal(0.00180000000000000))*(px)*(sj22)))+(((IkReal(0.0180000000000000))*(x531)))+(((pp)*(py)))+(((IkReal(-0.188470440000000))*(py))))))) < IKFAST_ATAN2_MAGTHRESH && IKabs(((gconst33)*(((((IkReal(0.0180000000000000))*(py)))+(((IkReal(0.0188280000000000))*(x533)))+(((sj22)*(x532)))+(((IkReal(-0.188280000000000))*(x534)))+(((IkReal(-0.00180000000000000))*(x531)))+(((pp)*(px)))+(((IkReal(-0.188470440000000))*(px))))))) < IKFAST_ATAN2_MAGTHRESH )
    continue;
j19array[0]=IKatan2(((gconst33)*(((((IkReal(-0.0188280000000000))*(x534)))+(((IkReal(-1.00000000000000))*(x532)))+(((IkReal(-0.188280000000000))*(x533)))+(((IkReal(0.00180000000000000))*(px)*(sj22)))+(((IkReal(0.0180000000000000))*(x531)))+(((pp)*(py)))+(((IkReal(-0.188470440000000))*(py)))))), ((gconst33)*(((((IkReal(0.0180000000000000))*(py)))+(((IkReal(0.0188280000000000))*(x533)))+(((sj22)*(x532)))+(((IkReal(-0.188280000000000))*(x534)))+(((IkReal(-0.00180000000000000))*(x531)))+(((pp)*(px)))+(((IkReal(-0.188470440000000))*(px)))))));
sj19array[0]=IKsin(j19array[0]);
cj19array[0]=IKcos(j19array[0]);
if( j19array[0] > IKPI )
{
    j19array[0]-=IK2PI;
}
else if( j19array[0] < -IKPI )
{    j19array[0]+=IK2PI;
}
j19valid[0] = true;
for(int ij19 = 0; ij19 < 1; ++ij19)
{
if( !j19valid[ij19] )
{
    continue;
}
_ij19[0] = ij19; _ij19[1] = -1;
for(int iij19 = ij19+1; iij19 < 1; ++iij19)
{
if( j19valid[iij19] && IKabs(cj19array[ij19]-cj19array[iij19]) < IKFAST_SOLUTION_THRESH && IKabs(sj19array[ij19]-sj19array[iij19]) < IKFAST_SOLUTION_THRESH )
{
    j19valid[iij19]=false; _ij19[1] = iij19; break; 
}
}
j19 = j19array[ij19]; cj19 = cj19array[ij19]; sj19 = sj19array[ij19];
{
IkReal evalcond[3];
IkReal x535=IKcos(j19);
IkReal x536=IKsin(j19);
IkReal x537=((px)*(x536));
IkReal x538=((py)*(x536));
IkReal x539=((py)*(x535));
IkReal x540=((px)*(x535));
evalcond[0]=((IkReal(-0.0300000000000000))+(((IkReal(-1.00000000000000))*(x540)))+(((IkReal(-1.00000000000000))*(x538)))+(((IkReal(0.313800000000000))*(sj22)))+(((IkReal(0.0300000000000000))*(cj22))));
evalcond[1]=((IkReal(0.300000000000000))+(((IkReal(0.313800000000000))*(cj22)))+(((IkReal(-1.00000000000000))*(x537)))+(x539)+(((IkReal(-0.0300000000000000))*(sj22))));
evalcond[2]=((IkReal(0.00847044000000000))+(((IkReal(0.600000000000000))*(x537)))+(((IkReal(-1.00000000000000))*(pp)))+(((IkReal(-0.0600000000000000))*(x540)))+(((IkReal(-0.0600000000000000))*(x538)))+(((IkReal(-0.600000000000000))*(x539))));
if( IKabs(evalcond[0]) > 0.000001  || IKabs(evalcond[1]) > 0.000001  || IKabs(evalcond[2]) > 0.000001  )
{
continue;
}
}

rotationfunction0(solutions);
}
}

}

}

} else
{
{
IkReal j19array[1], cj19array[1], sj19array[1];
bool j19valid[1]={false};
_nj19 = 1;
IkReal x541=((IkReal(0.313800000000000))*(px));
IkReal x542=((IkReal(0.313800000000000))*(py));
IkReal x543=((IkReal(0.0300000000000000))*(px));
IkReal x544=((IkReal(0.0300000000000000))*(py));
if( IKabs(((gconst32)*(((((IkReal(-1.00000000000000))*(sj22)*(x543)))+(((IkReal(0.300000000000000))*(px)))+(((sj22)*(x542)))+(((IkReal(-1.00000000000000))*(x544)))+(((cj22)*(x544)))+(((cj22)*(x541))))))) < IKFAST_ATAN2_MAGTHRESH && IKabs(((gconst32)*(((((IkReal(-0.300000000000000))*(py)))+(((sj22)*(x541)))+(((sj22)*(x544)))+(((IkReal(-1.00000000000000))*(x543)))+(((cj22)*(x543)))+(((IkReal(-1.00000000000000))*(cj22)*(x542))))))) < IKFAST_ATAN2_MAGTHRESH )
    continue;
j19array[0]=IKatan2(((gconst32)*(((((IkReal(-1.00000000000000))*(sj22)*(x543)))+(((IkReal(0.300000000000000))*(px)))+(((sj22)*(x542)))+(((IkReal(-1.00000000000000))*(x544)))+(((cj22)*(x544)))+(((cj22)*(x541)))))), ((gconst32)*(((((IkReal(-0.300000000000000))*(py)))+(((sj22)*(x541)))+(((sj22)*(x544)))+(((IkReal(-1.00000000000000))*(x543)))+(((cj22)*(x543)))+(((IkReal(-1.00000000000000))*(cj22)*(x542)))))));
sj19array[0]=IKsin(j19array[0]);
cj19array[0]=IKcos(j19array[0]);
if( j19array[0] > IKPI )
{
    j19array[0]-=IK2PI;
}
else if( j19array[0] < -IKPI )
{    j19array[0]+=IK2PI;
}
j19valid[0] = true;
for(int ij19 = 0; ij19 < 1; ++ij19)
{
if( !j19valid[ij19] )
{
    continue;
}
_ij19[0] = ij19; _ij19[1] = -1;
for(int iij19 = ij19+1; iij19 < 1; ++iij19)
{
if( j19valid[iij19] && IKabs(cj19array[ij19]-cj19array[iij19]) < IKFAST_SOLUTION_THRESH && IKabs(sj19array[ij19]-sj19array[iij19]) < IKFAST_SOLUTION_THRESH )
{
    j19valid[iij19]=false; _ij19[1] = iij19; break; 
}
}
j19 = j19array[ij19]; cj19 = cj19array[ij19]; sj19 = sj19array[ij19];
{
IkReal evalcond[3];
IkReal x545=IKcos(j19);
IkReal x546=IKsin(j19);
IkReal x547=((px)*(x546));
IkReal x548=((py)*(x546));
IkReal x549=((py)*(x545));
IkReal x550=((px)*(x545));
evalcond[0]=((IkReal(-0.0300000000000000))+(((IkReal(-1.00000000000000))*(x550)))+(((IkReal(-1.00000000000000))*(x548)))+(((IkReal(0.313800000000000))*(sj22)))+(((IkReal(0.0300000000000000))*(cj22))));
evalcond[1]=((IkReal(0.300000000000000))+(((IkReal(0.313800000000000))*(cj22)))+(((IkReal(-1.00000000000000))*(x547)))+(x549)+(((IkReal(-0.0300000000000000))*(sj22))));
evalcond[2]=((IkReal(0.00847044000000000))+(((IkReal(0.600000000000000))*(x547)))+(((IkReal(-1.00000000000000))*(pp)))+(((IkReal(-0.0600000000000000))*(x548)))+(((IkReal(-0.600000000000000))*(x549)))+(((IkReal(-0.0600000000000000))*(x550))));
if( IKabs(evalcond[0]) > 0.000001  || IKabs(evalcond[1]) > 0.000001  || IKabs(evalcond[2]) > 0.000001  )
{
continue;
}
}

rotationfunction0(solutions);
}
}

}

}

} else
{
if( 1 )
{
continue;

} else
{
}
}
}
}

} else
{
{
IkReal j19array[1], cj19array[1], sj19array[1];
bool j19valid[1]={false};
_nj19 = 1;
IkReal x551=((IkReal(0.313800000000000))*(px));
IkReal x552=((cj21)*(sj22));
IkReal x553=((cj22)*(py));
IkReal x554=((IkReal(0.0300000000000000))*(cj21));
IkReal x555=((IkReal(0.0300000000000000))*(sj22));
if( IKabs(((gconst29)*(((((IkReal(-0.313800000000000))*(py)*(x552)))+(((py)*(x554)))+(((IkReal(0.300000000000000))*(px)))+(((IkReal(-1.00000000000000))*(x553)*(x554)))+(((IkReal(-1.00000000000000))*(px)*(x555)))+(((cj22)*(x551))))))) < IKFAST_ATAN2_MAGTHRESH && IKabs(((gconst29)*(((((IkReal(-0.313800000000000))*(x553)))+(((py)*(x555)))+(((IkReal(-0.300000000000000))*(py)))+(((px)*(x554)))+(((IkReal(-1.00000000000000))*(x551)*(x552)))+(((IkReal(-1.00000000000000))*(cj22)*(px)*(x554))))))) < IKFAST_ATAN2_MAGTHRESH )
    continue;
j19array[0]=IKatan2(((gconst29)*(((((IkReal(-0.313800000000000))*(py)*(x552)))+(((py)*(x554)))+(((IkReal(0.300000000000000))*(px)))+(((IkReal(-1.00000000000000))*(x553)*(x554)))+(((IkReal(-1.00000000000000))*(px)*(x555)))+(((cj22)*(x551)))))), ((gconst29)*(((((IkReal(-0.313800000000000))*(x553)))+(((py)*(x555)))+(((IkReal(-0.300000000000000))*(py)))+(((px)*(x554)))+(((IkReal(-1.00000000000000))*(x551)*(x552)))+(((IkReal(-1.00000000000000))*(cj22)*(px)*(x554)))))));
sj19array[0]=IKsin(j19array[0]);
cj19array[0]=IKcos(j19array[0]);
if( j19array[0] > IKPI )
{
    j19array[0]-=IK2PI;
}
else if( j19array[0] < -IKPI )
{    j19array[0]+=IK2PI;
}
j19valid[0] = true;
for(int ij19 = 0; ij19 < 1; ++ij19)
{
if( !j19valid[ij19] )
{
    continue;
}
_ij19[0] = ij19; _ij19[1] = -1;
for(int iij19 = ij19+1; iij19 < 1; ++iij19)
{
if( j19valid[iij19] && IKabs(cj19array[ij19]-cj19array[iij19]) < IKFAST_SOLUTION_THRESH && IKabs(sj19array[ij19]-sj19array[iij19]) < IKFAST_SOLUTION_THRESH )
{
    j19valid[iij19]=false; _ij19[1] = iij19; break; 
}
}
j19 = j19array[ij19]; cj19 = cj19array[ij19]; sj19 = sj19array[ij19];
{
IkReal evalcond[5];
IkReal x556=IKcos(j19);
IkReal x557=IKsin(j19);
IkReal x558=((IkReal(0.0300000000000000))*(cj21));
IkReal x559=((pz)*(sj21));
IkReal x560=((IkReal(0.313800000000000))*(sj22));
IkReal x561=((py)*(x556));
IkReal x562=((px)*(x556));
IkReal x563=((IkReal(1.00000000000000))*(x557));
IkReal x564=((cj21)*(py)*(x557));
evalcond[0]=((((IkReal(-1.00000000000000))*(py)*(x563)))+(((IkReal(-1.00000000000000))*(cj21)*(x560)))+(((IkReal(-1.00000000000000))*(cj22)*(x558)))+(x558)+(((IkReal(-1.00000000000000))*(x562))));
evalcond[1]=((IkReal(0.300000000000000))+(((IkReal(0.313800000000000))*(cj22)))+(x561)+(((IkReal(-0.0300000000000000))*(sj22)))+(((IkReal(-1.00000000000000))*(px)*(x563))));
evalcond[2]=((((py)*(sj21)*(x557)))+(((cj21)*(pz)))+(((sj21)*(x562))));
evalcond[3]=((IkReal(0.0300000000000000))+(((IkReal(-0.0300000000000000))*(cj22)))+(((IkReal(-1.00000000000000))*(cj21)*(x562)))+(((IkReal(-1.00000000000000))*(cj21)*(py)*(x563)))+(x559)+(((IkReal(-1.00000000000000))*(x560))));
evalcond[4]=((IkReal(0.00847044000000000))+(((IkReal(0.0600000000000000))*(cj21)*(x562)))+(((IkReal(-0.600000000000000))*(x561)))+(((IkReal(0.600000000000000))*(px)*(x557)))+(((IkReal(-1.00000000000000))*(pp)))+(((IkReal(0.0600000000000000))*(x564)))+(((IkReal(-0.0600000000000000))*(x559))));
if( IKabs(evalcond[0]) > 0.000001  || IKabs(evalcond[1]) > 0.000001  || IKabs(evalcond[2]) > 0.000001  || IKabs(evalcond[3]) > 0.000001  || IKabs(evalcond[4]) > 0.000001  )
{
continue;
}
}

rotationfunction0(solutions);
}
}

}

}

} else
{
{
IkReal j19array[1], cj19array[1], sj19array[1];
bool j19valid[1]={false};
_nj19 = 1;
IkReal x565=((px)*(sj21));
IkReal x566=((IkReal(0.313800000000000))*(cj22));
IkReal x567=((py)*(sj21));
IkReal x568=((IkReal(0.0300000000000000))*(sj22));
IkReal x569=((IkReal(1.00000000000000))*(cj21)*(pz));
if( IKabs(((gconst28)*(((((x565)*(x566)))+(((IkReal(-1.00000000000000))*(py)*(x569)))+(((IkReal(0.300000000000000))*(x565)))+(((IkReal(-1.00000000000000))*(x565)*(x568))))))) < IKFAST_ATAN2_MAGTHRESH && IKabs(((gconst28)*(((((IkReal(-1.00000000000000))*(x566)*(x567)))+(((x567)*(x568)))+(((IkReal(-0.300000000000000))*(x567)))+(((IkReal(-1.00000000000000))*(px)*(x569))))))) < IKFAST_ATAN2_MAGTHRESH )
    continue;
j19array[0]=IKatan2(((gconst28)*(((((x565)*(x566)))+(((IkReal(-1.00000000000000))*(py)*(x569)))+(((IkReal(0.300000000000000))*(x565)))+(((IkReal(-1.00000000000000))*(x565)*(x568)))))), ((gconst28)*(((((IkReal(-1.00000000000000))*(x566)*(x567)))+(((x567)*(x568)))+(((IkReal(-0.300000000000000))*(x567)))+(((IkReal(-1.00000000000000))*(px)*(x569)))))));
sj19array[0]=IKsin(j19array[0]);
cj19array[0]=IKcos(j19array[0]);
if( j19array[0] > IKPI )
{
    j19array[0]-=IK2PI;
}
else if( j19array[0] < -IKPI )
{    j19array[0]+=IK2PI;
}
j19valid[0] = true;
for(int ij19 = 0; ij19 < 1; ++ij19)
{
if( !j19valid[ij19] )
{
    continue;
}
_ij19[0] = ij19; _ij19[1] = -1;
for(int iij19 = ij19+1; iij19 < 1; ++iij19)
{
if( j19valid[iij19] && IKabs(cj19array[ij19]-cj19array[iij19]) < IKFAST_SOLUTION_THRESH && IKabs(sj19array[ij19]-sj19array[iij19]) < IKFAST_SOLUTION_THRESH )
{
    j19valid[iij19]=false; _ij19[1] = iij19; break; 
}
}
j19 = j19array[ij19]; cj19 = cj19array[ij19]; sj19 = sj19array[ij19];
{
IkReal evalcond[5];
IkReal x570=IKcos(j19);
IkReal x571=IKsin(j19);
IkReal x572=((IkReal(0.0300000000000000))*(cj21));
IkReal x573=((pz)*(sj21));
IkReal x574=((IkReal(0.313800000000000))*(sj22));
IkReal x575=((py)*(x570));
IkReal x576=((px)*(x570));
IkReal x577=((IkReal(1.00000000000000))*(x571));
IkReal x578=((cj21)*(py)*(x571));
evalcond[0]=((((IkReal(-1.00000000000000))*(cj21)*(x574)))+(((IkReal(-1.00000000000000))*(py)*(x577)))+(((IkReal(-1.00000000000000))*(x576)))+(((IkReal(-1.00000000000000))*(cj22)*(x572)))+(x572));
evalcond[1]=((IkReal(0.300000000000000))+(((IkReal(-1.00000000000000))*(px)*(x577)))+(((IkReal(0.313800000000000))*(cj22)))+(x575)+(((IkReal(-0.0300000000000000))*(sj22))));
evalcond[2]=((((sj21)*(x576)))+(((cj21)*(pz)))+(((py)*(sj21)*(x571))));
evalcond[3]=((IkReal(0.0300000000000000))+(((IkReal(-0.0300000000000000))*(cj22)))+(((IkReal(-1.00000000000000))*(cj21)*(x576)))+(((IkReal(-1.00000000000000))*(x574)))+(x573)+(((IkReal(-1.00000000000000))*(cj21)*(py)*(x577))));
evalcond[4]=((IkReal(0.00847044000000000))+(((IkReal(-0.600000000000000))*(x575)))+(((IkReal(0.0600000000000000))*(cj21)*(x576)))+(((IkReal(0.600000000000000))*(px)*(x571)))+(((IkReal(0.0600000000000000))*(x578)))+(((IkReal(-0.0600000000000000))*(x573)))+(((IkReal(-1.00000000000000))*(pp))));
if( IKabs(evalcond[0]) > 0.000001  || IKabs(evalcond[1]) > 0.000001  || IKabs(evalcond[2]) > 0.000001  || IKabs(evalcond[3]) > 0.000001  || IKabs(evalcond[4]) > 0.000001  )
{
continue;
}
}

rotationfunction0(solutions);
}
}

}

}

} else
{
IkReal x579=((IkReal(0.300000000000000))+(((IkReal(0.313800000000000))*(cj22)))+(((IkReal(-1.00000000000000))*(pz)))+(((IkReal(-0.0300000000000000))*(sj22))));
evalcond[0]=((IkReal(-3.14159265358979))+(IKfmod(((IkReal(1.57079632679490))+(j20)), IkReal(6.28318530717959))));
evalcond[1]=((IkReal(0.190270440000000))+(((IkReal(0.186480000000000))*(cj22)))+(((IkReal(-1.00000000000000))*(pp)))+(((IkReal(-0.0368280000000000))*(sj22))));
evalcond[2]=x579;
evalcond[3]=x579;
if( IKabs(evalcond[0]) < 0.0000010000000000  && IKabs(evalcond[1]) < 0.0000010000000000  && IKabs(evalcond[2]) < 0.0000010000000000  && IKabs(evalcond[3]) < 0.0000010000000000  )
{
{
IkReal dummyeval[1];
IkReal gconst34;
gconst34=IKsign((((px)*(px))+((py)*(py))));
dummyeval[0]=(((px)*(px))+((py)*(py)));
if( IKabs(dummyeval[0]) < 0.0000010000000000  )
{
{
IkReal dummyeval[1];
IkReal gconst35;
IkReal x580=((IkReal(1.00000000000000))*(sj21));
gconst35=IKsign(((((IkReal(-1.00000000000000))*(x580)*((px)*(px))))+(((IkReal(-1.00000000000000))*(x580)*((py)*(py))))));
IkReal x581=((IkReal(1.00000000000000))*(sj21));
dummyeval[0]=((((IkReal(-1.00000000000000))*(x581)*((px)*(px))))+(((IkReal(-1.00000000000000))*(x581)*((py)*(py)))));
if( IKabs(dummyeval[0]) < 0.0000010000000000  )
{
{
IkReal evalcond[4];
IkReal x582=x579;
evalcond[0]=((IkReal(-3.14159265358979))+(IKfmod(((IkReal(3.14159265358979))+(j21)), IkReal(6.28318530717959))));
evalcond[1]=((IkReal(0.190270440000000))+(((IkReal(0.186480000000000))*(cj22)))+(((IkReal(-1.00000000000000))*(pp)))+(((IkReal(-0.0368280000000000))*(sj22))));
evalcond[2]=x582;
evalcond[3]=x582;
if( IKabs(evalcond[0]) < 0.0000010000000000  && IKabs(evalcond[1]) < 0.0000010000000000  && IKabs(evalcond[2]) < 0.0000010000000000  && IKabs(evalcond[3]) < 0.0000010000000000  )
{
{
IkReal dummyeval[1];
IkReal gconst36;
gconst36=IKsign((((px)*(px))+((py)*(py))));
dummyeval[0]=(((px)*(px))+((py)*(py)));
if( IKabs(dummyeval[0]) < 0.0000010000000000  )
{
{
IkReal dummyeval[1];
IkReal gconst37;
gconst37=IKsign(((((IkReal(-3.00000000000000))*((px)*(px))))+(((IkReal(-3.00000000000000))*((py)*(py))))));
dummyeval[0]=((((IkReal(-1.00000000000000))*((px)*(px))))+(((IkReal(-1.00000000000000))*((py)*(py)))));
if( IKabs(dummyeval[0]) < 0.0000010000000000  )
{
continue;

} else
{
{
IkReal j19array[1], cj19array[1], sj19array[1];
bool j19valid[1]={false};
_nj19 = 1;
IkReal x583=((IkReal(50.0000000000000))*(pp));
IkReal x584=((IkReal(30.0000000000000))*(pz));
if( IKabs(((gconst37)*(((((IkReal(0.423522000000000))*(py)))+(((IkReal(-1.00000000000000))*(py)*(x583)))+(((py)*(x584))))))) < IKFAST_ATAN2_MAGTHRESH && IKabs(((gconst37)*(((((IkReal(0.423522000000000))*(px)))+(((px)*(x584)))+(((IkReal(-1.00000000000000))*(px)*(x583))))))) < IKFAST_ATAN2_MAGTHRESH )
    continue;
j19array[0]=IKatan2(((gconst37)*(((((IkReal(0.423522000000000))*(py)))+(((IkReal(-1.00000000000000))*(py)*(x583)))+(((py)*(x584)))))), ((gconst37)*(((((IkReal(0.423522000000000))*(px)))+(((px)*(x584)))+(((IkReal(-1.00000000000000))*(px)*(x583)))))));
sj19array[0]=IKsin(j19array[0]);
cj19array[0]=IKcos(j19array[0]);
if( j19array[0] > IKPI )
{
    j19array[0]-=IK2PI;
}
else if( j19array[0] < -IKPI )
{    j19array[0]+=IK2PI;
}
j19valid[0] = true;
for(int ij19 = 0; ij19 < 1; ++ij19)
{
if( !j19valid[ij19] )
{
    continue;
}
_ij19[0] = ij19; _ij19[1] = -1;
for(int iij19 = ij19+1; iij19 < 1; ++iij19)
{
if( j19valid[iij19] && IKabs(cj19array[ij19]-cj19array[iij19]) < IKFAST_SOLUTION_THRESH && IKabs(sj19array[ij19]-sj19array[iij19]) < IKFAST_SOLUTION_THRESH )
{
    j19valid[iij19]=false; _ij19[1] = iij19; break; 
}
}
j19 = j19array[ij19]; cj19 = cj19array[ij19]; sj19 = sj19array[ij19];
{
IkReal evalcond[3];
IkReal x585=IKcos(j19);
IkReal x586=IKsin(j19);
IkReal x587=((IkReal(1.00000000000000))*(px));
IkReal x588=((py)*(x586));
evalcond[0]=((IkReal(0.0300000000000000))+(((IkReal(-1.00000000000000))*(x588)))+(((IkReal(-0.0300000000000000))*(cj22)))+(((IkReal(-1.00000000000000))*(x585)*(x587)))+(((IkReal(-0.313800000000000))*(sj22))));
evalcond[1]=((((IkReal(-1.00000000000000))*(x586)*(x587)))+(((py)*(x585))));
evalcond[2]=((IkReal(0.00847044000000000))+(((IkReal(0.600000000000000))*(pz)))+(((IkReal(0.0600000000000000))*(x588)))+(((IkReal(-1.00000000000000))*(pp)))+(((IkReal(0.0600000000000000))*(px)*(x585))));
if( IKabs(evalcond[0]) > 0.000001  || IKabs(evalcond[1]) > 0.000001  || IKabs(evalcond[2]) > 0.000001  )
{
continue;
}
}

rotationfunction0(solutions);
}
}

}

}

} else
{
{
IkReal j19array[1], cj19array[1], sj19array[1];
bool j19valid[1]={false};
_nj19 = 1;
IkReal x589=((IkReal(0.313800000000000))*(sj22));
IkReal x590=((IkReal(0.0300000000000000))*(px));
IkReal x591=((IkReal(0.0300000000000000))*(py));
if( IKabs(((gconst36)*(((((IkReal(-1.00000000000000))*(py)*(x589)))+(((IkReal(-1.00000000000000))*(cj22)*(x591)))+(x591))))) < IKFAST_ATAN2_MAGTHRESH && IKabs(((gconst36)*(((((IkReal(-1.00000000000000))*(px)*(x589)))+(((IkReal(-1.00000000000000))*(cj22)*(x590)))+(x590))))) < IKFAST_ATAN2_MAGTHRESH )
    continue;
j19array[0]=IKatan2(((gconst36)*(((((IkReal(-1.00000000000000))*(py)*(x589)))+(((IkReal(-1.00000000000000))*(cj22)*(x591)))+(x591)))), ((gconst36)*(((((IkReal(-1.00000000000000))*(px)*(x589)))+(((IkReal(-1.00000000000000))*(cj22)*(x590)))+(x590)))));
sj19array[0]=IKsin(j19array[0]);
cj19array[0]=IKcos(j19array[0]);
if( j19array[0] > IKPI )
{
    j19array[0]-=IK2PI;
}
else if( j19array[0] < -IKPI )
{    j19array[0]+=IK2PI;
}
j19valid[0] = true;
for(int ij19 = 0; ij19 < 1; ++ij19)
{
if( !j19valid[ij19] )
{
    continue;
}
_ij19[0] = ij19; _ij19[1] = -1;
for(int iij19 = ij19+1; iij19 < 1; ++iij19)
{
if( j19valid[iij19] && IKabs(cj19array[ij19]-cj19array[iij19]) < IKFAST_SOLUTION_THRESH && IKabs(sj19array[ij19]-sj19array[iij19]) < IKFAST_SOLUTION_THRESH )
{
    j19valid[iij19]=false; _ij19[1] = iij19; break; 
}
}
j19 = j19array[ij19]; cj19 = cj19array[ij19]; sj19 = sj19array[ij19];
{
IkReal evalcond[3];
IkReal x592=IKcos(j19);
IkReal x593=IKsin(j19);
IkReal x594=((IkReal(1.00000000000000))*(px));
IkReal x595=((py)*(x593));
evalcond[0]=((IkReal(0.0300000000000000))+(((IkReal(-0.0300000000000000))*(cj22)))+(((IkReal(-1.00000000000000))*(x595)))+(((IkReal(-1.00000000000000))*(x592)*(x594)))+(((IkReal(-0.313800000000000))*(sj22))));
evalcond[1]=((((py)*(x592)))+(((IkReal(-1.00000000000000))*(x593)*(x594))));
evalcond[2]=((IkReal(0.00847044000000000))+(((IkReal(0.600000000000000))*(pz)))+(((IkReal(0.0600000000000000))*(px)*(x592)))+(((IkReal(-1.00000000000000))*(pp)))+(((IkReal(0.0600000000000000))*(x595))));
if( IKabs(evalcond[0]) > 0.000001  || IKabs(evalcond[1]) > 0.000001  || IKabs(evalcond[2]) > 0.000001  )
{
continue;
}
}

rotationfunction0(solutions);
}
}

}

}

} else
{
IkReal x596=x579;
evalcond[0]=((IkReal(-3.14159265358979))+(IKfmod(j21, IkReal(6.28318530717959))));
evalcond[1]=((IkReal(0.190270440000000))+(((IkReal(0.186480000000000))*(cj22)))+(((IkReal(-1.00000000000000))*(pp)))+(((IkReal(-0.0368280000000000))*(sj22))));
evalcond[2]=x596;
evalcond[3]=x596;
if( IKabs(evalcond[0]) < 0.0000010000000000  && IKabs(evalcond[1]) < 0.0000010000000000  && IKabs(evalcond[2]) < 0.0000010000000000  && IKabs(evalcond[3]) < 0.0000010000000000  )
{
{
IkReal dummyeval[1];
IkReal gconst38;
gconst38=IKsign((((px)*(px))+((py)*(py))));
dummyeval[0]=(((px)*(px))+((py)*(py)));
if( IKabs(dummyeval[0]) < 0.0000010000000000  )
{
{
IkReal dummyeval[1];
IkReal gconst39;
gconst39=IKsign(((((IkReal(3.00000000000000))*((py)*(py))))+(((IkReal(3.00000000000000))*((px)*(px))))));
dummyeval[0]=(((px)*(px))+((py)*(py)));
if( IKabs(dummyeval[0]) < 0.0000010000000000  )
{
continue;

} else
{
{
IkReal j19array[1], cj19array[1], sj19array[1];
bool j19valid[1]={false};
_nj19 = 1;
IkReal x597=((IkReal(50.0000000000000))*(pp));
IkReal x598=((IkReal(30.0000000000000))*(pz));
if( IKabs(((gconst39)*(((((IkReal(0.423522000000000))*(py)))+(((py)*(x598)))+(((IkReal(-1.00000000000000))*(py)*(x597))))))) < IKFAST_ATAN2_MAGTHRESH && IKabs(((gconst39)*(((((IkReal(0.423522000000000))*(px)))+(((IkReal(-1.00000000000000))*(px)*(x597)))+(((px)*(x598))))))) < IKFAST_ATAN2_MAGTHRESH )
    continue;
j19array[0]=IKatan2(((gconst39)*(((((IkReal(0.423522000000000))*(py)))+(((py)*(x598)))+(((IkReal(-1.00000000000000))*(py)*(x597)))))), ((gconst39)*(((((IkReal(0.423522000000000))*(px)))+(((IkReal(-1.00000000000000))*(px)*(x597)))+(((px)*(x598)))))));
sj19array[0]=IKsin(j19array[0]);
cj19array[0]=IKcos(j19array[0]);
if( j19array[0] > IKPI )
{
    j19array[0]-=IK2PI;
}
else if( j19array[0] < -IKPI )
{    j19array[0]+=IK2PI;
}
j19valid[0] = true;
for(int ij19 = 0; ij19 < 1; ++ij19)
{
if( !j19valid[ij19] )
{
    continue;
}
_ij19[0] = ij19; _ij19[1] = -1;
for(int iij19 = ij19+1; iij19 < 1; ++iij19)
{
if( j19valid[iij19] && IKabs(cj19array[ij19]-cj19array[iij19]) < IKFAST_SOLUTION_THRESH && IKabs(sj19array[ij19]-sj19array[iij19]) < IKFAST_SOLUTION_THRESH )
{
    j19valid[iij19]=false; _ij19[1] = iij19; break; 
}
}
j19 = j19array[ij19]; cj19 = cj19array[ij19]; sj19 = sj19array[ij19];
{
IkReal evalcond[3];
IkReal x599=IKsin(j19);
IkReal x600=IKcos(j19);
IkReal x601=((py)*(x599));
IkReal x602=((px)*(x600));
evalcond[0]=((IkReal(-0.0300000000000000))+(((IkReal(-1.00000000000000))*(x601)))+(((IkReal(-1.00000000000000))*(x602)))+(((IkReal(0.313800000000000))*(sj22)))+(((IkReal(0.0300000000000000))*(cj22))));
evalcond[1]=((((IkReal(-1.00000000000000))*(py)*(x600)))+(((px)*(x599))));
evalcond[2]=((IkReal(0.00847044000000000))+(((IkReal(-0.0600000000000000))*(x601)))+(((IkReal(-0.0600000000000000))*(x602)))+(((IkReal(0.600000000000000))*(pz)))+(((IkReal(-1.00000000000000))*(pp))));
if( IKabs(evalcond[0]) > 0.000001  || IKabs(evalcond[1]) > 0.000001  || IKabs(evalcond[2]) > 0.000001  )
{
continue;
}
}

rotationfunction0(solutions);
}
}

}

}

} else
{
{
IkReal j19array[1], cj19array[1], sj19array[1];
bool j19valid[1]={false};
_nj19 = 1;
IkReal x603=((IkReal(0.313800000000000))*(sj22));
IkReal x604=((IkReal(0.0300000000000000))*(px));
IkReal x605=((IkReal(0.0300000000000000))*(py));
if( IKabs(((gconst38)*(((((cj22)*(x605)))+(((py)*(x603)))+(((IkReal(-1.00000000000000))*(x605))))))) < IKFAST_ATAN2_MAGTHRESH && IKabs(((gconst38)*(((((cj22)*(x604)))+(((px)*(x603)))+(((IkReal(-1.00000000000000))*(x604))))))) < IKFAST_ATAN2_MAGTHRESH )
    continue;
j19array[0]=IKatan2(((gconst38)*(((((cj22)*(x605)))+(((py)*(x603)))+(((IkReal(-1.00000000000000))*(x605)))))), ((gconst38)*(((((cj22)*(x604)))+(((px)*(x603)))+(((IkReal(-1.00000000000000))*(x604)))))));
sj19array[0]=IKsin(j19array[0]);
cj19array[0]=IKcos(j19array[0]);
if( j19array[0] > IKPI )
{
    j19array[0]-=IK2PI;
}
else if( j19array[0] < -IKPI )
{    j19array[0]+=IK2PI;
}
j19valid[0] = true;
for(int ij19 = 0; ij19 < 1; ++ij19)
{
if( !j19valid[ij19] )
{
    continue;
}
_ij19[0] = ij19; _ij19[1] = -1;
for(int iij19 = ij19+1; iij19 < 1; ++iij19)
{
if( j19valid[iij19] && IKabs(cj19array[ij19]-cj19array[iij19]) < IKFAST_SOLUTION_THRESH && IKabs(sj19array[ij19]-sj19array[iij19]) < IKFAST_SOLUTION_THRESH )
{
    j19valid[iij19]=false; _ij19[1] = iij19; break; 
}
}
j19 = j19array[ij19]; cj19 = cj19array[ij19]; sj19 = sj19array[ij19];
{
IkReal evalcond[3];
IkReal x606=IKsin(j19);
IkReal x607=IKcos(j19);
IkReal x608=((py)*(x606));
IkReal x609=((px)*(x607));
evalcond[0]=((IkReal(-0.0300000000000000))+(((IkReal(-1.00000000000000))*(x609)))+(((IkReal(-1.00000000000000))*(x608)))+(((IkReal(0.313800000000000))*(sj22)))+(((IkReal(0.0300000000000000))*(cj22))));
evalcond[1]=((((IkReal(-1.00000000000000))*(py)*(x607)))+(((px)*(x606))));
evalcond[2]=((IkReal(0.00847044000000000))+(((IkReal(-0.0600000000000000))*(x608)))+(((IkReal(-0.0600000000000000))*(x609)))+(((IkReal(0.600000000000000))*(pz)))+(((IkReal(-1.00000000000000))*(pp))));
if( IKabs(evalcond[0]) > 0.000001  || IKabs(evalcond[1]) > 0.000001  || IKabs(evalcond[2]) > 0.000001  )
{
continue;
}
}

rotationfunction0(solutions);
}
}

}

}

} else
{
if( 1 )
{
continue;

} else
{
}
}
}
}

} else
{
{
IkReal j19array[1], cj19array[1], sj19array[1];
bool j19valid[1]={false};
_nj19 = 1;
IkReal x610=(sj21)*(sj21);
IkReal x611=((IkReal(0.0300000000000000))*(cj22));
IkReal x612=((IkReal(0.313800000000000))*(sj22));
IkReal x613=((px)*(x610));
IkReal x614=((cj21)*(py)*(sj21));
IkReal x615=((py)*(x610));
IkReal x616=((cj21)*(px)*(sj21));
if( IKabs(((gconst35)*(((((IkReal(-0.0300000000000000))*(x613)))+(((IkReal(-0.0300000000000000))*(x614)))+(((x611)*(x614)))+(((x611)*(x613)))+(((x612)*(x614)))+(((x612)*(x613))))))) < IKFAST_ATAN2_MAGTHRESH && IKabs(((gconst35)*(((((IkReal(-1.00000000000000))*(x612)*(x615)))+(((IkReal(-0.0300000000000000))*(x616)))+(((IkReal(-1.00000000000000))*(x611)*(x615)))+(((x611)*(x616)))+(((x612)*(x616)))+(((IkReal(0.0300000000000000))*(x615))))))) < IKFAST_ATAN2_MAGTHRESH )
    continue;
j19array[0]=IKatan2(((gconst35)*(((((IkReal(-0.0300000000000000))*(x613)))+(((IkReal(-0.0300000000000000))*(x614)))+(((x611)*(x614)))+(((x611)*(x613)))+(((x612)*(x614)))+(((x612)*(x613)))))), ((gconst35)*(((((IkReal(-1.00000000000000))*(x612)*(x615)))+(((IkReal(-0.0300000000000000))*(x616)))+(((IkReal(-1.00000000000000))*(x611)*(x615)))+(((x611)*(x616)))+(((x612)*(x616)))+(((IkReal(0.0300000000000000))*(x615)))))));
sj19array[0]=IKsin(j19array[0]);
cj19array[0]=IKcos(j19array[0]);
if( j19array[0] > IKPI )
{
    j19array[0]-=IK2PI;
}
else if( j19array[0] < -IKPI )
{    j19array[0]+=IK2PI;
}
j19valid[0] = true;
for(int ij19 = 0; ij19 < 1; ++ij19)
{
if( !j19valid[ij19] )
{
    continue;
}
_ij19[0] = ij19; _ij19[1] = -1;
for(int iij19 = ij19+1; iij19 < 1; ++iij19)
{
if( j19valid[iij19] && IKabs(cj19array[ij19]-cj19array[iij19]) < IKFAST_SOLUTION_THRESH && IKabs(sj19array[ij19]-sj19array[iij19]) < IKFAST_SOLUTION_THRESH )
{
    j19valid[iij19]=false; _ij19[1] = iij19; break; 
}
}
j19 = j19array[ij19]; cj19 = cj19array[ij19]; sj19 = sj19array[ij19];
{
IkReal evalcond[5];
IkReal x617=IKcos(j19);
IkReal x618=IKsin(j19);
IkReal x619=((IkReal(0.0300000000000000))*(cj21));
IkReal x620=((cj21)*(py));
IkReal x621=((IkReal(0.313800000000000))*(sj22));
IkReal x622=((cj21)*(px));
IkReal x623=((py)*(sj21));
IkReal x624=((px)*(sj21));
IkReal x625=((IkReal(0.0300000000000000))*(cj22));
IkReal x626=((IkReal(0.0600000000000000))*(x618));
IkReal x627=((IkReal(1.00000000000000))*(x618));
IkReal x628=((IkReal(0.0600000000000000))*(x617));
IkReal x629=((IkReal(1.00000000000000))*(x617));
evalcond[0]=((((IkReal(-1.00000000000000))*(cj21)*(x621)))+(x619)+(((IkReal(-1.00000000000000))*(px)*(x629)))+(((IkReal(-1.00000000000000))*(cj22)*(x619)))+(((IkReal(-1.00000000000000))*(py)*(x627))));
evalcond[1]=((((x617)*(x624)))+(((x617)*(x620)))+(((IkReal(-1.00000000000000))*(x622)*(x627)))+(((x618)*(x623))));
evalcond[2]=((IkReal(0.0300000000000000))+(((x617)*(x623)))+(((IkReal(-1.00000000000000))*(x622)*(x629)))+(((IkReal(-1.00000000000000))*(x625)))+(((IkReal(-1.00000000000000))*(x621)))+(((IkReal(-1.00000000000000))*(x620)*(x627)))+(((IkReal(-1.00000000000000))*(x624)*(x627))));
evalcond[3]=((((px)*(x618)))+(((IkReal(-0.0300000000000000))*(sj21)))+(((sj21)*(x621)))+(((sj21)*(x625)))+(((IkReal(-1.00000000000000))*(py)*(x629))));
evalcond[4]=((IkReal(0.00847044000000000))+(((IkReal(0.600000000000000))*(pz)))+(((IkReal(-1.00000000000000))*(x623)*(x628)))+(((IkReal(-1.00000000000000))*(pp)))+(((x624)*(x626)))+(((x622)*(x628)))+(((x620)*(x626))));
if( IKabs(evalcond[0]) > 0.000001  || IKabs(evalcond[1]) > 0.000001  || IKabs(evalcond[2]) > 0.000001  || IKabs(evalcond[3]) > 0.000001  || IKabs(evalcond[4]) > 0.000001  )
{
continue;
}
}

rotationfunction0(solutions);
}
}

}

}

} else
{
{
IkReal j19array[1], cj19array[1], sj19array[1];
bool j19valid[1]={false};
_nj19 = 1;
IkReal x630=((cj21)*(px));
IkReal x631=((IkReal(0.313800000000000))*(sj22));
IkReal x632=((IkReal(0.0300000000000000))*(cj22));
IkReal x633=((cj21)*(py));
IkReal x634=((IkReal(0.0300000000000000))*(sj21));
IkReal x635=((py)*(sj21));
IkReal x636=((px)*(sj21));
if( IKabs(((gconst34)*(((((IkReal(-1.00000000000000))*(x631)*(x633)))+(((IkReal(-1.00000000000000))*(x631)*(x636)))+(((IkReal(0.0300000000000000))*(x633)))+(((px)*(x634)))+(((IkReal(-1.00000000000000))*(x632)*(x636)))+(((IkReal(-1.00000000000000))*(x632)*(x633))))))) < IKFAST_ATAN2_MAGTHRESH && IKabs(((gconst34)*(((((IkReal(-1.00000000000000))*(x630)*(x632)))+(((IkReal(-1.00000000000000))*(x630)*(x631)))+(((IkReal(0.0300000000000000))*(x630)))+(((x632)*(x635)))+(((x631)*(x635)))+(((IkReal(-1.00000000000000))*(py)*(x634))))))) < IKFAST_ATAN2_MAGTHRESH )
    continue;
j19array[0]=IKatan2(((gconst34)*(((((IkReal(-1.00000000000000))*(x631)*(x633)))+(((IkReal(-1.00000000000000))*(x631)*(x636)))+(((IkReal(0.0300000000000000))*(x633)))+(((px)*(x634)))+(((IkReal(-1.00000000000000))*(x632)*(x636)))+(((IkReal(-1.00000000000000))*(x632)*(x633)))))), ((gconst34)*(((((IkReal(-1.00000000000000))*(x630)*(x632)))+(((IkReal(-1.00000000000000))*(x630)*(x631)))+(((IkReal(0.0300000000000000))*(x630)))+(((x632)*(x635)))+(((x631)*(x635)))+(((IkReal(-1.00000000000000))*(py)*(x634)))))));
sj19array[0]=IKsin(j19array[0]);
cj19array[0]=IKcos(j19array[0]);
if( j19array[0] > IKPI )
{
    j19array[0]-=IK2PI;
}
else if( j19array[0] < -IKPI )
{    j19array[0]+=IK2PI;
}
j19valid[0] = true;
for(int ij19 = 0; ij19 < 1; ++ij19)
{
if( !j19valid[ij19] )
{
    continue;
}
_ij19[0] = ij19; _ij19[1] = -1;
for(int iij19 = ij19+1; iij19 < 1; ++iij19)
{
if( j19valid[iij19] && IKabs(cj19array[ij19]-cj19array[iij19]) < IKFAST_SOLUTION_THRESH && IKabs(sj19array[ij19]-sj19array[iij19]) < IKFAST_SOLUTION_THRESH )
{
    j19valid[iij19]=false; _ij19[1] = iij19; break; 
}
}
j19 = j19array[ij19]; cj19 = cj19array[ij19]; sj19 = sj19array[ij19];
{
IkReal evalcond[5];
IkReal x637=IKcos(j19);
IkReal x638=IKsin(j19);
IkReal x639=((IkReal(0.0300000000000000))*(cj21));
IkReal x640=((cj21)*(py));
IkReal x641=((IkReal(0.313800000000000))*(sj22));
IkReal x642=((cj21)*(px));
IkReal x643=((py)*(sj21));
IkReal x644=((px)*(sj21));
IkReal x645=((IkReal(0.0300000000000000))*(cj22));
IkReal x646=((IkReal(0.0600000000000000))*(x638));
IkReal x647=((IkReal(1.00000000000000))*(x638));
IkReal x648=((IkReal(0.0600000000000000))*(x637));
IkReal x649=((IkReal(1.00000000000000))*(x637));
evalcond[0]=((((IkReal(-1.00000000000000))*(cj21)*(x641)))+(((IkReal(-1.00000000000000))*(px)*(x649)))+(((IkReal(-1.00000000000000))*(cj22)*(x639)))+(x639)+(((IkReal(-1.00000000000000))*(py)*(x647))));
evalcond[1]=((((IkReal(-1.00000000000000))*(x642)*(x647)))+(((x638)*(x643)))+(((x637)*(x644)))+(((x637)*(x640))));
evalcond[2]=((IkReal(0.0300000000000000))+(((IkReal(-1.00000000000000))*(x642)*(x649)))+(((IkReal(-1.00000000000000))*(x640)*(x647)))+(((x637)*(x643)))+(((IkReal(-1.00000000000000))*(x645)))+(((IkReal(-1.00000000000000))*(x641)))+(((IkReal(-1.00000000000000))*(x644)*(x647))));
evalcond[3]=((((sj21)*(x641)))+(((sj21)*(x645)))+(((IkReal(-0.0300000000000000))*(sj21)))+(((IkReal(-1.00000000000000))*(py)*(x649)))+(((px)*(x638))));
evalcond[4]=((IkReal(0.00847044000000000))+(((IkReal(0.600000000000000))*(pz)))+(((x644)*(x646)))+(((x640)*(x646)))+(((IkReal(-1.00000000000000))*(pp)))+(((IkReal(-1.00000000000000))*(x643)*(x648)))+(((x642)*(x648))));
if( IKabs(evalcond[0]) > 0.000001  || IKabs(evalcond[1]) > 0.000001  || IKabs(evalcond[2]) > 0.000001  || IKabs(evalcond[3]) > 0.000001  || IKabs(evalcond[4]) > 0.000001  )
{
continue;
}
}

rotationfunction0(solutions);
}
}

}

}

} else
{
IkReal x650=((IkReal(0.0300000000000000))*(sj22));
IkReal x651=((IkReal(0.313800000000000))*(cj22));
evalcond[0]=((IkReal(-3.14159265358979))+(IKfmod(((IkReal(4.71238898038469))+(j20)), IkReal(6.28318530717959))));
evalcond[1]=((IkReal(0.190270440000000))+(((IkReal(0.186480000000000))*(cj22)))+(((IkReal(-1.00000000000000))*(pp)))+(((IkReal(-0.0368280000000000))*(sj22))));
evalcond[2]=((IkReal(0.300000000000000))+(((IkReal(-1.00000000000000))*(x650)))+(pz)+(x651));
evalcond[3]=((IkReal(-0.300000000000000))+(((IkReal(-1.00000000000000))*(x651)))+(((IkReal(-1.00000000000000))*(pz)))+(x650));
if( IKabs(evalcond[0]) < 0.0000010000000000  && IKabs(evalcond[1]) < 0.0000010000000000  && IKabs(evalcond[2]) < 0.0000010000000000  && IKabs(evalcond[3]) < 0.0000010000000000  )
{
{
IkReal dummyeval[1];
IkReal gconst40;
gconst40=IKsign((((px)*(px))+((py)*(py))));
dummyeval[0]=(((px)*(px))+((py)*(py)));
if( IKabs(dummyeval[0]) < 0.0000010000000000  )
{
{
IkReal dummyeval[1];
IkReal gconst41;
IkReal x652=((IkReal(1.00000000000000))*(sj21));
gconst41=IKsign(((((IkReal(-1.00000000000000))*(x652)*((px)*(px))))+(((IkReal(-1.00000000000000))*(x652)*((py)*(py))))));
IkReal x653=((IkReal(1.00000000000000))*(sj21));
dummyeval[0]=((((IkReal(-1.00000000000000))*(x653)*((px)*(px))))+(((IkReal(-1.00000000000000))*(x653)*((py)*(py)))));
if( IKabs(dummyeval[0]) < 0.0000010000000000  )
{
{
IkReal evalcond[4];
IkReal x654=((IkReal(0.0300000000000000))*(sj22));
IkReal x655=((IkReal(0.313800000000000))*(cj22));
evalcond[0]=((IkReal(-3.14159265358979))+(IKfmod(((IkReal(3.14159265358979))+(j21)), IkReal(6.28318530717959))));
evalcond[1]=((IkReal(0.190270440000000))+(((IkReal(0.186480000000000))*(cj22)))+(((IkReal(-1.00000000000000))*(pp)))+(((IkReal(-0.0368280000000000))*(sj22))));
evalcond[2]=((IkReal(0.300000000000000))+(((IkReal(-1.00000000000000))*(x654)))+(pz)+(x655));
evalcond[3]=((IkReal(-0.300000000000000))+(((IkReal(-1.00000000000000))*(x655)))+(((IkReal(-1.00000000000000))*(pz)))+(x654));
if( IKabs(evalcond[0]) < 0.0000010000000000  && IKabs(evalcond[1]) < 0.0000010000000000  && IKabs(evalcond[2]) < 0.0000010000000000  && IKabs(evalcond[3]) < 0.0000010000000000  )
{
{
IkReal dummyeval[1];
IkReal gconst42;
gconst42=IKsign((((px)*(px))+((py)*(py))));
dummyeval[0]=(((px)*(px))+((py)*(py)));
if( IKabs(dummyeval[0]) < 0.0000010000000000  )
{
{
IkReal dummyeval[1];
IkReal gconst43;
gconst43=IKsign(((((IkReal(-3.00000000000000))*((px)*(px))))+(((IkReal(-3.00000000000000))*((py)*(py))))));
dummyeval[0]=((((IkReal(-1.00000000000000))*((px)*(px))))+(((IkReal(-1.00000000000000))*((py)*(py)))));
if( IKabs(dummyeval[0]) < 0.0000010000000000  )
{
continue;

} else
{
{
IkReal j19array[1], cj19array[1], sj19array[1];
bool j19valid[1]={false};
_nj19 = 1;
IkReal x656=((IkReal(50.0000000000000))*(pp));
IkReal x657=((IkReal(30.0000000000000))*(pz));
if( IKabs(((gconst43)*(((((IkReal(0.423522000000000))*(py)))+(((IkReal(-1.00000000000000))*(py)*(x657)))+(((IkReal(-1.00000000000000))*(py)*(x656))))))) < IKFAST_ATAN2_MAGTHRESH && IKabs(((gconst43)*(((((IkReal(0.423522000000000))*(px)))+(((IkReal(-1.00000000000000))*(px)*(x656)))+(((IkReal(-1.00000000000000))*(px)*(x657))))))) < IKFAST_ATAN2_MAGTHRESH )
    continue;
j19array[0]=IKatan2(((gconst43)*(((((IkReal(0.423522000000000))*(py)))+(((IkReal(-1.00000000000000))*(py)*(x657)))+(((IkReal(-1.00000000000000))*(py)*(x656)))))), ((gconst43)*(((((IkReal(0.423522000000000))*(px)))+(((IkReal(-1.00000000000000))*(px)*(x656)))+(((IkReal(-1.00000000000000))*(px)*(x657)))))));
sj19array[0]=IKsin(j19array[0]);
cj19array[0]=IKcos(j19array[0]);
if( j19array[0] > IKPI )
{
    j19array[0]-=IK2PI;
}
else if( j19array[0] < -IKPI )
{    j19array[0]+=IK2PI;
}
j19valid[0] = true;
for(int ij19 = 0; ij19 < 1; ++ij19)
{
if( !j19valid[ij19] )
{
    continue;
}
_ij19[0] = ij19; _ij19[1] = -1;
for(int iij19 = ij19+1; iij19 < 1; ++iij19)
{
if( j19valid[iij19] && IKabs(cj19array[ij19]-cj19array[iij19]) < IKFAST_SOLUTION_THRESH && IKabs(sj19array[ij19]-sj19array[iij19]) < IKFAST_SOLUTION_THRESH )
{
    j19valid[iij19]=false; _ij19[1] = iij19; break; 
}
}
j19 = j19array[ij19]; cj19 = cj19array[ij19]; sj19 = sj19array[ij19];
{
IkReal evalcond[3];
IkReal x658=IKsin(j19);
IkReal x659=IKcos(j19);
IkReal x660=((py)*(x658));
IkReal x661=((px)*(x659));
evalcond[0]=((IkReal(0.0300000000000000))+(((IkReal(-0.0300000000000000))*(cj22)))+(((IkReal(-1.00000000000000))*(x661)))+(((IkReal(-1.00000000000000))*(x660)))+(((IkReal(-0.313800000000000))*(sj22))));
evalcond[1]=((((IkReal(-1.00000000000000))*(py)*(x659)))+(((px)*(x658))));
evalcond[2]=((IkReal(0.00847044000000000))+(((IkReal(-0.600000000000000))*(pz)))+(((IkReal(-1.00000000000000))*(pp)))+(((IkReal(0.0600000000000000))*(x661)))+(((IkReal(0.0600000000000000))*(x660))));
if( IKabs(evalcond[0]) > 0.000001  || IKabs(evalcond[1]) > 0.000001  || IKabs(evalcond[2]) > 0.000001  )
{
continue;
}
}

rotationfunction0(solutions);
}
}

}

}

} else
{
{
IkReal j19array[1], cj19array[1], sj19array[1];
bool j19valid[1]={false};
_nj19 = 1;
IkReal x662=((IkReal(0.313800000000000))*(sj22));
IkReal x663=((IkReal(0.0300000000000000))*(px));
IkReal x664=((IkReal(0.0300000000000000))*(py));
if( IKabs(((gconst42)*(((((IkReal(-1.00000000000000))*(py)*(x662)))+(x664)+(((IkReal(-1.00000000000000))*(cj22)*(x664))))))) < IKFAST_ATAN2_MAGTHRESH && IKabs(((gconst42)*(((x663)+(((IkReal(-1.00000000000000))*(px)*(x662)))+(((IkReal(-1.00000000000000))*(cj22)*(x663))))))) < IKFAST_ATAN2_MAGTHRESH )
    continue;
j19array[0]=IKatan2(((gconst42)*(((((IkReal(-1.00000000000000))*(py)*(x662)))+(x664)+(((IkReal(-1.00000000000000))*(cj22)*(x664)))))), ((gconst42)*(((x663)+(((IkReal(-1.00000000000000))*(px)*(x662)))+(((IkReal(-1.00000000000000))*(cj22)*(x663)))))));
sj19array[0]=IKsin(j19array[0]);
cj19array[0]=IKcos(j19array[0]);
if( j19array[0] > IKPI )
{
    j19array[0]-=IK2PI;
}
else if( j19array[0] < -IKPI )
{    j19array[0]+=IK2PI;
}
j19valid[0] = true;
for(int ij19 = 0; ij19 < 1; ++ij19)
{
if( !j19valid[ij19] )
{
    continue;
}
_ij19[0] = ij19; _ij19[1] = -1;
for(int iij19 = ij19+1; iij19 < 1; ++iij19)
{
if( j19valid[iij19] && IKabs(cj19array[ij19]-cj19array[iij19]) < IKFAST_SOLUTION_THRESH && IKabs(sj19array[ij19]-sj19array[iij19]) < IKFAST_SOLUTION_THRESH )
{
    j19valid[iij19]=false; _ij19[1] = iij19; break; 
}
}
j19 = j19array[ij19]; cj19 = cj19array[ij19]; sj19 = sj19array[ij19];
{
IkReal evalcond[3];
IkReal x665=IKsin(j19);
IkReal x666=IKcos(j19);
IkReal x667=((py)*(x665));
IkReal x668=((px)*(x666));
evalcond[0]=((IkReal(0.0300000000000000))+(((IkReal(-0.0300000000000000))*(cj22)))+(((IkReal(-1.00000000000000))*(x668)))+(((IkReal(-1.00000000000000))*(x667)))+(((IkReal(-0.313800000000000))*(sj22))));
evalcond[1]=((((IkReal(-1.00000000000000))*(py)*(x666)))+(((px)*(x665))));
evalcond[2]=((IkReal(0.00847044000000000))+(((IkReal(-0.600000000000000))*(pz)))+(((IkReal(-1.00000000000000))*(pp)))+(((IkReal(0.0600000000000000))*(x668)))+(((IkReal(0.0600000000000000))*(x667))));
if( IKabs(evalcond[0]) > 0.000001  || IKabs(evalcond[1]) > 0.000001  || IKabs(evalcond[2]) > 0.000001  )
{
continue;
}
}

rotationfunction0(solutions);
}
}

}

}

} else
{
IkReal x669=((IkReal(0.0300000000000000))*(sj22));
IkReal x670=((IkReal(0.313800000000000))*(cj22));
evalcond[0]=((IkReal(-3.14159265358979))+(IKfmod(j21, IkReal(6.28318530717959))));
evalcond[1]=((IkReal(0.190270440000000))+(((IkReal(0.186480000000000))*(cj22)))+(((IkReal(-1.00000000000000))*(pp)))+(((IkReal(-0.0368280000000000))*(sj22))));
evalcond[2]=((IkReal(0.300000000000000))+(((IkReal(-1.00000000000000))*(x669)))+(pz)+(x670));
evalcond[3]=((IkReal(-0.300000000000000))+(((IkReal(-1.00000000000000))*(pz)))+(x669)+(((IkReal(-1.00000000000000))*(x670))));
if( IKabs(evalcond[0]) < 0.0000010000000000  && IKabs(evalcond[1]) < 0.0000010000000000  && IKabs(evalcond[2]) < 0.0000010000000000  && IKabs(evalcond[3]) < 0.0000010000000000  )
{
{
IkReal dummyeval[1];
IkReal gconst44;
gconst44=IKsign((((px)*(px))+((py)*(py))));
dummyeval[0]=(((px)*(px))+((py)*(py)));
if( IKabs(dummyeval[0]) < 0.0000010000000000  )
{
{
IkReal dummyeval[1];
IkReal gconst45;
gconst45=IKsign(((((IkReal(3.00000000000000))*((py)*(py))))+(((IkReal(3.00000000000000))*((px)*(px))))));
dummyeval[0]=(((px)*(px))+((py)*(py)));
if( IKabs(dummyeval[0]) < 0.0000010000000000  )
{
continue;

} else
{
{
IkReal j19array[1], cj19array[1], sj19array[1];
bool j19valid[1]={false};
_nj19 = 1;
IkReal x671=((IkReal(50.0000000000000))*(pp));
IkReal x672=((IkReal(30.0000000000000))*(pz));
if( IKabs(((gconst45)*(((((IkReal(0.423522000000000))*(py)))+(((IkReal(-1.00000000000000))*(py)*(x672)))+(((IkReal(-1.00000000000000))*(py)*(x671))))))) < IKFAST_ATAN2_MAGTHRESH && IKabs(((gconst45)*(((((IkReal(0.423522000000000))*(px)))+(((IkReal(-1.00000000000000))*(px)*(x671)))+(((IkReal(-1.00000000000000))*(px)*(x672))))))) < IKFAST_ATAN2_MAGTHRESH )
    continue;
j19array[0]=IKatan2(((gconst45)*(((((IkReal(0.423522000000000))*(py)))+(((IkReal(-1.00000000000000))*(py)*(x672)))+(((IkReal(-1.00000000000000))*(py)*(x671)))))), ((gconst45)*(((((IkReal(0.423522000000000))*(px)))+(((IkReal(-1.00000000000000))*(px)*(x671)))+(((IkReal(-1.00000000000000))*(px)*(x672)))))));
sj19array[0]=IKsin(j19array[0]);
cj19array[0]=IKcos(j19array[0]);
if( j19array[0] > IKPI )
{
    j19array[0]-=IK2PI;
}
else if( j19array[0] < -IKPI )
{    j19array[0]+=IK2PI;
}
j19valid[0] = true;
for(int ij19 = 0; ij19 < 1; ++ij19)
{
if( !j19valid[ij19] )
{
    continue;
}
_ij19[0] = ij19; _ij19[1] = -1;
for(int iij19 = ij19+1; iij19 < 1; ++iij19)
{
if( j19valid[iij19] && IKabs(cj19array[ij19]-cj19array[iij19]) < IKFAST_SOLUTION_THRESH && IKabs(sj19array[ij19]-sj19array[iij19]) < IKFAST_SOLUTION_THRESH )
{
    j19valid[iij19]=false; _ij19[1] = iij19; break; 
}
}
j19 = j19array[ij19]; cj19 = cj19array[ij19]; sj19 = sj19array[ij19];
{
IkReal evalcond[3];
IkReal x673=IKcos(j19);
IkReal x674=IKsin(j19);
IkReal x675=((IkReal(1.00000000000000))*(px));
IkReal x676=((py)*(x674));
evalcond[0]=((IkReal(-0.0300000000000000))+(((IkReal(-1.00000000000000))*(x676)))+(((IkReal(0.313800000000000))*(sj22)))+(((IkReal(0.0300000000000000))*(cj22)))+(((IkReal(-1.00000000000000))*(x673)*(x675))));
evalcond[1]=((((py)*(x673)))+(((IkReal(-1.00000000000000))*(x674)*(x675))));
evalcond[2]=((IkReal(0.00847044000000000))+(((IkReal(-0.0600000000000000))*(px)*(x673)))+(((IkReal(-0.600000000000000))*(pz)))+(((IkReal(-1.00000000000000))*(pp)))+(((IkReal(-0.0600000000000000))*(x676))));
if( IKabs(evalcond[0]) > 0.000001  || IKabs(evalcond[1]) > 0.000001  || IKabs(evalcond[2]) > 0.000001  )
{
continue;
}
}

rotationfunction0(solutions);
}
}

}

}

} else
{
{
IkReal j19array[1], cj19array[1], sj19array[1];
bool j19valid[1]={false};
_nj19 = 1;
IkReal x677=((IkReal(0.313800000000000))*(sj22));
IkReal x678=((IkReal(0.0300000000000000))*(px));
IkReal x679=((IkReal(0.0300000000000000))*(py));
if( IKabs(((gconst44)*(((((py)*(x677)))+(((cj22)*(x679)))+(((IkReal(-1.00000000000000))*(x679))))))) < IKFAST_ATAN2_MAGTHRESH && IKabs(((gconst44)*(((((cj22)*(x678)))+(((IkReal(-1.00000000000000))*(x678)))+(((px)*(x677))))))) < IKFAST_ATAN2_MAGTHRESH )
    continue;
j19array[0]=IKatan2(((gconst44)*(((((py)*(x677)))+(((cj22)*(x679)))+(((IkReal(-1.00000000000000))*(x679)))))), ((gconst44)*(((((cj22)*(x678)))+(((IkReal(-1.00000000000000))*(x678)))+(((px)*(x677)))))));
sj19array[0]=IKsin(j19array[0]);
cj19array[0]=IKcos(j19array[0]);
if( j19array[0] > IKPI )
{
    j19array[0]-=IK2PI;
}
else if( j19array[0] < -IKPI )
{    j19array[0]+=IK2PI;
}
j19valid[0] = true;
for(int ij19 = 0; ij19 < 1; ++ij19)
{
if( !j19valid[ij19] )
{
    continue;
}
_ij19[0] = ij19; _ij19[1] = -1;
for(int iij19 = ij19+1; iij19 < 1; ++iij19)
{
if( j19valid[iij19] && IKabs(cj19array[ij19]-cj19array[iij19]) < IKFAST_SOLUTION_THRESH && IKabs(sj19array[ij19]-sj19array[iij19]) < IKFAST_SOLUTION_THRESH )
{
    j19valid[iij19]=false; _ij19[1] = iij19; break; 
}
}
j19 = j19array[ij19]; cj19 = cj19array[ij19]; sj19 = sj19array[ij19];
{
IkReal evalcond[3];
IkReal x680=IKcos(j19);
IkReal x681=IKsin(j19);
IkReal x682=((IkReal(1.00000000000000))*(px));
IkReal x683=((py)*(x681));
evalcond[0]=((IkReal(-0.0300000000000000))+(((IkReal(-1.00000000000000))*(x680)*(x682)))+(((IkReal(0.313800000000000))*(sj22)))+(((IkReal(0.0300000000000000))*(cj22)))+(((IkReal(-1.00000000000000))*(x683))));
evalcond[1]=((((IkReal(-1.00000000000000))*(x681)*(x682)))+(((py)*(x680))));
evalcond[2]=((IkReal(0.00847044000000000))+(((IkReal(-0.0600000000000000))*(x683)))+(((IkReal(-0.600000000000000))*(pz)))+(((IkReal(-1.00000000000000))*(pp)))+(((IkReal(-0.0600000000000000))*(px)*(x680))));
if( IKabs(evalcond[0]) > 0.000001  || IKabs(evalcond[1]) > 0.000001  || IKabs(evalcond[2]) > 0.000001  )
{
continue;
}
}

rotationfunction0(solutions);
}
}

}

}

} else
{
if( 1 )
{
continue;

} else
{
}
}
}
}

} else
{
{
IkReal j19array[1], cj19array[1], sj19array[1];
bool j19valid[1]={false};
_nj19 = 1;
IkReal x684=(sj21)*(sj21);
IkReal x685=((IkReal(0.0300000000000000))*(cj22));
IkReal x686=((IkReal(0.313800000000000))*(sj22));
IkReal x687=((px)*(x684));
IkReal x688=((cj21)*(py)*(sj21));
IkReal x689=((py)*(x684));
IkReal x690=((cj21)*(px)*(sj21));
if( IKabs(((gconst41)*(((((IkReal(-1.00000000000000))*(x685)*(x687)))+(((x686)*(x688)))+(((IkReal(0.0300000000000000))*(x687)))+(((x685)*(x688)))+(((IkReal(-1.00000000000000))*(x686)*(x687)))+(((IkReal(-0.0300000000000000))*(x688))))))) < IKFAST_ATAN2_MAGTHRESH && IKabs(((gconst41)*(((((x686)*(x689)))+(((x686)*(x690)))+(((x685)*(x689)))+(((IkReal(-0.0300000000000000))*(x690)))+(((IkReal(-0.0300000000000000))*(x689)))+(((x685)*(x690))))))) < IKFAST_ATAN2_MAGTHRESH )
    continue;
j19array[0]=IKatan2(((gconst41)*(((((IkReal(-1.00000000000000))*(x685)*(x687)))+(((x686)*(x688)))+(((IkReal(0.0300000000000000))*(x687)))+(((x685)*(x688)))+(((IkReal(-1.00000000000000))*(x686)*(x687)))+(((IkReal(-0.0300000000000000))*(x688)))))), ((gconst41)*(((((x686)*(x689)))+(((x686)*(x690)))+(((x685)*(x689)))+(((IkReal(-0.0300000000000000))*(x690)))+(((IkReal(-0.0300000000000000))*(x689)))+(((x685)*(x690)))))));
sj19array[0]=IKsin(j19array[0]);
cj19array[0]=IKcos(j19array[0]);
if( j19array[0] > IKPI )
{
    j19array[0]-=IK2PI;
}
else if( j19array[0] < -IKPI )
{    j19array[0]+=IK2PI;
}
j19valid[0] = true;
for(int ij19 = 0; ij19 < 1; ++ij19)
{
if( !j19valid[ij19] )
{
    continue;
}
_ij19[0] = ij19; _ij19[1] = -1;
for(int iij19 = ij19+1; iij19 < 1; ++iij19)
{
if( j19valid[iij19] && IKabs(cj19array[ij19]-cj19array[iij19]) < IKFAST_SOLUTION_THRESH && IKabs(sj19array[ij19]-sj19array[iij19]) < IKFAST_SOLUTION_THRESH )
{
    j19valid[iij19]=false; _ij19[1] = iij19; break; 
}
}
j19 = j19array[ij19]; cj19 = cj19array[ij19]; sj19 = sj19array[ij19];
{
IkReal evalcond[5];
IkReal x691=IKsin(j19);
IkReal x692=IKcos(j19);
IkReal x693=((IkReal(0.0300000000000000))*(cj21));
IkReal x694=((IkReal(0.0600000000000000))*(py));
IkReal x695=((IkReal(1.00000000000000))*(py));
IkReal x696=((IkReal(0.313800000000000))*(sj22));
IkReal x697=((IkReal(0.0300000000000000))*(cj22));
IkReal x698=((cj21)*(x691));
IkReal x699=((px)*(x692));
IkReal x700=((sj21)*(x692));
IkReal x701=((px)*(x691));
evalcond[0]=((((IkReal(-1.00000000000000))*(cj21)*(x696)))+(x693)+(((IkReal(-1.00000000000000))*(x691)*(x695)))+(((IkReal(-1.00000000000000))*(x699)))+(((IkReal(-1.00000000000000))*(cj22)*(x693))));
evalcond[1]=((((IkReal(-1.00000000000000))*(cj21)*(x692)*(x695)))+(((sj21)*(x699)))+(((px)*(x698)))+(((py)*(sj21)*(x691))));
evalcond[2]=((IkReal(0.0300000000000000))+(((IkReal(-1.00000000000000))*(x695)*(x700)))+(((IkReal(-1.00000000000000))*(x695)*(x698)))+(((IkReal(-1.00000000000000))*(x697)))+(((IkReal(-1.00000000000000))*(x696)))+(((sj21)*(x701)))+(((IkReal(-1.00000000000000))*(cj21)*(x699))));
evalcond[3]=((((IkReal(0.0300000000000000))*(sj21)))+(((IkReal(-1.00000000000000))*(sj21)*(x697)))+(((IkReal(-1.00000000000000))*(sj21)*(x696)))+(((IkReal(-1.00000000000000))*(x692)*(x695)))+(x701));
evalcond[4]=((IkReal(0.00847044000000000))+(((IkReal(-0.0600000000000000))*(sj21)*(x701)))+(((x694)*(x698)))+(((IkReal(-0.600000000000000))*(pz)))+(((IkReal(0.0600000000000000))*(cj21)*(x699)))+(((x694)*(x700)))+(((IkReal(-1.00000000000000))*(pp))));
if( IKabs(evalcond[0]) > 0.000001  || IKabs(evalcond[1]) > 0.000001  || IKabs(evalcond[2]) > 0.000001  || IKabs(evalcond[3]) > 0.000001  || IKabs(evalcond[4]) > 0.000001  )
{
continue;
}
}

rotationfunction0(solutions);
}
}

}

}

} else
{
{
IkReal j19array[1], cj19array[1], sj19array[1];
bool j19valid[1]={false};
_nj19 = 1;
IkReal x702=((cj21)*(px));
IkReal x703=((IkReal(0.313800000000000))*(sj22));
IkReal x704=((IkReal(0.0300000000000000))*(cj22));
IkReal x705=((cj21)*(py));
IkReal x706=((IkReal(0.0300000000000000))*(sj21));
IkReal x707=((py)*(sj21));
IkReal x708=((px)*(sj21));
if( IKabs(((gconst40)*(((((x703)*(x708)))+(((IkReal(-1.00000000000000))*(x703)*(x705)))+(((IkReal(-1.00000000000000))*(px)*(x706)))+(((IkReal(-1.00000000000000))*(x704)*(x705)))+(((x704)*(x708)))+(((IkReal(0.0300000000000000))*(x705))))))) < IKFAST_ATAN2_MAGTHRESH && IKabs(((gconst40)*(((((IkReal(-1.00000000000000))*(x702)*(x703)))+(((IkReal(-1.00000000000000))*(x702)*(x704)))+(((IkReal(-1.00000000000000))*(x703)*(x707)))+(((IkReal(-1.00000000000000))*(x704)*(x707)))+(((IkReal(0.0300000000000000))*(x702)))+(((py)*(x706))))))) < IKFAST_ATAN2_MAGTHRESH )
    continue;
j19array[0]=IKatan2(((gconst40)*(((((x703)*(x708)))+(((IkReal(-1.00000000000000))*(x703)*(x705)))+(((IkReal(-1.00000000000000))*(px)*(x706)))+(((IkReal(-1.00000000000000))*(x704)*(x705)))+(((x704)*(x708)))+(((IkReal(0.0300000000000000))*(x705)))))), ((gconst40)*(((((IkReal(-1.00000000000000))*(x702)*(x703)))+(((IkReal(-1.00000000000000))*(x702)*(x704)))+(((IkReal(-1.00000000000000))*(x703)*(x707)))+(((IkReal(-1.00000000000000))*(x704)*(x707)))+(((IkReal(0.0300000000000000))*(x702)))+(((py)*(x706)))))));
sj19array[0]=IKsin(j19array[0]);
cj19array[0]=IKcos(j19array[0]);
if( j19array[0] > IKPI )
{
    j19array[0]-=IK2PI;
}
else if( j19array[0] < -IKPI )
{    j19array[0]+=IK2PI;
}
j19valid[0] = true;
for(int ij19 = 0; ij19 < 1; ++ij19)
{
if( !j19valid[ij19] )
{
    continue;
}
_ij19[0] = ij19; _ij19[1] = -1;
for(int iij19 = ij19+1; iij19 < 1; ++iij19)
{
if( j19valid[iij19] && IKabs(cj19array[ij19]-cj19array[iij19]) < IKFAST_SOLUTION_THRESH && IKabs(sj19array[ij19]-sj19array[iij19]) < IKFAST_SOLUTION_THRESH )
{
    j19valid[iij19]=false; _ij19[1] = iij19; break; 
}
}
j19 = j19array[ij19]; cj19 = cj19array[ij19]; sj19 = sj19array[ij19];
{
IkReal evalcond[5];
IkReal x709=IKsin(j19);
IkReal x710=IKcos(j19);
IkReal x711=((IkReal(0.0300000000000000))*(cj21));
IkReal x712=((IkReal(0.0600000000000000))*(py));
IkReal x713=((IkReal(1.00000000000000))*(py));
IkReal x714=((IkReal(0.313800000000000))*(sj22));
IkReal x715=((IkReal(0.0300000000000000))*(cj22));
IkReal x716=((cj21)*(x709));
IkReal x717=((px)*(x710));
IkReal x718=((sj21)*(x710));
IkReal x719=((px)*(x709));
evalcond[0]=((((IkReal(-1.00000000000000))*(x709)*(x713)))+(((IkReal(-1.00000000000000))*(x717)))+(x711)+(((IkReal(-1.00000000000000))*(cj21)*(x714)))+(((IkReal(-1.00000000000000))*(cj22)*(x711))));
evalcond[1]=((((px)*(x716)))+(((py)*(sj21)*(x709)))+(((sj21)*(x717)))+(((IkReal(-1.00000000000000))*(cj21)*(x710)*(x713))));
evalcond[2]=((IkReal(0.0300000000000000))+(((IkReal(-1.00000000000000))*(cj21)*(x717)))+(((IkReal(-1.00000000000000))*(x714)))+(((IkReal(-1.00000000000000))*(x715)))+(((sj21)*(x719)))+(((IkReal(-1.00000000000000))*(x713)*(x718)))+(((IkReal(-1.00000000000000))*(x713)*(x716))));
evalcond[3]=((((IkReal(0.0300000000000000))*(sj21)))+(((IkReal(-1.00000000000000))*(x710)*(x713)))+(x719)+(((IkReal(-1.00000000000000))*(sj21)*(x714)))+(((IkReal(-1.00000000000000))*(sj21)*(x715))));
evalcond[4]=((IkReal(0.00847044000000000))+(((IkReal(-0.0600000000000000))*(sj21)*(x719)))+(((IkReal(-0.600000000000000))*(pz)))+(((IkReal(-1.00000000000000))*(pp)))+(((IkReal(0.0600000000000000))*(cj21)*(x717)))+(((x712)*(x718)))+(((x712)*(x716))));
if( IKabs(evalcond[0]) > 0.000001  || IKabs(evalcond[1]) > 0.000001  || IKabs(evalcond[2]) > 0.000001  || IKabs(evalcond[3]) > 0.000001  || IKabs(evalcond[4]) > 0.000001  )
{
continue;
}
}

rotationfunction0(solutions);
}
}

}

}

} else
{
if( 1 )
{
continue;

} else
{
}
}
}
}
}
}
}
}

} else
{
{
IkReal j19array[1], cj19array[1], sj19array[1];
bool j19valid[1]={false};
_nj19 = 1;
IkReal x720=(cj21)*(cj21);
IkReal x721=((cj22)*(px));
IkReal x722=((cj21)*(py));
IkReal x723=((cj20)*(pz));
IkReal x724=((cj21)*(px));
IkReal x725=((IkReal(0.0300000000000000))*(sj21));
IkReal x726=((IkReal(0.313800000000000))*(sj21)*(sj22));
IkReal x727=((IkReal(0.0300000000000000))*(sj20)*(x720));
IkReal x728=((x722)*(x725));
IkReal x729=((IkReal(0.313800000000000))*(sj20)*(sj22)*(x720));
if( IKabs(((gconst1)*(((((IkReal(-1.00000000000000))*(cj21)*(x721)*(x725)))+(((IkReal(-1.00000000000000))*(x724)*(x726)))+(((IkReal(-1.00000000000000))*(x723)*(x724)))+(((py)*(x727)))+(((IkReal(-1.00000000000000))*(cj22)*(py)*(x727)))+(((x724)*(x725)))+(((IkReal(-1.00000000000000))*(py)*(x729))))))) < IKFAST_ATAN2_MAGTHRESH && IKabs(((gconst1)*(((((x722)*(x723)))+(((x722)*(x726)))+(((IkReal(-1.00000000000000))*(px)*(x729)))+(((IkReal(-1.00000000000000))*(x728)))+(((IkReal(-1.00000000000000))*(x721)*(x727)))+(((cj22)*(x728)))+(((px)*(x727))))))) < IKFAST_ATAN2_MAGTHRESH )
    continue;
j19array[0]=IKatan2(((gconst1)*(((((IkReal(-1.00000000000000))*(cj21)*(x721)*(x725)))+(((IkReal(-1.00000000000000))*(x724)*(x726)))+(((IkReal(-1.00000000000000))*(x723)*(x724)))+(((py)*(x727)))+(((IkReal(-1.00000000000000))*(cj22)*(py)*(x727)))+(((x724)*(x725)))+(((IkReal(-1.00000000000000))*(py)*(x729)))))), ((gconst1)*(((((x722)*(x723)))+(((x722)*(x726)))+(((IkReal(-1.00000000000000))*(px)*(x729)))+(((IkReal(-1.00000000000000))*(x728)))+(((IkReal(-1.00000000000000))*(x721)*(x727)))+(((cj22)*(x728)))+(((px)*(x727)))))));
sj19array[0]=IKsin(j19array[0]);
cj19array[0]=IKcos(j19array[0]);
if( j19array[0] > IKPI )
{
    j19array[0]-=IK2PI;
}
else if( j19array[0] < -IKPI )
{    j19array[0]+=IK2PI;
}
j19valid[0] = true;
for(int ij19 = 0; ij19 < 1; ++ij19)
{
if( !j19valid[ij19] )
{
    continue;
}
_ij19[0] = ij19; _ij19[1] = -1;
for(int iij19 = ij19+1; iij19 < 1; ++iij19)
{
if( j19valid[iij19] && IKabs(cj19array[ij19]-cj19array[iij19]) < IKFAST_SOLUTION_THRESH && IKabs(sj19array[ij19]-sj19array[iij19]) < IKFAST_SOLUTION_THRESH )
{
    j19valid[iij19]=false; _ij19[1] = iij19; break; 
}
}
j19 = j19array[ij19]; cj19 = cj19array[ij19]; sj19 = sj19array[ij19];
{
IkReal evalcond[6];
IkReal x730=IKsin(j19);
IkReal x731=IKcos(j19);
IkReal x732=((IkReal(0.0600000000000000))*(py));
IkReal x733=((IkReal(0.0300000000000000))*(cj21));
IkReal x734=((IkReal(1.00000000000000))*(pz));
IkReal x735=((cj20)*(sj21));
IkReal x736=((IkReal(1.00000000000000))*(py));
IkReal x737=((IkReal(0.0300000000000000))*(sj22));
IkReal x738=((py)*(sj21));
IkReal x739=((IkReal(1.00000000000000))*(sj20));
IkReal x740=((IkReal(0.600000000000000))*(cj20));
IkReal x741=((IkReal(0.313800000000000))*(cj22));
IkReal x742=((IkReal(0.313800000000000))*(sj22));
IkReal x743=((sj20)*(sj21));
IkReal x744=((sj20)*(x731));
IkReal x745=((cj21)*(x730));
IkReal x746=((px)*(x731));
IkReal x747=((px)*(x730));
IkReal x748=((IkReal(0.0300000000000000))*(x743));
evalcond[0]=((((IkReal(-1.00000000000000))*(cj22)*(x733)))+(((IkReal(-1.00000000000000))*(x730)*(x736)))+(((IkReal(-1.00000000000000))*(x746)))+(x733)+(((IkReal(-1.00000000000000))*(cj21)*(x742))));
evalcond[1]=((IkReal(0.300000000000000))+(((IkReal(-1.00000000000000))*(cj20)*(x731)*(x736)))+(((IkReal(-1.00000000000000))*(x737)))+(((cj20)*(x747)))+(x741)+(((IkReal(-1.00000000000000))*(sj20)*(x734))));
evalcond[2]=((((cj21)*(py)*(x744)))+(((sj21)*(x746)))+(((IkReal(-1.00000000000000))*(cj20)*(cj21)*(x734)))+(((IkReal(-1.00000000000000))*(px)*(x739)*(x745)))+(((x730)*(x738))));
evalcond[3]=((IkReal(0.0300000000000000))+(((x738)*(x744)))+(((IkReal(-0.0300000000000000))*(cj22)))+(((IkReal(-1.00000000000000))*(x734)*(x735)))+(((IkReal(-1.00000000000000))*(cj21)*(x746)))+(((IkReal(-1.00000000000000))*(sj21)*(x739)*(x747)))+(((IkReal(-1.00000000000000))*(x742)))+(((IkReal(-1.00000000000000))*(x736)*(x745))));
evalcond[4]=((((x742)*(x743)))+(((IkReal(-1.00000000000000))*(x731)*(x736)))+(((cj22)*(x748)))+(((IkReal(-1.00000000000000))*(cj20)*(x737)))+(((cj20)*(x741)))+(x747)+(((IkReal(-1.00000000000000))*(x748)))+(((IkReal(0.300000000000000))*(cj20))));
evalcond[5]=((IkReal(0.00847044000000000))+(((IkReal(0.0600000000000000))*(x743)*(x747)))+(((IkReal(0.0600000000000000))*(cj21)*(x746)))+(((IkReal(-1.00000000000000))*(x731)*(x732)*(x743)))+(((IkReal(0.600000000000000))*(pz)*(sj20)))+(((IkReal(-1.00000000000000))*(pp)))+(((IkReal(0.0600000000000000))*(pz)*(x735)))+(((x732)*(x745)))+(((IkReal(-1.00000000000000))*(x740)*(x747)))+(((py)*(x731)*(x740))));
if( IKabs(evalcond[0]) > 0.000001  || IKabs(evalcond[1]) > 0.000001  || IKabs(evalcond[2]) > 0.000001  || IKabs(evalcond[3]) > 0.000001  || IKabs(evalcond[4]) > 0.000001  || IKabs(evalcond[5]) > 0.000001  )
{
continue;
}
}

rotationfunction0(solutions);
}
}

}

}

} else
{
{
IkReal j19array[1], cj19array[1], sj19array[1];
bool j19valid[1]={false};
_nj19 = 1;
IkReal x749=((cj22)*(px));
IkReal x750=((pz)*(sj20));
IkReal x751=((cj22)*(py));
IkReal x752=((px)*(sj22));
IkReal x753=((py)*(sj22));
IkReal x754=((IkReal(0.0300000000000000))*(cj20)*(cj21));
IkReal x755=((IkReal(0.313800000000000))*(cj20)*(cj21));
if( IKabs(((gconst0)*(((((IkReal(0.0300000000000000))*(x752)))+(((py)*(x754)))+(((IkReal(-0.300000000000000))*(px)))+(((px)*(x750)))+(((IkReal(-1.00000000000000))*(x753)*(x755)))+(((IkReal(-1.00000000000000))*(x751)*(x754)))+(((IkReal(-0.313800000000000))*(x749))))))) < IKFAST_ATAN2_MAGTHRESH && IKabs(((gconst0)*(((((IkReal(0.300000000000000))*(py)))+(((px)*(x754)))+(((IkReal(0.313800000000000))*(x751)))+(((IkReal(-1.00000000000000))*(x752)*(x755)))+(((IkReal(-1.00000000000000))*(x749)*(x754)))+(((IkReal(-1.00000000000000))*(py)*(x750)))+(((IkReal(-0.0300000000000000))*(x753))))))) < IKFAST_ATAN2_MAGTHRESH )
    continue;
j19array[0]=IKatan2(((gconst0)*(((((IkReal(0.0300000000000000))*(x752)))+(((py)*(x754)))+(((IkReal(-0.300000000000000))*(px)))+(((px)*(x750)))+(((IkReal(-1.00000000000000))*(x753)*(x755)))+(((IkReal(-1.00000000000000))*(x751)*(x754)))+(((IkReal(-0.313800000000000))*(x749)))))), ((gconst0)*(((((IkReal(0.300000000000000))*(py)))+(((px)*(x754)))+(((IkReal(0.313800000000000))*(x751)))+(((IkReal(-1.00000000000000))*(x752)*(x755)))+(((IkReal(-1.00000000000000))*(x749)*(x754)))+(((IkReal(-1.00000000000000))*(py)*(x750)))+(((IkReal(-0.0300000000000000))*(x753)))))));
sj19array[0]=IKsin(j19array[0]);
cj19array[0]=IKcos(j19array[0]);
if( j19array[0] > IKPI )
{
    j19array[0]-=IK2PI;
}
else if( j19array[0] < -IKPI )
{    j19array[0]+=IK2PI;
}
j19valid[0] = true;
for(int ij19 = 0; ij19 < 1; ++ij19)
{
if( !j19valid[ij19] )
{
    continue;
}
_ij19[0] = ij19; _ij19[1] = -1;
for(int iij19 = ij19+1; iij19 < 1; ++iij19)
{
if( j19valid[iij19] && IKabs(cj19array[ij19]-cj19array[iij19]) < IKFAST_SOLUTION_THRESH && IKabs(sj19array[ij19]-sj19array[iij19]) < IKFAST_SOLUTION_THRESH )
{
    j19valid[iij19]=false; _ij19[1] = iij19; break; 
}
}
j19 = j19array[ij19]; cj19 = cj19array[ij19]; sj19 = sj19array[ij19];
{
IkReal evalcond[6];
IkReal x756=IKsin(j19);
IkReal x757=IKcos(j19);
IkReal x758=((IkReal(0.0600000000000000))*(py));
IkReal x759=((IkReal(0.0300000000000000))*(cj21));
IkReal x760=((IkReal(1.00000000000000))*(pz));
IkReal x761=((cj20)*(sj21));
IkReal x762=((IkReal(1.00000000000000))*(py));
IkReal x763=((IkReal(0.0300000000000000))*(sj22));
IkReal x764=((py)*(sj21));
IkReal x765=((IkReal(1.00000000000000))*(sj20));
IkReal x766=((IkReal(0.600000000000000))*(cj20));
IkReal x767=((IkReal(0.313800000000000))*(cj22));
IkReal x768=((IkReal(0.313800000000000))*(sj22));
IkReal x769=((sj20)*(sj21));
IkReal x770=((sj20)*(x757));
IkReal x771=((cj21)*(x756));
IkReal x772=((px)*(x757));
IkReal x773=((px)*(x756));
IkReal x774=((IkReal(0.0300000000000000))*(x769));
evalcond[0]=((((IkReal(-1.00000000000000))*(x756)*(x762)))+(((IkReal(-1.00000000000000))*(cj21)*(x768)))+(((IkReal(-1.00000000000000))*(cj22)*(x759)))+(x759)+(((IkReal(-1.00000000000000))*(x772))));
evalcond[1]=((IkReal(0.300000000000000))+(((IkReal(-1.00000000000000))*(cj20)*(x757)*(x762)))+(((IkReal(-1.00000000000000))*(x763)))+(((IkReal(-1.00000000000000))*(sj20)*(x760)))+(((cj20)*(x773)))+(x767));
evalcond[2]=((((sj21)*(x772)))+(((IkReal(-1.00000000000000))*(cj20)*(cj21)*(x760)))+(((cj21)*(py)*(x770)))+(((x756)*(x764)))+(((IkReal(-1.00000000000000))*(px)*(x765)*(x771))));
evalcond[3]=((IkReal(0.0300000000000000))+(((IkReal(-0.0300000000000000))*(cj22)))+(((x764)*(x770)))+(((IkReal(-1.00000000000000))*(x768)))+(((IkReal(-1.00000000000000))*(sj21)*(x765)*(x773)))+(((IkReal(-1.00000000000000))*(cj21)*(x772)))+(((IkReal(-1.00000000000000))*(x762)*(x771)))+(((IkReal(-1.00000000000000))*(x760)*(x761))));
evalcond[4]=((((x768)*(x769)))+(((cj20)*(x767)))+(((cj22)*(x774)))+(((IkReal(-1.00000000000000))*(x757)*(x762)))+(((IkReal(-1.00000000000000))*(cj20)*(x763)))+(x773)+(((IkReal(-1.00000000000000))*(x774)))+(((IkReal(0.300000000000000))*(cj20))));
evalcond[5]=((IkReal(0.00847044000000000))+(((py)*(x757)*(x766)))+(((IkReal(0.0600000000000000))*(cj21)*(x772)))+(((x758)*(x771)))+(((IkReal(0.600000000000000))*(pz)*(sj20)))+(((IkReal(0.0600000000000000))*(pz)*(x761)))+(((IkReal(0.0600000000000000))*(x769)*(x773)))+(((IkReal(-1.00000000000000))*(pp)))+(((IkReal(-1.00000000000000))*(x766)*(x773)))+(((IkReal(-1.00000000000000))*(x757)*(x758)*(x769))));
if( IKabs(evalcond[0]) > 0.000001  || IKabs(evalcond[1]) > 0.000001  || IKabs(evalcond[2]) > 0.000001  || IKabs(evalcond[3]) > 0.000001  || IKabs(evalcond[4]) > 0.000001  || IKabs(evalcond[5]) > 0.000001  )
{
continue;
}
}

rotationfunction0(solutions);
}
}

}

}
}
}

}

}

} else
{
{
IkReal j19array[2], cj19array[2], sj19array[2];
bool j19valid[2]={false};
_nj19 = 2;
IkReal x775=((IkReal(0.0300000000000000))*(cj21));
if( IKabs(((IkReal(-1.00000000000000))*(px))) < IKFAST_ATAN2_MAGTHRESH && IKabs(((IkReal(-1.00000000000000))*(py))) < IKFAST_ATAN2_MAGTHRESH )
    continue;
IkReal x776=((IkReal(1.00000000000000))*(IKatan2(((IkReal(-1.00000000000000))*(px)), ((IkReal(-1.00000000000000))*(py)))));
if( ((((px)*(px))+((py)*(py)))) < (IkReal)-0.00001 )
    continue;
if( (((((IKabs(IKabs(IKsqrt((((px)*(px))+((py)*(py)))))) != 0)?((IkReal)1/(IKabs(IKsqrt((((px)*(px))+((py)*(py))))))):(IkReal)1.0e30))*(((((IkReal(-0.313800000000000))*(cj21)*(sj22)))+(x775)+(((IkReal(-1.00000000000000))*(cj22)*(x775))))))) < -1-IKFAST_SINCOS_THRESH || (((((IKabs(IKabs(IKsqrt((((px)*(px))+((py)*(py)))))) != 0)?((IkReal)1/(IKabs(IKsqrt((((px)*(px))+((py)*(py))))))):(IkReal)1.0e30))*(((((IkReal(-0.313800000000000))*(cj21)*(sj22)))+(x775)+(((IkReal(-1.00000000000000))*(cj22)*(x775))))))) > 1+IKFAST_SINCOS_THRESH )
    continue;
IkReal x777=IKasin(((((IKabs(IKabs(IKsqrt((((px)*(px))+((py)*(py)))))) != 0)?((IkReal)1/(IKabs(IKsqrt((((px)*(px))+((py)*(py))))))):(IkReal)1.0e30))*(((((IkReal(-0.313800000000000))*(cj21)*(sj22)))+(x775)+(((IkReal(-1.00000000000000))*(cj22)*(x775)))))));
j19array[0]=((((IkReal(-1.00000000000000))*(x776)))+(((IkReal(-1.00000000000000))*(x777))));
sj19array[0]=IKsin(j19array[0]);
cj19array[0]=IKcos(j19array[0]);
j19array[1]=((IkReal(3.14159265358979))+(x777)+(((IkReal(-1.00000000000000))*(x776))));
sj19array[1]=IKsin(j19array[1]);
cj19array[1]=IKcos(j19array[1]);
if( j19array[0] > IKPI )
{
    j19array[0]-=IK2PI;
}
else if( j19array[0] < -IKPI )
{    j19array[0]+=IK2PI;
}
j19valid[0] = true;
if( j19array[1] > IKPI )
{
    j19array[1]-=IK2PI;
}
else if( j19array[1] < -IKPI )
{    j19array[1]+=IK2PI;
}
j19valid[1] = true;
for(int ij19 = 0; ij19 < 2; ++ij19)
{
if( !j19valid[ij19] )
{
    continue;
}
_ij19[0] = ij19; _ij19[1] = -1;
for(int iij19 = ij19+1; iij19 < 2; ++iij19)
{
if( j19valid[iij19] && IKabs(cj19array[ij19]-cj19array[iij19]) < IKFAST_SOLUTION_THRESH && IKabs(sj19array[ij19]-sj19array[iij19]) < IKFAST_SOLUTION_THRESH )
{
    j19valid[iij19]=false; _ij19[1] = iij19; break; 
}
}
j19 = j19array[ij19]; cj19 = cj19array[ij19]; sj19 = sj19array[ij19];
{
IkReal evalcond[2];
IkReal x778=(cj21)*(cj21);
IkReal x779=(px)*(px);
IkReal x780=(sj21)*(sj21);
IkReal x781=(py)*(py);
IkReal x782=IKsin(j19);
IkReal x783=IKcos(j19);
IkReal x784=((IkReal(0.0300000000000000))*(cj21)*(py));
IkReal x785=((IkReal(0.0300000000000000))*(cj21)*(px));
IkReal x786=((IkReal(0.313800000000000))*(cj21)*(sj22));
IkReal x787=((IkReal(1.00000000000000))*(x779));
IkReal x788=((px)*(py)*(x780));
IkReal x789=((px)*(py)*(x778));
evalcond[0]=((((x782)*(((((IkReal(-1.00000000000000))*(x789)))+(((IkReal(-1.00000000000000))*(x788)))))))+(((IkReal(-1.00000000000000))*(px)*(x786)))+(((x783)*(((((IkReal(-1.00000000000000))*(x780)*(x787)))+(((IkReal(-1.00000000000000))*(x778)*(x787)))))))+(x785)+(((IkReal(-1.00000000000000))*(cj22)*(x785))));
evalcond[1]=((((IkReal(-1.00000000000000))*(x784)))+(((cj22)*(x784)))+(((py)*(x786)))+(((x782)*(((((x778)*(x781)))+(((x780)*(x781)))))))+(((x783)*(((x788)+(x789))))));
if( IKabs(evalcond[0]) > 0.000001  || IKabs(evalcond[1]) > 0.000001  )
{
continue;
}
}

{
IkReal dummyeval[1];
IkReal gconst47;
IkReal x790=((px)*(sj19));
IkReal x791=((IkReal(0.313800000000000))*(cj22));
IkReal x792=((cj19)*(py));
IkReal x793=((IkReal(0.0300000000000000))*(sj22));
IkReal x794=((IkReal(0.0300000000000000))*(pz)*(sj21));
gconst47=IKsign(((((IkReal(-0.313800000000000))*(pz)*(sj21)*(sj22)))+(((x790)*(x791)))+(((IkReal(-1.00000000000000))*(x791)*(x792)))+(((IkReal(-1.00000000000000))*(x790)*(x793)))+(((x792)*(x793)))+(((IkReal(0.300000000000000))*(x790)))+(x794)+(((IkReal(-0.300000000000000))*(x792)))+(((IkReal(-1.00000000000000))*(cj22)*(x794)))));
IkReal x795=((pz)*(sj21));
IkReal x796=((px)*(sj19));
IkReal x797=((IkReal(10.4600000000000))*(cj22));
IkReal x798=((cj19)*(py));
dummyeval[0]=((((IkReal(10.0000000000000))*(x796)))+(((IkReal(-1.00000000000000))*(sj22)*(x796)))+(((IkReal(-1.00000000000000))*(cj22)*(x795)))+(((x796)*(x797)))+(((IkReal(-10.4600000000000))*(sj22)*(x795)))+(((IkReal(-1.00000000000000))*(x797)*(x798)))+(((sj22)*(x798)))+(((IkReal(-10.0000000000000))*(x798)))+(x795));
if( IKabs(dummyeval[0]) < 0.0000010000000000  )
{
{
IkReal dummyeval[1];
IkReal gconst46;
gconst46=IKsign(((((cj21)*((pz)*(pz))))+(((cj21)*((px)*(px))*((sj19)*(sj19))))+(((IkReal(-2.00000000000000))*(cj19)*(cj21)*(px)*(py)*(sj19)))+(((cj21)*((cj19)*(cj19))*((py)*(py))))));
dummyeval[0]=((((cj21)*((pz)*(pz))))+(((cj21)*((px)*(px))*((sj19)*(sj19))))+(((IkReal(-2.00000000000000))*(cj19)*(cj21)*(px)*(py)*(sj19)))+(((cj21)*((cj19)*(cj19))*((py)*(py)))));
if( IKabs(dummyeval[0]) < 0.0000010000000000  )
{
{
IkReal evalcond[4];
IkReal x799=((py)*(sj19));
IkReal x800=((cj19)*(px));
evalcond[0]=((IkReal(-3.14159265358979))+(IKfmod(((IkReal(1.57079632679490))+(j21)), IkReal(6.28318530717959))));
evalcond[1]=((IkReal(0.190270440000000))+(((IkReal(0.186480000000000))*(cj22)))+(((IkReal(-1.00000000000000))*(pp)))+(((IkReal(-0.0368280000000000))*(sj22))));
evalcond[2]=((((IkReal(-1.00000000000000))*(x800)))+(((IkReal(-1.00000000000000))*(x799))));
evalcond[3]=((x799)+(x800));
if( IKabs(evalcond[0]) < 0.0000010000000000  && IKabs(evalcond[1]) < 0.0000010000000000  && IKabs(evalcond[2]) < 0.0000010000000000  && IKabs(evalcond[3]) < 0.0000010000000000  )
{
{
IkReal dummyeval[1];
IkReal gconst49;
IkReal x801=((px)*(sj19));
IkReal x802=((IkReal(0.313800000000000))*(cj22));
IkReal x803=((cj19)*(py));
IkReal x804=((IkReal(0.0300000000000000))*(sj22));
IkReal x805=((IkReal(0.0300000000000000))*(pz));
gconst49=IKsign(((((IkReal(-0.300000000000000))*(x803)))+(((x803)*(x804)))+(((x801)*(x802)))+(((IkReal(-0.313800000000000))*(pz)*(sj22)))+(x805)+(((IkReal(-1.00000000000000))*(cj22)*(x805)))+(((IkReal(-1.00000000000000))*(x801)*(x804)))+(((IkReal(-1.00000000000000))*(x802)*(x803)))+(((IkReal(0.300000000000000))*(x801)))));
IkReal x806=((px)*(sj19));
IkReal x807=((IkReal(10.4600000000000))*(cj22));
IkReal x808=((cj19)*(py));
dummyeval[0]=((((IkReal(-1.00000000000000))*(x807)*(x808)))+(((x806)*(x807)))+(((IkReal(-10.4600000000000))*(pz)*(sj22)))+(((IkReal(-1.00000000000000))*(sj22)*(x806)))+(((IkReal(-10.0000000000000))*(x808)))+(pz)+(((IkReal(-1.00000000000000))*(cj22)*(pz)))+(((IkReal(10.0000000000000))*(x806)))+(((sj22)*(x808))));
if( IKabs(dummyeval[0]) < 0.0000010000000000  )
{
{
IkReal dummyeval[1];
IkReal gconst48;
gconst48=IKsign((((((cj19)*(cj19))*((py)*(py))))+((pz)*(pz))+(((IkReal(-2.00000000000000))*(cj19)*(px)*(py)*(sj19)))+((((px)*(px))*((sj19)*(sj19))))));
dummyeval[0]=(((((cj19)*(cj19))*((py)*(py))))+((pz)*(pz))+(((IkReal(-2.00000000000000))*(cj19)*(px)*(py)*(sj19)))+((((px)*(px))*((sj19)*(sj19)))));
if( IKabs(dummyeval[0]) < 0.0000010000000000  )
{
continue;

} else
{
{
IkReal j20array[1], cj20array[1], sj20array[1];
bool j20valid[1]={false};
_nj20 = 1;
IkReal x809=((px)*(sj19));
IkReal x810=((IkReal(0.313800000000000))*(cj22));
IkReal x811=((IkReal(0.0300000000000000))*(sj22));
IkReal x812=((IkReal(0.313800000000000))*(sj22));
IkReal x813=((cj19)*(py));
IkReal x814=((IkReal(0.0300000000000000))*(cj22));
if( IKabs(((gconst48)*(((((IkReal(0.0300000000000000))*(x809)))+(((pz)*(x810)))+(((x812)*(x813)))+(((IkReal(0.300000000000000))*(pz)))+(((IkReal(-1.00000000000000))*(x809)*(x814)))+(((IkReal(-1.00000000000000))*(x809)*(x812)))+(((IkReal(-1.00000000000000))*(pz)*(x811)))+(((x813)*(x814)))+(((IkReal(-0.0300000000000000))*(x813))))))) < IKFAST_ATAN2_MAGTHRESH && IKabs(((gconst48)*(((((IkReal(-0.300000000000000))*(x809)))+(((x809)*(x811)))+(((x810)*(x813)))+(((IkReal(-1.00000000000000))*(x809)*(x810)))+(((IkReal(-1.00000000000000))*(pz)*(x812)))+(((IkReal(-1.00000000000000))*(pz)*(x814)))+(((IkReal(-1.00000000000000))*(x811)*(x813)))+(((IkReal(0.300000000000000))*(x813)))+(((IkReal(0.0300000000000000))*(pz))))))) < IKFAST_ATAN2_MAGTHRESH )
    continue;
j20array[0]=IKatan2(((gconst48)*(((((IkReal(0.0300000000000000))*(x809)))+(((pz)*(x810)))+(((x812)*(x813)))+(((IkReal(0.300000000000000))*(pz)))+(((IkReal(-1.00000000000000))*(x809)*(x814)))+(((IkReal(-1.00000000000000))*(x809)*(x812)))+(((IkReal(-1.00000000000000))*(pz)*(x811)))+(((x813)*(x814)))+(((IkReal(-0.0300000000000000))*(x813)))))), ((gconst48)*(((((IkReal(-0.300000000000000))*(x809)))+(((x809)*(x811)))+(((x810)*(x813)))+(((IkReal(-1.00000000000000))*(x809)*(x810)))+(((IkReal(-1.00000000000000))*(pz)*(x812)))+(((IkReal(-1.00000000000000))*(pz)*(x814)))+(((IkReal(-1.00000000000000))*(x811)*(x813)))+(((IkReal(0.300000000000000))*(x813)))+(((IkReal(0.0300000000000000))*(pz)))))));
sj20array[0]=IKsin(j20array[0]);
cj20array[0]=IKcos(j20array[0]);
if( j20array[0] > IKPI )
{
    j20array[0]-=IK2PI;
}
else if( j20array[0] < -IKPI )
{    j20array[0]+=IK2PI;
}
j20valid[0] = true;
for(int ij20 = 0; ij20 < 1; ++ij20)
{
if( !j20valid[ij20] )
{
    continue;
}
_ij20[0] = ij20; _ij20[1] = -1;
for(int iij20 = ij20+1; iij20 < 1; ++iij20)
{
if( j20valid[iij20] && IKabs(cj20array[ij20]-cj20array[iij20]) < IKFAST_SOLUTION_THRESH && IKabs(sj20array[ij20]-sj20array[iij20]) < IKFAST_SOLUTION_THRESH )
{
    j20valid[iij20]=false; _ij20[1] = iij20; break; 
}
}
j20 = j20array[ij20]; cj20 = cj20array[ij20]; sj20 = sj20array[ij20];
{
IkReal evalcond[5];
IkReal x815=IKcos(j20);
IkReal x816=IKsin(j20);
IkReal x817=((IkReal(0.313800000000000))*(cj22));
IkReal x818=((IkReal(0.0300000000000000))*(sj22));
IkReal x819=((IkReal(1.00000000000000))*(pz));
IkReal x820=((px)*(sj19));
IkReal x821=((cj19)*(py));
IkReal x822=((IkReal(0.313800000000000))*(sj22));
IkReal x823=((pz)*(x815));
IkReal x824=((IkReal(0.0300000000000000))*(x815));
IkReal x825=((IkReal(0.0600000000000000))*(x816));
IkReal x826=((IkReal(0.0300000000000000))*(x816));
IkReal x827=((x815)*(x821));
evalcond[0]=((IkReal(0.300000000000000))+(((IkReal(-1.00000000000000))*(x816)*(x819)))+(((x815)*(x820)))+(((IkReal(-1.00000000000000))*(x818)))+(((IkReal(-1.00000000000000))*(x827)))+(x817));
evalcond[1]=((((IkReal(-1.00000000000000))*(x816)*(x818)))+(((IkReal(-1.00000000000000))*(cj22)*(x824)))+(((x816)*(x817)))+(((IkReal(-1.00000000000000))*(x815)*(x822)))+(((IkReal(-1.00000000000000))*(x819)))+(((IkReal(0.300000000000000))*(x816)))+(x824));
evalcond[2]=((IkReal(0.0300000000000000))+(((IkReal(-0.0300000000000000))*(cj22)))+(((IkReal(-1.00000000000000))*(x822)))+(((IkReal(-1.00000000000000))*(x816)*(x820)))+(((IkReal(-1.00000000000000))*(x815)*(x819)))+(((x816)*(x821))));
evalcond[3]=((((x815)*(x817)))+(((IkReal(-1.00000000000000))*(x826)))+(((cj22)*(x826)))+(((IkReal(-1.00000000000000))*(x815)*(x818)))+(((IkReal(0.300000000000000))*(x815)))+(((x816)*(x822)))+(((IkReal(-1.00000000000000))*(x821)))+(x820));
evalcond[4]=((IkReal(0.00847044000000000))+(((IkReal(0.0600000000000000))*(x823)))+(((x820)*(x825)))+(((IkReal(0.600000000000000))*(x827)))+(((IkReal(-1.00000000000000))*(pp)))+(((IkReal(-1.00000000000000))*(x821)*(x825)))+(((IkReal(-0.600000000000000))*(x815)*(x820)))+(((IkReal(0.600000000000000))*(pz)*(x816))));
if( IKabs(evalcond[0]) > 0.000001  || IKabs(evalcond[1]) > 0.000001  || IKabs(evalcond[2]) > 0.000001  || IKabs(evalcond[3]) > 0.000001  || IKabs(evalcond[4]) > 0.000001  )
{
continue;
}
}

rotationfunction0(solutions);
}
}

}

}

} else
{
{
IkReal j20array[1], cj20array[1], sj20array[1];
bool j20valid[1]={false};
_nj20 = 1;
IkReal x828=(cj22)*(cj22);
IkReal x829=(sj22)*(sj22);
IkReal x830=((cj22)*(sj22));
if( IKabs(((gconst49)*(((IkReal(0.00900000000000000))+(((IkReal(0.000414000000000000))*(cj22)))+(((px)*(pz)*(sj19)))+(((IkReal(0.00941400000000000))*(x829)))+(((IkReal(-0.0975704400000000))*(x830)))+(((IkReal(-0.0950400000000000))*(sj22)))+(((IkReal(-0.00941400000000000))*(x828)))+(((IkReal(-1.00000000000000))*(cj19)*(py)*(pz))))))) < IKFAST_ATAN2_MAGTHRESH && IKabs(((gconst49)*(((IkReal(-0.0900000000000000))+(((IkReal(0.0180000000000000))*(sj22)))+(((IkReal(-0.188280000000000))*(cj22)))+(((IkReal(0.0188280000000000))*(x830)))+(((IkReal(-0.0984704400000000))*(x828)))+(((IkReal(-0.000900000000000000))*(x829)))+((pz)*(pz)))))) < IKFAST_ATAN2_MAGTHRESH )
    continue;
j20array[0]=IKatan2(((gconst49)*(((IkReal(0.00900000000000000))+(((IkReal(0.000414000000000000))*(cj22)))+(((px)*(pz)*(sj19)))+(((IkReal(0.00941400000000000))*(x829)))+(((IkReal(-0.0975704400000000))*(x830)))+(((IkReal(-0.0950400000000000))*(sj22)))+(((IkReal(-0.00941400000000000))*(x828)))+(((IkReal(-1.00000000000000))*(cj19)*(py)*(pz)))))), ((gconst49)*(((IkReal(-0.0900000000000000))+(((IkReal(0.0180000000000000))*(sj22)))+(((IkReal(-0.188280000000000))*(cj22)))+(((IkReal(0.0188280000000000))*(x830)))+(((IkReal(-0.0984704400000000))*(x828)))+(((IkReal(-0.000900000000000000))*(x829)))+((pz)*(pz))))));
sj20array[0]=IKsin(j20array[0]);
cj20array[0]=IKcos(j20array[0]);
if( j20array[0] > IKPI )
{
    j20array[0]-=IK2PI;
}
else if( j20array[0] < -IKPI )
{    j20array[0]+=IK2PI;
}
j20valid[0] = true;
for(int ij20 = 0; ij20 < 1; ++ij20)
{
if( !j20valid[ij20] )
{
    continue;
}
_ij20[0] = ij20; _ij20[1] = -1;
for(int iij20 = ij20+1; iij20 < 1; ++iij20)
{
if( j20valid[iij20] && IKabs(cj20array[ij20]-cj20array[iij20]) < IKFAST_SOLUTION_THRESH && IKabs(sj20array[ij20]-sj20array[iij20]) < IKFAST_SOLUTION_THRESH )
{
    j20valid[iij20]=false; _ij20[1] = iij20; break; 
}
}
j20 = j20array[ij20]; cj20 = cj20array[ij20]; sj20 = sj20array[ij20];
{
IkReal evalcond[5];
IkReal x831=IKcos(j20);
IkReal x832=IKsin(j20);
IkReal x833=((IkReal(0.313800000000000))*(cj22));
IkReal x834=((IkReal(0.0300000000000000))*(sj22));
IkReal x835=((IkReal(1.00000000000000))*(pz));
IkReal x836=((px)*(sj19));
IkReal x837=((cj19)*(py));
IkReal x838=((IkReal(0.313800000000000))*(sj22));
IkReal x839=((pz)*(x831));
IkReal x840=((IkReal(0.0300000000000000))*(x831));
IkReal x841=((IkReal(0.0600000000000000))*(x832));
IkReal x842=((IkReal(0.0300000000000000))*(x832));
IkReal x843=((x831)*(x837));
evalcond[0]=((IkReal(0.300000000000000))+(((IkReal(-1.00000000000000))*(x832)*(x835)))+(((x831)*(x836)))+(((IkReal(-1.00000000000000))*(x834)))+(((IkReal(-1.00000000000000))*(x843)))+(x833));
evalcond[1]=((((IkReal(-1.00000000000000))*(x832)*(x834)))+(((IkReal(-1.00000000000000))*(cj22)*(x840)))+(((x832)*(x833)))+(((IkReal(-1.00000000000000))*(x835)))+(((IkReal(0.300000000000000))*(x832)))+(x840)+(((IkReal(-1.00000000000000))*(x831)*(x838))));
evalcond[2]=((IkReal(0.0300000000000000))+(((IkReal(-0.0300000000000000))*(cj22)))+(((x832)*(x837)))+(((IkReal(-1.00000000000000))*(x838)))+(((IkReal(-1.00000000000000))*(x831)*(x835)))+(((IkReal(-1.00000000000000))*(x832)*(x836))));
evalcond[3]=((((x831)*(x833)))+(((x832)*(x838)))+(((cj22)*(x842)))+(((IkReal(-1.00000000000000))*(x842)))+(((IkReal(-1.00000000000000))*(x837)))+(((IkReal(0.300000000000000))*(x831)))+(x836)+(((IkReal(-1.00000000000000))*(x831)*(x834))));
evalcond[4]=((IkReal(0.00847044000000000))+(((IkReal(0.600000000000000))*(x843)))+(((IkReal(0.0600000000000000))*(x839)))+(((IkReal(-1.00000000000000))*(x837)*(x841)))+(((IkReal(-1.00000000000000))*(pp)))+(((x836)*(x841)))+(((IkReal(0.600000000000000))*(pz)*(x832)))+(((IkReal(-0.600000000000000))*(x831)*(x836))));
if( IKabs(evalcond[0]) > 0.000001  || IKabs(evalcond[1]) > 0.000001  || IKabs(evalcond[2]) > 0.000001  || IKabs(evalcond[3]) > 0.000001  || IKabs(evalcond[4]) > 0.000001  )
{
continue;
}
}

rotationfunction0(solutions);
}
}

}

}

} else
{
IkReal x844=((((IkReal(-1.00000000000000))*(cj19)*(px)))+(((IkReal(-1.00000000000000))*(py)*(sj19))));
evalcond[0]=((IkReal(-3.14159265358979))+(IKfmod(((IkReal(4.71238898038469))+(j21)), IkReal(6.28318530717959))));
evalcond[1]=((IkReal(0.190270440000000))+(((IkReal(0.186480000000000))*(cj22)))+(((IkReal(-1.00000000000000))*(pp)))+(((IkReal(-0.0368280000000000))*(sj22))));
evalcond[2]=x844;
evalcond[3]=x844;
if( IKabs(evalcond[0]) < 0.0000010000000000  && IKabs(evalcond[1]) < 0.0000010000000000  && IKabs(evalcond[2]) < 0.0000010000000000  && IKabs(evalcond[3]) < 0.0000010000000000  )
{
{
IkReal dummyeval[1];
IkReal gconst51;
IkReal x845=((IkReal(0.313800000000000))*(sj22));
IkReal x846=((IkReal(0.0300000000000000))*(cj19)*(py));
IkReal x847=((IkReal(0.0300000000000000))*(px)*(sj19));
gconst51=IKsign(((((IkReal(-0.313800000000000))*(cj22)*(pz)))+(((IkReal(-1.00000000000000))*(cj22)*(x846)))+(((IkReal(-0.300000000000000))*(pz)))+(((cj22)*(x847)))+(((IkReal(-1.00000000000000))*(x847)))+(((IkReal(-1.00000000000000))*(cj19)*(py)*(x845)))+(((IkReal(0.0300000000000000))*(pz)*(sj22)))+(x846)+(((px)*(sj19)*(x845)))));
IkReal x848=((px)*(sj19));
IkReal x849=((cj19)*(py));
IkReal x850=((IkReal(10.4600000000000))*(sj22));
dummyeval[0]=((((x848)*(x850)))+(((IkReal(-10.4600000000000))*(cj22)*(pz)))+(((IkReal(-1.00000000000000))*(x849)*(x850)))+(((cj22)*(x848)))+(((IkReal(-1.00000000000000))*(cj22)*(x849)))+(((IkReal(-10.0000000000000))*(pz)))+(((IkReal(-1.00000000000000))*(x848)))+(x849)+(((pz)*(sj22))));
if( IKabs(dummyeval[0]) < 0.0000010000000000  )
{
{
IkReal dummyeval[1];
IkReal gconst50;
gconst50=IKsign((((((cj19)*(cj19))*((py)*(py))))+((pz)*(pz))+(((IkReal(-2.00000000000000))*(cj19)*(px)*(py)*(sj19)))+((((px)*(px))*((sj19)*(sj19))))));
dummyeval[0]=(((((cj19)*(cj19))*((py)*(py))))+((pz)*(pz))+(((IkReal(-2.00000000000000))*(cj19)*(px)*(py)*(sj19)))+((((px)*(px))*((sj19)*(sj19)))));
if( IKabs(dummyeval[0]) < 0.0000010000000000  )
{
{
IkReal evalcond[4];
IkReal x851=x844;
evalcond[0]=((IKabs(pz))+(IKabs(((IkReal(-3.14159265358979))+(IKfmod(((IkReal(3.14159265358979))+(j22)), IkReal(6.28318530717959)))))));
evalcond[1]=((IkReal(0.376750440000000))+(((IkReal(-1.00000000000000))*(pp))));
evalcond[2]=x851;
evalcond[3]=x851;
if( IKabs(evalcond[0]) < 0.0000010000000000  && IKabs(evalcond[1]) < 0.0000010000000000  && IKabs(evalcond[2]) < 0.0000010000000000  && IKabs(evalcond[3]) < 0.0000010000000000  )
{
{
IkReal dummyeval[1];
dummyeval[0]=((((cj19)*(py)))+(((IkReal(-1.00000000000000))*(px)*(sj19))));
if( IKabs(dummyeval[0]) < 0.0000010000000000  )
{
{
IkReal dummyeval[2];
IkReal x852=((cj19)*(py));
IkReal x853=((px)*(sj19));
dummyeval[0]=((((IkReal(-1.00000000000000))*((x852)*(x852))))+(((IkReal(2.00000000000000))*(x852)*(x853)))+(((IkReal(-1.00000000000000))*((x853)*(x853)))));
dummyeval[1]=((((IkReal(-1.00000000000000))*(x852)))+(x853));
if( IKabs(dummyeval[0]) < 0.0000010000000000  || IKabs(dummyeval[1]) < 0.0000010000000000  )
{
{
IkReal evalcond[7];
IkReal x854=((IkReal(1.00000000000000))*(pp));
IkReal x855=((IkReal(-1.00000000000000))*(py));
evalcond[0]=((IKabs(px))+(IKabs(((IkReal(-3.14159265358979))+(IKfmod(((IkReal(1.57079632679490))+(j19)), IkReal(6.28318530717959)))))));
evalcond[1]=((IkReal(0.376750440000000))+(((IkReal(-1.00000000000000))*(x854))));
evalcond[2]=x855;
evalcond[3]=IkReal(0.613800000000000);
evalcond[4]=x855;
evalcond[5]=IkReal(0);
evalcond[6]=((IkReal(0.00847044000000000))+(((IkReal(-1.00000000000000))*(x854))));
if( IKabs(evalcond[0]) < 0.0000010000000000  && IKabs(evalcond[1]) < 0.0000010000000000  && IKabs(evalcond[2]) < 0.0000010000000000  && IKabs(evalcond[3]) < 0.0000010000000000  && IKabs(evalcond[4]) < 0.0000010000000000  && IKabs(evalcond[5]) < 0.0000010000000000  && IKabs(evalcond[6]) < 0.0000010000000000  )
{
{
IkReal dummyeval[1];
dummyeval[0]=IkReal(-1.00000000000000);
if( IKabs(dummyeval[0]) < 0.0000001000000000  )
{
continue;

} else
{
IkReal op[2+1], zeror[2];
int numroots;
op[0]=IkReal(-1.00000000000000);
op[1]=IkReal(0);
op[2]=IkReal(1.00000000000000);
polyroots2(op,zeror,numroots);
IkReal j20array[2], cj20array[2], sj20array[2], tempj20array[1];
int numsolutions = 0;
for(int ij20 = 0; ij20 < numroots; ++ij20)
{
IkReal htj20 = zeror[ij20];
tempj20array[0]=((IkReal(2.00000000000000))*(atan(htj20)));
for(int kj20 = 0; kj20 < 1; ++kj20)
{
j20array[numsolutions] = tempj20array[kj20];
if( j20array[numsolutions] > IKPI )
{
    j20array[numsolutions]-=IK2PI;
}
else if( j20array[numsolutions] < -IKPI )
{
    j20array[numsolutions]+=IK2PI;
}
sj20array[numsolutions] = IKsin(j20array[numsolutions]);
cj20array[numsolutions] = IKcos(j20array[numsolutions]);
numsolutions++;
}
}
bool j20valid[2]={true,true};
_nj20 = 2;
for(int ij20 = 0; ij20 < numsolutions; ++ij20)
    {
if( !j20valid[ij20] )
{
    continue;
}
    j20 = j20array[ij20]; cj20 = cj20array[ij20]; sj20 = sj20array[ij20];
htj20 = IKtan(j20/2);

_ij20[0] = ij20; _ij20[1] = -1;
for(int iij20 = ij20+1; iij20 < numsolutions; ++iij20)
{
if( j20valid[iij20] && IKabs(cj20array[ij20]-cj20array[iij20]) < IKFAST_SOLUTION_THRESH && IKabs(sj20array[ij20]-sj20array[iij20]) < IKFAST_SOLUTION_THRESH )
{
    j20valid[iij20]=false; _ij20[1] = iij20; break; 
}
}
rotationfunction0(solutions);
    }

}

}

} else
{
IkReal x856=((IkReal(1.00000000000000))*(pp));
evalcond[0]=((IKabs(px))+(IKabs(((IkReal(-3.14159265358979))+(IKfmod(((IkReal(4.71238898038469))+(j19)), IkReal(6.28318530717959)))))));
evalcond[1]=((IkReal(0.376750440000000))+(((IkReal(-1.00000000000000))*(x856))));
evalcond[2]=py;
evalcond[3]=IkReal(0.613800000000000);
evalcond[4]=py;
evalcond[5]=IkReal(0);
evalcond[6]=((IkReal(0.00847044000000000))+(((IkReal(-1.00000000000000))*(x856))));
if( IKabs(evalcond[0]) < 0.0000010000000000  && IKabs(evalcond[1]) < 0.0000010000000000  && IKabs(evalcond[2]) < 0.0000010000000000  && IKabs(evalcond[3]) < 0.0000010000000000  && IKabs(evalcond[4]) < 0.0000010000000000  && IKabs(evalcond[5]) < 0.0000010000000000  && IKabs(evalcond[6]) < 0.0000010000000000  )
{
{
IkReal dummyeval[1];
dummyeval[0]=IkReal(-1.00000000000000);
if( IKabs(dummyeval[0]) < 0.0000001000000000  )
{
continue;

} else
{
IkReal op[2+1], zeror[2];
int numroots;
op[0]=IkReal(-1.00000000000000);
op[1]=IkReal(0);
op[2]=IkReal(1.00000000000000);
polyroots2(op,zeror,numroots);
IkReal j20array[2], cj20array[2], sj20array[2], tempj20array[1];
int numsolutions = 0;
for(int ij20 = 0; ij20 < numroots; ++ij20)
{
IkReal htj20 = zeror[ij20];
tempj20array[0]=((IkReal(2.00000000000000))*(atan(htj20)));
for(int kj20 = 0; kj20 < 1; ++kj20)
{
j20array[numsolutions] = tempj20array[kj20];
if( j20array[numsolutions] > IKPI )
{
    j20array[numsolutions]-=IK2PI;
}
else if( j20array[numsolutions] < -IKPI )
{
    j20array[numsolutions]+=IK2PI;
}
sj20array[numsolutions] = IKsin(j20array[numsolutions]);
cj20array[numsolutions] = IKcos(j20array[numsolutions]);
numsolutions++;
}
}
bool j20valid[2]={true,true};
_nj20 = 2;
for(int ij20 = 0; ij20 < numsolutions; ++ij20)
    {
if( !j20valid[ij20] )
{
    continue;
}
    j20 = j20array[ij20]; cj20 = cj20array[ij20]; sj20 = sj20array[ij20];
htj20 = IKtan(j20/2);

_ij20[0] = ij20; _ij20[1] = -1;
for(int iij20 = ij20+1; iij20 < numsolutions; ++iij20)
{
if( j20valid[iij20] && IKabs(cj20array[ij20]-cj20array[iij20]) < IKFAST_SOLUTION_THRESH && IKabs(sj20array[ij20]-sj20array[iij20]) < IKFAST_SOLUTION_THRESH )
{
    j20valid[iij20]=false; _ij20[1] = iij20; break; 
}
}
rotationfunction0(solutions);
    }

}

}

} else
{
IkReal x857=((IkReal(1.00000000000000))*(pp));
IkReal x858=((IkReal(-1.00000000000000))*(px));
evalcond[0]=((IKabs(py))+(IKabs(((IkReal(-3.14159265358979))+(IKfmod(((IkReal(3.14159265358979))+(j19)), IkReal(6.28318530717959)))))));
evalcond[1]=((IkReal(0.376750440000000))+(((IkReal(-1.00000000000000))*(x857))));
evalcond[2]=x858;
evalcond[3]=IkReal(0.613800000000000);
evalcond[4]=x858;
evalcond[5]=IkReal(0);
evalcond[6]=((IkReal(0.00847044000000000))+(((IkReal(-1.00000000000000))*(x857))));
if( IKabs(evalcond[0]) < 0.0000010000000000  && IKabs(evalcond[1]) < 0.0000010000000000  && IKabs(evalcond[2]) < 0.0000010000000000  && IKabs(evalcond[3]) < 0.0000010000000000  && IKabs(evalcond[4]) < 0.0000010000000000  && IKabs(evalcond[5]) < 0.0000010000000000  && IKabs(evalcond[6]) < 0.0000010000000000  )
{
{
IkReal dummyeval[1];
dummyeval[0]=IkReal(-1.00000000000000);
if( IKabs(dummyeval[0]) < 0.0000001000000000  )
{
continue;

} else
{
IkReal op[2+1], zeror[2];
int numroots;
op[0]=IkReal(-1.00000000000000);
op[1]=IkReal(0);
op[2]=IkReal(1.00000000000000);
polyroots2(op,zeror,numroots);
IkReal j20array[2], cj20array[2], sj20array[2], tempj20array[1];
int numsolutions = 0;
for(int ij20 = 0; ij20 < numroots; ++ij20)
{
IkReal htj20 = zeror[ij20];
tempj20array[0]=((IkReal(2.00000000000000))*(atan(htj20)));
for(int kj20 = 0; kj20 < 1; ++kj20)
{
j20array[numsolutions] = tempj20array[kj20];
if( j20array[numsolutions] > IKPI )
{
    j20array[numsolutions]-=IK2PI;
}
else if( j20array[numsolutions] < -IKPI )
{
    j20array[numsolutions]+=IK2PI;
}
sj20array[numsolutions] = IKsin(j20array[numsolutions]);
cj20array[numsolutions] = IKcos(j20array[numsolutions]);
numsolutions++;
}
}
bool j20valid[2]={true,true};
_nj20 = 2;
for(int ij20 = 0; ij20 < numsolutions; ++ij20)
    {
if( !j20valid[ij20] )
{
    continue;
}
    j20 = j20array[ij20]; cj20 = cj20array[ij20]; sj20 = sj20array[ij20];
htj20 = IKtan(j20/2);

_ij20[0] = ij20; _ij20[1] = -1;
for(int iij20 = ij20+1; iij20 < numsolutions; ++iij20)
{
if( j20valid[iij20] && IKabs(cj20array[ij20]-cj20array[iij20]) < IKFAST_SOLUTION_THRESH && IKabs(sj20array[ij20]-sj20array[iij20]) < IKFAST_SOLUTION_THRESH )
{
    j20valid[iij20]=false; _ij20[1] = iij20; break; 
}
}
rotationfunction0(solutions);
    }

}

}

} else
{
IkReal x859=((IkReal(1.00000000000000))*(pp));
evalcond[0]=((IKabs(py))+(IKabs(((IkReal(-3.14159265358979))+(IKfmod(j19, IkReal(6.28318530717959)))))));
evalcond[1]=((IkReal(0.376750440000000))+(((IkReal(-1.00000000000000))*(x859))));
evalcond[2]=px;
evalcond[3]=IkReal(0.613800000000000);
evalcond[4]=px;
evalcond[5]=IkReal(0);
evalcond[6]=((IkReal(0.00847044000000000))+(((IkReal(-1.00000000000000))*(x859))));
if( IKabs(evalcond[0]) < 0.0000010000000000  && IKabs(evalcond[1]) < 0.0000010000000000  && IKabs(evalcond[2]) < 0.0000010000000000  && IKabs(evalcond[3]) < 0.0000010000000000  && IKabs(evalcond[4]) < 0.0000010000000000  && IKabs(evalcond[5]) < 0.0000010000000000  && IKabs(evalcond[6]) < 0.0000010000000000  )
{
{
IkReal dummyeval[1];
dummyeval[0]=IkReal(-1.00000000000000);
if( IKabs(dummyeval[0]) < 0.0000001000000000  )
{
continue;

} else
{
IkReal op[2+1], zeror[2];
int numroots;
op[0]=IkReal(-1.00000000000000);
op[1]=IkReal(0);
op[2]=IkReal(1.00000000000000);
polyroots2(op,zeror,numroots);
IkReal j20array[2], cj20array[2], sj20array[2], tempj20array[1];
int numsolutions = 0;
for(int ij20 = 0; ij20 < numroots; ++ij20)
{
IkReal htj20 = zeror[ij20];
tempj20array[0]=((IkReal(2.00000000000000))*(atan(htj20)));
for(int kj20 = 0; kj20 < 1; ++kj20)
{
j20array[numsolutions] = tempj20array[kj20];
if( j20array[numsolutions] > IKPI )
{
    j20array[numsolutions]-=IK2PI;
}
else if( j20array[numsolutions] < -IKPI )
{
    j20array[numsolutions]+=IK2PI;
}
sj20array[numsolutions] = IKsin(j20array[numsolutions]);
cj20array[numsolutions] = IKcos(j20array[numsolutions]);
numsolutions++;
}
}
bool j20valid[2]={true,true};
_nj20 = 2;
for(int ij20 = 0; ij20 < numsolutions; ++ij20)
    {
if( !j20valid[ij20] )
{
    continue;
}
    j20 = j20array[ij20]; cj20 = cj20array[ij20]; sj20 = sj20array[ij20];
htj20 = IKtan(j20/2);

_ij20[0] = ij20; _ij20[1] = -1;
for(int iij20 = ij20+1; iij20 < numsolutions; ++iij20)
{
if( j20valid[iij20] && IKabs(cj20array[ij20]-cj20array[iij20]) < IKFAST_SOLUTION_THRESH && IKabs(sj20array[ij20]-sj20array[iij20]) < IKFAST_SOLUTION_THRESH )
{
    j20valid[iij20]=false; _ij20[1] = iij20; break; 
}
}
rotationfunction0(solutions);
    }

}

}

} else
{
if( 1 )
{
continue;

} else
{
}
}
}
}
}
}

} else
{
{
IkReal j20array[1], cj20array[1], sj20array[1];
bool j20valid[1]={false};
_nj20 = 1;
IkReal x860=((cj19)*(py));
IkReal x861=((IkReal(5000.00000000000))*(pp));
IkReal x862=((px)*(sj19));
if( IKabs(((((IKabs(((((IkReal(-300.000000000000))*((x860)*(x860))))+(((IkReal(600.000000000000))*(x860)*(x862)))+(((IkReal(-300.000000000000))*((x862)*(x862)))))) != 0)?((IkReal)1/(((((IkReal(-300.000000000000))*((x860)*(x860))))+(((IkReal(600.000000000000))*(x860)*(x862)))+(((IkReal(-300.000000000000))*((x862)*(x862))))))):(IkReal)1.0e30))*(((((IkReal(-1883.75220000000))*(x862)))+(((IkReal(-1.00000000000000))*(x860)*(x861)))+(((IkReal(1883.75220000000))*(x860)))+(((x861)*(x862))))))) < IKFAST_ATAN2_MAGTHRESH && IKabs(((IkReal(-3069.00000000000))*(((IKabs(((((IkReal(-5000.00000000000))*(x860)))+(((IkReal(5000.00000000000))*(x862))))) != 0)?((IkReal)1/(((((IkReal(-5000.00000000000))*(x860)))+(((IkReal(5000.00000000000))*(x862)))))):(IkReal)1.0e30)))) < IKFAST_ATAN2_MAGTHRESH && IKabs(IKsqr(((((IKabs(((((IkReal(-300.000000000000))*((x860)*(x860))))+(((IkReal(600.000000000000))*(x860)*(x862)))+(((IkReal(-300.000000000000))*((x862)*(x862)))))) != 0)?((IkReal)1/(((((IkReal(-300.000000000000))*((x860)*(x860))))+(((IkReal(600.000000000000))*(x860)*(x862)))+(((IkReal(-300.000000000000))*((x862)*(x862))))))):(IkReal)1.0e30))*(((((IkReal(-1883.75220000000))*(x862)))+(((IkReal(-1.00000000000000))*(x860)*(x861)))+(((IkReal(1883.75220000000))*(x860)))+(((x861)*(x862)))))))+IKsqr(((IkReal(-3069.00000000000))*(((IKabs(((((IkReal(-5000.00000000000))*(x860)))+(((IkReal(5000.00000000000))*(x862))))) != 0)?((IkReal)1/(((((IkReal(-5000.00000000000))*(x860)))+(((IkReal(5000.00000000000))*(x862)))))):(IkReal)1.0e30))))-1) <= IKFAST_SINCOS_THRESH )
    continue;
j20array[0]=IKatan2(((((IKabs(((((IkReal(-300.000000000000))*((x860)*(x860))))+(((IkReal(600.000000000000))*(x860)*(x862)))+(((IkReal(-300.000000000000))*((x862)*(x862)))))) != 0)?((IkReal)1/(((((IkReal(-300.000000000000))*((x860)*(x860))))+(((IkReal(600.000000000000))*(x860)*(x862)))+(((IkReal(-300.000000000000))*((x862)*(x862))))))):(IkReal)1.0e30))*(((((IkReal(-1883.75220000000))*(x862)))+(((IkReal(-1.00000000000000))*(x860)*(x861)))+(((IkReal(1883.75220000000))*(x860)))+(((x861)*(x862)))))), ((IkReal(-3069.00000000000))*(((IKabs(((((IkReal(-5000.00000000000))*(x860)))+(((IkReal(5000.00000000000))*(x862))))) != 0)?((IkReal)1/(((((IkReal(-5000.00000000000))*(x860)))+(((IkReal(5000.00000000000))*(x862)))))):(IkReal)1.0e30))));
sj20array[0]=IKsin(j20array[0]);
cj20array[0]=IKcos(j20array[0]);
if( j20array[0] > IKPI )
{
    j20array[0]-=IK2PI;
}
else if( j20array[0] < -IKPI )
{    j20array[0]+=IK2PI;
}
j20valid[0] = true;
for(int ij20 = 0; ij20 < 1; ++ij20)
{
if( !j20valid[ij20] )
{
    continue;
}
_ij20[0] = ij20; _ij20[1] = -1;
for(int iij20 = ij20+1; iij20 < 1; ++iij20)
{
if( j20valid[iij20] && IKabs(cj20array[ij20]-cj20array[iij20]) < IKFAST_SOLUTION_THRESH && IKabs(sj20array[ij20]-sj20array[iij20]) < IKFAST_SOLUTION_THRESH )
{
    j20valid[iij20]=false; _ij20[1] = iij20; break; 
}
}
j20 = j20array[ij20]; cj20 = cj20array[ij20]; sj20 = sj20array[ij20];
{
IkReal evalcond[5];
IkReal x863=IKcos(j20);
IkReal x864=IKsin(j20);
IkReal x865=((px)*(sj19));
IkReal x866=((cj19)*(py));
IkReal x867=((IkReal(1.00000000000000))*(x866));
IkReal x868=((IkReal(0.600000000000000))*(x863));
IkReal x869=((IkReal(0.0600000000000000))*(x864));
evalcond[0]=((IkReal(0.613800000000000))+(((x863)*(x865)))+(((IkReal(-1.00000000000000))*(x863)*(x867))));
evalcond[1]=((IkReal(0.613800000000000))*(x864));
evalcond[2]=((((IkReal(-1.00000000000000))*(x864)*(x867)))+(((x864)*(x865))));
evalcond[3]=((((IkReal(-1.00000000000000))*(x867)))+(((IkReal(0.613800000000000))*(x863)))+(x865));
evalcond[4]=((IkReal(0.00847044000000000))+(((IkReal(-1.00000000000000))*(x865)*(x869)))+(((IkReal(-1.00000000000000))*(x865)*(x868)))+(((x866)*(x869)))+(((x866)*(x868)))+(((IkReal(-1.00000000000000))*(pp))));
if( IKabs(evalcond[0]) > 0.000001  || IKabs(evalcond[1]) > 0.000001  || IKabs(evalcond[2]) > 0.000001  || IKabs(evalcond[3]) > 0.000001  || IKabs(evalcond[4]) > 0.000001  )
{
continue;
}
}

rotationfunction0(solutions);
}
}

}

}

} else
{
{
IkReal j20array[1], cj20array[1], sj20array[1];
bool j20valid[1]={false};
_nj20 = 1;
IkReal x870=((px)*(sj19));
IkReal x871=((cj19)*(py));
if( IKabs(((((IKabs(((((IkReal(-184.140000000000))*(x870)))+(((IkReal(184.140000000000))*(x871))))) != 0)?((IkReal)1/(((((IkReal(-184.140000000000))*(x870)))+(((IkReal(184.140000000000))*(x871)))))):(IkReal)1.0e30))*(((IkReal(-25.9957803600000))+(((IkReal(-3000.00000000000))*((x870)*(x870))))+(((IkReal(6000.00000000000))*(x870)*(x871)))+(((IkReal(-3000.00000000000))*((x871)*(x871))))+(((IkReal(3069.00000000000))*(pp))))))) < IKFAST_ATAN2_MAGTHRESH && IKabs(((((IkReal(1.62919517758227))*(x871)))+(((IkReal(-1.62919517758227))*(x870))))) < IKFAST_ATAN2_MAGTHRESH && IKabs(IKsqr(((((IKabs(((((IkReal(-184.140000000000))*(x870)))+(((IkReal(184.140000000000))*(x871))))) != 0)?((IkReal)1/(((((IkReal(-184.140000000000))*(x870)))+(((IkReal(184.140000000000))*(x871)))))):(IkReal)1.0e30))*(((IkReal(-25.9957803600000))+(((IkReal(-3000.00000000000))*((x870)*(x870))))+(((IkReal(6000.00000000000))*(x870)*(x871)))+(((IkReal(-3000.00000000000))*((x871)*(x871))))+(((IkReal(3069.00000000000))*(pp)))))))+IKsqr(((((IkReal(1.62919517758227))*(x871)))+(((IkReal(-1.62919517758227))*(x870)))))-1) <= IKFAST_SINCOS_THRESH )
    continue;
j20array[0]=IKatan2(((((IKabs(((((IkReal(-184.140000000000))*(x870)))+(((IkReal(184.140000000000))*(x871))))) != 0)?((IkReal)1/(((((IkReal(-184.140000000000))*(x870)))+(((IkReal(184.140000000000))*(x871)))))):(IkReal)1.0e30))*(((IkReal(-25.9957803600000))+(((IkReal(-3000.00000000000))*((x870)*(x870))))+(((IkReal(6000.00000000000))*(x870)*(x871)))+(((IkReal(-3000.00000000000))*((x871)*(x871))))+(((IkReal(3069.00000000000))*(pp)))))), ((((IkReal(1.62919517758227))*(x871)))+(((IkReal(-1.62919517758227))*(x870)))));
sj20array[0]=IKsin(j20array[0]);
cj20array[0]=IKcos(j20array[0]);
if( j20array[0] > IKPI )
{
    j20array[0]-=IK2PI;
}
else if( j20array[0] < -IKPI )
{    j20array[0]+=IK2PI;
}
j20valid[0] = true;
for(int ij20 = 0; ij20 < 1; ++ij20)
{
if( !j20valid[ij20] )
{
    continue;
}
_ij20[0] = ij20; _ij20[1] = -1;
for(int iij20 = ij20+1; iij20 < 1; ++iij20)
{
if( j20valid[iij20] && IKabs(cj20array[ij20]-cj20array[iij20]) < IKFAST_SOLUTION_THRESH && IKabs(sj20array[ij20]-sj20array[iij20]) < IKFAST_SOLUTION_THRESH )
{
    j20valid[iij20]=false; _ij20[1] = iij20; break; 
}
}
j20 = j20array[ij20]; cj20 = cj20array[ij20]; sj20 = sj20array[ij20];
{
IkReal evalcond[5];
IkReal x872=IKcos(j20);
IkReal x873=IKsin(j20);
IkReal x874=((px)*(sj19));
IkReal x875=((cj19)*(py));
IkReal x876=((IkReal(1.00000000000000))*(x875));
IkReal x877=((IkReal(0.600000000000000))*(x872));
IkReal x878=((IkReal(0.0600000000000000))*(x873));
evalcond[0]=((IkReal(0.613800000000000))+(((x872)*(x874)))+(((IkReal(-1.00000000000000))*(x872)*(x876))));
evalcond[1]=((IkReal(0.613800000000000))*(x873));
evalcond[2]=((((x873)*(x874)))+(((IkReal(-1.00000000000000))*(x873)*(x876))));
evalcond[3]=((((IkReal(0.613800000000000))*(x872)))+(x874)+(((IkReal(-1.00000000000000))*(x876))));
evalcond[4]=((IkReal(0.00847044000000000))+(((IkReal(-1.00000000000000))*(pp)))+(((x875)*(x878)))+(((x875)*(x877)))+(((IkReal(-1.00000000000000))*(x874)*(x878)))+(((IkReal(-1.00000000000000))*(x874)*(x877))));
if( IKabs(evalcond[0]) > 0.000001  || IKabs(evalcond[1]) > 0.000001  || IKabs(evalcond[2]) > 0.000001  || IKabs(evalcond[3]) > 0.000001  || IKabs(evalcond[4]) > 0.000001  )
{
continue;
}
}

rotationfunction0(solutions);
}
}

}

}

} else
{
if( 1 )
{
continue;

} else
{
}
}
}

} else
{
{
IkReal j20array[1], cj20array[1], sj20array[1];
bool j20valid[1]={false};
_nj20 = 1;
IkReal x879=((px)*(sj19));
IkReal x880=((IkReal(0.313800000000000))*(cj22));
IkReal x881=((IkReal(0.0300000000000000))*(sj22));
IkReal x882=((IkReal(0.313800000000000))*(sj22));
IkReal x883=((cj19)*(py));
IkReal x884=((IkReal(0.0300000000000000))*(cj22));
if( IKabs(((gconst50)*(((((IkReal(-1.00000000000000))*(x883)*(x884)))+(((IkReal(-0.0300000000000000))*(x879)))+(((x879)*(x884)))+(((x879)*(x882)))+(((pz)*(x880)))+(((IkReal(-1.00000000000000))*(x882)*(x883)))+(((IkReal(-1.00000000000000))*(pz)*(x881)))+(((IkReal(0.300000000000000))*(pz)))+(((IkReal(0.0300000000000000))*(x883))))))) < IKFAST_ATAN2_MAGTHRESH && IKabs(((gconst50)*(((((IkReal(-0.300000000000000))*(x879)))+(((IkReal(-1.00000000000000))*(x879)*(x880)))+(((x879)*(x881)))+(((pz)*(x882)))+(((pz)*(x884)))+(((x880)*(x883)))+(((IkReal(-1.00000000000000))*(x881)*(x883)))+(((IkReal(0.300000000000000))*(x883)))+(((IkReal(-0.0300000000000000))*(pz))))))) < IKFAST_ATAN2_MAGTHRESH )
    continue;
j20array[0]=IKatan2(((gconst50)*(((((IkReal(-1.00000000000000))*(x883)*(x884)))+(((IkReal(-0.0300000000000000))*(x879)))+(((x879)*(x884)))+(((x879)*(x882)))+(((pz)*(x880)))+(((IkReal(-1.00000000000000))*(x882)*(x883)))+(((IkReal(-1.00000000000000))*(pz)*(x881)))+(((IkReal(0.300000000000000))*(pz)))+(((IkReal(0.0300000000000000))*(x883)))))), ((gconst50)*(((((IkReal(-0.300000000000000))*(x879)))+(((IkReal(-1.00000000000000))*(x879)*(x880)))+(((x879)*(x881)))+(((pz)*(x882)))+(((pz)*(x884)))+(((x880)*(x883)))+(((IkReal(-1.00000000000000))*(x881)*(x883)))+(((IkReal(0.300000000000000))*(x883)))+(((IkReal(-0.0300000000000000))*(pz)))))));
sj20array[0]=IKsin(j20array[0]);
cj20array[0]=IKcos(j20array[0]);
if( j20array[0] > IKPI )
{
    j20array[0]-=IK2PI;
}
else if( j20array[0] < -IKPI )
{    j20array[0]+=IK2PI;
}
j20valid[0] = true;
for(int ij20 = 0; ij20 < 1; ++ij20)
{
if( !j20valid[ij20] )
{
    continue;
}
_ij20[0] = ij20; _ij20[1] = -1;
for(int iij20 = ij20+1; iij20 < 1; ++iij20)
{
if( j20valid[iij20] && IKabs(cj20array[ij20]-cj20array[iij20]) < IKFAST_SOLUTION_THRESH && IKabs(sj20array[ij20]-sj20array[iij20]) < IKFAST_SOLUTION_THRESH )
{
    j20valid[iij20]=false; _ij20[1] = iij20; break; 
}
}
j20 = j20array[ij20]; cj20 = cj20array[ij20]; sj20 = sj20array[ij20];
{
IkReal evalcond[5];
IkReal x885=IKcos(j20);
IkReal x886=IKsin(j20);
IkReal x887=((IkReal(0.313800000000000))*(cj22));
IkReal x888=((IkReal(0.0300000000000000))*(sj22));
IkReal x889=((IkReal(1.00000000000000))*(pz));
IkReal x890=((px)*(sj19));
IkReal x891=((cj19)*(py));
IkReal x892=((IkReal(0.313800000000000))*(sj22));
IkReal x893=((pz)*(x885));
IkReal x894=((IkReal(0.0300000000000000))*(x885));
IkReal x895=((IkReal(0.0300000000000000))*(x886));
IkReal x896=((IkReal(0.0600000000000000))*(x886));
IkReal x897=((x885)*(x891));
evalcond[0]=((IkReal(0.300000000000000))+(((IkReal(-1.00000000000000))*(x886)*(x889)))+(((IkReal(-1.00000000000000))*(x888)))+(((IkReal(-1.00000000000000))*(x897)))+(x887)+(((x885)*(x890))));
evalcond[1]=((((IkReal(-1.00000000000000))*(x886)*(x888)))+(((x886)*(x887)))+(((IkReal(-1.00000000000000))*(x894)))+(((IkReal(-1.00000000000000))*(x889)))+(((IkReal(0.300000000000000))*(x886)))+(((cj22)*(x894)))+(((x885)*(x892))));
evalcond[2]=((IkReal(0.0300000000000000))+(((x886)*(x890)))+(((IkReal(-0.0300000000000000))*(cj22)))+(((IkReal(-1.00000000000000))*(x886)*(x891)))+(((IkReal(-1.00000000000000))*(x892)))+(x893));
evalcond[3]=((((IkReal(-1.00000000000000))*(cj22)*(x895)))+(((IkReal(-1.00000000000000))*(x891)))+(((IkReal(0.300000000000000))*(x885)))+(x895)+(x890)+(((IkReal(-1.00000000000000))*(x885)*(x888)))+(((x885)*(x887)))+(((IkReal(-1.00000000000000))*(x886)*(x892))));
evalcond[4]=((IkReal(0.00847044000000000))+(((IkReal(0.600000000000000))*(x897)))+(((IkReal(-1.00000000000000))*(pp)))+(((IkReal(-0.0600000000000000))*(x893)))+(((IkReal(-0.600000000000000))*(x885)*(x890)))+(((x891)*(x896)))+(((IkReal(0.600000000000000))*(pz)*(x886)))+(((IkReal(-1.00000000000000))*(x890)*(x896))));
if( IKabs(evalcond[0]) > 0.000001  || IKabs(evalcond[1]) > 0.000001  || IKabs(evalcond[2]) > 0.000001  || IKabs(evalcond[3]) > 0.000001  || IKabs(evalcond[4]) > 0.000001  )
{
continue;
}
}

rotationfunction0(solutions);
}
}

}

}

} else
{
{
IkReal j20array[1], cj20array[1], sj20array[1];
bool j20valid[1]={false};
_nj20 = 1;
IkReal x898=(sj22)*(sj22);
IkReal x899=(cj22)*(cj22);
IkReal x900=((IkReal(0.0188280000000000))*(sj22));
if( IKabs(((gconst51)*(((IkReal(0.000900000000000000))+(((IkReal(0.0984704400000000))*(x898)))+(((IkReal(0.000900000000000000))*(x899)))+(((IkReal(-1.00000000000000))*(x900)))+(((IkReal(-1.00000000000000))*((pz)*(pz))))+(((IkReal(-0.00180000000000000))*(cj22)))+(((cj22)*(x900))))))) < IKFAST_ATAN2_MAGTHRESH && IKabs(((gconst51)*(((IkReal(0.00900000000000000))+(((IkReal(0.000414000000000000))*(cj22)))+(((px)*(pz)*(sj19)))+(((IkReal(-0.0950400000000000))*(sj22)))+(((IkReal(-0.0975704400000000))*(cj22)*(sj22)))+(((IkReal(0.00941400000000000))*(x898)))+(((IkReal(-0.00941400000000000))*(x899)))+(((IkReal(-1.00000000000000))*(cj19)*(py)*(pz))))))) < IKFAST_ATAN2_MAGTHRESH )
    continue;
j20array[0]=IKatan2(((gconst51)*(((IkReal(0.000900000000000000))+(((IkReal(0.0984704400000000))*(x898)))+(((IkReal(0.000900000000000000))*(x899)))+(((IkReal(-1.00000000000000))*(x900)))+(((IkReal(-1.00000000000000))*((pz)*(pz))))+(((IkReal(-0.00180000000000000))*(cj22)))+(((cj22)*(x900)))))), ((gconst51)*(((IkReal(0.00900000000000000))+(((IkReal(0.000414000000000000))*(cj22)))+(((px)*(pz)*(sj19)))+(((IkReal(-0.0950400000000000))*(sj22)))+(((IkReal(-0.0975704400000000))*(cj22)*(sj22)))+(((IkReal(0.00941400000000000))*(x898)))+(((IkReal(-0.00941400000000000))*(x899)))+(((IkReal(-1.00000000000000))*(cj19)*(py)*(pz)))))));
sj20array[0]=IKsin(j20array[0]);
cj20array[0]=IKcos(j20array[0]);
if( j20array[0] > IKPI )
{
    j20array[0]-=IK2PI;
}
else if( j20array[0] < -IKPI )
{    j20array[0]+=IK2PI;
}
j20valid[0] = true;
for(int ij20 = 0; ij20 < 1; ++ij20)
{
if( !j20valid[ij20] )
{
    continue;
}
_ij20[0] = ij20; _ij20[1] = -1;
for(int iij20 = ij20+1; iij20 < 1; ++iij20)
{
if( j20valid[iij20] && IKabs(cj20array[ij20]-cj20array[iij20]) < IKFAST_SOLUTION_THRESH && IKabs(sj20array[ij20]-sj20array[iij20]) < IKFAST_SOLUTION_THRESH )
{
    j20valid[iij20]=false; _ij20[1] = iij20; break; 
}
}
j20 = j20array[ij20]; cj20 = cj20array[ij20]; sj20 = sj20array[ij20];
{
IkReal evalcond[5];
IkReal x901=IKcos(j20);
IkReal x902=IKsin(j20);
IkReal x903=((IkReal(0.313800000000000))*(cj22));
IkReal x904=((IkReal(0.0300000000000000))*(sj22));
IkReal x905=((IkReal(1.00000000000000))*(pz));
IkReal x906=((px)*(sj19));
IkReal x907=((cj19)*(py));
IkReal x908=((IkReal(0.313800000000000))*(sj22));
IkReal x909=((pz)*(x901));
IkReal x910=((IkReal(0.0300000000000000))*(x901));
IkReal x911=((IkReal(0.0300000000000000))*(x902));
IkReal x912=((IkReal(0.0600000000000000))*(x902));
IkReal x913=((x901)*(x907));
evalcond[0]=((IkReal(0.300000000000000))+(((IkReal(-1.00000000000000))*(x902)*(x905)))+(((x901)*(x906)))+(((IkReal(-1.00000000000000))*(x904)))+(((IkReal(-1.00000000000000))*(x913)))+(x903));
evalcond[1]=((((cj22)*(x910)))+(((IkReal(-1.00000000000000))*(x902)*(x904)))+(((x901)*(x908)))+(((IkReal(-1.00000000000000))*(x905)))+(((x902)*(x903)))+(((IkReal(-1.00000000000000))*(x910)))+(((IkReal(0.300000000000000))*(x902))));
evalcond[2]=((IkReal(0.0300000000000000))+(((IkReal(-1.00000000000000))*(x902)*(x907)))+(((IkReal(-0.0300000000000000))*(cj22)))+(((IkReal(-1.00000000000000))*(x908)))+(((x902)*(x906)))+(x909));
evalcond[3]=((((IkReal(-1.00000000000000))*(x902)*(x908)))+(((x901)*(x903)))+(((IkReal(-1.00000000000000))*(x907)))+(((IkReal(0.300000000000000))*(x901)))+(((IkReal(-1.00000000000000))*(x901)*(x904)))+(((IkReal(-1.00000000000000))*(cj22)*(x911)))+(x911)+(x906));
evalcond[4]=((IkReal(0.00847044000000000))+(((IkReal(0.600000000000000))*(x913)))+(((IkReal(-1.00000000000000))*(x906)*(x912)))+(((IkReal(0.600000000000000))*(pz)*(x902)))+(((IkReal(-0.600000000000000))*(x901)*(x906)))+(((IkReal(-1.00000000000000))*(pp)))+(((IkReal(-0.0600000000000000))*(x909)))+(((x907)*(x912))));
if( IKabs(evalcond[0]) > 0.000001  || IKabs(evalcond[1]) > 0.000001  || IKabs(evalcond[2]) > 0.000001  || IKabs(evalcond[3]) > 0.000001  || IKabs(evalcond[4]) > 0.000001  )
{
continue;
}
}

rotationfunction0(solutions);
}
}

}

}

} else
{
if( 1 )
{
continue;

} else
{
}
}
}
}

} else
{
{
IkReal j20array[1], cj20array[1], sj20array[1];
bool j20valid[1]={false};
_nj20 = 1;
IkReal x914=((px)*(sj21));
IkReal x915=((cj19)*(py));
IkReal x916=((IkReal(0.0300000000000000))*(sj22));
IkReal x917=((IkReal(0.300000000000000))*(cj21));
IkReal x918=((IkReal(0.313800000000000))*(cj21)*(cj22));
IkReal x919=((cj21)*(px)*(sj19));
IkReal x920=((cj19)*(sj19)*(sj21));
if( IKabs(((gconst46)*(((((IkReal(-1.00000000000000))*(cj19)*(x914)*(x915)))+(((pz)*(x918)))+(((pz)*(x917)))+(((IkReal(-1.00000000000000))*(py)*(sj19)*(sj21)*(x915)))+(((cj19)*(px)*(sj19)*(x914)))+(((IkReal(-1.00000000000000))*(cj21)*(pz)*(x916)))+(((py)*(x914)*((sj19)*(sj19)))))))) < IKFAST_ATAN2_MAGTHRESH && IKabs(((gconst46)*(((((IkReal(-1.00000000000000))*(cj21)*(x915)*(x916)))+(((IkReal(-1.00000000000000))*(px)*(sj19)*(x917)))+(((IkReal(-1.00000000000000))*(px)*(sj19)*(x918)))+(((py)*(pz)*(sj19)*(sj21)))+(((x916)*(x919)))+(((x915)*(x917)))+(((x915)*(x918)))+(((cj19)*(pz)*(x914))))))) < IKFAST_ATAN2_MAGTHRESH )
    continue;
j20array[0]=IKatan2(((gconst46)*(((((IkReal(-1.00000000000000))*(cj19)*(x914)*(x915)))+(((pz)*(x918)))+(((pz)*(x917)))+(((IkReal(-1.00000000000000))*(py)*(sj19)*(sj21)*(x915)))+(((cj19)*(px)*(sj19)*(x914)))+(((IkReal(-1.00000000000000))*(cj21)*(pz)*(x916)))+(((py)*(x914)*((sj19)*(sj19))))))), ((gconst46)*(((((IkReal(-1.00000000000000))*(cj21)*(x915)*(x916)))+(((IkReal(-1.00000000000000))*(px)*(sj19)*(x917)))+(((IkReal(-1.00000000000000))*(px)*(sj19)*(x918)))+(((py)*(pz)*(sj19)*(sj21)))+(((x916)*(x919)))+(((x915)*(x917)))+(((x915)*(x918)))+(((cj19)*(pz)*(x914)))))));
sj20array[0]=IKsin(j20array[0]);
cj20array[0]=IKcos(j20array[0]);
if( j20array[0] > IKPI )
{
    j20array[0]-=IK2PI;
}
else if( j20array[0] < -IKPI )
{    j20array[0]+=IK2PI;
}
j20valid[0] = true;
for(int ij20 = 0; ij20 < 1; ++ij20)
{
if( !j20valid[ij20] )
{
    continue;
}
_ij20[0] = ij20; _ij20[1] = -1;
for(int iij20 = ij20+1; iij20 < 1; ++iij20)
{
if( j20valid[iij20] && IKabs(cj20array[ij20]-cj20array[iij20]) < IKFAST_SOLUTION_THRESH && IKabs(sj20array[ij20]-sj20array[iij20]) < IKFAST_SOLUTION_THRESH )
{
    j20valid[iij20]=false; _ij20[1] = iij20; break; 
}
}
j20 = j20array[ij20]; cj20 = cj20array[ij20]; sj20 = sj20array[ij20];
{
IkReal evalcond[6];
IkReal x921=IKcos(j20);
IkReal x922=IKsin(j20);
IkReal x923=((IkReal(0.313800000000000))*(cj22));
IkReal x924=((IkReal(0.0300000000000000))*(cj22));
IkReal x925=((cj19)*(py));
IkReal x926=((IkReal(1.00000000000000))*(sj19));
IkReal x927=((cj21)*(py));
IkReal x928=((IkReal(0.313800000000000))*(sj22));
IkReal x929=((IkReal(0.0300000000000000))*(sj22));
IkReal x930=((IkReal(1.00000000000000))*(pz));
IkReal x931=((cj19)*(px));
IkReal x932=((px)*(sj19));
IkReal x933=((sj21)*(x922));
IkReal x934=((sj21)*(x921));
IkReal x935=((IkReal(0.600000000000000))*(x921));
IkReal x936=((cj21)*(x922));
evalcond[0]=((IkReal(0.300000000000000))+(((IkReal(-1.00000000000000))*(x929)))+(((x921)*(x932)))+(((IkReal(-1.00000000000000))*(x921)*(x925)))+(x923)+(((IkReal(-1.00000000000000))*(x922)*(x930))));
evalcond[1]=((((IkReal(-1.00000000000000))*(cj21)*(x921)*(x930)))+(((sj21)*(x931)))+(((IkReal(-1.00000000000000))*(px)*(x926)*(x936)))+(((x925)*(x936)))+(((py)*(sj19)*(sj21))));
evalcond[2]=((((IkReal(0.0300000000000000))*(x934)))+(((IkReal(-1.00000000000000))*(x928)*(x934)))+(((IkReal(-1.00000000000000))*(x924)*(x934)))+(((IkReal(0.300000000000000))*(x922)))+(((x922)*(x923)))+(((IkReal(-1.00000000000000))*(x930)))+(((IkReal(-1.00000000000000))*(x922)*(x929))));
evalcond[3]=((IkReal(0.0300000000000000))+(((IkReal(-1.00000000000000))*(x924)))+(((IkReal(-1.00000000000000))*(x928)))+(((IkReal(-1.00000000000000))*(x930)*(x934)))+(((IkReal(-1.00000000000000))*(x926)*(x927)))+(((IkReal(-1.00000000000000))*(px)*(x926)*(x933)))+(((x925)*(x933)))+(((IkReal(-1.00000000000000))*(cj21)*(x931))));
evalcond[4]=((((x924)*(x933)))+(((x928)*(x933)))+(((IkReal(0.300000000000000))*(x921)))+(((x921)*(x923)))+(((IkReal(-0.0300000000000000))*(x933)))+(((IkReal(-1.00000000000000))*(x925)))+(((IkReal(-1.00000000000000))*(x921)*(x929)))+(x932));
evalcond[5]=((IkReal(0.00847044000000000))+(((IkReal(0.0600000000000000))*(x932)*(x933)))+(((IkReal(0.0600000000000000))*(sj19)*(x927)))+(((IkReal(0.0600000000000000))*(cj21)*(x931)))+(((IkReal(-0.0600000000000000))*(x925)*(x933)))+(((IkReal(0.600000000000000))*(pz)*(x922)))+(((IkReal(-1.00000000000000))*(pp)))+(((IkReal(0.0600000000000000))*(pz)*(x934)))+(((IkReal(-1.00000000000000))*(x932)*(x935)))+(((x925)*(x935))));
if( IKabs(evalcond[0]) > 0.000001  || IKabs(evalcond[1]) > 0.000001  || IKabs(evalcond[2]) > 0.000001  || IKabs(evalcond[3]) > 0.000001  || IKabs(evalcond[4]) > 0.000001  || IKabs(evalcond[5]) > 0.000001  )
{
continue;
}
}

rotationfunction0(solutions);
}
}

}

}

} else
{
{
IkReal j20array[1], cj20array[1], sj20array[1];
bool j20valid[1]={false};
_nj20 = 1;
IkReal x937=(cj22)*(cj22);
IkReal x938=(sj22)*(sj22);
IkReal x939=((IkReal(0.00941400000000000))*(sj21));
IkReal x940=((sj21)*(sj22));
if( IKabs(((gconst47)*(((((px)*(pz)*(sj19)))+(((IkReal(0.000414000000000000))*(cj22)*(sj21)))+(((IkReal(-0.0950400000000000))*(x940)))+(((IkReal(0.00900000000000000))*(sj21)))+(((x938)*(x939)))+(((IkReal(-1.00000000000000))*(cj19)*(py)*(pz)))+(((IkReal(-1.00000000000000))*(x937)*(x939)))+(((IkReal(-0.0975704400000000))*(cj22)*(x940))))))) < IKFAST_ATAN2_MAGTHRESH && IKabs(((gconst47)*(((IkReal(-0.0900000000000000))+(((IkReal(0.0180000000000000))*(sj22)))+(((IkReal(-0.188280000000000))*(cj22)))+(((IkReal(-0.000900000000000000))*(x938)))+(((IkReal(0.0188280000000000))*(cj22)*(sj22)))+((pz)*(pz))+(((IkReal(-0.0984704400000000))*(x937))))))) < IKFAST_ATAN2_MAGTHRESH )
    continue;
j20array[0]=IKatan2(((gconst47)*(((((px)*(pz)*(sj19)))+(((IkReal(0.000414000000000000))*(cj22)*(sj21)))+(((IkReal(-0.0950400000000000))*(x940)))+(((IkReal(0.00900000000000000))*(sj21)))+(((x938)*(x939)))+(((IkReal(-1.00000000000000))*(cj19)*(py)*(pz)))+(((IkReal(-1.00000000000000))*(x937)*(x939)))+(((IkReal(-0.0975704400000000))*(cj22)*(x940)))))), ((gconst47)*(((IkReal(-0.0900000000000000))+(((IkReal(0.0180000000000000))*(sj22)))+(((IkReal(-0.188280000000000))*(cj22)))+(((IkReal(-0.000900000000000000))*(x938)))+(((IkReal(0.0188280000000000))*(cj22)*(sj22)))+((pz)*(pz))+(((IkReal(-0.0984704400000000))*(x937)))))));
sj20array[0]=IKsin(j20array[0]);
cj20array[0]=IKcos(j20array[0]);
if( j20array[0] > IKPI )
{
    j20array[0]-=IK2PI;
}
else if( j20array[0] < -IKPI )
{    j20array[0]+=IK2PI;
}
j20valid[0] = true;
for(int ij20 = 0; ij20 < 1; ++ij20)
{
if( !j20valid[ij20] )
{
    continue;
}
_ij20[0] = ij20; _ij20[1] = -1;
for(int iij20 = ij20+1; iij20 < 1; ++iij20)
{
if( j20valid[iij20] && IKabs(cj20array[ij20]-cj20array[iij20]) < IKFAST_SOLUTION_THRESH && IKabs(sj20array[ij20]-sj20array[iij20]) < IKFAST_SOLUTION_THRESH )
{
    j20valid[iij20]=false; _ij20[1] = iij20; break; 
}
}
j20 = j20array[ij20]; cj20 = cj20array[ij20]; sj20 = sj20array[ij20];
{
IkReal evalcond[6];
IkReal x941=IKcos(j20);
IkReal x942=IKsin(j20);
IkReal x943=((IkReal(0.313800000000000))*(cj22));
IkReal x944=((IkReal(0.0300000000000000))*(cj22));
IkReal x945=((cj19)*(py));
IkReal x946=((IkReal(1.00000000000000))*(sj19));
IkReal x947=((cj21)*(py));
IkReal x948=((IkReal(0.313800000000000))*(sj22));
IkReal x949=((IkReal(0.0300000000000000))*(sj22));
IkReal x950=((IkReal(1.00000000000000))*(pz));
IkReal x951=((cj19)*(px));
IkReal x952=((px)*(sj19));
IkReal x953=((sj21)*(x942));
IkReal x954=((sj21)*(x941));
IkReal x955=((IkReal(0.600000000000000))*(x941));
IkReal x956=((cj21)*(x942));
evalcond[0]=((IkReal(0.300000000000000))+(((IkReal(-1.00000000000000))*(x949)))+(((IkReal(-1.00000000000000))*(x941)*(x945)))+(((IkReal(-1.00000000000000))*(x942)*(x950)))+(((x941)*(x952)))+(x943));
evalcond[1]=((((IkReal(-1.00000000000000))*(cj21)*(x941)*(x950)))+(((sj21)*(x951)))+(((x945)*(x956)))+(((py)*(sj19)*(sj21)))+(((IkReal(-1.00000000000000))*(px)*(x946)*(x956))));
evalcond[2]=((((IkReal(-1.00000000000000))*(x944)*(x954)))+(((IkReal(-1.00000000000000))*(x942)*(x949)))+(((x942)*(x943)))+(((IkReal(0.300000000000000))*(x942)))+(((IkReal(0.0300000000000000))*(x954)))+(((IkReal(-1.00000000000000))*(x950)))+(((IkReal(-1.00000000000000))*(x948)*(x954))));
evalcond[3]=((IkReal(0.0300000000000000))+(((IkReal(-1.00000000000000))*(x948)))+(((IkReal(-1.00000000000000))*(x944)))+(((IkReal(-1.00000000000000))*(x946)*(x947)))+(((IkReal(-1.00000000000000))*(x950)*(x954)))+(((x945)*(x953)))+(((IkReal(-1.00000000000000))*(px)*(x946)*(x953)))+(((IkReal(-1.00000000000000))*(cj21)*(x951))));
evalcond[4]=((((x944)*(x953)))+(((x941)*(x943)))+(((x948)*(x953)))+(((IkReal(-1.00000000000000))*(x941)*(x949)))+(((IkReal(-1.00000000000000))*(x945)))+(((IkReal(0.300000000000000))*(x941)))+(((IkReal(-0.0300000000000000))*(x953)))+(x952));
evalcond[5]=((IkReal(0.00847044000000000))+(((IkReal(-1.00000000000000))*(pp)))+(((IkReal(-0.0600000000000000))*(x945)*(x953)))+(((IkReal(0.600000000000000))*(pz)*(x942)))+(((IkReal(0.0600000000000000))*(x952)*(x953)))+(((x945)*(x955)))+(((IkReal(0.0600000000000000))*(sj19)*(x947)))+(((IkReal(0.0600000000000000))*(cj21)*(x951)))+(((IkReal(-1.00000000000000))*(x952)*(x955)))+(((IkReal(0.0600000000000000))*(pz)*(x954))));
if( IKabs(evalcond[0]) > 0.000001  || IKabs(evalcond[1]) > 0.000001  || IKabs(evalcond[2]) > 0.000001  || IKabs(evalcond[3]) > 0.000001  || IKabs(evalcond[4]) > 0.000001  || IKabs(evalcond[5]) > 0.000001  )
{
continue;
}
}

rotationfunction0(solutions);
}
}

}

}
}
}

}

}

} else
{
{
IkReal j19array[2], cj19array[2], sj19array[2];
bool j19valid[2]={false};
_nj19 = 2;
IkReal x957=((IkReal(0.0300000000000000))*(cj21));
if( IKabs(((IkReal(-1.00000000000000))*(px))) < IKFAST_ATAN2_MAGTHRESH && IKabs(((IkReal(-1.00000000000000))*(py))) < IKFAST_ATAN2_MAGTHRESH )
    continue;
IkReal x958=((IkReal(1.00000000000000))*(IKatan2(((IkReal(-1.00000000000000))*(px)), ((IkReal(-1.00000000000000))*(py)))));
if( ((((px)*(px))+((py)*(py)))) < (IkReal)-0.00001 )
    continue;
if( (((((IKabs(IKabs(IKsqrt((((px)*(px))+((py)*(py)))))) != 0)?((IkReal)1/(IKabs(IKsqrt((((px)*(px))+((py)*(py))))))):(IkReal)1.0e30))*(((((IkReal(-0.313800000000000))*(cj21)*(sj22)))+(((IkReal(-1.00000000000000))*(cj22)*(x957)))+(x957))))) < -1-IKFAST_SINCOS_THRESH || (((((IKabs(IKabs(IKsqrt((((px)*(px))+((py)*(py)))))) != 0)?((IkReal)1/(IKabs(IKsqrt((((px)*(px))+((py)*(py))))))):(IkReal)1.0e30))*(((((IkReal(-0.313800000000000))*(cj21)*(sj22)))+(((IkReal(-1.00000000000000))*(cj22)*(x957)))+(x957))))) > 1+IKFAST_SINCOS_THRESH )
    continue;
IkReal x959=IKasin(((((IKabs(IKabs(IKsqrt((((px)*(px))+((py)*(py)))))) != 0)?((IkReal)1/(IKabs(IKsqrt((((px)*(px))+((py)*(py))))))):(IkReal)1.0e30))*(((((IkReal(-0.313800000000000))*(cj21)*(sj22)))+(((IkReal(-1.00000000000000))*(cj22)*(x957)))+(x957)))));
j19array[0]=((((IkReal(-1.00000000000000))*(x959)))+(((IkReal(-1.00000000000000))*(x958))));
sj19array[0]=IKsin(j19array[0]);
cj19array[0]=IKcos(j19array[0]);
j19array[1]=((IkReal(3.14159265358979))+(((IkReal(-1.00000000000000))*(x958)))+(x959));
sj19array[1]=IKsin(j19array[1]);
cj19array[1]=IKcos(j19array[1]);
if( j19array[0] > IKPI )
{
    j19array[0]-=IK2PI;
}
else if( j19array[0] < -IKPI )
{    j19array[0]+=IK2PI;
}
j19valid[0] = true;
if( j19array[1] > IKPI )
{
    j19array[1]-=IK2PI;
}
else if( j19array[1] < -IKPI )
{    j19array[1]+=IK2PI;
}
j19valid[1] = true;
for(int ij19 = 0; ij19 < 2; ++ij19)
{
if( !j19valid[ij19] )
{
    continue;
}
_ij19[0] = ij19; _ij19[1] = -1;
for(int iij19 = ij19+1; iij19 < 2; ++iij19)
{
if( j19valid[iij19] && IKabs(cj19array[ij19]-cj19array[iij19]) < IKFAST_SOLUTION_THRESH && IKabs(sj19array[ij19]-sj19array[iij19]) < IKFAST_SOLUTION_THRESH )
{
    j19valid[iij19]=false; _ij19[1] = iij19; break; 
}
}
j19 = j19array[ij19]; cj19 = cj19array[ij19]; sj19 = sj19array[ij19];

{
IkReal dummyeval[1];
IkReal gconst47;
IkReal x960=((px)*(sj19));
IkReal x961=((IkReal(0.313800000000000))*(cj22));
IkReal x962=((cj19)*(py));
IkReal x963=((IkReal(0.0300000000000000))*(sj22));
IkReal x964=((IkReal(0.0300000000000000))*(pz)*(sj21));
gconst47=IKsign(((((IkReal(-0.313800000000000))*(pz)*(sj21)*(sj22)))+(((IkReal(-1.00000000000000))*(x960)*(x963)))+(((IkReal(-1.00000000000000))*(x961)*(x962)))+(((IkReal(0.300000000000000))*(x960)))+(((x962)*(x963)))+(((x960)*(x961)))+(((IkReal(-1.00000000000000))*(cj22)*(x964)))+(x964)+(((IkReal(-0.300000000000000))*(x962)))));
IkReal x965=((pz)*(sj21));
IkReal x966=((px)*(sj19));
IkReal x967=((IkReal(10.4600000000000))*(cj22));
IkReal x968=((cj19)*(py));
dummyeval[0]=((((IkReal(-1.00000000000000))*(sj22)*(x966)))+(((IkReal(-1.00000000000000))*(x967)*(x968)))+(((sj22)*(x968)))+(((IkReal(10.0000000000000))*(x966)))+(((IkReal(-10.4600000000000))*(sj22)*(x965)))+(((x966)*(x967)))+(((IkReal(-10.0000000000000))*(x968)))+(x965)+(((IkReal(-1.00000000000000))*(cj22)*(x965))));
if( IKabs(dummyeval[0]) < 0.0000010000000000  )
{
{
IkReal dummyeval[1];
IkReal gconst46;
gconst46=IKsign(((((cj21)*((pz)*(pz))))+(((cj21)*((px)*(px))*((sj19)*(sj19))))+(((IkReal(-2.00000000000000))*(cj19)*(cj21)*(px)*(py)*(sj19)))+(((cj21)*((cj19)*(cj19))*((py)*(py))))));
dummyeval[0]=((((cj21)*((pz)*(pz))))+(((cj21)*((px)*(px))*((sj19)*(sj19))))+(((IkReal(-2.00000000000000))*(cj19)*(cj21)*(px)*(py)*(sj19)))+(((cj21)*((cj19)*(cj19))*((py)*(py)))));
if( IKabs(dummyeval[0]) < 0.0000010000000000  )
{
{
IkReal evalcond[4];
IkReal x969=((py)*(sj19));
IkReal x970=((cj19)*(px));
evalcond[0]=((IkReal(-3.14159265358979))+(IKfmod(((IkReal(1.57079632679490))+(j21)), IkReal(6.28318530717959))));
evalcond[1]=((IkReal(0.190270440000000))+(((IkReal(0.186480000000000))*(cj22)))+(((IkReal(-1.00000000000000))*(pp)))+(((IkReal(-0.0368280000000000))*(sj22))));
evalcond[2]=((((IkReal(-1.00000000000000))*(x970)))+(((IkReal(-1.00000000000000))*(x969))));
evalcond[3]=((x970)+(x969));
if( IKabs(evalcond[0]) < 0.0000010000000000  && IKabs(evalcond[1]) < 0.0000010000000000  && IKabs(evalcond[2]) < 0.0000010000000000  && IKabs(evalcond[3]) < 0.0000010000000000  )
{
{
IkReal dummyeval[1];
IkReal gconst49;
IkReal x971=((px)*(sj19));
IkReal x972=((IkReal(0.313800000000000))*(cj22));
IkReal x973=((cj19)*(py));
IkReal x974=((IkReal(0.0300000000000000))*(sj22));
IkReal x975=((IkReal(0.0300000000000000))*(pz));
gconst49=IKsign(((((IkReal(0.300000000000000))*(x971)))+(((IkReal(-1.00000000000000))*(x971)*(x974)))+(((x973)*(x974)))+(((IkReal(-1.00000000000000))*(cj22)*(x975)))+(((x971)*(x972)))+(((IkReal(-1.00000000000000))*(x972)*(x973)))+(((IkReal(-0.313800000000000))*(pz)*(sj22)))+(((IkReal(-0.300000000000000))*(x973)))+(x975)));
IkReal x976=((px)*(sj19));
IkReal x977=((IkReal(10.4600000000000))*(cj22));
IkReal x978=((cj19)*(py));
dummyeval[0]=((((IkReal(-10.4600000000000))*(pz)*(sj22)))+(((IkReal(-1.00000000000000))*(sj22)*(x976)))+(((IkReal(10.0000000000000))*(x976)))+(((x976)*(x977)))+(pz)+(((IkReal(-1.00000000000000))*(cj22)*(pz)))+(((sj22)*(x978)))+(((IkReal(-1.00000000000000))*(x977)*(x978)))+(((IkReal(-10.0000000000000))*(x978))));
if( IKabs(dummyeval[0]) < 0.0000010000000000  )
{
{
IkReal dummyeval[1];
IkReal gconst48;
gconst48=IKsign((((((cj19)*(cj19))*((py)*(py))))+((pz)*(pz))+(((IkReal(-2.00000000000000))*(cj19)*(px)*(py)*(sj19)))+((((px)*(px))*((sj19)*(sj19))))));
dummyeval[0]=(((((cj19)*(cj19))*((py)*(py))))+((pz)*(pz))+(((IkReal(-2.00000000000000))*(cj19)*(px)*(py)*(sj19)))+((((px)*(px))*((sj19)*(sj19)))));
if( IKabs(dummyeval[0]) < 0.0000010000000000  )
{
continue;

} else
{
{
IkReal j20array[1], cj20array[1], sj20array[1];
bool j20valid[1]={false};
_nj20 = 1;
IkReal x979=((px)*(sj19));
IkReal x980=((IkReal(0.313800000000000))*(cj22));
IkReal x981=((IkReal(0.0300000000000000))*(sj22));
IkReal x982=((IkReal(0.313800000000000))*(sj22));
IkReal x983=((cj19)*(py));
IkReal x984=((IkReal(0.0300000000000000))*(cj22));
if( IKabs(((gconst48)*(((((x983)*(x984)))+(((IkReal(-1.00000000000000))*(pz)*(x981)))+(((IkReal(0.300000000000000))*(pz)))+(((x982)*(x983)))+(((pz)*(x980)))+(((IkReal(0.0300000000000000))*(x979)))+(((IkReal(-1.00000000000000))*(x979)*(x984)))+(((IkReal(-1.00000000000000))*(x979)*(x982)))+(((IkReal(-0.0300000000000000))*(x983))))))) < IKFAST_ATAN2_MAGTHRESH && IKabs(((gconst48)*(((((IkReal(-1.00000000000000))*(pz)*(x982)))+(((IkReal(-1.00000000000000))*(pz)*(x984)))+(((IkReal(0.300000000000000))*(x983)))+(((x979)*(x981)))+(((IkReal(0.0300000000000000))*(pz)))+(((IkReal(-0.300000000000000))*(x979)))+(((IkReal(-1.00000000000000))*(x981)*(x983)))+(((IkReal(-1.00000000000000))*(x979)*(x980)))+(((x980)*(x983))))))) < IKFAST_ATAN2_MAGTHRESH )
    continue;
j20array[0]=IKatan2(((gconst48)*(((((x983)*(x984)))+(((IkReal(-1.00000000000000))*(pz)*(x981)))+(((IkReal(0.300000000000000))*(pz)))+(((x982)*(x983)))+(((pz)*(x980)))+(((IkReal(0.0300000000000000))*(x979)))+(((IkReal(-1.00000000000000))*(x979)*(x984)))+(((IkReal(-1.00000000000000))*(x979)*(x982)))+(((IkReal(-0.0300000000000000))*(x983)))))), ((gconst48)*(((((IkReal(-1.00000000000000))*(pz)*(x982)))+(((IkReal(-1.00000000000000))*(pz)*(x984)))+(((IkReal(0.300000000000000))*(x983)))+(((x979)*(x981)))+(((IkReal(0.0300000000000000))*(pz)))+(((IkReal(-0.300000000000000))*(x979)))+(((IkReal(-1.00000000000000))*(x981)*(x983)))+(((IkReal(-1.00000000000000))*(x979)*(x980)))+(((x980)*(x983)))))));
sj20array[0]=IKsin(j20array[0]);
cj20array[0]=IKcos(j20array[0]);
if( j20array[0] > IKPI )
{
    j20array[0]-=IK2PI;
}
else if( j20array[0] < -IKPI )
{    j20array[0]+=IK2PI;
}
j20valid[0] = true;
for(int ij20 = 0; ij20 < 1; ++ij20)
{
if( !j20valid[ij20] )
{
    continue;
}
_ij20[0] = ij20; _ij20[1] = -1;
for(int iij20 = ij20+1; iij20 < 1; ++iij20)
{
if( j20valid[iij20] && IKabs(cj20array[ij20]-cj20array[iij20]) < IKFAST_SOLUTION_THRESH && IKabs(sj20array[ij20]-sj20array[iij20]) < IKFAST_SOLUTION_THRESH )
{
    j20valid[iij20]=false; _ij20[1] = iij20; break; 
}
}
j20 = j20array[ij20]; cj20 = cj20array[ij20]; sj20 = sj20array[ij20];
{
IkReal evalcond[5];
IkReal x985=IKcos(j20);
IkReal x986=IKsin(j20);
IkReal x987=((IkReal(0.313800000000000))*(cj22));
IkReal x988=((IkReal(0.0300000000000000))*(sj22));
IkReal x989=((IkReal(1.00000000000000))*(pz));
IkReal x990=((px)*(sj19));
IkReal x991=((cj19)*(py));
IkReal x992=((IkReal(0.313800000000000))*(sj22));
IkReal x993=((pz)*(x985));
IkReal x994=((IkReal(0.0300000000000000))*(x985));
IkReal x995=((IkReal(0.0600000000000000))*(x986));
IkReal x996=((IkReal(0.0300000000000000))*(x986));
IkReal x997=((x985)*(x991));
evalcond[0]=((IkReal(0.300000000000000))+(((IkReal(-1.00000000000000))*(x988)))+(((IkReal(-1.00000000000000))*(x997)))+(((IkReal(-1.00000000000000))*(x986)*(x989)))+(x987)+(((x985)*(x990))));
evalcond[1]=((((IkReal(-1.00000000000000))*(x989)))+(((x986)*(x987)))+(((IkReal(-1.00000000000000))*(x985)*(x992)))+(((IkReal(0.300000000000000))*(x986)))+(((IkReal(-1.00000000000000))*(x986)*(x988)))+(x994)+(((IkReal(-1.00000000000000))*(cj22)*(x994))));
evalcond[2]=((IkReal(0.0300000000000000))+(((IkReal(-1.00000000000000))*(x986)*(x990)))+(((IkReal(-0.0300000000000000))*(cj22)))+(((x986)*(x991)))+(((IkReal(-1.00000000000000))*(x992)))+(((IkReal(-1.00000000000000))*(x985)*(x989))));
evalcond[3]=((((IkReal(-1.00000000000000))*(x991)))+(((x986)*(x992)))+(((IkReal(0.300000000000000))*(x985)))+(((IkReal(-1.00000000000000))*(x996)))+(((x985)*(x987)))+(((cj22)*(x996)))+(x990)+(((IkReal(-1.00000000000000))*(x985)*(x988))));
evalcond[4]=((IkReal(0.00847044000000000))+(((IkReal(0.600000000000000))*(pz)*(x986)))+(((IkReal(-1.00000000000000))*(x991)*(x995)))+(((x990)*(x995)))+(((IkReal(0.600000000000000))*(x997)))+(((IkReal(-1.00000000000000))*(pp)))+(((IkReal(0.0600000000000000))*(x993)))+(((IkReal(-0.600000000000000))*(x985)*(x990))));
if( IKabs(evalcond[0]) > 0.000001  || IKabs(evalcond[1]) > 0.000001  || IKabs(evalcond[2]) > 0.000001  || IKabs(evalcond[3]) > 0.000001  || IKabs(evalcond[4]) > 0.000001  )
{
continue;
}
}

rotationfunction0(solutions);
}
}

}

}

} else
{
{
IkReal j20array[1], cj20array[1], sj20array[1];
bool j20valid[1]={false};
_nj20 = 1;
IkReal x998=(cj22)*(cj22);
IkReal x999=(sj22)*(sj22);
IkReal x1000=((cj22)*(sj22));
if( IKabs(((gconst49)*(((IkReal(0.00900000000000000))+(((IkReal(0.000414000000000000))*(cj22)))+(((px)*(pz)*(sj19)))+(((IkReal(-0.0950400000000000))*(sj22)))+(((IkReal(-0.00941400000000000))*(x998)))+(((IkReal(0.00941400000000000))*(x999)))+(((IkReal(-1.00000000000000))*(cj19)*(py)*(pz)))+(((IkReal(-0.0975704400000000))*(x1000))))))) < IKFAST_ATAN2_MAGTHRESH && IKabs(((gconst49)*(((IkReal(-0.0900000000000000))+(((IkReal(-0.0984704400000000))*(x998)))+(((IkReal(-0.000900000000000000))*(x999)))+(((IkReal(0.0180000000000000))*(sj22)))+(((IkReal(0.0188280000000000))*(x1000)))+(((IkReal(-0.188280000000000))*(cj22)))+((pz)*(pz)))))) < IKFAST_ATAN2_MAGTHRESH )
    continue;
j20array[0]=IKatan2(((gconst49)*(((IkReal(0.00900000000000000))+(((IkReal(0.000414000000000000))*(cj22)))+(((px)*(pz)*(sj19)))+(((IkReal(-0.0950400000000000))*(sj22)))+(((IkReal(-0.00941400000000000))*(x998)))+(((IkReal(0.00941400000000000))*(x999)))+(((IkReal(-1.00000000000000))*(cj19)*(py)*(pz)))+(((IkReal(-0.0975704400000000))*(x1000)))))), ((gconst49)*(((IkReal(-0.0900000000000000))+(((IkReal(-0.0984704400000000))*(x998)))+(((IkReal(-0.000900000000000000))*(x999)))+(((IkReal(0.0180000000000000))*(sj22)))+(((IkReal(0.0188280000000000))*(x1000)))+(((IkReal(-0.188280000000000))*(cj22)))+((pz)*(pz))))));
sj20array[0]=IKsin(j20array[0]);
cj20array[0]=IKcos(j20array[0]);
if( j20array[0] > IKPI )
{
    j20array[0]-=IK2PI;
}
else if( j20array[0] < -IKPI )
{    j20array[0]+=IK2PI;
}
j20valid[0] = true;
for(int ij20 = 0; ij20 < 1; ++ij20)
{
if( !j20valid[ij20] )
{
    continue;
}
_ij20[0] = ij20; _ij20[1] = -1;
for(int iij20 = ij20+1; iij20 < 1; ++iij20)
{
if( j20valid[iij20] && IKabs(cj20array[ij20]-cj20array[iij20]) < IKFAST_SOLUTION_THRESH && IKabs(sj20array[ij20]-sj20array[iij20]) < IKFAST_SOLUTION_THRESH )
{
    j20valid[iij20]=false; _ij20[1] = iij20; break; 
}
}
j20 = j20array[ij20]; cj20 = cj20array[ij20]; sj20 = sj20array[ij20];
{
IkReal evalcond[5];
IkReal x1001=IKcos(j20);
IkReal x1002=IKsin(j20);
IkReal x1003=((IkReal(0.313800000000000))*(cj22));
IkReal x1004=((IkReal(0.0300000000000000))*(sj22));
IkReal x1005=((IkReal(1.00000000000000))*(pz));
IkReal x1006=((px)*(sj19));
IkReal x1007=((cj19)*(py));
IkReal x1008=((IkReal(0.313800000000000))*(sj22));
IkReal x1009=((pz)*(x1001));
IkReal x1010=((IkReal(0.0300000000000000))*(x1001));
IkReal x1011=((IkReal(0.0600000000000000))*(x1002));
IkReal x1012=((IkReal(0.0300000000000000))*(x1002));
IkReal x1013=((x1001)*(x1007));
evalcond[0]=((IkReal(0.300000000000000))+(x1003)+(((IkReal(-1.00000000000000))*(x1004)))+(((IkReal(-1.00000000000000))*(x1002)*(x1005)))+(((x1001)*(x1006)))+(((IkReal(-1.00000000000000))*(x1013))));
evalcond[1]=((((IkReal(-1.00000000000000))*(cj22)*(x1010)))+(x1010)+(((IkReal(-1.00000000000000))*(x1005)))+(((IkReal(0.300000000000000))*(x1002)))+(((IkReal(-1.00000000000000))*(x1002)*(x1004)))+(((IkReal(-1.00000000000000))*(x1001)*(x1008)))+(((x1002)*(x1003))));
evalcond[2]=((IkReal(0.0300000000000000))+(((IkReal(-1.00000000000000))*(x1002)*(x1006)))+(((IkReal(-0.0300000000000000))*(cj22)))+(((IkReal(-1.00000000000000))*(x1008)))+(((IkReal(-1.00000000000000))*(x1001)*(x1005)))+(((x1002)*(x1007))));
evalcond[3]=((((IkReal(-1.00000000000000))*(x1007)))+(x1006)+(((IkReal(-1.00000000000000))*(x1012)))+(((cj22)*(x1012)))+(((IkReal(0.300000000000000))*(x1001)))+(((IkReal(-1.00000000000000))*(x1001)*(x1004)))+(((x1002)*(x1008)))+(((x1001)*(x1003))));
evalcond[4]=((IkReal(0.00847044000000000))+(((IkReal(0.600000000000000))*(x1013)))+(((IkReal(-1.00000000000000))*(pp)))+(((x1006)*(x1011)))+(((IkReal(-0.600000000000000))*(x1001)*(x1006)))+(((IkReal(0.0600000000000000))*(x1009)))+(((IkReal(0.600000000000000))*(pz)*(x1002)))+(((IkReal(-1.00000000000000))*(x1007)*(x1011))));
if( IKabs(evalcond[0]) > 0.000001  || IKabs(evalcond[1]) > 0.000001  || IKabs(evalcond[2]) > 0.000001  || IKabs(evalcond[3]) > 0.000001  || IKabs(evalcond[4]) > 0.000001  )
{
continue;
}
}

rotationfunction0(solutions);
}
}

}

}

} else
{
IkReal x1014=((((IkReal(-1.00000000000000))*(cj19)*(px)))+(((IkReal(-1.00000000000000))*(py)*(sj19))));
evalcond[0]=((IkReal(-3.14159265358979))+(IKfmod(((IkReal(4.71238898038469))+(j21)), IkReal(6.28318530717959))));
evalcond[1]=((IkReal(0.190270440000000))+(((IkReal(0.186480000000000))*(cj22)))+(((IkReal(-1.00000000000000))*(pp)))+(((IkReal(-0.0368280000000000))*(sj22))));
evalcond[2]=x1014;
evalcond[3]=x1014;
if( IKabs(evalcond[0]) < 0.0000010000000000  && IKabs(evalcond[1]) < 0.0000010000000000  && IKabs(evalcond[2]) < 0.0000010000000000  && IKabs(evalcond[3]) < 0.0000010000000000  )
{
{
IkReal dummyeval[1];
IkReal gconst51;
IkReal x1015=((IkReal(0.313800000000000))*(sj22));
IkReal x1016=((IkReal(0.0300000000000000))*(cj19)*(py));
IkReal x1017=((IkReal(0.0300000000000000))*(px)*(sj19));
gconst51=IKsign(((((IkReal(-1.00000000000000))*(cj22)*(x1016)))+(((IkReal(-0.313800000000000))*(cj22)*(pz)))+(x1016)+(((IkReal(-0.300000000000000))*(pz)))+(((IkReal(-1.00000000000000))*(x1017)))+(((cj22)*(x1017)))+(((px)*(sj19)*(x1015)))+(((IkReal(0.0300000000000000))*(pz)*(sj22)))+(((IkReal(-1.00000000000000))*(cj19)*(py)*(x1015)))));
IkReal x1018=((px)*(sj19));
IkReal x1019=((cj19)*(py));
IkReal x1020=((IkReal(10.4600000000000))*(sj22));
dummyeval[0]=((((IkReal(-10.4600000000000))*(cj22)*(pz)))+(x1019)+(((cj22)*(x1018)))+(((IkReal(-1.00000000000000))*(x1019)*(x1020)))+(((IkReal(-10.0000000000000))*(pz)))+(((x1018)*(x1020)))+(((IkReal(-1.00000000000000))*(cj22)*(x1019)))+(((pz)*(sj22)))+(((IkReal(-1.00000000000000))*(x1018))));
if( IKabs(dummyeval[0]) < 0.0000010000000000  )
{
{
IkReal dummyeval[1];
IkReal gconst50;
gconst50=IKsign((((((cj19)*(cj19))*((py)*(py))))+((pz)*(pz))+(((IkReal(-2.00000000000000))*(cj19)*(px)*(py)*(sj19)))+((((px)*(px))*((sj19)*(sj19))))));
dummyeval[0]=(((((cj19)*(cj19))*((py)*(py))))+((pz)*(pz))+(((IkReal(-2.00000000000000))*(cj19)*(px)*(py)*(sj19)))+((((px)*(px))*((sj19)*(sj19)))));
if( IKabs(dummyeval[0]) < 0.0000010000000000  )
{
{
IkReal evalcond[4];
IkReal x1021=x1014;
evalcond[0]=((IKabs(pz))+(IKabs(((IkReal(-3.14159265358979))+(IKfmod(((IkReal(3.14159265358979))+(j22)), IkReal(6.28318530717959)))))));
evalcond[1]=((IkReal(0.376750440000000))+(((IkReal(-1.00000000000000))*(pp))));
evalcond[2]=x1021;
evalcond[3]=x1021;
if( IKabs(evalcond[0]) < 0.0000010000000000  && IKabs(evalcond[1]) < 0.0000010000000000  && IKabs(evalcond[2]) < 0.0000010000000000  && IKabs(evalcond[3]) < 0.0000010000000000  )
{
{
IkReal dummyeval[1];
dummyeval[0]=((((cj19)*(py)))+(((IkReal(-1.00000000000000))*(px)*(sj19))));
if( IKabs(dummyeval[0]) < 0.0000010000000000  )
{
{
IkReal dummyeval[2];
IkReal x1022=((cj19)*(py));
IkReal x1023=((px)*(sj19));
dummyeval[0]=((((IkReal(-1.00000000000000))*((x1022)*(x1022))))+(((IkReal(-1.00000000000000))*((x1023)*(x1023))))+(((IkReal(2.00000000000000))*(x1022)*(x1023))));
dummyeval[1]=((x1023)+(((IkReal(-1.00000000000000))*(x1022))));
if( IKabs(dummyeval[0]) < 0.0000010000000000  || IKabs(dummyeval[1]) < 0.0000010000000000  )
{
{
IkReal evalcond[7];
IkReal x1024=((IkReal(1.00000000000000))*(pp));
IkReal x1025=((IkReal(-1.00000000000000))*(py));
evalcond[0]=((IKabs(px))+(IKabs(((IkReal(-3.14159265358979))+(IKfmod(((IkReal(1.57079632679490))+(j19)), IkReal(6.28318530717959)))))));
evalcond[1]=((IkReal(0.376750440000000))+(((IkReal(-1.00000000000000))*(x1024))));
evalcond[2]=x1025;
evalcond[3]=IkReal(0.613800000000000);
evalcond[4]=x1025;
evalcond[5]=IkReal(0);
evalcond[6]=((IkReal(0.00847044000000000))+(((IkReal(-1.00000000000000))*(x1024))));
if( IKabs(evalcond[0]) < 0.0000010000000000  && IKabs(evalcond[1]) < 0.0000010000000000  && IKabs(evalcond[2]) < 0.0000010000000000  && IKabs(evalcond[3]) < 0.0000010000000000  && IKabs(evalcond[4]) < 0.0000010000000000  && IKabs(evalcond[5]) < 0.0000010000000000  && IKabs(evalcond[6]) < 0.0000010000000000  )
{
{
IkReal dummyeval[1];
dummyeval[0]=IkReal(-1.00000000000000);
if( IKabs(dummyeval[0]) < 0.0000001000000000  )
{
continue;

} else
{
IkReal op[2+1], zeror[2];
int numroots;
op[0]=IkReal(-1.00000000000000);
op[1]=IkReal(0);
op[2]=IkReal(1.00000000000000);
polyroots2(op,zeror,numroots);
IkReal j20array[2], cj20array[2], sj20array[2], tempj20array[1];
int numsolutions = 0;
for(int ij20 = 0; ij20 < numroots; ++ij20)
{
IkReal htj20 = zeror[ij20];
tempj20array[0]=((IkReal(2.00000000000000))*(atan(htj20)));
for(int kj20 = 0; kj20 < 1; ++kj20)
{
j20array[numsolutions] = tempj20array[kj20];
if( j20array[numsolutions] > IKPI )
{
    j20array[numsolutions]-=IK2PI;
}
else if( j20array[numsolutions] < -IKPI )
{
    j20array[numsolutions]+=IK2PI;
}
sj20array[numsolutions] = IKsin(j20array[numsolutions]);
cj20array[numsolutions] = IKcos(j20array[numsolutions]);
numsolutions++;
}
}
bool j20valid[2]={true,true};
_nj20 = 2;
for(int ij20 = 0; ij20 < numsolutions; ++ij20)
    {
if( !j20valid[ij20] )
{
    continue;
}
    j20 = j20array[ij20]; cj20 = cj20array[ij20]; sj20 = sj20array[ij20];
htj20 = IKtan(j20/2);

_ij20[0] = ij20; _ij20[1] = -1;
for(int iij20 = ij20+1; iij20 < numsolutions; ++iij20)
{
if( j20valid[iij20] && IKabs(cj20array[ij20]-cj20array[iij20]) < IKFAST_SOLUTION_THRESH && IKabs(sj20array[ij20]-sj20array[iij20]) < IKFAST_SOLUTION_THRESH )
{
    j20valid[iij20]=false; _ij20[1] = iij20; break; 
}
}
rotationfunction0(solutions);
    }

}

}

} else
{
IkReal x1026=((IkReal(1.00000000000000))*(pp));
evalcond[0]=((IKabs(px))+(IKabs(((IkReal(-3.14159265358979))+(IKfmod(((IkReal(4.71238898038469))+(j19)), IkReal(6.28318530717959)))))));
evalcond[1]=((IkReal(0.376750440000000))+(((IkReal(-1.00000000000000))*(x1026))));
evalcond[2]=py;
evalcond[3]=IkReal(0.613800000000000);
evalcond[4]=py;
evalcond[5]=IkReal(0);
evalcond[6]=((IkReal(0.00847044000000000))+(((IkReal(-1.00000000000000))*(x1026))));
if( IKabs(evalcond[0]) < 0.0000010000000000  && IKabs(evalcond[1]) < 0.0000010000000000  && IKabs(evalcond[2]) < 0.0000010000000000  && IKabs(evalcond[3]) < 0.0000010000000000  && IKabs(evalcond[4]) < 0.0000010000000000  && IKabs(evalcond[5]) < 0.0000010000000000  && IKabs(evalcond[6]) < 0.0000010000000000  )
{
{
IkReal dummyeval[1];
dummyeval[0]=IkReal(-1.00000000000000);
if( IKabs(dummyeval[0]) < 0.0000001000000000  )
{
continue;

} else
{
IkReal op[2+1], zeror[2];
int numroots;
op[0]=IkReal(-1.00000000000000);
op[1]=IkReal(0);
op[2]=IkReal(1.00000000000000);
polyroots2(op,zeror,numroots);
IkReal j20array[2], cj20array[2], sj20array[2], tempj20array[1];
int numsolutions = 0;
for(int ij20 = 0; ij20 < numroots; ++ij20)
{
IkReal htj20 = zeror[ij20];
tempj20array[0]=((IkReal(2.00000000000000))*(atan(htj20)));
for(int kj20 = 0; kj20 < 1; ++kj20)
{
j20array[numsolutions] = tempj20array[kj20];
if( j20array[numsolutions] > IKPI )
{
    j20array[numsolutions]-=IK2PI;
}
else if( j20array[numsolutions] < -IKPI )
{
    j20array[numsolutions]+=IK2PI;
}
sj20array[numsolutions] = IKsin(j20array[numsolutions]);
cj20array[numsolutions] = IKcos(j20array[numsolutions]);
numsolutions++;
}
}
bool j20valid[2]={true,true};
_nj20 = 2;
for(int ij20 = 0; ij20 < numsolutions; ++ij20)
    {
if( !j20valid[ij20] )
{
    continue;
}
    j20 = j20array[ij20]; cj20 = cj20array[ij20]; sj20 = sj20array[ij20];
htj20 = IKtan(j20/2);

_ij20[0] = ij20; _ij20[1] = -1;
for(int iij20 = ij20+1; iij20 < numsolutions; ++iij20)
{
if( j20valid[iij20] && IKabs(cj20array[ij20]-cj20array[iij20]) < IKFAST_SOLUTION_THRESH && IKabs(sj20array[ij20]-sj20array[iij20]) < IKFAST_SOLUTION_THRESH )
{
    j20valid[iij20]=false; _ij20[1] = iij20; break; 
}
}
rotationfunction0(solutions);
    }

}

}

} else
{
IkReal x1027=((IkReal(1.00000000000000))*(pp));
IkReal x1028=((IkReal(-1.00000000000000))*(px));
evalcond[0]=((IKabs(py))+(IKabs(((IkReal(-3.14159265358979))+(IKfmod(((IkReal(3.14159265358979))+(j19)), IkReal(6.28318530717959)))))));
evalcond[1]=((IkReal(0.376750440000000))+(((IkReal(-1.00000000000000))*(x1027))));
evalcond[2]=x1028;
evalcond[3]=IkReal(0.613800000000000);
evalcond[4]=x1028;
evalcond[5]=IkReal(0);
evalcond[6]=((IkReal(0.00847044000000000))+(((IkReal(-1.00000000000000))*(x1027))));
if( IKabs(evalcond[0]) < 0.0000010000000000  && IKabs(evalcond[1]) < 0.0000010000000000  && IKabs(evalcond[2]) < 0.0000010000000000  && IKabs(evalcond[3]) < 0.0000010000000000  && IKabs(evalcond[4]) < 0.0000010000000000  && IKabs(evalcond[5]) < 0.0000010000000000  && IKabs(evalcond[6]) < 0.0000010000000000  )
{
{
IkReal dummyeval[1];
dummyeval[0]=IkReal(-1.00000000000000);
if( IKabs(dummyeval[0]) < 0.0000001000000000  )
{
continue;

} else
{
IkReal op[2+1], zeror[2];
int numroots;
op[0]=IkReal(-1.00000000000000);
op[1]=IkReal(0);
op[2]=IkReal(1.00000000000000);
polyroots2(op,zeror,numroots);
IkReal j20array[2], cj20array[2], sj20array[2], tempj20array[1];
int numsolutions = 0;
for(int ij20 = 0; ij20 < numroots; ++ij20)
{
IkReal htj20 = zeror[ij20];
tempj20array[0]=((IkReal(2.00000000000000))*(atan(htj20)));
for(int kj20 = 0; kj20 < 1; ++kj20)
{
j20array[numsolutions] = tempj20array[kj20];
if( j20array[numsolutions] > IKPI )
{
    j20array[numsolutions]-=IK2PI;
}
else if( j20array[numsolutions] < -IKPI )
{
    j20array[numsolutions]+=IK2PI;
}
sj20array[numsolutions] = IKsin(j20array[numsolutions]);
cj20array[numsolutions] = IKcos(j20array[numsolutions]);
numsolutions++;
}
}
bool j20valid[2]={true,true};
_nj20 = 2;
for(int ij20 = 0; ij20 < numsolutions; ++ij20)
    {
if( !j20valid[ij20] )
{
    continue;
}
    j20 = j20array[ij20]; cj20 = cj20array[ij20]; sj20 = sj20array[ij20];
htj20 = IKtan(j20/2);

_ij20[0] = ij20; _ij20[1] = -1;
for(int iij20 = ij20+1; iij20 < numsolutions; ++iij20)
{
if( j20valid[iij20] && IKabs(cj20array[ij20]-cj20array[iij20]) < IKFAST_SOLUTION_THRESH && IKabs(sj20array[ij20]-sj20array[iij20]) < IKFAST_SOLUTION_THRESH )
{
    j20valid[iij20]=false; _ij20[1] = iij20; break; 
}
}
rotationfunction0(solutions);
    }

}

}

} else
{
IkReal x1029=((IkReal(1.00000000000000))*(pp));
evalcond[0]=((IKabs(py))+(IKabs(((IkReal(-3.14159265358979))+(IKfmod(j19, IkReal(6.28318530717959)))))));
evalcond[1]=((IkReal(0.376750440000000))+(((IkReal(-1.00000000000000))*(x1029))));
evalcond[2]=px;
evalcond[3]=IkReal(0.613800000000000);
evalcond[4]=px;
evalcond[5]=IkReal(0);
evalcond[6]=((IkReal(0.00847044000000000))+(((IkReal(-1.00000000000000))*(x1029))));
if( IKabs(evalcond[0]) < 0.0000010000000000  && IKabs(evalcond[1]) < 0.0000010000000000  && IKabs(evalcond[2]) < 0.0000010000000000  && IKabs(evalcond[3]) < 0.0000010000000000  && IKabs(evalcond[4]) < 0.0000010000000000  && IKabs(evalcond[5]) < 0.0000010000000000  && IKabs(evalcond[6]) < 0.0000010000000000  )
{
{
IkReal dummyeval[1];
dummyeval[0]=IkReal(-1.00000000000000);
if( IKabs(dummyeval[0]) < 0.0000001000000000  )
{
continue;

} else
{
IkReal op[2+1], zeror[2];
int numroots;
op[0]=IkReal(-1.00000000000000);
op[1]=IkReal(0);
op[2]=IkReal(1.00000000000000);
polyroots2(op,zeror,numroots);
IkReal j20array[2], cj20array[2], sj20array[2], tempj20array[1];
int numsolutions = 0;
for(int ij20 = 0; ij20 < numroots; ++ij20)
{
IkReal htj20 = zeror[ij20];
tempj20array[0]=((IkReal(2.00000000000000))*(atan(htj20)));
for(int kj20 = 0; kj20 < 1; ++kj20)
{
j20array[numsolutions] = tempj20array[kj20];
if( j20array[numsolutions] > IKPI )
{
    j20array[numsolutions]-=IK2PI;
}
else if( j20array[numsolutions] < -IKPI )
{
    j20array[numsolutions]+=IK2PI;
}
sj20array[numsolutions] = IKsin(j20array[numsolutions]);
cj20array[numsolutions] = IKcos(j20array[numsolutions]);
numsolutions++;
}
}
bool j20valid[2]={true,true};
_nj20 = 2;
for(int ij20 = 0; ij20 < numsolutions; ++ij20)
    {
if( !j20valid[ij20] )
{
    continue;
}
    j20 = j20array[ij20]; cj20 = cj20array[ij20]; sj20 = sj20array[ij20];
htj20 = IKtan(j20/2);

_ij20[0] = ij20; _ij20[1] = -1;
for(int iij20 = ij20+1; iij20 < numsolutions; ++iij20)
{
if( j20valid[iij20] && IKabs(cj20array[ij20]-cj20array[iij20]) < IKFAST_SOLUTION_THRESH && IKabs(sj20array[ij20]-sj20array[iij20]) < IKFAST_SOLUTION_THRESH )
{
    j20valid[iij20]=false; _ij20[1] = iij20; break; 
}
}
rotationfunction0(solutions);
    }

}

}

} else
{
if( 1 )
{
continue;

} else
{
}
}
}
}
}
}

} else
{
{
IkReal j20array[1], cj20array[1], sj20array[1];
bool j20valid[1]={false};
_nj20 = 1;
IkReal x1030=((cj19)*(py));
IkReal x1031=((IkReal(5000.00000000000))*(pp));
IkReal x1032=((px)*(sj19));
if( IKabs(((((IKabs(((((IkReal(600.000000000000))*(x1030)*(x1032)))+(((IkReal(-300.000000000000))*((x1032)*(x1032))))+(((IkReal(-300.000000000000))*((x1030)*(x1030)))))) != 0)?((IkReal)1/(((((IkReal(600.000000000000))*(x1030)*(x1032)))+(((IkReal(-300.000000000000))*((x1032)*(x1032))))+(((IkReal(-300.000000000000))*((x1030)*(x1030))))))):(IkReal)1.0e30))*(((((x1031)*(x1032)))+(((IkReal(-1883.75220000000))*(x1032)))+(((IkReal(1883.75220000000))*(x1030)))+(((IkReal(-1.00000000000000))*(x1030)*(x1031))))))) < IKFAST_ATAN2_MAGTHRESH && IKabs(((IkReal(-3069.00000000000))*(((IKabs(((((IkReal(5000.00000000000))*(x1032)))+(((IkReal(-5000.00000000000))*(x1030))))) != 0)?((IkReal)1/(((((IkReal(5000.00000000000))*(x1032)))+(((IkReal(-5000.00000000000))*(x1030)))))):(IkReal)1.0e30)))) < IKFAST_ATAN2_MAGTHRESH && IKabs(IKsqr(((((IKabs(((((IkReal(600.000000000000))*(x1030)*(x1032)))+(((IkReal(-300.000000000000))*((x1032)*(x1032))))+(((IkReal(-300.000000000000))*((x1030)*(x1030)))))) != 0)?((IkReal)1/(((((IkReal(600.000000000000))*(x1030)*(x1032)))+(((IkReal(-300.000000000000))*((x1032)*(x1032))))+(((IkReal(-300.000000000000))*((x1030)*(x1030))))))):(IkReal)1.0e30))*(((((x1031)*(x1032)))+(((IkReal(-1883.75220000000))*(x1032)))+(((IkReal(1883.75220000000))*(x1030)))+(((IkReal(-1.00000000000000))*(x1030)*(x1031)))))))+IKsqr(((IkReal(-3069.00000000000))*(((IKabs(((((IkReal(5000.00000000000))*(x1032)))+(((IkReal(-5000.00000000000))*(x1030))))) != 0)?((IkReal)1/(((((IkReal(5000.00000000000))*(x1032)))+(((IkReal(-5000.00000000000))*(x1030)))))):(IkReal)1.0e30))))-1) <= IKFAST_SINCOS_THRESH )
    continue;
j20array[0]=IKatan2(((((IKabs(((((IkReal(600.000000000000))*(x1030)*(x1032)))+(((IkReal(-300.000000000000))*((x1032)*(x1032))))+(((IkReal(-300.000000000000))*((x1030)*(x1030)))))) != 0)?((IkReal)1/(((((IkReal(600.000000000000))*(x1030)*(x1032)))+(((IkReal(-300.000000000000))*((x1032)*(x1032))))+(((IkReal(-300.000000000000))*((x1030)*(x1030))))))):(IkReal)1.0e30))*(((((x1031)*(x1032)))+(((IkReal(-1883.75220000000))*(x1032)))+(((IkReal(1883.75220000000))*(x1030)))+(((IkReal(-1.00000000000000))*(x1030)*(x1031)))))), ((IkReal(-3069.00000000000))*(((IKabs(((((IkReal(5000.00000000000))*(x1032)))+(((IkReal(-5000.00000000000))*(x1030))))) != 0)?((IkReal)1/(((((IkReal(5000.00000000000))*(x1032)))+(((IkReal(-5000.00000000000))*(x1030)))))):(IkReal)1.0e30))));
sj20array[0]=IKsin(j20array[0]);
cj20array[0]=IKcos(j20array[0]);
if( j20array[0] > IKPI )
{
    j20array[0]-=IK2PI;
}
else if( j20array[0] < -IKPI )
{    j20array[0]+=IK2PI;
}
j20valid[0] = true;
for(int ij20 = 0; ij20 < 1; ++ij20)
{
if( !j20valid[ij20] )
{
    continue;
}
_ij20[0] = ij20; _ij20[1] = -1;
for(int iij20 = ij20+1; iij20 < 1; ++iij20)
{
if( j20valid[iij20] && IKabs(cj20array[ij20]-cj20array[iij20]) < IKFAST_SOLUTION_THRESH && IKabs(sj20array[ij20]-sj20array[iij20]) < IKFAST_SOLUTION_THRESH )
{
    j20valid[iij20]=false; _ij20[1] = iij20; break; 
}
}
j20 = j20array[ij20]; cj20 = cj20array[ij20]; sj20 = sj20array[ij20];
{
IkReal evalcond[5];
IkReal x1033=IKcos(j20);
IkReal x1034=IKsin(j20);
IkReal x1035=((px)*(sj19));
IkReal x1036=((cj19)*(py));
IkReal x1037=((IkReal(1.00000000000000))*(x1036));
IkReal x1038=((IkReal(0.600000000000000))*(x1033));
IkReal x1039=((IkReal(0.0600000000000000))*(x1034));
evalcond[0]=((IkReal(0.613800000000000))+(((IkReal(-1.00000000000000))*(x1033)*(x1037)))+(((x1033)*(x1035))));
evalcond[1]=((IkReal(0.613800000000000))*(x1034));
evalcond[2]=((((IkReal(-1.00000000000000))*(x1034)*(x1037)))+(((x1034)*(x1035))));
evalcond[3]=((((IkReal(-1.00000000000000))*(x1037)))+(x1035)+(((IkReal(0.613800000000000))*(x1033))));
evalcond[4]=((IkReal(0.00847044000000000))+(((x1036)*(x1039)))+(((x1036)*(x1038)))+(((IkReal(-1.00000000000000))*(x1035)*(x1039)))+(((IkReal(-1.00000000000000))*(x1035)*(x1038)))+(((IkReal(-1.00000000000000))*(pp))));
if( IKabs(evalcond[0]) > 0.000001  || IKabs(evalcond[1]) > 0.000001  || IKabs(evalcond[2]) > 0.000001  || IKabs(evalcond[3]) > 0.000001  || IKabs(evalcond[4]) > 0.000001  )
{
continue;
}
}

rotationfunction0(solutions);
}
}

}

}

} else
{
{
IkReal j20array[1], cj20array[1], sj20array[1];
bool j20valid[1]={false};
_nj20 = 1;
IkReal x1040=((px)*(sj19));
IkReal x1041=((cj19)*(py));
if( IKabs(((((IKabs(((((IkReal(-184.140000000000))*(x1040)))+(((IkReal(184.140000000000))*(x1041))))) != 0)?((IkReal)1/(((((IkReal(-184.140000000000))*(x1040)))+(((IkReal(184.140000000000))*(x1041)))))):(IkReal)1.0e30))*(((IkReal(-25.9957803600000))+(((IkReal(-3000.00000000000))*((x1041)*(x1041))))+(((IkReal(6000.00000000000))*(x1040)*(x1041)))+(((IkReal(-3000.00000000000))*((x1040)*(x1040))))+(((IkReal(3069.00000000000))*(pp))))))) < IKFAST_ATAN2_MAGTHRESH && IKabs(((((IkReal(-1.62919517758227))*(x1040)))+(((IkReal(1.62919517758227))*(x1041))))) < IKFAST_ATAN2_MAGTHRESH && IKabs(IKsqr(((((IKabs(((((IkReal(-184.140000000000))*(x1040)))+(((IkReal(184.140000000000))*(x1041))))) != 0)?((IkReal)1/(((((IkReal(-184.140000000000))*(x1040)))+(((IkReal(184.140000000000))*(x1041)))))):(IkReal)1.0e30))*(((IkReal(-25.9957803600000))+(((IkReal(-3000.00000000000))*((x1041)*(x1041))))+(((IkReal(6000.00000000000))*(x1040)*(x1041)))+(((IkReal(-3000.00000000000))*((x1040)*(x1040))))+(((IkReal(3069.00000000000))*(pp)))))))+IKsqr(((((IkReal(-1.62919517758227))*(x1040)))+(((IkReal(1.62919517758227))*(x1041)))))-1) <= IKFAST_SINCOS_THRESH )
    continue;
j20array[0]=IKatan2(((((IKabs(((((IkReal(-184.140000000000))*(x1040)))+(((IkReal(184.140000000000))*(x1041))))) != 0)?((IkReal)1/(((((IkReal(-184.140000000000))*(x1040)))+(((IkReal(184.140000000000))*(x1041)))))):(IkReal)1.0e30))*(((IkReal(-25.9957803600000))+(((IkReal(-3000.00000000000))*((x1041)*(x1041))))+(((IkReal(6000.00000000000))*(x1040)*(x1041)))+(((IkReal(-3000.00000000000))*((x1040)*(x1040))))+(((IkReal(3069.00000000000))*(pp)))))), ((((IkReal(-1.62919517758227))*(x1040)))+(((IkReal(1.62919517758227))*(x1041)))));
sj20array[0]=IKsin(j20array[0]);
cj20array[0]=IKcos(j20array[0]);
if( j20array[0] > IKPI )
{
    j20array[0]-=IK2PI;
}
else if( j20array[0] < -IKPI )
{    j20array[0]+=IK2PI;
}
j20valid[0] = true;
for(int ij20 = 0; ij20 < 1; ++ij20)
{
if( !j20valid[ij20] )
{
    continue;
}
_ij20[0] = ij20; _ij20[1] = -1;
for(int iij20 = ij20+1; iij20 < 1; ++iij20)
{
if( j20valid[iij20] && IKabs(cj20array[ij20]-cj20array[iij20]) < IKFAST_SOLUTION_THRESH && IKabs(sj20array[ij20]-sj20array[iij20]) < IKFAST_SOLUTION_THRESH )
{
    j20valid[iij20]=false; _ij20[1] = iij20; break; 
}
}
j20 = j20array[ij20]; cj20 = cj20array[ij20]; sj20 = sj20array[ij20];
{
IkReal evalcond[5];
IkReal x1042=IKcos(j20);
IkReal x1043=IKsin(j20);
IkReal x1044=((px)*(sj19));
IkReal x1045=((cj19)*(py));
IkReal x1046=((IkReal(1.00000000000000))*(x1045));
IkReal x1047=((IkReal(0.600000000000000))*(x1042));
IkReal x1048=((IkReal(0.0600000000000000))*(x1043));
evalcond[0]=((IkReal(0.613800000000000))+(((x1042)*(x1044)))+(((IkReal(-1.00000000000000))*(x1042)*(x1046))));
evalcond[1]=((IkReal(0.613800000000000))*(x1043));
evalcond[2]=((((x1043)*(x1044)))+(((IkReal(-1.00000000000000))*(x1043)*(x1046))));
evalcond[3]=((x1044)+(((IkReal(0.613800000000000))*(x1042)))+(((IkReal(-1.00000000000000))*(x1046))));
evalcond[4]=((IkReal(0.00847044000000000))+(((IkReal(-1.00000000000000))*(x1044)*(x1048)))+(((IkReal(-1.00000000000000))*(x1044)*(x1047)))+(((IkReal(-1.00000000000000))*(pp)))+(((x1045)*(x1047)))+(((x1045)*(x1048))));
if( IKabs(evalcond[0]) > 0.000001  || IKabs(evalcond[1]) > 0.000001  || IKabs(evalcond[2]) > 0.000001  || IKabs(evalcond[3]) > 0.000001  || IKabs(evalcond[4]) > 0.000001  )
{
continue;
}
}

rotationfunction0(solutions);
}
}

}

}

} else
{
if( 1 )
{
continue;

} else
{
}
}
}

} else
{
{
IkReal j20array[1], cj20array[1], sj20array[1];
bool j20valid[1]={false};
_nj20 = 1;
IkReal x1049=((px)*(sj19));
IkReal x1050=((IkReal(0.313800000000000))*(cj22));
IkReal x1051=((IkReal(0.0300000000000000))*(sj22));
IkReal x1052=((IkReal(0.313800000000000))*(sj22));
IkReal x1053=((cj19)*(py));
IkReal x1054=((IkReal(0.0300000000000000))*(cj22));
if( IKabs(((gconst50)*(((((IkReal(-1.00000000000000))*(x1052)*(x1053)))+(((IkReal(0.0300000000000000))*(x1053)))+(((IkReal(-0.0300000000000000))*(x1049)))+(((IkReal(0.300000000000000))*(pz)))+(((pz)*(x1050)))+(((IkReal(-1.00000000000000))*(pz)*(x1051)))+(((x1049)*(x1054)))+(((x1049)*(x1052)))+(((IkReal(-1.00000000000000))*(x1053)*(x1054))))))) < IKFAST_ATAN2_MAGTHRESH && IKabs(((gconst50)*(((((IkReal(-0.300000000000000))*(x1049)))+(((IkReal(0.300000000000000))*(x1053)))+(((pz)*(x1054)))+(((pz)*(x1052)))+(((x1050)*(x1053)))+(((x1049)*(x1051)))+(((IkReal(-1.00000000000000))*(x1049)*(x1050)))+(((IkReal(-1.00000000000000))*(x1051)*(x1053)))+(((IkReal(-0.0300000000000000))*(pz))))))) < IKFAST_ATAN2_MAGTHRESH )
    continue;
j20array[0]=IKatan2(((gconst50)*(((((IkReal(-1.00000000000000))*(x1052)*(x1053)))+(((IkReal(0.0300000000000000))*(x1053)))+(((IkReal(-0.0300000000000000))*(x1049)))+(((IkReal(0.300000000000000))*(pz)))+(((pz)*(x1050)))+(((IkReal(-1.00000000000000))*(pz)*(x1051)))+(((x1049)*(x1054)))+(((x1049)*(x1052)))+(((IkReal(-1.00000000000000))*(x1053)*(x1054)))))), ((gconst50)*(((((IkReal(-0.300000000000000))*(x1049)))+(((IkReal(0.300000000000000))*(x1053)))+(((pz)*(x1054)))+(((pz)*(x1052)))+(((x1050)*(x1053)))+(((x1049)*(x1051)))+(((IkReal(-1.00000000000000))*(x1049)*(x1050)))+(((IkReal(-1.00000000000000))*(x1051)*(x1053)))+(((IkReal(-0.0300000000000000))*(pz)))))));
sj20array[0]=IKsin(j20array[0]);
cj20array[0]=IKcos(j20array[0]);
if( j20array[0] > IKPI )
{
    j20array[0]-=IK2PI;
}
else if( j20array[0] < -IKPI )
{    j20array[0]+=IK2PI;
}
j20valid[0] = true;
for(int ij20 = 0; ij20 < 1; ++ij20)
{
if( !j20valid[ij20] )
{
    continue;
}
_ij20[0] = ij20; _ij20[1] = -1;
for(int iij20 = ij20+1; iij20 < 1; ++iij20)
{
if( j20valid[iij20] && IKabs(cj20array[ij20]-cj20array[iij20]) < IKFAST_SOLUTION_THRESH && IKabs(sj20array[ij20]-sj20array[iij20]) < IKFAST_SOLUTION_THRESH )
{
    j20valid[iij20]=false; _ij20[1] = iij20; break; 
}
}
j20 = j20array[ij20]; cj20 = cj20array[ij20]; sj20 = sj20array[ij20];
{
IkReal evalcond[5];
IkReal x1055=IKcos(j20);
IkReal x1056=IKsin(j20);
IkReal x1057=((IkReal(0.313800000000000))*(cj22));
IkReal x1058=((IkReal(0.0300000000000000))*(sj22));
IkReal x1059=((IkReal(1.00000000000000))*(pz));
IkReal x1060=((px)*(sj19));
IkReal x1061=((cj19)*(py));
IkReal x1062=((IkReal(0.313800000000000))*(sj22));
IkReal x1063=((pz)*(x1055));
IkReal x1064=((IkReal(0.0300000000000000))*(x1055));
IkReal x1065=((IkReal(0.0300000000000000))*(x1056));
IkReal x1066=((IkReal(0.0600000000000000))*(x1056));
IkReal x1067=((x1055)*(x1061));
evalcond[0]=((IkReal(0.300000000000000))+(((IkReal(-1.00000000000000))*(x1058)))+(((x1055)*(x1060)))+(x1057)+(((IkReal(-1.00000000000000))*(x1056)*(x1059)))+(((IkReal(-1.00000000000000))*(x1067))));
evalcond[1]=((((IkReal(-1.00000000000000))*(x1059)))+(((x1055)*(x1062)))+(((IkReal(0.300000000000000))*(x1056)))+(((x1056)*(x1057)))+(((cj22)*(x1064)))+(((IkReal(-1.00000000000000))*(x1056)*(x1058)))+(((IkReal(-1.00000000000000))*(x1064))));
evalcond[2]=((IkReal(0.0300000000000000))+(((x1056)*(x1060)))+(((IkReal(-1.00000000000000))*(x1056)*(x1061)))+(((IkReal(-0.0300000000000000))*(cj22)))+(x1063)+(((IkReal(-1.00000000000000))*(x1062))));
evalcond[3]=((x1060)+(x1065)+(((x1055)*(x1057)))+(((IkReal(0.300000000000000))*(x1055)))+(((IkReal(-1.00000000000000))*(cj22)*(x1065)))+(((IkReal(-1.00000000000000))*(x1055)*(x1058)))+(((IkReal(-1.00000000000000))*(x1056)*(x1062)))+(((IkReal(-1.00000000000000))*(x1061))));
evalcond[4]=((IkReal(0.00847044000000000))+(((IkReal(-1.00000000000000))*(x1060)*(x1066)))+(((x1061)*(x1066)))+(((IkReal(0.600000000000000))*(pz)*(x1056)))+(((IkReal(-0.0600000000000000))*(x1063)))+(((IkReal(-1.00000000000000))*(pp)))+(((IkReal(0.600000000000000))*(x1067)))+(((IkReal(-0.600000000000000))*(x1055)*(x1060))));
if( IKabs(evalcond[0]) > 0.000001  || IKabs(evalcond[1]) > 0.000001  || IKabs(evalcond[2]) > 0.000001  || IKabs(evalcond[3]) > 0.000001  || IKabs(evalcond[4]) > 0.000001  )
{
continue;
}
}

rotationfunction0(solutions);
}
}

}

}

} else
{
{
IkReal j20array[1], cj20array[1], sj20array[1];
bool j20valid[1]={false};
_nj20 = 1;
IkReal x1068=(sj22)*(sj22);
IkReal x1069=(cj22)*(cj22);
IkReal x1070=((IkReal(0.0188280000000000))*(sj22));
if( IKabs(((gconst51)*(((IkReal(0.000900000000000000))+(((cj22)*(x1070)))+(((IkReal(0.0984704400000000))*(x1068)))+(((IkReal(-1.00000000000000))*((pz)*(pz))))+(((IkReal(-0.00180000000000000))*(cj22)))+(((IkReal(0.000900000000000000))*(x1069)))+(((IkReal(-1.00000000000000))*(x1070))))))) < IKFAST_ATAN2_MAGTHRESH && IKabs(((gconst51)*(((IkReal(0.00900000000000000))+(((IkReal(0.000414000000000000))*(cj22)))+(((px)*(pz)*(sj19)))+(((IkReal(-0.00941400000000000))*(x1069)))+(((IkReal(-0.0950400000000000))*(sj22)))+(((IkReal(-0.0975704400000000))*(cj22)*(sj22)))+(((IkReal(0.00941400000000000))*(x1068)))+(((IkReal(-1.00000000000000))*(cj19)*(py)*(pz))))))) < IKFAST_ATAN2_MAGTHRESH )
    continue;
j20array[0]=IKatan2(((gconst51)*(((IkReal(0.000900000000000000))+(((cj22)*(x1070)))+(((IkReal(0.0984704400000000))*(x1068)))+(((IkReal(-1.00000000000000))*((pz)*(pz))))+(((IkReal(-0.00180000000000000))*(cj22)))+(((IkReal(0.000900000000000000))*(x1069)))+(((IkReal(-1.00000000000000))*(x1070)))))), ((gconst51)*(((IkReal(0.00900000000000000))+(((IkReal(0.000414000000000000))*(cj22)))+(((px)*(pz)*(sj19)))+(((IkReal(-0.00941400000000000))*(x1069)))+(((IkReal(-0.0950400000000000))*(sj22)))+(((IkReal(-0.0975704400000000))*(cj22)*(sj22)))+(((IkReal(0.00941400000000000))*(x1068)))+(((IkReal(-1.00000000000000))*(cj19)*(py)*(pz)))))));
sj20array[0]=IKsin(j20array[0]);
cj20array[0]=IKcos(j20array[0]);
if( j20array[0] > IKPI )
{
    j20array[0]-=IK2PI;
}
else if( j20array[0] < -IKPI )
{    j20array[0]+=IK2PI;
}
j20valid[0] = true;
for(int ij20 = 0; ij20 < 1; ++ij20)
{
if( !j20valid[ij20] )
{
    continue;
}
_ij20[0] = ij20; _ij20[1] = -1;
for(int iij20 = ij20+1; iij20 < 1; ++iij20)
{
if( j20valid[iij20] && IKabs(cj20array[ij20]-cj20array[iij20]) < IKFAST_SOLUTION_THRESH && IKabs(sj20array[ij20]-sj20array[iij20]) < IKFAST_SOLUTION_THRESH )
{
    j20valid[iij20]=false; _ij20[1] = iij20; break; 
}
}
j20 = j20array[ij20]; cj20 = cj20array[ij20]; sj20 = sj20array[ij20];
{
IkReal evalcond[5];
IkReal x1071=IKcos(j20);
IkReal x1072=IKsin(j20);
IkReal x1073=((IkReal(0.313800000000000))*(cj22));
IkReal x1074=((IkReal(0.0300000000000000))*(sj22));
IkReal x1075=((IkReal(1.00000000000000))*(pz));
IkReal x1076=((px)*(sj19));
IkReal x1077=((cj19)*(py));
IkReal x1078=((IkReal(0.313800000000000))*(sj22));
IkReal x1079=((pz)*(x1071));
IkReal x1080=((IkReal(0.0300000000000000))*(x1071));
IkReal x1081=((IkReal(0.0300000000000000))*(x1072));
IkReal x1082=((IkReal(0.0600000000000000))*(x1072));
IkReal x1083=((x1071)*(x1077));
evalcond[0]=((IkReal(0.300000000000000))+(x1073)+(((x1071)*(x1076)))+(((IkReal(-1.00000000000000))*(x1083)))+(((IkReal(-1.00000000000000))*(x1072)*(x1075)))+(((IkReal(-1.00000000000000))*(x1074))));
evalcond[1]=((((IkReal(0.300000000000000))*(x1072)))+(((x1071)*(x1078)))+(((x1072)*(x1073)))+(((cj22)*(x1080)))+(((IkReal(-1.00000000000000))*(x1072)*(x1074)))+(((IkReal(-1.00000000000000))*(x1080)))+(((IkReal(-1.00000000000000))*(x1075))));
evalcond[2]=((IkReal(0.0300000000000000))+(((IkReal(-0.0300000000000000))*(cj22)))+(x1079)+(((IkReal(-1.00000000000000))*(x1072)*(x1077)))+(((x1072)*(x1076)))+(((IkReal(-1.00000000000000))*(x1078))));
evalcond[3]=((((IkReal(0.300000000000000))*(x1071)))+(x1076)+(x1081)+(((IkReal(-1.00000000000000))*(x1071)*(x1074)))+(((x1071)*(x1073)))+(((IkReal(-1.00000000000000))*(cj22)*(x1081)))+(((IkReal(-1.00000000000000))*(x1077)))+(((IkReal(-1.00000000000000))*(x1072)*(x1078))));
evalcond[4]=((IkReal(0.00847044000000000))+(((IkReal(0.600000000000000))*(pz)*(x1072)))+(((IkReal(-0.0600000000000000))*(x1079)))+(((IkReal(-1.00000000000000))*(pp)))+(((IkReal(-1.00000000000000))*(x1076)*(x1082)))+(((x1077)*(x1082)))+(((IkReal(-0.600000000000000))*(x1071)*(x1076)))+(((IkReal(0.600000000000000))*(x1083))));
if( IKabs(evalcond[0]) > 0.000001  || IKabs(evalcond[1]) > 0.000001  || IKabs(evalcond[2]) > 0.000001  || IKabs(evalcond[3]) > 0.000001  || IKabs(evalcond[4]) > 0.000001  )
{
continue;
}
}

rotationfunction0(solutions);
}
}

}

}

} else
{
if( 1 )
{
continue;

} else
{
}
}
}
}

} else
{
{
IkReal j20array[1], cj20array[1], sj20array[1];
bool j20valid[1]={false};
_nj20 = 1;
IkReal x1084=((px)*(sj21));
IkReal x1085=((cj19)*(py));
IkReal x1086=((IkReal(0.0300000000000000))*(sj22));
IkReal x1087=((IkReal(0.300000000000000))*(cj21));
IkReal x1088=((IkReal(0.313800000000000))*(cj21)*(cj22));
IkReal x1089=((cj21)*(px)*(sj19));
IkReal x1090=((cj19)*(sj19)*(sj21));
if( IKabs(((gconst46)*(((((py)*(x1084)*((sj19)*(sj19))))+(((pz)*(x1087)))+(((pz)*(x1088)))+(((IkReal(-1.00000000000000))*(py)*(sj19)*(sj21)*(x1085)))+(((cj19)*(px)*(sj19)*(x1084)))+(((IkReal(-1.00000000000000))*(cj21)*(pz)*(x1086)))+(((IkReal(-1.00000000000000))*(cj19)*(x1084)*(x1085))))))) < IKFAST_ATAN2_MAGTHRESH && IKabs(((gconst46)*(((((IkReal(-1.00000000000000))*(cj21)*(x1085)*(x1086)))+(((IkReal(-1.00000000000000))*(px)*(sj19)*(x1087)))+(((IkReal(-1.00000000000000))*(px)*(sj19)*(x1088)))+(((py)*(pz)*(sj19)*(sj21)))+(((x1086)*(x1089)))+(((x1085)*(x1087)))+(((x1085)*(x1088)))+(((cj19)*(pz)*(x1084))))))) < IKFAST_ATAN2_MAGTHRESH )
    continue;
j20array[0]=IKatan2(((gconst46)*(((((py)*(x1084)*((sj19)*(sj19))))+(((pz)*(x1087)))+(((pz)*(x1088)))+(((IkReal(-1.00000000000000))*(py)*(sj19)*(sj21)*(x1085)))+(((cj19)*(px)*(sj19)*(x1084)))+(((IkReal(-1.00000000000000))*(cj21)*(pz)*(x1086)))+(((IkReal(-1.00000000000000))*(cj19)*(x1084)*(x1085)))))), ((gconst46)*(((((IkReal(-1.00000000000000))*(cj21)*(x1085)*(x1086)))+(((IkReal(-1.00000000000000))*(px)*(sj19)*(x1087)))+(((IkReal(-1.00000000000000))*(px)*(sj19)*(x1088)))+(((py)*(pz)*(sj19)*(sj21)))+(((x1086)*(x1089)))+(((x1085)*(x1087)))+(((x1085)*(x1088)))+(((cj19)*(pz)*(x1084)))))));
sj20array[0]=IKsin(j20array[0]);
cj20array[0]=IKcos(j20array[0]);
if( j20array[0] > IKPI )
{
    j20array[0]-=IK2PI;
}
else if( j20array[0] < -IKPI )
{    j20array[0]+=IK2PI;
}
j20valid[0] = true;
for(int ij20 = 0; ij20 < 1; ++ij20)
{
if( !j20valid[ij20] )
{
    continue;
}
_ij20[0] = ij20; _ij20[1] = -1;
for(int iij20 = ij20+1; iij20 < 1; ++iij20)
{
if( j20valid[iij20] && IKabs(cj20array[ij20]-cj20array[iij20]) < IKFAST_SOLUTION_THRESH && IKabs(sj20array[ij20]-sj20array[iij20]) < IKFAST_SOLUTION_THRESH )
{
    j20valid[iij20]=false; _ij20[1] = iij20; break; 
}
}
j20 = j20array[ij20]; cj20 = cj20array[ij20]; sj20 = sj20array[ij20];
{
IkReal evalcond[6];
IkReal x1091=IKcos(j20);
IkReal x1092=IKsin(j20);
IkReal x1093=((IkReal(0.313800000000000))*(cj22));
IkReal x1094=((IkReal(0.0300000000000000))*(cj22));
IkReal x1095=((cj19)*(py));
IkReal x1096=((IkReal(1.00000000000000))*(sj19));
IkReal x1097=((cj21)*(py));
IkReal x1098=((IkReal(0.313800000000000))*(sj22));
IkReal x1099=((IkReal(0.0300000000000000))*(sj22));
IkReal x1100=((IkReal(1.00000000000000))*(pz));
IkReal x1101=((cj19)*(px));
IkReal x1102=((px)*(sj19));
IkReal x1103=((sj21)*(x1092));
IkReal x1104=((sj21)*(x1091));
IkReal x1105=((IkReal(0.600000000000000))*(x1091));
IkReal x1106=((cj21)*(x1092));
evalcond[0]=((IkReal(0.300000000000000))+(x1093)+(((IkReal(-1.00000000000000))*(x1091)*(x1095)))+(((IkReal(-1.00000000000000))*(x1092)*(x1100)))+(((IkReal(-1.00000000000000))*(x1099)))+(((x1091)*(x1102))));
evalcond[1]=((((IkReal(-1.00000000000000))*(cj21)*(x1091)*(x1100)))+(((sj21)*(x1101)))+(((IkReal(-1.00000000000000))*(px)*(x1096)*(x1106)))+(((py)*(sj19)*(sj21)))+(((x1095)*(x1106))));
evalcond[2]=((((IkReal(0.0300000000000000))*(x1104)))+(((IkReal(-1.00000000000000))*(x1098)*(x1104)))+(((IkReal(0.300000000000000))*(x1092)))+(((IkReal(-1.00000000000000))*(x1094)*(x1104)))+(((x1092)*(x1093)))+(((IkReal(-1.00000000000000))*(x1092)*(x1099)))+(((IkReal(-1.00000000000000))*(x1100))));
evalcond[3]=((IkReal(0.0300000000000000))+(((IkReal(-1.00000000000000))*(x1096)*(x1097)))+(((IkReal(-1.00000000000000))*(x1094)))+(((IkReal(-1.00000000000000))*(x1098)))+(((IkReal(-1.00000000000000))*(px)*(x1096)*(x1103)))+(((IkReal(-1.00000000000000))*(x1100)*(x1104)))+(((IkReal(-1.00000000000000))*(cj21)*(x1101)))+(((x1095)*(x1103))));
evalcond[4]=((x1102)+(((x1094)*(x1103)))+(((x1098)*(x1103)))+(((IkReal(-1.00000000000000))*(x1091)*(x1099)))+(((IkReal(-0.0300000000000000))*(x1103)))+(((IkReal(-1.00000000000000))*(x1095)))+(((IkReal(0.300000000000000))*(x1091)))+(((x1091)*(x1093))));
evalcond[5]=((IkReal(0.00847044000000000))+(((IkReal(0.0600000000000000))*(cj21)*(x1101)))+(((IkReal(-1.00000000000000))*(pp)))+(((IkReal(0.0600000000000000))*(pz)*(x1104)))+(((IkReal(0.0600000000000000))*(sj19)*(x1097)))+(((IkReal(-0.0600000000000000))*(x1095)*(x1103)))+(((IkReal(0.600000000000000))*(pz)*(x1092)))+(((IkReal(-1.00000000000000))*(x1102)*(x1105)))+(((IkReal(0.0600000000000000))*(x1102)*(x1103)))+(((x1095)*(x1105))));
if( IKabs(evalcond[0]) > 0.000001  || IKabs(evalcond[1]) > 0.000001  || IKabs(evalcond[2]) > 0.000001  || IKabs(evalcond[3]) > 0.000001  || IKabs(evalcond[4]) > 0.000001  || IKabs(evalcond[5]) > 0.000001  )
{
continue;
}
}

rotationfunction0(solutions);
}
}

}

}

} else
{
{
IkReal j20array[1], cj20array[1], sj20array[1];
bool j20valid[1]={false};
_nj20 = 1;
IkReal x1107=(cj22)*(cj22);
IkReal x1108=(sj22)*(sj22);
IkReal x1109=((IkReal(0.00941400000000000))*(sj21));
IkReal x1110=((sj21)*(sj22));
if( IKabs(((gconst47)*(((((px)*(pz)*(sj19)))+(((x1108)*(x1109)))+(((IkReal(0.000414000000000000))*(cj22)*(sj21)))+(((IkReal(-0.0975704400000000))*(cj22)*(x1110)))+(((IkReal(0.00900000000000000))*(sj21)))+(((IkReal(-0.0950400000000000))*(x1110)))+(((IkReal(-1.00000000000000))*(x1107)*(x1109)))+(((IkReal(-1.00000000000000))*(cj19)*(py)*(pz))))))) < IKFAST_ATAN2_MAGTHRESH && IKabs(((gconst47)*(((IkReal(-0.0900000000000000))+(((IkReal(0.0180000000000000))*(sj22)))+(((IkReal(-0.188280000000000))*(cj22)))+(((IkReal(0.0188280000000000))*(cj22)*(sj22)))+((pz)*(pz))+(((IkReal(-0.000900000000000000))*(x1108)))+(((IkReal(-0.0984704400000000))*(x1107))))))) < IKFAST_ATAN2_MAGTHRESH )
    continue;
j20array[0]=IKatan2(((gconst47)*(((((px)*(pz)*(sj19)))+(((x1108)*(x1109)))+(((IkReal(0.000414000000000000))*(cj22)*(sj21)))+(((IkReal(-0.0975704400000000))*(cj22)*(x1110)))+(((IkReal(0.00900000000000000))*(sj21)))+(((IkReal(-0.0950400000000000))*(x1110)))+(((IkReal(-1.00000000000000))*(x1107)*(x1109)))+(((IkReal(-1.00000000000000))*(cj19)*(py)*(pz)))))), ((gconst47)*(((IkReal(-0.0900000000000000))+(((IkReal(0.0180000000000000))*(sj22)))+(((IkReal(-0.188280000000000))*(cj22)))+(((IkReal(0.0188280000000000))*(cj22)*(sj22)))+((pz)*(pz))+(((IkReal(-0.000900000000000000))*(x1108)))+(((IkReal(-0.0984704400000000))*(x1107)))))));
sj20array[0]=IKsin(j20array[0]);
cj20array[0]=IKcos(j20array[0]);
if( j20array[0] > IKPI )
{
    j20array[0]-=IK2PI;
}
else if( j20array[0] < -IKPI )
{    j20array[0]+=IK2PI;
}
j20valid[0] = true;
for(int ij20 = 0; ij20 < 1; ++ij20)
{
if( !j20valid[ij20] )
{
    continue;
}
_ij20[0] = ij20; _ij20[1] = -1;
for(int iij20 = ij20+1; iij20 < 1; ++iij20)
{
if( j20valid[iij20] && IKabs(cj20array[ij20]-cj20array[iij20]) < IKFAST_SOLUTION_THRESH && IKabs(sj20array[ij20]-sj20array[iij20]) < IKFAST_SOLUTION_THRESH )
{
    j20valid[iij20]=false; _ij20[1] = iij20; break; 
}
}
j20 = j20array[ij20]; cj20 = cj20array[ij20]; sj20 = sj20array[ij20];
{
IkReal evalcond[6];
IkReal x1111=IKcos(j20);
IkReal x1112=IKsin(j20);
IkReal x1113=((IkReal(0.313800000000000))*(cj22));
IkReal x1114=((IkReal(0.0300000000000000))*(cj22));
IkReal x1115=((cj19)*(py));
IkReal x1116=((IkReal(1.00000000000000))*(sj19));
IkReal x1117=((cj21)*(py));
IkReal x1118=((IkReal(0.313800000000000))*(sj22));
IkReal x1119=((IkReal(0.0300000000000000))*(sj22));
IkReal x1120=((IkReal(1.00000000000000))*(pz));
IkReal x1121=((cj19)*(px));
IkReal x1122=((px)*(sj19));
IkReal x1123=((sj21)*(x1112));
IkReal x1124=((sj21)*(x1111));
IkReal x1125=((IkReal(0.600000000000000))*(x1111));
IkReal x1126=((cj21)*(x1112));
evalcond[0]=((IkReal(0.300000000000000))+(x1113)+(((IkReal(-1.00000000000000))*(x1112)*(x1120)))+(((x1111)*(x1122)))+(((IkReal(-1.00000000000000))*(x1111)*(x1115)))+(((IkReal(-1.00000000000000))*(x1119))));
evalcond[1]=((((IkReal(-1.00000000000000))*(px)*(x1116)*(x1126)))+(((sj21)*(x1121)))+(((IkReal(-1.00000000000000))*(cj21)*(x1111)*(x1120)))+(((py)*(sj19)*(sj21)))+(((x1115)*(x1126))));
evalcond[2]=((((IkReal(0.300000000000000))*(x1112)))+(((IkReal(-1.00000000000000))*(x1114)*(x1124)))+(((x1112)*(x1113)))+(((IkReal(-1.00000000000000))*(x1112)*(x1119)))+(((IkReal(0.0300000000000000))*(x1124)))+(((IkReal(-1.00000000000000))*(x1120)))+(((IkReal(-1.00000000000000))*(x1118)*(x1124))));
evalcond[3]=((IkReal(0.0300000000000000))+(((IkReal(-1.00000000000000))*(px)*(x1116)*(x1123)))+(((IkReal(-1.00000000000000))*(x1116)*(x1117)))+(((IkReal(-1.00000000000000))*(cj21)*(x1121)))+(((IkReal(-1.00000000000000))*(x1120)*(x1124)))+(((IkReal(-1.00000000000000))*(x1118)))+(((IkReal(-1.00000000000000))*(x1114)))+(((x1115)*(x1123))));
evalcond[4]=((((IkReal(0.300000000000000))*(x1111)))+(x1122)+(((x1114)*(x1123)))+(((x1111)*(x1113)))+(((IkReal(-0.0300000000000000))*(x1123)))+(((IkReal(-1.00000000000000))*(x1115)))+(((x1118)*(x1123)))+(((IkReal(-1.00000000000000))*(x1111)*(x1119))));
evalcond[5]=((IkReal(0.00847044000000000))+(((IkReal(0.0600000000000000))*(sj19)*(x1117)))+(((IkReal(0.0600000000000000))*(x1122)*(x1123)))+(((IkReal(0.0600000000000000))*(pz)*(x1124)))+(((IkReal(-1.00000000000000))*(x1122)*(x1125)))+(((IkReal(-0.0600000000000000))*(x1115)*(x1123)))+(((IkReal(0.0600000000000000))*(cj21)*(x1121)))+(((IkReal(-1.00000000000000))*(pp)))+(((IkReal(0.600000000000000))*(pz)*(x1112)))+(((x1115)*(x1125))));
if( IKabs(evalcond[0]) > 0.000001  || IKabs(evalcond[1]) > 0.000001  || IKabs(evalcond[2]) > 0.000001  || IKabs(evalcond[3]) > 0.000001  || IKabs(evalcond[4]) > 0.000001  || IKabs(evalcond[5]) > 0.000001  )
{
continue;
}
}

rotationfunction0(solutions);
}
}

}

}
}
}

}

}
}
}
}
return solutions.GetNumSolutions()>0;
}
inline void rotationfunction0(IkSolutionListBase<IkReal>& solutions) {
for(int rotationiter = 0; rotationiter < 1; ++rotationiter) {
IkReal x95=((cj21)*(cj22));
IkReal x96=((cj20)*(sj22));
IkReal x97=((IkReal(1.00000000000000))*(sj19));
IkReal x98=((cj21)*(sj22));
IkReal x99=((IkReal(1.00000000000000))*(cj22));
IkReal x100=((cj20)*(cj21));
IkReal x101=((cj21)*(sj20));
IkReal x102=((IkReal(1.00000000000000))*(cj19));
IkReal x103=((sj20)*(sj22));
IkReal x104=((cj19)*(x95));
IkReal x105=((((IkReal(-1.00000000000000))*(sj20)*(sj21)*(x99)))+(x96));
IkReal x106=((((cj20)*(cj22)*(sj21)))+(x103));
IkReal x107=((((sj19)*(x101)))+(((IkReal(-1.00000000000000))*(sj21)*(x102))));
IkReal x108=((((IkReal(-1.00000000000000))*(sj20)*(x99)))+(((sj21)*(x96))));
IkReal x109=((((IkReal(-1.00000000000000))*(x101)*(x102)))+(((IkReal(-1.00000000000000))*(sj21)*(x97))));
IkReal x110=((((IkReal(-1.00000000000000))*(cj20)*(x99)))+(((IkReal(-1.00000000000000))*(sj21)*(x103))));
IkReal x111=((((sj19)*(x95)))+(((cj19)*(x105))));
IkReal x112=((x104)+(((IkReal(-1.00000000000000))*(x105)*(x97))));
IkReal x113=((((sj19)*(x98)))+(((cj19)*(x110))));
IkReal x114=((((IkReal(-1.00000000000000))*(x110)*(x97)))+(((cj19)*(x98))));
new_r00=((((r10)*(x111)))+(((r20)*(x106)))+(((r00)*(((x104)+(((IkReal(-1.00000000000000))*(sj19)*(x105))))))));
new_r01=((((r21)*(x106)))+(((r11)*(x111)))+(((r01)*(x112))));
new_r02=((((r02)*(x112)))+(((r22)*(x106)))+(((r12)*(x111))));
new_r10=((((r10)*(x109)))+(((r20)*(x100)))+(((r00)*(x107))));
new_r11=((((r21)*(x100)))+(((r01)*(x107)))+(((r11)*(x109))));
new_r12=((((r02)*(x107)))+(((r22)*(x100)))+(((r12)*(x109))));
new_r20=((((r10)*(x113)))+(((r20)*(x108)))+(((r00)*(x114))));
new_r21=((((r21)*(x108)))+(((r11)*(x113)))+(((r01)*(x114))));
new_r22=((((r02)*(x114)))+(((r22)*(x108)))+(((r12)*(x113))));
{
IkReal j24array[2], cj24array[2], sj24array[2];
bool j24valid[2]={false};
_nj24 = 2;
cj24array[0]=new_r22;
if( cj24array[0] >= -1-IKFAST_SINCOS_THRESH && cj24array[0] <= 1+IKFAST_SINCOS_THRESH )
{
    j24valid[0] = j24valid[1] = true;
    j24array[0] = IKacos(cj24array[0]);
    sj24array[0] = IKsin(j24array[0]);
    cj24array[1] = cj24array[0];
    j24array[1] = -j24array[0];
    sj24array[1] = -sj24array[0];
}
else if( isnan(cj24array[0]) )
{
    // probably any value will work
    j24valid[0] = true;
    cj24array[0] = 1; sj24array[0] = 0; j24array[0] = 0;
}
for(int ij24 = 0; ij24 < 2; ++ij24)
{
if( !j24valid[ij24] )
{
    continue;
}
_ij24[0] = ij24; _ij24[1] = -1;
for(int iij24 = ij24+1; iij24 < 2; ++iij24)
{
if( j24valid[iij24] && IKabs(cj24array[ij24]-cj24array[iij24]) < IKFAST_SOLUTION_THRESH && IKabs(sj24array[ij24]-sj24array[iij24]) < IKFAST_SOLUTION_THRESH )
{
    j24valid[iij24]=false; _ij24[1] = iij24; break; 
}
}
j24 = j24array[ij24]; cj24 = cj24array[ij24]; sj24 = sj24array[ij24];

{
IkReal dummyeval[1];
IkReal gconst54;
gconst54=IKsign(sj24);
dummyeval[0]=sj24;
if( IKabs(dummyeval[0]) < 0.0000010000000000  )
{
{
IkReal dummyeval[1];
IkReal gconst52;
gconst52=IKsign((((new_r12)*(new_r12))+((new_r02)*(new_r02))));
dummyeval[0]=(((new_r12)*(new_r12))+((new_r02)*(new_r02)));
if( IKabs(dummyeval[0]) < 0.0000010000000000  )
{
{
IkReal dummyeval[1];
IkReal gconst53;
gconst53=IKsign(((((cj24)*((new_r02)*(new_r02))))+(((cj24)*((new_r12)*(new_r12))))));
dummyeval[0]=((((cj24)*((new_r02)*(new_r02))))+(((cj24)*((new_r12)*(new_r12)))));
if( IKabs(dummyeval[0]) < 0.0000010000000000  )
{
{
IkReal evalcond[7];
evalcond[0]=((IkReal(-3.14159265358979))+(IKfmod(((IkReal(1.57079632679490))+(j24)), IkReal(6.28318530717959))));
evalcond[1]=new_r22;
evalcond[2]=((IkReal(-1.00000000000000))*(new_r22));
if( IKabs(evalcond[0]) < 0.0000010000000000  && IKabs(evalcond[1]) < 0.0000010000000000  && IKabs(evalcond[2]) < 0.0000010000000000  )
{
{
IkReal j25array[1], cj25array[1], sj25array[1];
bool j25valid[1]={false};
_nj25 = 1;
if( IKabs(new_r21) < IKFAST_ATAN2_MAGTHRESH && IKabs(((IkReal(-1.00000000000000))*(new_r20))) < IKFAST_ATAN2_MAGTHRESH && IKabs(IKsqr(new_r21)+IKsqr(((IkReal(-1.00000000000000))*(new_r20)))-1) <= IKFAST_SINCOS_THRESH )
    continue;
j25array[0]=IKatan2(new_r21, ((IkReal(-1.00000000000000))*(new_r20)));
sj25array[0]=IKsin(j25array[0]);
cj25array[0]=IKcos(j25array[0]);
if( j25array[0] > IKPI )
{
    j25array[0]-=IK2PI;
}
else if( j25array[0] < -IKPI )
{    j25array[0]+=IK2PI;
}
j25valid[0] = true;
for(int ij25 = 0; ij25 < 1; ++ij25)
{
if( !j25valid[ij25] )
{
    continue;
}
_ij25[0] = ij25; _ij25[1] = -1;
for(int iij25 = ij25+1; iij25 < 1; ++iij25)
{
if( j25valid[iij25] && IKabs(cj25array[ij25]-cj25array[iij25]) < IKFAST_SOLUTION_THRESH && IKabs(sj25array[ij25]-sj25array[iij25]) < IKFAST_SOLUTION_THRESH )
{
    j25valid[iij25]=false; _ij25[1] = iij25; break; 
}
}
j25 = j25array[ij25]; cj25 = cj25array[ij25]; sj25 = sj25array[ij25];
{
IkReal evalcond[2];
evalcond[0]=((IKcos(j25))+(new_r20));
evalcond[1]=((new_r21)+(((IkReal(-1.00000000000000))*(IKsin(j25)))));
if( IKabs(evalcond[0]) > 0.000001  || IKabs(evalcond[1]) > 0.000001  )
{
continue;
}
}

{
IkReal dummyeval[1];
IkReal gconst60;
gconst60=IKsign(((((new_r01)*(new_r12)))+(((IkReal(-1.00000000000000))*(new_r02)*(new_r11)))));
dummyeval[0]=((((new_r01)*(new_r12)))+(((IkReal(-1.00000000000000))*(new_r02)*(new_r11))));
if( IKabs(dummyeval[0]) < 0.0000010000000000  )
{
{
IkReal dummyeval[1];
IkReal gconst61;
gconst61=IKsign(((((new_r00)*(new_r12)))+(((IkReal(-1.00000000000000))*(new_r02)*(new_r10)))));
dummyeval[0]=((((new_r00)*(new_r12)))+(((IkReal(-1.00000000000000))*(new_r02)*(new_r10))));
if( IKabs(dummyeval[0]) < 0.0000010000000000  )
{
continue;

} else
{
{
IkReal j23array[1], cj23array[1], sj23array[1];
bool j23valid[1]={false};
_nj23 = 1;
if( IKabs(((gconst61)*(new_r00))) < IKFAST_ATAN2_MAGTHRESH && IKabs(((IkReal(-1.00000000000000))*(gconst61)*(new_r10))) < IKFAST_ATAN2_MAGTHRESH )
    continue;
j23array[0]=IKatan2(((gconst61)*(new_r00)), ((IkReal(-1.00000000000000))*(gconst61)*(new_r10)));
sj23array[0]=IKsin(j23array[0]);
cj23array[0]=IKcos(j23array[0]);
if( j23array[0] > IKPI )
{
    j23array[0]-=IK2PI;
}
else if( j23array[0] < -IKPI )
{    j23array[0]+=IK2PI;
}
j23valid[0] = true;
for(int ij23 = 0; ij23 < 1; ++ij23)
{
if( !j23valid[ij23] )
{
    continue;
}
_ij23[0] = ij23; _ij23[1] = -1;
for(int iij23 = ij23+1; iij23 < 1; ++iij23)
{
if( j23valid[iij23] && IKabs(cj23array[ij23]-cj23array[iij23]) < IKFAST_SOLUTION_THRESH && IKabs(sj23array[ij23]-sj23array[iij23]) < IKFAST_SOLUTION_THRESH )
{
    j23valid[iij23]=false; _ij23[1] = iij23; break; 
}
}
j23 = j23array[ij23]; cj23 = cj23array[ij23]; sj23 = sj23array[ij23];
{
IkReal evalcond[6];
IkReal x115=IKsin(j23);
IkReal x116=IKcos(j23);
IkReal x117=((IkReal(1.00000000000000))*(x115));
evalcond[0]=((((IkReal(-1.00000000000000))*(new_r02)*(x117)))+(((new_r12)*(x116))));
evalcond[1]=((IkReal(-1.00000000000000))+(((new_r02)*(x116)))+(((new_r12)*(x115))));
evalcond[2]=((((new_r10)*(x116)))+(((IkReal(-1.00000000000000))*(new_r00)*(x117)))+(((IkReal(-1.00000000000000))*(sj25))));
evalcond[3]=((((new_r11)*(x116)))+(((IkReal(-1.00000000000000))*(new_r01)*(x117)))+(((IkReal(-1.00000000000000))*(cj25))));
evalcond[4]=((((new_r11)*(x115)))+(((new_r01)*(x116))));
evalcond[5]=((((new_r10)*(x115)))+(((new_r00)*(x116))));
if( IKabs(evalcond[0]) > 0.000001  || IKabs(evalcond[1]) > 0.000001  || IKabs(evalcond[2]) > 0.000001  || IKabs(evalcond[3]) > 0.000001  || IKabs(evalcond[4]) > 0.000001  || IKabs(evalcond[5]) > 0.000001  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(7);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j19;
vinfos[0].indices[0] = _ij19[0];
vinfos[0].indices[1] = _ij19[1];
vinfos[0].maxsolutions = _nj19;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j20;
vinfos[1].indices[0] = _ij20[0];
vinfos[1].indices[1] = _ij20[1];
vinfos[1].maxsolutions = _nj20;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j21;
vinfos[2].indices[0] = _ij21[0];
vinfos[2].indices[1] = _ij21[1];
vinfos[2].maxsolutions = _nj21;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j22;
vinfos[3].indices[0] = _ij22[0];
vinfos[3].indices[1] = _ij22[1];
vinfos[3].maxsolutions = _nj22;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j23;
vinfos[4].indices[0] = _ij23[0];
vinfos[4].indices[1] = _ij23[1];
vinfos[4].maxsolutions = _nj23;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j24;
vinfos[5].indices[0] = _ij24[0];
vinfos[5].indices[1] = _ij24[1];
vinfos[5].maxsolutions = _nj24;
vinfos[6].jointtype = 1;
vinfos[6].foffset = j25;
vinfos[6].indices[0] = _ij25[0];
vinfos[6].indices[1] = _ij25[1];
vinfos[6].maxsolutions = _nj25;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j23array[1], cj23array[1], sj23array[1];
bool j23valid[1]={false};
_nj23 = 1;
if( IKabs(((gconst60)*(new_r01))) < IKFAST_ATAN2_MAGTHRESH && IKabs(((IkReal(-1.00000000000000))*(gconst60)*(new_r11))) < IKFAST_ATAN2_MAGTHRESH )
    continue;
j23array[0]=IKatan2(((gconst60)*(new_r01)), ((IkReal(-1.00000000000000))*(gconst60)*(new_r11)));
sj23array[0]=IKsin(j23array[0]);
cj23array[0]=IKcos(j23array[0]);
if( j23array[0] > IKPI )
{
    j23array[0]-=IK2PI;
}
else if( j23array[0] < -IKPI )
{    j23array[0]+=IK2PI;
}
j23valid[0] = true;
for(int ij23 = 0; ij23 < 1; ++ij23)
{
if( !j23valid[ij23] )
{
    continue;
}
_ij23[0] = ij23; _ij23[1] = -1;
for(int iij23 = ij23+1; iij23 < 1; ++iij23)
{
if( j23valid[iij23] && IKabs(cj23array[ij23]-cj23array[iij23]) < IKFAST_SOLUTION_THRESH && IKabs(sj23array[ij23]-sj23array[iij23]) < IKFAST_SOLUTION_THRESH )
{
    j23valid[iij23]=false; _ij23[1] = iij23; break; 
}
}
j23 = j23array[ij23]; cj23 = cj23array[ij23]; sj23 = sj23array[ij23];
{
IkReal evalcond[6];
IkReal x118=IKsin(j23);
IkReal x119=IKcos(j23);
IkReal x120=((IkReal(1.00000000000000))*(x118));
evalcond[0]=((((IkReal(-1.00000000000000))*(new_r02)*(x120)))+(((new_r12)*(x119))));
evalcond[1]=((IkReal(-1.00000000000000))+(((new_r02)*(x119)))+(((new_r12)*(x118))));
evalcond[2]=((((new_r10)*(x119)))+(((IkReal(-1.00000000000000))*(new_r00)*(x120)))+(((IkReal(-1.00000000000000))*(sj25))));
evalcond[3]=((((new_r11)*(x119)))+(((IkReal(-1.00000000000000))*(new_r01)*(x120)))+(((IkReal(-1.00000000000000))*(cj25))));
evalcond[4]=((((new_r11)*(x118)))+(((new_r01)*(x119))));
evalcond[5]=((((new_r10)*(x118)))+(((new_r00)*(x119))));
if( IKabs(evalcond[0]) > 0.000001  || IKabs(evalcond[1]) > 0.000001  || IKabs(evalcond[2]) > 0.000001  || IKabs(evalcond[3]) > 0.000001  || IKabs(evalcond[4]) > 0.000001  || IKabs(evalcond[5]) > 0.000001  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(7);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j19;
vinfos[0].indices[0] = _ij19[0];
vinfos[0].indices[1] = _ij19[1];
vinfos[0].maxsolutions = _nj19;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j20;
vinfos[1].indices[0] = _ij20[0];
vinfos[1].indices[1] = _ij20[1];
vinfos[1].maxsolutions = _nj20;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j21;
vinfos[2].indices[0] = _ij21[0];
vinfos[2].indices[1] = _ij21[1];
vinfos[2].maxsolutions = _nj21;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j22;
vinfos[3].indices[0] = _ij22[0];
vinfos[3].indices[1] = _ij22[1];
vinfos[3].maxsolutions = _nj22;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j23;
vinfos[4].indices[0] = _ij23[0];
vinfos[4].indices[1] = _ij23[1];
vinfos[4].maxsolutions = _nj23;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j24;
vinfos[5].indices[0] = _ij24[0];
vinfos[5].indices[1] = _ij24[1];
vinfos[5].maxsolutions = _nj24;
vinfos[6].jointtype = 1;
vinfos[6].foffset = j25;
vinfos[6].indices[0] = _ij25[0];
vinfos[6].indices[1] = _ij25[1];
vinfos[6].maxsolutions = _nj25;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}
}
}

} else
{
evalcond[0]=((IkReal(-3.14159265358979))+(IKfmod(((IkReal(4.71238898038469))+(j24)), IkReal(6.28318530717959))));
evalcond[1]=new_r22;
evalcond[2]=new_r22;
if( IKabs(evalcond[0]) < 0.0000010000000000  && IKabs(evalcond[1]) < 0.0000010000000000  && IKabs(evalcond[2]) < 0.0000010000000000  )
{
{
IkReal j25array[1], cj25array[1], sj25array[1];
bool j25valid[1]={false};
_nj25 = 1;
if( IKabs(((IkReal(-1.00000000000000))*(new_r21))) < IKFAST_ATAN2_MAGTHRESH && IKabs(new_r20) < IKFAST_ATAN2_MAGTHRESH && IKabs(IKsqr(((IkReal(-1.00000000000000))*(new_r21)))+IKsqr(new_r20)-1) <= IKFAST_SINCOS_THRESH )
    continue;
j25array[0]=IKatan2(((IkReal(-1.00000000000000))*(new_r21)), new_r20);
sj25array[0]=IKsin(j25array[0]);
cj25array[0]=IKcos(j25array[0]);
if( j25array[0] > IKPI )
{
    j25array[0]-=IK2PI;
}
else if( j25array[0] < -IKPI )
{    j25array[0]+=IK2PI;
}
j25valid[0] = true;
for(int ij25 = 0; ij25 < 1; ++ij25)
{
if( !j25valid[ij25] )
{
    continue;
}
_ij25[0] = ij25; _ij25[1] = -1;
for(int iij25 = ij25+1; iij25 < 1; ++iij25)
{
if( j25valid[iij25] && IKabs(cj25array[ij25]-cj25array[iij25]) < IKFAST_SOLUTION_THRESH && IKabs(sj25array[ij25]-sj25array[iij25]) < IKFAST_SOLUTION_THRESH )
{
    j25valid[iij25]=false; _ij25[1] = iij25; break; 
}
}
j25 = j25array[ij25]; cj25 = cj25array[ij25]; sj25 = sj25array[ij25];
{
IkReal evalcond[2];
evalcond[0]=((new_r20)+(((IkReal(-1.00000000000000))*(IKcos(j25)))));
evalcond[1]=((new_r21)+(IKsin(j25)));
if( IKabs(evalcond[0]) > 0.000001  || IKabs(evalcond[1]) > 0.000001  )
{
continue;
}
}

{
IkReal dummyeval[1];
IkReal gconst64;
gconst64=IKsign(((((IkReal(-1.00000000000000))*(new_r01)*(new_r12)))+(((new_r02)*(new_r11)))));
dummyeval[0]=((((IkReal(-1.00000000000000))*(new_r01)*(new_r12)))+(((new_r02)*(new_r11))));
if( IKabs(dummyeval[0]) < 0.0000010000000000  )
{
{
IkReal dummyeval[1];
IkReal gconst65;
gconst65=IKsign(((((IkReal(-1.00000000000000))*(new_r00)*(new_r12)))+(((new_r02)*(new_r10)))));
dummyeval[0]=((((IkReal(-1.00000000000000))*(new_r00)*(new_r12)))+(((new_r02)*(new_r10))));
if( IKabs(dummyeval[0]) < 0.0000010000000000  )
{
continue;

} else
{
{
IkReal j23array[1], cj23array[1], sj23array[1];
bool j23valid[1]={false};
_nj23 = 1;
if( IKabs(((gconst65)*(new_r00))) < IKFAST_ATAN2_MAGTHRESH && IKabs(((IkReal(-1.00000000000000))*(gconst65)*(new_r10))) < IKFAST_ATAN2_MAGTHRESH )
    continue;
j23array[0]=IKatan2(((gconst65)*(new_r00)), ((IkReal(-1.00000000000000))*(gconst65)*(new_r10)));
sj23array[0]=IKsin(j23array[0]);
cj23array[0]=IKcos(j23array[0]);
if( j23array[0] > IKPI )
{
    j23array[0]-=IK2PI;
}
else if( j23array[0] < -IKPI )
{    j23array[0]+=IK2PI;
}
j23valid[0] = true;
for(int ij23 = 0; ij23 < 1; ++ij23)
{
if( !j23valid[ij23] )
{
    continue;
}
_ij23[0] = ij23; _ij23[1] = -1;
for(int iij23 = ij23+1; iij23 < 1; ++iij23)
{
if( j23valid[iij23] && IKabs(cj23array[ij23]-cj23array[iij23]) < IKFAST_SOLUTION_THRESH && IKabs(sj23array[ij23]-sj23array[iij23]) < IKFAST_SOLUTION_THRESH )
{
    j23valid[iij23]=false; _ij23[1] = iij23; break; 
}
}
j23 = j23array[ij23]; cj23 = cj23array[ij23]; sj23 = sj23array[ij23];
{
IkReal evalcond[6];
IkReal x121=IKsin(j23);
IkReal x122=IKcos(j23);
IkReal x123=((IkReal(1.00000000000000))*(x121));
evalcond[0]=((((IkReal(-1.00000000000000))*(new_r02)*(x123)))+(((new_r12)*(x122))));
evalcond[1]=((IkReal(1.00000000000000))+(((new_r02)*(x122)))+(((new_r12)*(x121))));
evalcond[2]=((((IkReal(-1.00000000000000))*(new_r00)*(x123)))+(((IkReal(-1.00000000000000))*(sj25)))+(((new_r10)*(x122))));
evalcond[3]=((((IkReal(-1.00000000000000))*(new_r01)*(x123)))+(((IkReal(-1.00000000000000))*(cj25)))+(((new_r11)*(x122))));
evalcond[4]=((((new_r01)*(x122)))+(((new_r11)*(x121))));
evalcond[5]=((((new_r00)*(x122)))+(((new_r10)*(x121))));
if( IKabs(evalcond[0]) > 0.000001  || IKabs(evalcond[1]) > 0.000001  || IKabs(evalcond[2]) > 0.000001  || IKabs(evalcond[3]) > 0.000001  || IKabs(evalcond[4]) > 0.000001  || IKabs(evalcond[5]) > 0.000001  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(7);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j19;
vinfos[0].indices[0] = _ij19[0];
vinfos[0].indices[1] = _ij19[1];
vinfos[0].maxsolutions = _nj19;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j20;
vinfos[1].indices[0] = _ij20[0];
vinfos[1].indices[1] = _ij20[1];
vinfos[1].maxsolutions = _nj20;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j21;
vinfos[2].indices[0] = _ij21[0];
vinfos[2].indices[1] = _ij21[1];
vinfos[2].maxsolutions = _nj21;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j22;
vinfos[3].indices[0] = _ij22[0];
vinfos[3].indices[1] = _ij22[1];
vinfos[3].maxsolutions = _nj22;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j23;
vinfos[4].indices[0] = _ij23[0];
vinfos[4].indices[1] = _ij23[1];
vinfos[4].maxsolutions = _nj23;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j24;
vinfos[5].indices[0] = _ij24[0];
vinfos[5].indices[1] = _ij24[1];
vinfos[5].maxsolutions = _nj24;
vinfos[6].jointtype = 1;
vinfos[6].foffset = j25;
vinfos[6].indices[0] = _ij25[0];
vinfos[6].indices[1] = _ij25[1];
vinfos[6].maxsolutions = _nj25;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j23array[1], cj23array[1], sj23array[1];
bool j23valid[1]={false};
_nj23 = 1;
if( IKabs(((gconst64)*(new_r01))) < IKFAST_ATAN2_MAGTHRESH && IKabs(((IkReal(-1.00000000000000))*(gconst64)*(new_r11))) < IKFAST_ATAN2_MAGTHRESH )
    continue;
j23array[0]=IKatan2(((gconst64)*(new_r01)), ((IkReal(-1.00000000000000))*(gconst64)*(new_r11)));
sj23array[0]=IKsin(j23array[0]);
cj23array[0]=IKcos(j23array[0]);
if( j23array[0] > IKPI )
{
    j23array[0]-=IK2PI;
}
else if( j23array[0] < -IKPI )
{    j23array[0]+=IK2PI;
}
j23valid[0] = true;
for(int ij23 = 0; ij23 < 1; ++ij23)
{
if( !j23valid[ij23] )
{
    continue;
}
_ij23[0] = ij23; _ij23[1] = -1;
for(int iij23 = ij23+1; iij23 < 1; ++iij23)
{
if( j23valid[iij23] && IKabs(cj23array[ij23]-cj23array[iij23]) < IKFAST_SOLUTION_THRESH && IKabs(sj23array[ij23]-sj23array[iij23]) < IKFAST_SOLUTION_THRESH )
{
    j23valid[iij23]=false; _ij23[1] = iij23; break; 
}
}
j23 = j23array[ij23]; cj23 = cj23array[ij23]; sj23 = sj23array[ij23];
{
IkReal evalcond[6];
IkReal x124=IKsin(j23);
IkReal x125=IKcos(j23);
IkReal x126=((IkReal(1.00000000000000))*(x124));
evalcond[0]=((((IkReal(-1.00000000000000))*(new_r02)*(x126)))+(((new_r12)*(x125))));
evalcond[1]=((IkReal(1.00000000000000))+(((new_r02)*(x125)))+(((new_r12)*(x124))));
evalcond[2]=((((IkReal(-1.00000000000000))*(new_r00)*(x126)))+(((IkReal(-1.00000000000000))*(sj25)))+(((new_r10)*(x125))));
evalcond[3]=((((IkReal(-1.00000000000000))*(new_r01)*(x126)))+(((IkReal(-1.00000000000000))*(cj25)))+(((new_r11)*(x125))));
evalcond[4]=((((new_r01)*(x125)))+(((new_r11)*(x124))));
evalcond[5]=((((new_r00)*(x125)))+(((new_r10)*(x124))));
if( IKabs(evalcond[0]) > 0.000001  || IKabs(evalcond[1]) > 0.000001  || IKabs(evalcond[2]) > 0.000001  || IKabs(evalcond[3]) > 0.000001  || IKabs(evalcond[4]) > 0.000001  || IKabs(evalcond[5]) > 0.000001  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(7);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j19;
vinfos[0].indices[0] = _ij19[0];
vinfos[0].indices[1] = _ij19[1];
vinfos[0].maxsolutions = _nj19;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j20;
vinfos[1].indices[0] = _ij20[0];
vinfos[1].indices[1] = _ij20[1];
vinfos[1].maxsolutions = _nj20;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j21;
vinfos[2].indices[0] = _ij21[0];
vinfos[2].indices[1] = _ij21[1];
vinfos[2].maxsolutions = _nj21;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j22;
vinfos[3].indices[0] = _ij22[0];
vinfos[3].indices[1] = _ij22[1];
vinfos[3].maxsolutions = _nj22;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j23;
vinfos[4].indices[0] = _ij23[0];
vinfos[4].indices[1] = _ij23[1];
vinfos[4].maxsolutions = _nj23;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j24;
vinfos[5].indices[0] = _ij24[0];
vinfos[5].indices[1] = _ij24[1];
vinfos[5].maxsolutions = _nj24;
vinfos[6].jointtype = 1;
vinfos[6].foffset = j25;
vinfos[6].indices[0] = _ij25[0];
vinfos[6].indices[1] = _ij25[1];
vinfos[6].maxsolutions = _nj25;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}
}
}

} else
{
evalcond[0]=((IkReal(-3.14159265358979))+(IKfmod(((IkReal(3.14159265358979))+(j24)), IkReal(6.28318530717959))));
evalcond[1]=((IkReal(-1.00000000000000))+(new_r22));
evalcond[2]=new_r20;
evalcond[3]=new_r21;
evalcond[4]=((IkReal(-1.00000000000000))*(new_r20));
evalcond[5]=((IkReal(-1.00000000000000))*(new_r21));
evalcond[6]=((IkReal(1.00000000000000))+(((IkReal(-1.00000000000000))*(new_r22))));
if( IKabs(evalcond[0]) < 0.0000010000000000  && IKabs(evalcond[1]) < 0.0000010000000000  && IKabs(evalcond[2]) < 0.0000010000000000  && IKabs(evalcond[3]) < 0.0000010000000000  && IKabs(evalcond[4]) < 0.0000010000000000  && IKabs(evalcond[5]) < 0.0000010000000000  && IKabs(evalcond[6]) < 0.0000010000000000  )
{
{
IkReal j23array[2], cj23array[2], sj23array[2];
bool j23valid[2]={false};
_nj23 = 2;
if( IKabs(new_r02) < IKFAST_ATAN2_MAGTHRESH && IKabs(new_r12) < IKFAST_ATAN2_MAGTHRESH )
    continue;
IkReal x127=IKatan2(new_r02, new_r12);
j23array[0]=((IkReal(-1.00000000000000))*(x127));
sj23array[0]=IKsin(j23array[0]);
cj23array[0]=IKcos(j23array[0]);
j23array[1]=((IkReal(3.14159265358979))+(((IkReal(-1.00000000000000))*(x127))));
sj23array[1]=IKsin(j23array[1]);
cj23array[1]=IKcos(j23array[1]);
if( j23array[0] > IKPI )
{
    j23array[0]-=IK2PI;
}
else if( j23array[0] < -IKPI )
{    j23array[0]+=IK2PI;
}
j23valid[0] = true;
if( j23array[1] > IKPI )
{
    j23array[1]-=IK2PI;
}
else if( j23array[1] < -IKPI )
{    j23array[1]+=IK2PI;
}
j23valid[1] = true;
for(int ij23 = 0; ij23 < 2; ++ij23)
{
if( !j23valid[ij23] )
{
    continue;
}
_ij23[0] = ij23; _ij23[1] = -1;
for(int iij23 = ij23+1; iij23 < 2; ++iij23)
{
if( j23valid[iij23] && IKabs(cj23array[ij23]-cj23array[iij23]) < IKFAST_SOLUTION_THRESH && IKabs(sj23array[ij23]-sj23array[iij23]) < IKFAST_SOLUTION_THRESH )
{
    j23valid[iij23]=false; _ij23[1] = iij23; break; 
}
}
j23 = j23array[ij23]; cj23 = cj23array[ij23]; sj23 = sj23array[ij23];
{
IkReal evalcond[1];
evalcond[0]=((((IkReal(-1.00000000000000))*(new_r02)*(IKsin(j23))))+(((new_r12)*(IKcos(j23)))));
if( IKabs(evalcond[0]) > 0.000001  )
{
continue;
}
}

{
IkReal j25array[1], cj25array[1], sj25array[1];
bool j25valid[1]={false};
_nj25 = 1;
if( IKabs(((((IkReal(-1.00000000000000))*(new_r11)*(sj23)))+(((IkReal(-1.00000000000000))*(cj23)*(new_r01))))) < IKFAST_ATAN2_MAGTHRESH && IKabs(((((cj23)*(new_r00)))+(((new_r10)*(sj23))))) < IKFAST_ATAN2_MAGTHRESH && IKabs(IKsqr(((((IkReal(-1.00000000000000))*(new_r11)*(sj23)))+(((IkReal(-1.00000000000000))*(cj23)*(new_r01)))))+IKsqr(((((cj23)*(new_r00)))+(((new_r10)*(sj23)))))-1) <= IKFAST_SINCOS_THRESH )
    continue;
j25array[0]=IKatan2(((((IkReal(-1.00000000000000))*(new_r11)*(sj23)))+(((IkReal(-1.00000000000000))*(cj23)*(new_r01)))), ((((cj23)*(new_r00)))+(((new_r10)*(sj23)))));
sj25array[0]=IKsin(j25array[0]);
cj25array[0]=IKcos(j25array[0]);
if( j25array[0] > IKPI )
{
    j25array[0]-=IK2PI;
}
else if( j25array[0] < -IKPI )
{    j25array[0]+=IK2PI;
}
j25valid[0] = true;
for(int ij25 = 0; ij25 < 1; ++ij25)
{
if( !j25valid[ij25] )
{
    continue;
}
_ij25[0] = ij25; _ij25[1] = -1;
for(int iij25 = ij25+1; iij25 < 1; ++iij25)
{
if( j25valid[iij25] && IKabs(cj25array[ij25]-cj25array[iij25]) < IKFAST_SOLUTION_THRESH && IKabs(sj25array[ij25]-sj25array[iij25]) < IKFAST_SOLUTION_THRESH )
{
    j25valid[iij25]=false; _ij25[1] = iij25; break; 
}
}
j25 = j25array[ij25]; cj25 = cj25array[ij25]; sj25 = sj25array[ij25];
{
IkReal evalcond[4];
IkReal x128=IKsin(j25);
IkReal x129=((IkReal(1.00000000000000))*(sj23));
IkReal x130=((IkReal(1.00000000000000))*(IKcos(j25)));
evalcond[0]=((((cj23)*(new_r10)))+(((IkReal(-1.00000000000000))*(new_r00)*(x129)))+(((IkReal(-1.00000000000000))*(x128))));
evalcond[1]=((((IkReal(-1.00000000000000))*(new_r01)*(x129)))+(((cj23)*(new_r11)))+(((IkReal(-1.00000000000000))*(x130))));
evalcond[2]=((((cj23)*(new_r01)))+(x128)+(((new_r11)*(sj23))));
evalcond[3]=((((cj23)*(new_r00)))+(((IkReal(-1.00000000000000))*(x130)))+(((new_r10)*(sj23))));
if( IKabs(evalcond[0]) > 0.000001  || IKabs(evalcond[1]) > 0.000001  || IKabs(evalcond[2]) > 0.000001  || IKabs(evalcond[3]) > 0.000001  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(7);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j19;
vinfos[0].indices[0] = _ij19[0];
vinfos[0].indices[1] = _ij19[1];
vinfos[0].maxsolutions = _nj19;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j20;
vinfos[1].indices[0] = _ij20[0];
vinfos[1].indices[1] = _ij20[1];
vinfos[1].maxsolutions = _nj20;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j21;
vinfos[2].indices[0] = _ij21[0];
vinfos[2].indices[1] = _ij21[1];
vinfos[2].maxsolutions = _nj21;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j22;
vinfos[3].indices[0] = _ij22[0];
vinfos[3].indices[1] = _ij22[1];
vinfos[3].maxsolutions = _nj22;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j23;
vinfos[4].indices[0] = _ij23[0];
vinfos[4].indices[1] = _ij23[1];
vinfos[4].maxsolutions = _nj23;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j24;
vinfos[5].indices[0] = _ij24[0];
vinfos[5].indices[1] = _ij24[1];
vinfos[5].maxsolutions = _nj24;
vinfos[6].jointtype = 1;
vinfos[6].foffset = j25;
vinfos[6].indices[0] = _ij25[0];
vinfos[6].indices[1] = _ij25[1];
vinfos[6].maxsolutions = _nj25;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}
}
}

} else
{
IkReal x131=((IkReal(1.00000000000000))+(new_r22));
evalcond[0]=((IkReal(-3.14159265358979))+(IKfmod(j24, IkReal(6.28318530717959))));
evalcond[1]=x131;
evalcond[2]=new_r20;
evalcond[3]=new_r21;
evalcond[4]=new_r20;
evalcond[5]=new_r21;
evalcond[6]=x131;
if( IKabs(evalcond[0]) < 0.0000010000000000  && IKabs(evalcond[1]) < 0.0000010000000000  && IKabs(evalcond[2]) < 0.0000010000000000  && IKabs(evalcond[3]) < 0.0000010000000000  && IKabs(evalcond[4]) < 0.0000010000000000  && IKabs(evalcond[5]) < 0.0000010000000000  && IKabs(evalcond[6]) < 0.0000010000000000  )
{
{
IkReal j23array[2], cj23array[2], sj23array[2];
bool j23valid[2]={false};
_nj23 = 2;
if( IKabs(new_r02) < IKFAST_ATAN2_MAGTHRESH && IKabs(new_r12) < IKFAST_ATAN2_MAGTHRESH )
    continue;
IkReal x132=IKatan2(new_r02, new_r12);
j23array[0]=((IkReal(-1.00000000000000))*(x132));
sj23array[0]=IKsin(j23array[0]);
cj23array[0]=IKcos(j23array[0]);
j23array[1]=((IkReal(3.14159265358979))+(((IkReal(-1.00000000000000))*(x132))));
sj23array[1]=IKsin(j23array[1]);
cj23array[1]=IKcos(j23array[1]);
if( j23array[0] > IKPI )
{
    j23array[0]-=IK2PI;
}
else if( j23array[0] < -IKPI )
{    j23array[0]+=IK2PI;
}
j23valid[0] = true;
if( j23array[1] > IKPI )
{
    j23array[1]-=IK2PI;
}
else if( j23array[1] < -IKPI )
{    j23array[1]+=IK2PI;
}
j23valid[1] = true;
for(int ij23 = 0; ij23 < 2; ++ij23)
{
if( !j23valid[ij23] )
{
    continue;
}
_ij23[0] = ij23; _ij23[1] = -1;
for(int iij23 = ij23+1; iij23 < 2; ++iij23)
{
if( j23valid[iij23] && IKabs(cj23array[ij23]-cj23array[iij23]) < IKFAST_SOLUTION_THRESH && IKabs(sj23array[ij23]-sj23array[iij23]) < IKFAST_SOLUTION_THRESH )
{
    j23valid[iij23]=false; _ij23[1] = iij23; break; 
}
}
j23 = j23array[ij23]; cj23 = cj23array[ij23]; sj23 = sj23array[ij23];
{
IkReal evalcond[1];
evalcond[0]=((((IkReal(-1.00000000000000))*(new_r02)*(IKsin(j23))))+(((new_r12)*(IKcos(j23)))));
if( IKabs(evalcond[0]) > 0.000001  )
{
continue;
}
}

{
IkReal j25array[1], cj25array[1], sj25array[1];
bool j25valid[1]={false};
_nj25 = 1;
if( IKabs(((((cj23)*(new_r01)))+(((new_r11)*(sj23))))) < IKFAST_ATAN2_MAGTHRESH && IKabs(((((IkReal(-1.00000000000000))*(new_r10)*(sj23)))+(((IkReal(-1.00000000000000))*(cj23)*(new_r00))))) < IKFAST_ATAN2_MAGTHRESH && IKabs(IKsqr(((((cj23)*(new_r01)))+(((new_r11)*(sj23)))))+IKsqr(((((IkReal(-1.00000000000000))*(new_r10)*(sj23)))+(((IkReal(-1.00000000000000))*(cj23)*(new_r00)))))-1) <= IKFAST_SINCOS_THRESH )
    continue;
j25array[0]=IKatan2(((((cj23)*(new_r01)))+(((new_r11)*(sj23)))), ((((IkReal(-1.00000000000000))*(new_r10)*(sj23)))+(((IkReal(-1.00000000000000))*(cj23)*(new_r00)))));
sj25array[0]=IKsin(j25array[0]);
cj25array[0]=IKcos(j25array[0]);
if( j25array[0] > IKPI )
{
    j25array[0]-=IK2PI;
}
else if( j25array[0] < -IKPI )
{    j25array[0]+=IK2PI;
}
j25valid[0] = true;
for(int ij25 = 0; ij25 < 1; ++ij25)
{
if( !j25valid[ij25] )
{
    continue;
}
_ij25[0] = ij25; _ij25[1] = -1;
for(int iij25 = ij25+1; iij25 < 1; ++iij25)
{
if( j25valid[iij25] && IKabs(cj25array[ij25]-cj25array[iij25]) < IKFAST_SOLUTION_THRESH && IKabs(sj25array[ij25]-sj25array[iij25]) < IKFAST_SOLUTION_THRESH )
{
    j25valid[iij25]=false; _ij25[1] = iij25; break; 
}
}
j25 = j25array[ij25]; cj25 = cj25array[ij25]; sj25 = sj25array[ij25];
{
IkReal evalcond[4];
IkReal x133=IKcos(j25);
IkReal x134=((IkReal(1.00000000000000))*(sj23));
IkReal x135=((IkReal(1.00000000000000))*(IKsin(j25)));
evalcond[0]=((((IkReal(-1.00000000000000))*(new_r00)*(x134)))+(((cj23)*(new_r10)))+(((IkReal(-1.00000000000000))*(x135))));
evalcond[1]=((((IkReal(-1.00000000000000))*(new_r01)*(x134)))+(((cj23)*(new_r11)))+(((IkReal(-1.00000000000000))*(x133))));
evalcond[2]=((((cj23)*(new_r01)))+(((IkReal(-1.00000000000000))*(x135)))+(((new_r11)*(sj23))));
evalcond[3]=((((cj23)*(new_r00)))+(x133)+(((new_r10)*(sj23))));
if( IKabs(evalcond[0]) > 0.000001  || IKabs(evalcond[1]) > 0.000001  || IKabs(evalcond[2]) > 0.000001  || IKabs(evalcond[3]) > 0.000001  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(7);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j19;
vinfos[0].indices[0] = _ij19[0];
vinfos[0].indices[1] = _ij19[1];
vinfos[0].maxsolutions = _nj19;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j20;
vinfos[1].indices[0] = _ij20[0];
vinfos[1].indices[1] = _ij20[1];
vinfos[1].maxsolutions = _nj20;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j21;
vinfos[2].indices[0] = _ij21[0];
vinfos[2].indices[1] = _ij21[1];
vinfos[2].maxsolutions = _nj21;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j22;
vinfos[3].indices[0] = _ij22[0];
vinfos[3].indices[1] = _ij22[1];
vinfos[3].maxsolutions = _nj22;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j23;
vinfos[4].indices[0] = _ij23[0];
vinfos[4].indices[1] = _ij23[1];
vinfos[4].maxsolutions = _nj23;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j24;
vinfos[5].indices[0] = _ij24[0];
vinfos[5].indices[1] = _ij24[1];
vinfos[5].maxsolutions = _nj24;
vinfos[6].jointtype = 1;
vinfos[6].foffset = j25;
vinfos[6].indices[0] = _ij25[0];
vinfos[6].indices[1] = _ij25[1];
vinfos[6].maxsolutions = _nj25;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}
}
}

} else
{
if( 1 )
{
continue;

} else
{
}
}
}
}
}
}

} else
{
{
IkReal j23array[1], cj23array[1], sj23array[1];
bool j23valid[1]={false};
_nj23 = 1;
IkReal x136=((gconst53)*(new_r22)*(sj24));
if( IKabs(((new_r12)*(x136))) < IKFAST_ATAN2_MAGTHRESH && IKabs(((new_r02)*(x136))) < IKFAST_ATAN2_MAGTHRESH )
    continue;
j23array[0]=IKatan2(((new_r12)*(x136)), ((new_r02)*(x136)));
sj23array[0]=IKsin(j23array[0]);
cj23array[0]=IKcos(j23array[0]);
if( j23array[0] > IKPI )
{
    j23array[0]-=IK2PI;
}
else if( j23array[0] < -IKPI )
{    j23array[0]+=IK2PI;
}
j23valid[0] = true;
for(int ij23 = 0; ij23 < 1; ++ij23)
{
if( !j23valid[ij23] )
{
    continue;
}
_ij23[0] = ij23; _ij23[1] = -1;
for(int iij23 = ij23+1; iij23 < 1; ++iij23)
{
if( j23valid[iij23] && IKabs(cj23array[ij23]-cj23array[iij23]) < IKFAST_SOLUTION_THRESH && IKabs(sj23array[ij23]-sj23array[iij23]) < IKFAST_SOLUTION_THRESH )
{
    j23valid[iij23]=false; _ij23[1] = iij23; break; 
}
}
j23 = j23array[ij23]; cj23 = cj23array[ij23]; sj23 = sj23array[ij23];
{
IkReal evalcond[6];
IkReal x137=IKsin(j23);
IkReal x138=IKcos(j23);
IkReal x139=((IkReal(1.00000000000000))*(cj24));
IkReal x140=((IkReal(1.00000000000000))*(sj24));
IkReal x141=((new_r12)*(x137));
IkReal x142=((new_r02)*(x138));
IkReal x143=((x138)*(x140));
evalcond[0]=((((new_r12)*(x138)))+(((IkReal(-1.00000000000000))*(new_r02)*(x137))));
evalcond[1]=((((IkReal(-1.00000000000000))*(x140)))+(x141)+(x142));
evalcond[2]=((((cj24)*(x141)))+(((cj24)*(x142)))+(((IkReal(-1.00000000000000))*(new_r22)*(x140))));
evalcond[3]=((((IkReal(-1.00000000000000))*(new_r20)*(x139)))+(((IkReal(-1.00000000000000))*(new_r10)*(x137)*(x140)))+(((IkReal(-1.00000000000000))*(new_r00)*(x143))));
evalcond[4]=((((IkReal(-1.00000000000000))*(new_r01)*(x143)))+(((IkReal(-1.00000000000000))*(new_r11)*(x137)*(x140)))+(((IkReal(-1.00000000000000))*(new_r21)*(x139))));
evalcond[5]=((IkReal(1.00000000000000))+(((IkReal(-1.00000000000000))*(x140)*(x142)))+(((IkReal(-1.00000000000000))*(x140)*(x141)))+(((IkReal(-1.00000000000000))*(new_r22)*(x139))));
if( IKabs(evalcond[0]) > 0.000001  || IKabs(evalcond[1]) > 0.000001  || IKabs(evalcond[2]) > 0.000001  || IKabs(evalcond[3]) > 0.000001  || IKabs(evalcond[4]) > 0.000001  || IKabs(evalcond[5]) > 0.000001  )
{
continue;
}
}

{
IkReal dummyeval[1];
IkReal gconst55;
gconst55=IKsign(sj24);
dummyeval[0]=sj24;
if( IKabs(dummyeval[0]) < 0.0000010000000000  )
{
{
IkReal dummyeval[1];
dummyeval[0]=sj24;
if( IKabs(dummyeval[0]) < 0.0000010000000000  )
{
{
IkReal dummyeval[1];
dummyeval[0]=sj24;
if( IKabs(dummyeval[0]) < 0.0000010000000000  )
{
{
IkReal evalcond[11];
IkReal x144=((((cj23)*(new_r12)))+(((IkReal(-1.00000000000000))*(new_r02)*(sj23))));
IkReal x145=((((cj23)*(new_r02)))+(((new_r12)*(sj23))));
evalcond[0]=((IkReal(-3.14159265358979))+(IKfmod(((IkReal(3.14159265358979))+(j24)), IkReal(6.28318530717959))));
evalcond[1]=((IkReal(-1.00000000000000))+(new_r22));
evalcond[2]=new_r20;
evalcond[3]=new_r21;
evalcond[4]=x144;
evalcond[5]=x144;
evalcond[6]=x145;
evalcond[7]=x145;
evalcond[8]=((IkReal(-1.00000000000000))*(new_r20));
evalcond[9]=((IkReal(-1.00000000000000))*(new_r21));
evalcond[10]=((IkReal(1.00000000000000))+(((IkReal(-1.00000000000000))*(new_r22))));
if( IKabs(evalcond[0]) < 0.0000010000000000  && IKabs(evalcond[1]) < 0.0000010000000000  && IKabs(evalcond[2]) < 0.0000010000000000  && IKabs(evalcond[3]) < 0.0000010000000000  && IKabs(evalcond[4]) < 0.0000010000000000  && IKabs(evalcond[5]) < 0.0000010000000000  && IKabs(evalcond[6]) < 0.0000010000000000  && IKabs(evalcond[7]) < 0.0000010000000000  && IKabs(evalcond[8]) < 0.0000010000000000  && IKabs(evalcond[9]) < 0.0000010000000000  && IKabs(evalcond[10]) < 0.0000010000000000  )
{
{
IkReal j25array[1], cj25array[1], sj25array[1];
bool j25valid[1]={false};
_nj25 = 1;
if( IKabs(((((IkReal(-1.00000000000000))*(new_r11)*(sj23)))+(((IkReal(-1.00000000000000))*(cj23)*(new_r01))))) < IKFAST_ATAN2_MAGTHRESH && IKabs(((((cj23)*(new_r00)))+(((new_r10)*(sj23))))) < IKFAST_ATAN2_MAGTHRESH && IKabs(IKsqr(((((IkReal(-1.00000000000000))*(new_r11)*(sj23)))+(((IkReal(-1.00000000000000))*(cj23)*(new_r01)))))+IKsqr(((((cj23)*(new_r00)))+(((new_r10)*(sj23)))))-1) <= IKFAST_SINCOS_THRESH )
    continue;
j25array[0]=IKatan2(((((IkReal(-1.00000000000000))*(new_r11)*(sj23)))+(((IkReal(-1.00000000000000))*(cj23)*(new_r01)))), ((((cj23)*(new_r00)))+(((new_r10)*(sj23)))));
sj25array[0]=IKsin(j25array[0]);
cj25array[0]=IKcos(j25array[0]);
if( j25array[0] > IKPI )
{
    j25array[0]-=IK2PI;
}
else if( j25array[0] < -IKPI )
{    j25array[0]+=IK2PI;
}
j25valid[0] = true;
for(int ij25 = 0; ij25 < 1; ++ij25)
{
if( !j25valid[ij25] )
{
    continue;
}
_ij25[0] = ij25; _ij25[1] = -1;
for(int iij25 = ij25+1; iij25 < 1; ++iij25)
{
if( j25valid[iij25] && IKabs(cj25array[ij25]-cj25array[iij25]) < IKFAST_SOLUTION_THRESH && IKabs(sj25array[ij25]-sj25array[iij25]) < IKFAST_SOLUTION_THRESH )
{
    j25valid[iij25]=false; _ij25[1] = iij25; break; 
}
}
j25 = j25array[ij25]; cj25 = cj25array[ij25]; sj25 = sj25array[ij25];
{
IkReal evalcond[4];
IkReal x146=IKsin(j25);
IkReal x147=((IkReal(1.00000000000000))*(sj23));
IkReal x148=((IkReal(1.00000000000000))*(IKcos(j25)));
evalcond[0]=((((cj23)*(new_r10)))+(((IkReal(-1.00000000000000))*(x146)))+(((IkReal(-1.00000000000000))*(new_r00)*(x147))));
evalcond[1]=((((IkReal(-1.00000000000000))*(new_r01)*(x147)))+(((IkReal(-1.00000000000000))*(x148)))+(((cj23)*(new_r11))));
evalcond[2]=((((cj23)*(new_r01)))+(x146)+(((new_r11)*(sj23))));
evalcond[3]=((((IkReal(-1.00000000000000))*(x148)))+(((cj23)*(new_r00)))+(((new_r10)*(sj23))));
if( IKabs(evalcond[0]) > 0.000001  || IKabs(evalcond[1]) > 0.000001  || IKabs(evalcond[2]) > 0.000001  || IKabs(evalcond[3]) > 0.000001  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(7);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j19;
vinfos[0].indices[0] = _ij19[0];
vinfos[0].indices[1] = _ij19[1];
vinfos[0].maxsolutions = _nj19;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j20;
vinfos[1].indices[0] = _ij20[0];
vinfos[1].indices[1] = _ij20[1];
vinfos[1].maxsolutions = _nj20;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j21;
vinfos[2].indices[0] = _ij21[0];
vinfos[2].indices[1] = _ij21[1];
vinfos[2].maxsolutions = _nj21;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j22;
vinfos[3].indices[0] = _ij22[0];
vinfos[3].indices[1] = _ij22[1];
vinfos[3].maxsolutions = _nj22;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j23;
vinfos[4].indices[0] = _ij23[0];
vinfos[4].indices[1] = _ij23[1];
vinfos[4].maxsolutions = _nj23;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j24;
vinfos[5].indices[0] = _ij24[0];
vinfos[5].indices[1] = _ij24[1];
vinfos[5].maxsolutions = _nj24;
vinfos[6].jointtype = 1;
vinfos[6].foffset = j25;
vinfos[6].indices[0] = _ij25[0];
vinfos[6].indices[1] = _ij25[1];
vinfos[6].maxsolutions = _nj25;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

} else
{
IkReal x149=((IkReal(1.00000000000000))+(new_r22));
IkReal x150=((new_r12)*(sj23));
IkReal x151=((IkReal(1.00000000000000))*(new_r02));
IkReal x152=((((IkReal(-1.00000000000000))*(sj23)*(x151)))+(((cj23)*(new_r12))));
evalcond[0]=((IkReal(-3.14159265358979))+(IKfmod(j24, IkReal(6.28318530717959))));
evalcond[1]=x149;
evalcond[2]=new_r20;
evalcond[3]=new_r21;
evalcond[4]=x152;
evalcond[5]=x152;
evalcond[6]=((((cj23)*(new_r02)))+(x150));
evalcond[7]=((((IkReal(-1.00000000000000))*(cj23)*(x151)))+(((IkReal(-1.00000000000000))*(x150))));
evalcond[8]=new_r20;
evalcond[9]=new_r21;
evalcond[10]=x149;
if( IKabs(evalcond[0]) < 0.0000010000000000  && IKabs(evalcond[1]) < 0.0000010000000000  && IKabs(evalcond[2]) < 0.0000010000000000  && IKabs(evalcond[3]) < 0.0000010000000000  && IKabs(evalcond[4]) < 0.0000010000000000  && IKabs(evalcond[5]) < 0.0000010000000000  && IKabs(evalcond[6]) < 0.0000010000000000  && IKabs(evalcond[7]) < 0.0000010000000000  && IKabs(evalcond[8]) < 0.0000010000000000  && IKabs(evalcond[9]) < 0.0000010000000000  && IKabs(evalcond[10]) < 0.0000010000000000  )
{
{
IkReal j25array[1], cj25array[1], sj25array[1];
bool j25valid[1]={false};
_nj25 = 1;
if( IKabs(((((cj23)*(new_r01)))+(((new_r11)*(sj23))))) < IKFAST_ATAN2_MAGTHRESH && IKabs(((((IkReal(-1.00000000000000))*(new_r10)*(sj23)))+(((IkReal(-1.00000000000000))*(cj23)*(new_r00))))) < IKFAST_ATAN2_MAGTHRESH && IKabs(IKsqr(((((cj23)*(new_r01)))+(((new_r11)*(sj23)))))+IKsqr(((((IkReal(-1.00000000000000))*(new_r10)*(sj23)))+(((IkReal(-1.00000000000000))*(cj23)*(new_r00)))))-1) <= IKFAST_SINCOS_THRESH )
    continue;
j25array[0]=IKatan2(((((cj23)*(new_r01)))+(((new_r11)*(sj23)))), ((((IkReal(-1.00000000000000))*(new_r10)*(sj23)))+(((IkReal(-1.00000000000000))*(cj23)*(new_r00)))));
sj25array[0]=IKsin(j25array[0]);
cj25array[0]=IKcos(j25array[0]);
if( j25array[0] > IKPI )
{
    j25array[0]-=IK2PI;
}
else if( j25array[0] < -IKPI )
{    j25array[0]+=IK2PI;
}
j25valid[0] = true;
for(int ij25 = 0; ij25 < 1; ++ij25)
{
if( !j25valid[ij25] )
{
    continue;
}
_ij25[0] = ij25; _ij25[1] = -1;
for(int iij25 = ij25+1; iij25 < 1; ++iij25)
{
if( j25valid[iij25] && IKabs(cj25array[ij25]-cj25array[iij25]) < IKFAST_SOLUTION_THRESH && IKabs(sj25array[ij25]-sj25array[iij25]) < IKFAST_SOLUTION_THRESH )
{
    j25valid[iij25]=false; _ij25[1] = iij25; break; 
}
}
j25 = j25array[ij25]; cj25 = cj25array[ij25]; sj25 = sj25array[ij25];
{
IkReal evalcond[4];
IkReal x153=IKcos(j25);
IkReal x154=((IkReal(1.00000000000000))*(sj23));
IkReal x155=((IkReal(1.00000000000000))*(IKsin(j25)));
evalcond[0]=((((IkReal(-1.00000000000000))*(x155)))+(((cj23)*(new_r10)))+(((IkReal(-1.00000000000000))*(new_r00)*(x154))));
evalcond[1]=((((cj23)*(new_r11)))+(((IkReal(-1.00000000000000))*(x153)))+(((IkReal(-1.00000000000000))*(new_r01)*(x154))));
evalcond[2]=((((IkReal(-1.00000000000000))*(x155)))+(((cj23)*(new_r01)))+(((new_r11)*(sj23))));
evalcond[3]=((((cj23)*(new_r00)))+(x153)+(((new_r10)*(sj23))));
if( IKabs(evalcond[0]) > 0.000001  || IKabs(evalcond[1]) > 0.000001  || IKabs(evalcond[2]) > 0.000001  || IKabs(evalcond[3]) > 0.000001  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(7);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j19;
vinfos[0].indices[0] = _ij19[0];
vinfos[0].indices[1] = _ij19[1];
vinfos[0].maxsolutions = _nj19;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j20;
vinfos[1].indices[0] = _ij20[0];
vinfos[1].indices[1] = _ij20[1];
vinfos[1].maxsolutions = _nj20;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j21;
vinfos[2].indices[0] = _ij21[0];
vinfos[2].indices[1] = _ij21[1];
vinfos[2].maxsolutions = _nj21;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j22;
vinfos[3].indices[0] = _ij22[0];
vinfos[3].indices[1] = _ij22[1];
vinfos[3].maxsolutions = _nj22;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j23;
vinfos[4].indices[0] = _ij23[0];
vinfos[4].indices[1] = _ij23[1];
vinfos[4].maxsolutions = _nj23;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j24;
vinfos[5].indices[0] = _ij24[0];
vinfos[5].indices[1] = _ij24[1];
vinfos[5].maxsolutions = _nj24;
vinfos[6].jointtype = 1;
vinfos[6].foffset = j25;
vinfos[6].indices[0] = _ij25[0];
vinfos[6].indices[1] = _ij25[1];
vinfos[6].maxsolutions = _nj25;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

} else
{
if( 1 )
{
continue;

} else
{
}
}
}
}

} else
{
{
IkReal j25array[1], cj25array[1], sj25array[1];
bool j25valid[1]={false};
_nj25 = 1;
if( IKabs(((((IkReal(-1.00000000000000))*(new_r00)*(sj23)))+(((cj23)*(new_r10))))) < IKFAST_ATAN2_MAGTHRESH && IKabs(((IkReal(-1.00000000000000))*(new_r20)*(((IKabs(sj24) != 0)?((IkReal)1/(sj24)):(IkReal)1.0e30)))) < IKFAST_ATAN2_MAGTHRESH && IKabs(IKsqr(((((IkReal(-1.00000000000000))*(new_r00)*(sj23)))+(((cj23)*(new_r10)))))+IKsqr(((IkReal(-1.00000000000000))*(new_r20)*(((IKabs(sj24) != 0)?((IkReal)1/(sj24)):(IkReal)1.0e30))))-1) <= IKFAST_SINCOS_THRESH )
    continue;
j25array[0]=IKatan2(((((IkReal(-1.00000000000000))*(new_r00)*(sj23)))+(((cj23)*(new_r10)))), ((IkReal(-1.00000000000000))*(new_r20)*(((IKabs(sj24) != 0)?((IkReal)1/(sj24)):(IkReal)1.0e30))));
sj25array[0]=IKsin(j25array[0]);
cj25array[0]=IKcos(j25array[0]);
if( j25array[0] > IKPI )
{
    j25array[0]-=IK2PI;
}
else if( j25array[0] < -IKPI )
{    j25array[0]+=IK2PI;
}
j25valid[0] = true;
for(int ij25 = 0; ij25 < 1; ++ij25)
{
if( !j25valid[ij25] )
{
    continue;
}
_ij25[0] = ij25; _ij25[1] = -1;
for(int iij25 = ij25+1; iij25 < 1; ++iij25)
{
if( j25valid[iij25] && IKabs(cj25array[ij25]-cj25array[iij25]) < IKFAST_SOLUTION_THRESH && IKabs(sj25array[ij25]-sj25array[iij25]) < IKFAST_SOLUTION_THRESH )
{
    j25valid[iij25]=false; _ij25[1] = iij25; break; 
}
}
j25 = j25array[ij25]; cj25 = cj25array[ij25]; sj25 = sj25array[ij25];
{
IkReal evalcond[8];
IkReal x156=IKsin(j25);
IkReal x157=IKcos(j25);
IkReal x158=((new_r11)*(sj23));
IkReal x159=((cj23)*(new_r01));
IkReal x160=((new_r10)*(sj23));
IkReal x161=((IkReal(1.00000000000000))*(sj24));
IkReal x162=((IkReal(1.00000000000000))*(sj23));
IkReal x163=((cj23)*(new_r00));
IkReal x164=((IkReal(1.00000000000000))*(x157));
IkReal x165=((IkReal(1.00000000000000))*(x156));
evalcond[0]=((((sj24)*(x157)))+(new_r20));
evalcond[1]=((new_r21)+(((IkReal(-1.00000000000000))*(x156)*(x161))));
evalcond[2]=((((IkReal(-1.00000000000000))*(new_r00)*(x162)))+(((IkReal(-1.00000000000000))*(x165)))+(((cj23)*(new_r10))));
evalcond[3]=((((IkReal(-1.00000000000000))*(x164)))+(((cj23)*(new_r11)))+(((IkReal(-1.00000000000000))*(new_r01)*(x162))));
evalcond[4]=((((cj24)*(x156)))+(x159)+(x158));
evalcond[5]=((((IkReal(-1.00000000000000))*(cj24)*(x164)))+(x163)+(x160));
evalcond[6]=((((cj24)*(x159)))+(((cj24)*(x158)))+(((IkReal(-1.00000000000000))*(new_r21)*(x161)))+(x156));
evalcond[7]=((((cj24)*(x160)))+(((cj24)*(x163)))+(((IkReal(-1.00000000000000))*(x164)))+(((IkReal(-1.00000000000000))*(new_r20)*(x161))));
if( IKabs(evalcond[0]) > 0.000001  || IKabs(evalcond[1]) > 0.000001  || IKabs(evalcond[2]) > 0.000001  || IKabs(evalcond[3]) > 0.000001  || IKabs(evalcond[4]) > 0.000001  || IKabs(evalcond[5]) > 0.000001  || IKabs(evalcond[6]) > 0.000001  || IKabs(evalcond[7]) > 0.000001  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(7);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j19;
vinfos[0].indices[0] = _ij19[0];
vinfos[0].indices[1] = _ij19[1];
vinfos[0].maxsolutions = _nj19;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j20;
vinfos[1].indices[0] = _ij20[0];
vinfos[1].indices[1] = _ij20[1];
vinfos[1].maxsolutions = _nj20;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j21;
vinfos[2].indices[0] = _ij21[0];
vinfos[2].indices[1] = _ij21[1];
vinfos[2].maxsolutions = _nj21;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j22;
vinfos[3].indices[0] = _ij22[0];
vinfos[3].indices[1] = _ij22[1];
vinfos[3].maxsolutions = _nj22;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j23;
vinfos[4].indices[0] = _ij23[0];
vinfos[4].indices[1] = _ij23[1];
vinfos[4].maxsolutions = _nj23;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j24;
vinfos[5].indices[0] = _ij24[0];
vinfos[5].indices[1] = _ij24[1];
vinfos[5].maxsolutions = _nj24;
vinfos[6].jointtype = 1;
vinfos[6].foffset = j25;
vinfos[6].indices[0] = _ij25[0];
vinfos[6].indices[1] = _ij25[1];
vinfos[6].maxsolutions = _nj25;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j25array[1], cj25array[1], sj25array[1];
bool j25valid[1]={false};
_nj25 = 1;
if( IKabs(((new_r21)*(((IKabs(sj24) != 0)?((IkReal)1/(sj24)):(IkReal)1.0e30)))) < IKFAST_ATAN2_MAGTHRESH && IKabs(((((IkReal(-1.00000000000000))*(new_r01)*(sj23)))+(((cj23)*(new_r11))))) < IKFAST_ATAN2_MAGTHRESH && IKabs(IKsqr(((new_r21)*(((IKabs(sj24) != 0)?((IkReal)1/(sj24)):(IkReal)1.0e30))))+IKsqr(((((IkReal(-1.00000000000000))*(new_r01)*(sj23)))+(((cj23)*(new_r11)))))-1) <= IKFAST_SINCOS_THRESH )
    continue;
j25array[0]=IKatan2(((new_r21)*(((IKabs(sj24) != 0)?((IkReal)1/(sj24)):(IkReal)1.0e30))), ((((IkReal(-1.00000000000000))*(new_r01)*(sj23)))+(((cj23)*(new_r11)))));
sj25array[0]=IKsin(j25array[0]);
cj25array[0]=IKcos(j25array[0]);
if( j25array[0] > IKPI )
{
    j25array[0]-=IK2PI;
}
else if( j25array[0] < -IKPI )
{    j25array[0]+=IK2PI;
}
j25valid[0] = true;
for(int ij25 = 0; ij25 < 1; ++ij25)
{
if( !j25valid[ij25] )
{
    continue;
}
_ij25[0] = ij25; _ij25[1] = -1;
for(int iij25 = ij25+1; iij25 < 1; ++iij25)
{
if( j25valid[iij25] && IKabs(cj25array[ij25]-cj25array[iij25]) < IKFAST_SOLUTION_THRESH && IKabs(sj25array[ij25]-sj25array[iij25]) < IKFAST_SOLUTION_THRESH )
{
    j25valid[iij25]=false; _ij25[1] = iij25; break; 
}
}
j25 = j25array[ij25]; cj25 = cj25array[ij25]; sj25 = sj25array[ij25];
{
IkReal evalcond[8];
IkReal x166=IKsin(j25);
IkReal x167=IKcos(j25);
IkReal x168=((new_r11)*(sj23));
IkReal x169=((cj23)*(new_r01));
IkReal x170=((new_r10)*(sj23));
IkReal x171=((IkReal(1.00000000000000))*(sj24));
IkReal x172=((IkReal(1.00000000000000))*(sj23));
IkReal x173=((cj23)*(new_r00));
IkReal x174=((IkReal(1.00000000000000))*(x167));
IkReal x175=((IkReal(1.00000000000000))*(x166));
evalcond[0]=((((sj24)*(x167)))+(new_r20));
evalcond[1]=((new_r21)+(((IkReal(-1.00000000000000))*(x166)*(x171))));
evalcond[2]=((((IkReal(-1.00000000000000))*(x175)))+(((cj23)*(new_r10)))+(((IkReal(-1.00000000000000))*(new_r00)*(x172))));
evalcond[3]=((((IkReal(-1.00000000000000))*(x174)))+(((cj23)*(new_r11)))+(((IkReal(-1.00000000000000))*(new_r01)*(x172))));
evalcond[4]=((((cj24)*(x166)))+(x168)+(x169));
evalcond[5]=((((IkReal(-1.00000000000000))*(cj24)*(x174)))+(x170)+(x173));
evalcond[6]=((((cj24)*(x169)))+(((cj24)*(x168)))+(((IkReal(-1.00000000000000))*(new_r21)*(x171)))+(x166));
evalcond[7]=((((cj24)*(x173)))+(((cj24)*(x170)))+(((IkReal(-1.00000000000000))*(x174)))+(((IkReal(-1.00000000000000))*(new_r20)*(x171))));
if( IKabs(evalcond[0]) > 0.000001  || IKabs(evalcond[1]) > 0.000001  || IKabs(evalcond[2]) > 0.000001  || IKabs(evalcond[3]) > 0.000001  || IKabs(evalcond[4]) > 0.000001  || IKabs(evalcond[5]) > 0.000001  || IKabs(evalcond[6]) > 0.000001  || IKabs(evalcond[7]) > 0.000001  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(7);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j19;
vinfos[0].indices[0] = _ij19[0];
vinfos[0].indices[1] = _ij19[1];
vinfos[0].maxsolutions = _nj19;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j20;
vinfos[1].indices[0] = _ij20[0];
vinfos[1].indices[1] = _ij20[1];
vinfos[1].maxsolutions = _nj20;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j21;
vinfos[2].indices[0] = _ij21[0];
vinfos[2].indices[1] = _ij21[1];
vinfos[2].maxsolutions = _nj21;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j22;
vinfos[3].indices[0] = _ij22[0];
vinfos[3].indices[1] = _ij22[1];
vinfos[3].maxsolutions = _nj22;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j23;
vinfos[4].indices[0] = _ij23[0];
vinfos[4].indices[1] = _ij23[1];
vinfos[4].maxsolutions = _nj23;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j24;
vinfos[5].indices[0] = _ij24[0];
vinfos[5].indices[1] = _ij24[1];
vinfos[5].maxsolutions = _nj24;
vinfos[6].jointtype = 1;
vinfos[6].foffset = j25;
vinfos[6].indices[0] = _ij25[0];
vinfos[6].indices[1] = _ij25[1];
vinfos[6].maxsolutions = _nj25;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j25array[1], cj25array[1], sj25array[1];
bool j25valid[1]={false};
_nj25 = 1;
if( IKabs(((gconst55)*(new_r21))) < IKFAST_ATAN2_MAGTHRESH && IKabs(((IkReal(-1.00000000000000))*(gconst55)*(new_r20))) < IKFAST_ATAN2_MAGTHRESH )
    continue;
j25array[0]=IKatan2(((gconst55)*(new_r21)), ((IkReal(-1.00000000000000))*(gconst55)*(new_r20)));
sj25array[0]=IKsin(j25array[0]);
cj25array[0]=IKcos(j25array[0]);
if( j25array[0] > IKPI )
{
    j25array[0]-=IK2PI;
}
else if( j25array[0] < -IKPI )
{    j25array[0]+=IK2PI;
}
j25valid[0] = true;
for(int ij25 = 0; ij25 < 1; ++ij25)
{
if( !j25valid[ij25] )
{
    continue;
}
_ij25[0] = ij25; _ij25[1] = -1;
for(int iij25 = ij25+1; iij25 < 1; ++iij25)
{
if( j25valid[iij25] && IKabs(cj25array[ij25]-cj25array[iij25]) < IKFAST_SOLUTION_THRESH && IKabs(sj25array[ij25]-sj25array[iij25]) < IKFAST_SOLUTION_THRESH )
{
    j25valid[iij25]=false; _ij25[1] = iij25; break; 
}
}
j25 = j25array[ij25]; cj25 = cj25array[ij25]; sj25 = sj25array[ij25];
{
IkReal evalcond[8];
IkReal x176=IKsin(j25);
IkReal x177=IKcos(j25);
IkReal x178=((new_r11)*(sj23));
IkReal x179=((cj23)*(new_r01));
IkReal x180=((new_r10)*(sj23));
IkReal x181=((IkReal(1.00000000000000))*(sj24));
IkReal x182=((IkReal(1.00000000000000))*(sj23));
IkReal x183=((cj23)*(new_r00));
IkReal x184=((IkReal(1.00000000000000))*(x177));
IkReal x185=((IkReal(1.00000000000000))*(x176));
evalcond[0]=((((sj24)*(x177)))+(new_r20));
evalcond[1]=((((IkReal(-1.00000000000000))*(x176)*(x181)))+(new_r21));
evalcond[2]=((((IkReal(-1.00000000000000))*(x185)))+(((cj23)*(new_r10)))+(((IkReal(-1.00000000000000))*(new_r00)*(x182))));
evalcond[3]=((((IkReal(-1.00000000000000))*(x184)))+(((cj23)*(new_r11)))+(((IkReal(-1.00000000000000))*(new_r01)*(x182))));
evalcond[4]=((((cj24)*(x176)))+(x179)+(x178));
evalcond[5]=((((IkReal(-1.00000000000000))*(cj24)*(x184)))+(x180)+(x183));
evalcond[6]=((((cj24)*(x178)))+(((cj24)*(x179)))+(((IkReal(-1.00000000000000))*(new_r21)*(x181)))+(x176));
evalcond[7]=((((IkReal(-1.00000000000000))*(x184)))+(((IkReal(-1.00000000000000))*(new_r20)*(x181)))+(((cj24)*(x183)))+(((cj24)*(x180))));
if( IKabs(evalcond[0]) > 0.000001  || IKabs(evalcond[1]) > 0.000001  || IKabs(evalcond[2]) > 0.000001  || IKabs(evalcond[3]) > 0.000001  || IKabs(evalcond[4]) > 0.000001  || IKabs(evalcond[5]) > 0.000001  || IKabs(evalcond[6]) > 0.000001  || IKabs(evalcond[7]) > 0.000001  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(7);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j19;
vinfos[0].indices[0] = _ij19[0];
vinfos[0].indices[1] = _ij19[1];
vinfos[0].maxsolutions = _nj19;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j20;
vinfos[1].indices[0] = _ij20[0];
vinfos[1].indices[1] = _ij20[1];
vinfos[1].maxsolutions = _nj20;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j21;
vinfos[2].indices[0] = _ij21[0];
vinfos[2].indices[1] = _ij21[1];
vinfos[2].maxsolutions = _nj21;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j22;
vinfos[3].indices[0] = _ij22[0];
vinfos[3].indices[1] = _ij22[1];
vinfos[3].maxsolutions = _nj22;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j23;
vinfos[4].indices[0] = _ij23[0];
vinfos[4].indices[1] = _ij23[1];
vinfos[4].maxsolutions = _nj23;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j24;
vinfos[5].indices[0] = _ij24[0];
vinfos[5].indices[1] = _ij24[1];
vinfos[5].maxsolutions = _nj24;
vinfos[6].jointtype = 1;
vinfos[6].foffset = j25;
vinfos[6].indices[0] = _ij25[0];
vinfos[6].indices[1] = _ij25[1];
vinfos[6].maxsolutions = _nj25;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}
}
}

}

}

} else
{
{
IkReal j23array[1], cj23array[1], sj23array[1];
bool j23valid[1]={false};
_nj23 = 1;
IkReal x186=((gconst52)*(sj24));
if( IKabs(((new_r12)*(x186))) < IKFAST_ATAN2_MAGTHRESH && IKabs(((new_r02)*(x186))) < IKFAST_ATAN2_MAGTHRESH )
    continue;
j23array[0]=IKatan2(((new_r12)*(x186)), ((new_r02)*(x186)));
sj23array[0]=IKsin(j23array[0]);
cj23array[0]=IKcos(j23array[0]);
if( j23array[0] > IKPI )
{
    j23array[0]-=IK2PI;
}
else if( j23array[0] < -IKPI )
{    j23array[0]+=IK2PI;
}
j23valid[0] = true;
for(int ij23 = 0; ij23 < 1; ++ij23)
{
if( !j23valid[ij23] )
{
    continue;
}
_ij23[0] = ij23; _ij23[1] = -1;
for(int iij23 = ij23+1; iij23 < 1; ++iij23)
{
if( j23valid[iij23] && IKabs(cj23array[ij23]-cj23array[iij23]) < IKFAST_SOLUTION_THRESH && IKabs(sj23array[ij23]-sj23array[iij23]) < IKFAST_SOLUTION_THRESH )
{
    j23valid[iij23]=false; _ij23[1] = iij23; break; 
}
}
j23 = j23array[ij23]; cj23 = cj23array[ij23]; sj23 = sj23array[ij23];
{
IkReal evalcond[6];
IkReal x187=IKsin(j23);
IkReal x188=IKcos(j23);
IkReal x189=((IkReal(1.00000000000000))*(cj24));
IkReal x190=((IkReal(1.00000000000000))*(sj24));
IkReal x191=((new_r12)*(x187));
IkReal x192=((new_r02)*(x188));
IkReal x193=((x188)*(x190));
evalcond[0]=((((new_r12)*(x188)))+(((IkReal(-1.00000000000000))*(new_r02)*(x187))));
evalcond[1]=((((IkReal(-1.00000000000000))*(x190)))+(x192)+(x191));
evalcond[2]=((((IkReal(-1.00000000000000))*(new_r22)*(x190)))+(((cj24)*(x192)))+(((cj24)*(x191))));
evalcond[3]=((((IkReal(-1.00000000000000))*(new_r20)*(x189)))+(((IkReal(-1.00000000000000))*(new_r10)*(x187)*(x190)))+(((IkReal(-1.00000000000000))*(new_r00)*(x193))));
evalcond[4]=((((IkReal(-1.00000000000000))*(new_r21)*(x189)))+(((IkReal(-1.00000000000000))*(new_r01)*(x193)))+(((IkReal(-1.00000000000000))*(new_r11)*(x187)*(x190))));
evalcond[5]=((IkReal(1.00000000000000))+(((IkReal(-1.00000000000000))*(new_r22)*(x189)))+(((IkReal(-1.00000000000000))*(x190)*(x192)))+(((IkReal(-1.00000000000000))*(x190)*(x191))));
if( IKabs(evalcond[0]) > 0.000001  || IKabs(evalcond[1]) > 0.000001  || IKabs(evalcond[2]) > 0.000001  || IKabs(evalcond[3]) > 0.000001  || IKabs(evalcond[4]) > 0.000001  || IKabs(evalcond[5]) > 0.000001  )
{
continue;
}
}

{
IkReal dummyeval[1];
IkReal gconst55;
gconst55=IKsign(sj24);
dummyeval[0]=sj24;
if( IKabs(dummyeval[0]) < 0.0000010000000000  )
{
{
IkReal dummyeval[1];
dummyeval[0]=sj24;
if( IKabs(dummyeval[0]) < 0.0000010000000000  )
{
{
IkReal dummyeval[1];
dummyeval[0]=sj24;
if( IKabs(dummyeval[0]) < 0.0000010000000000  )
{
{
IkReal evalcond[11];
IkReal x194=((((cj23)*(new_r12)))+(((IkReal(-1.00000000000000))*(new_r02)*(sj23))));
IkReal x195=((((cj23)*(new_r02)))+(((new_r12)*(sj23))));
evalcond[0]=((IkReal(-3.14159265358979))+(IKfmod(((IkReal(3.14159265358979))+(j24)), IkReal(6.28318530717959))));
evalcond[1]=((IkReal(-1.00000000000000))+(new_r22));
evalcond[2]=new_r20;
evalcond[3]=new_r21;
evalcond[4]=x194;
evalcond[5]=x194;
evalcond[6]=x195;
evalcond[7]=x195;
evalcond[8]=((IkReal(-1.00000000000000))*(new_r20));
evalcond[9]=((IkReal(-1.00000000000000))*(new_r21));
evalcond[10]=((IkReal(1.00000000000000))+(((IkReal(-1.00000000000000))*(new_r22))));
if( IKabs(evalcond[0]) < 0.0000010000000000  && IKabs(evalcond[1]) < 0.0000010000000000  && IKabs(evalcond[2]) < 0.0000010000000000  && IKabs(evalcond[3]) < 0.0000010000000000  && IKabs(evalcond[4]) < 0.0000010000000000  && IKabs(evalcond[5]) < 0.0000010000000000  && IKabs(evalcond[6]) < 0.0000010000000000  && IKabs(evalcond[7]) < 0.0000010000000000  && IKabs(evalcond[8]) < 0.0000010000000000  && IKabs(evalcond[9]) < 0.0000010000000000  && IKabs(evalcond[10]) < 0.0000010000000000  )
{
{
IkReal j25array[1], cj25array[1], sj25array[1];
bool j25valid[1]={false};
_nj25 = 1;
if( IKabs(((((IkReal(-1.00000000000000))*(new_r11)*(sj23)))+(((IkReal(-1.00000000000000))*(cj23)*(new_r01))))) < IKFAST_ATAN2_MAGTHRESH && IKabs(((((cj23)*(new_r00)))+(((new_r10)*(sj23))))) < IKFAST_ATAN2_MAGTHRESH && IKabs(IKsqr(((((IkReal(-1.00000000000000))*(new_r11)*(sj23)))+(((IkReal(-1.00000000000000))*(cj23)*(new_r01)))))+IKsqr(((((cj23)*(new_r00)))+(((new_r10)*(sj23)))))-1) <= IKFAST_SINCOS_THRESH )
    continue;
j25array[0]=IKatan2(((((IkReal(-1.00000000000000))*(new_r11)*(sj23)))+(((IkReal(-1.00000000000000))*(cj23)*(new_r01)))), ((((cj23)*(new_r00)))+(((new_r10)*(sj23)))));
sj25array[0]=IKsin(j25array[0]);
cj25array[0]=IKcos(j25array[0]);
if( j25array[0] > IKPI )
{
    j25array[0]-=IK2PI;
}
else if( j25array[0] < -IKPI )
{    j25array[0]+=IK2PI;
}
j25valid[0] = true;
for(int ij25 = 0; ij25 < 1; ++ij25)
{
if( !j25valid[ij25] )
{
    continue;
}
_ij25[0] = ij25; _ij25[1] = -1;
for(int iij25 = ij25+1; iij25 < 1; ++iij25)
{
if( j25valid[iij25] && IKabs(cj25array[ij25]-cj25array[iij25]) < IKFAST_SOLUTION_THRESH && IKabs(sj25array[ij25]-sj25array[iij25]) < IKFAST_SOLUTION_THRESH )
{
    j25valid[iij25]=false; _ij25[1] = iij25; break; 
}
}
j25 = j25array[ij25]; cj25 = cj25array[ij25]; sj25 = sj25array[ij25];
{
IkReal evalcond[4];
IkReal x196=IKsin(j25);
IkReal x197=((IkReal(1.00000000000000))*(sj23));
IkReal x198=((IkReal(1.00000000000000))*(IKcos(j25)));
evalcond[0]=((((cj23)*(new_r10)))+(((IkReal(-1.00000000000000))*(x196)))+(((IkReal(-1.00000000000000))*(new_r00)*(x197))));
evalcond[1]=((((cj23)*(new_r11)))+(((IkReal(-1.00000000000000))*(x198)))+(((IkReal(-1.00000000000000))*(new_r01)*(x197))));
evalcond[2]=((((cj23)*(new_r01)))+(x196)+(((new_r11)*(sj23))));
evalcond[3]=((((IkReal(-1.00000000000000))*(x198)))+(((cj23)*(new_r00)))+(((new_r10)*(sj23))));
if( IKabs(evalcond[0]) > 0.000001  || IKabs(evalcond[1]) > 0.000001  || IKabs(evalcond[2]) > 0.000001  || IKabs(evalcond[3]) > 0.000001  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(7);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j19;
vinfos[0].indices[0] = _ij19[0];
vinfos[0].indices[1] = _ij19[1];
vinfos[0].maxsolutions = _nj19;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j20;
vinfos[1].indices[0] = _ij20[0];
vinfos[1].indices[1] = _ij20[1];
vinfos[1].maxsolutions = _nj20;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j21;
vinfos[2].indices[0] = _ij21[0];
vinfos[2].indices[1] = _ij21[1];
vinfos[2].maxsolutions = _nj21;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j22;
vinfos[3].indices[0] = _ij22[0];
vinfos[3].indices[1] = _ij22[1];
vinfos[3].maxsolutions = _nj22;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j23;
vinfos[4].indices[0] = _ij23[0];
vinfos[4].indices[1] = _ij23[1];
vinfos[4].maxsolutions = _nj23;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j24;
vinfos[5].indices[0] = _ij24[0];
vinfos[5].indices[1] = _ij24[1];
vinfos[5].maxsolutions = _nj24;
vinfos[6].jointtype = 1;
vinfos[6].foffset = j25;
vinfos[6].indices[0] = _ij25[0];
vinfos[6].indices[1] = _ij25[1];
vinfos[6].maxsolutions = _nj25;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

} else
{
IkReal x199=((IkReal(1.00000000000000))+(new_r22));
IkReal x200=((new_r12)*(sj23));
IkReal x201=((IkReal(1.00000000000000))*(new_r02));
IkReal x202=((((IkReal(-1.00000000000000))*(sj23)*(x201)))+(((cj23)*(new_r12))));
evalcond[0]=((IkReal(-3.14159265358979))+(IKfmod(j24, IkReal(6.28318530717959))));
evalcond[1]=x199;
evalcond[2]=new_r20;
evalcond[3]=new_r21;
evalcond[4]=x202;
evalcond[5]=x202;
evalcond[6]=((((cj23)*(new_r02)))+(x200));
evalcond[7]=((((IkReal(-1.00000000000000))*(cj23)*(x201)))+(((IkReal(-1.00000000000000))*(x200))));
evalcond[8]=new_r20;
evalcond[9]=new_r21;
evalcond[10]=x199;
if( IKabs(evalcond[0]) < 0.0000010000000000  && IKabs(evalcond[1]) < 0.0000010000000000  && IKabs(evalcond[2]) < 0.0000010000000000  && IKabs(evalcond[3]) < 0.0000010000000000  && IKabs(evalcond[4]) < 0.0000010000000000  && IKabs(evalcond[5]) < 0.0000010000000000  && IKabs(evalcond[6]) < 0.0000010000000000  && IKabs(evalcond[7]) < 0.0000010000000000  && IKabs(evalcond[8]) < 0.0000010000000000  && IKabs(evalcond[9]) < 0.0000010000000000  && IKabs(evalcond[10]) < 0.0000010000000000  )
{
{
IkReal j25array[1], cj25array[1], sj25array[1];
bool j25valid[1]={false};
_nj25 = 1;
if( IKabs(((((cj23)*(new_r01)))+(((new_r11)*(sj23))))) < IKFAST_ATAN2_MAGTHRESH && IKabs(((((IkReal(-1.00000000000000))*(new_r10)*(sj23)))+(((IkReal(-1.00000000000000))*(cj23)*(new_r00))))) < IKFAST_ATAN2_MAGTHRESH && IKabs(IKsqr(((((cj23)*(new_r01)))+(((new_r11)*(sj23)))))+IKsqr(((((IkReal(-1.00000000000000))*(new_r10)*(sj23)))+(((IkReal(-1.00000000000000))*(cj23)*(new_r00)))))-1) <= IKFAST_SINCOS_THRESH )
    continue;
j25array[0]=IKatan2(((((cj23)*(new_r01)))+(((new_r11)*(sj23)))), ((((IkReal(-1.00000000000000))*(new_r10)*(sj23)))+(((IkReal(-1.00000000000000))*(cj23)*(new_r00)))));
sj25array[0]=IKsin(j25array[0]);
cj25array[0]=IKcos(j25array[0]);
if( j25array[0] > IKPI )
{
    j25array[0]-=IK2PI;
}
else if( j25array[0] < -IKPI )
{    j25array[0]+=IK2PI;
}
j25valid[0] = true;
for(int ij25 = 0; ij25 < 1; ++ij25)
{
if( !j25valid[ij25] )
{
    continue;
}
_ij25[0] = ij25; _ij25[1] = -1;
for(int iij25 = ij25+1; iij25 < 1; ++iij25)
{
if( j25valid[iij25] && IKabs(cj25array[ij25]-cj25array[iij25]) < IKFAST_SOLUTION_THRESH && IKabs(sj25array[ij25]-sj25array[iij25]) < IKFAST_SOLUTION_THRESH )
{
    j25valid[iij25]=false; _ij25[1] = iij25; break; 
}
}
j25 = j25array[ij25]; cj25 = cj25array[ij25]; sj25 = sj25array[ij25];
{
IkReal evalcond[4];
IkReal x203=IKcos(j25);
IkReal x204=((IkReal(1.00000000000000))*(sj23));
IkReal x205=((IkReal(1.00000000000000))*(IKsin(j25)));
evalcond[0]=((((IkReal(-1.00000000000000))*(new_r00)*(x204)))+(((cj23)*(new_r10)))+(((IkReal(-1.00000000000000))*(x205))));
evalcond[1]=((((cj23)*(new_r11)))+(((IkReal(-1.00000000000000))*(x203)))+(((IkReal(-1.00000000000000))*(new_r01)*(x204))));
evalcond[2]=((((cj23)*(new_r01)))+(((IkReal(-1.00000000000000))*(x205)))+(((new_r11)*(sj23))));
evalcond[3]=((((cj23)*(new_r00)))+(x203)+(((new_r10)*(sj23))));
if( IKabs(evalcond[0]) > 0.000001  || IKabs(evalcond[1]) > 0.000001  || IKabs(evalcond[2]) > 0.000001  || IKabs(evalcond[3]) > 0.000001  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(7);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j19;
vinfos[0].indices[0] = _ij19[0];
vinfos[0].indices[1] = _ij19[1];
vinfos[0].maxsolutions = _nj19;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j20;
vinfos[1].indices[0] = _ij20[0];
vinfos[1].indices[1] = _ij20[1];
vinfos[1].maxsolutions = _nj20;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j21;
vinfos[2].indices[0] = _ij21[0];
vinfos[2].indices[1] = _ij21[1];
vinfos[2].maxsolutions = _nj21;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j22;
vinfos[3].indices[0] = _ij22[0];
vinfos[3].indices[1] = _ij22[1];
vinfos[3].maxsolutions = _nj22;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j23;
vinfos[4].indices[0] = _ij23[0];
vinfos[4].indices[1] = _ij23[1];
vinfos[4].maxsolutions = _nj23;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j24;
vinfos[5].indices[0] = _ij24[0];
vinfos[5].indices[1] = _ij24[1];
vinfos[5].maxsolutions = _nj24;
vinfos[6].jointtype = 1;
vinfos[6].foffset = j25;
vinfos[6].indices[0] = _ij25[0];
vinfos[6].indices[1] = _ij25[1];
vinfos[6].maxsolutions = _nj25;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

} else
{
if( 1 )
{
continue;

} else
{
}
}
}
}

} else
{
{
IkReal j25array[1], cj25array[1], sj25array[1];
bool j25valid[1]={false};
_nj25 = 1;
if( IKabs(((((IkReal(-1.00000000000000))*(new_r00)*(sj23)))+(((cj23)*(new_r10))))) < IKFAST_ATAN2_MAGTHRESH && IKabs(((IkReal(-1.00000000000000))*(new_r20)*(((IKabs(sj24) != 0)?((IkReal)1/(sj24)):(IkReal)1.0e30)))) < IKFAST_ATAN2_MAGTHRESH && IKabs(IKsqr(((((IkReal(-1.00000000000000))*(new_r00)*(sj23)))+(((cj23)*(new_r10)))))+IKsqr(((IkReal(-1.00000000000000))*(new_r20)*(((IKabs(sj24) != 0)?((IkReal)1/(sj24)):(IkReal)1.0e30))))-1) <= IKFAST_SINCOS_THRESH )
    continue;
j25array[0]=IKatan2(((((IkReal(-1.00000000000000))*(new_r00)*(sj23)))+(((cj23)*(new_r10)))), ((IkReal(-1.00000000000000))*(new_r20)*(((IKabs(sj24) != 0)?((IkReal)1/(sj24)):(IkReal)1.0e30))));
sj25array[0]=IKsin(j25array[0]);
cj25array[0]=IKcos(j25array[0]);
if( j25array[0] > IKPI )
{
    j25array[0]-=IK2PI;
}
else if( j25array[0] < -IKPI )
{    j25array[0]+=IK2PI;
}
j25valid[0] = true;
for(int ij25 = 0; ij25 < 1; ++ij25)
{
if( !j25valid[ij25] )
{
    continue;
}
_ij25[0] = ij25; _ij25[1] = -1;
for(int iij25 = ij25+1; iij25 < 1; ++iij25)
{
if( j25valid[iij25] && IKabs(cj25array[ij25]-cj25array[iij25]) < IKFAST_SOLUTION_THRESH && IKabs(sj25array[ij25]-sj25array[iij25]) < IKFAST_SOLUTION_THRESH )
{
    j25valid[iij25]=false; _ij25[1] = iij25; break; 
}
}
j25 = j25array[ij25]; cj25 = cj25array[ij25]; sj25 = sj25array[ij25];
{
IkReal evalcond[8];
IkReal x206=IKsin(j25);
IkReal x207=IKcos(j25);
IkReal x208=((new_r11)*(sj23));
IkReal x209=((cj23)*(new_r01));
IkReal x210=((new_r10)*(sj23));
IkReal x211=((IkReal(1.00000000000000))*(sj24));
IkReal x212=((IkReal(1.00000000000000))*(sj23));
IkReal x213=((cj23)*(new_r00));
IkReal x214=((IkReal(1.00000000000000))*(x207));
IkReal x215=((IkReal(1.00000000000000))*(x206));
evalcond[0]=((new_r20)+(((sj24)*(x207))));
evalcond[1]=((((IkReal(-1.00000000000000))*(x206)*(x211)))+(new_r21));
evalcond[2]=((((cj23)*(new_r10)))+(((IkReal(-1.00000000000000))*(x215)))+(((IkReal(-1.00000000000000))*(new_r00)*(x212))));
evalcond[3]=((((cj23)*(new_r11)))+(((IkReal(-1.00000000000000))*(new_r01)*(x212)))+(((IkReal(-1.00000000000000))*(x214))));
evalcond[4]=((((cj24)*(x206)))+(x209)+(x208));
evalcond[5]=((x210)+(x213)+(((IkReal(-1.00000000000000))*(cj24)*(x214))));
evalcond[6]=((((cj24)*(x208)))+(((cj24)*(x209)))+(x206)+(((IkReal(-1.00000000000000))*(new_r21)*(x211))));
evalcond[7]=((((IkReal(-1.00000000000000))*(new_r20)*(x211)))+(((cj24)*(x213)))+(((cj24)*(x210)))+(((IkReal(-1.00000000000000))*(x214))));
if( IKabs(evalcond[0]) > 0.000001  || IKabs(evalcond[1]) > 0.000001  || IKabs(evalcond[2]) > 0.000001  || IKabs(evalcond[3]) > 0.000001  || IKabs(evalcond[4]) > 0.000001  || IKabs(evalcond[5]) > 0.000001  || IKabs(evalcond[6]) > 0.000001  || IKabs(evalcond[7]) > 0.000001  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(7);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j19;
vinfos[0].indices[0] = _ij19[0];
vinfos[0].indices[1] = _ij19[1];
vinfos[0].maxsolutions = _nj19;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j20;
vinfos[1].indices[0] = _ij20[0];
vinfos[1].indices[1] = _ij20[1];
vinfos[1].maxsolutions = _nj20;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j21;
vinfos[2].indices[0] = _ij21[0];
vinfos[2].indices[1] = _ij21[1];
vinfos[2].maxsolutions = _nj21;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j22;
vinfos[3].indices[0] = _ij22[0];
vinfos[3].indices[1] = _ij22[1];
vinfos[3].maxsolutions = _nj22;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j23;
vinfos[4].indices[0] = _ij23[0];
vinfos[4].indices[1] = _ij23[1];
vinfos[4].maxsolutions = _nj23;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j24;
vinfos[5].indices[0] = _ij24[0];
vinfos[5].indices[1] = _ij24[1];
vinfos[5].maxsolutions = _nj24;
vinfos[6].jointtype = 1;
vinfos[6].foffset = j25;
vinfos[6].indices[0] = _ij25[0];
vinfos[6].indices[1] = _ij25[1];
vinfos[6].maxsolutions = _nj25;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j25array[1], cj25array[1], sj25array[1];
bool j25valid[1]={false};
_nj25 = 1;
if( IKabs(((new_r21)*(((IKabs(sj24) != 0)?((IkReal)1/(sj24)):(IkReal)1.0e30)))) < IKFAST_ATAN2_MAGTHRESH && IKabs(((((IkReal(-1.00000000000000))*(new_r01)*(sj23)))+(((cj23)*(new_r11))))) < IKFAST_ATAN2_MAGTHRESH && IKabs(IKsqr(((new_r21)*(((IKabs(sj24) != 0)?((IkReal)1/(sj24)):(IkReal)1.0e30))))+IKsqr(((((IkReal(-1.00000000000000))*(new_r01)*(sj23)))+(((cj23)*(new_r11)))))-1) <= IKFAST_SINCOS_THRESH )
    continue;
j25array[0]=IKatan2(((new_r21)*(((IKabs(sj24) != 0)?((IkReal)1/(sj24)):(IkReal)1.0e30))), ((((IkReal(-1.00000000000000))*(new_r01)*(sj23)))+(((cj23)*(new_r11)))));
sj25array[0]=IKsin(j25array[0]);
cj25array[0]=IKcos(j25array[0]);
if( j25array[0] > IKPI )
{
    j25array[0]-=IK2PI;
}
else if( j25array[0] < -IKPI )
{    j25array[0]+=IK2PI;
}
j25valid[0] = true;
for(int ij25 = 0; ij25 < 1; ++ij25)
{
if( !j25valid[ij25] )
{
    continue;
}
_ij25[0] = ij25; _ij25[1] = -1;
for(int iij25 = ij25+1; iij25 < 1; ++iij25)
{
if( j25valid[iij25] && IKabs(cj25array[ij25]-cj25array[iij25]) < IKFAST_SOLUTION_THRESH && IKabs(sj25array[ij25]-sj25array[iij25]) < IKFAST_SOLUTION_THRESH )
{
    j25valid[iij25]=false; _ij25[1] = iij25; break; 
}
}
j25 = j25array[ij25]; cj25 = cj25array[ij25]; sj25 = sj25array[ij25];
{
IkReal evalcond[8];
IkReal x216=IKsin(j25);
IkReal x217=IKcos(j25);
IkReal x218=((new_r11)*(sj23));
IkReal x219=((cj23)*(new_r01));
IkReal x220=((new_r10)*(sj23));
IkReal x221=((IkReal(1.00000000000000))*(sj24));
IkReal x222=((IkReal(1.00000000000000))*(sj23));
IkReal x223=((cj23)*(new_r00));
IkReal x224=((IkReal(1.00000000000000))*(x217));
IkReal x225=((IkReal(1.00000000000000))*(x216));
evalcond[0]=((((sj24)*(x217)))+(new_r20));
evalcond[1]=((((IkReal(-1.00000000000000))*(x216)*(x221)))+(new_r21));
evalcond[2]=((((cj23)*(new_r10)))+(((IkReal(-1.00000000000000))*(x225)))+(((IkReal(-1.00000000000000))*(new_r00)*(x222))));
evalcond[3]=((((IkReal(-1.00000000000000))*(new_r01)*(x222)))+(((cj23)*(new_r11)))+(((IkReal(-1.00000000000000))*(x224))));
evalcond[4]=((x218)+(x219)+(((cj24)*(x216))));
evalcond[5]=((((IkReal(-1.00000000000000))*(cj24)*(x224)))+(x220)+(x223));
evalcond[6]=((x216)+(((cj24)*(x219)))+(((cj24)*(x218)))+(((IkReal(-1.00000000000000))*(new_r21)*(x221))));
evalcond[7]=((((cj24)*(x220)))+(((cj24)*(x223)))+(((IkReal(-1.00000000000000))*(new_r20)*(x221)))+(((IkReal(-1.00000000000000))*(x224))));
if( IKabs(evalcond[0]) > 0.000001  || IKabs(evalcond[1]) > 0.000001  || IKabs(evalcond[2]) > 0.000001  || IKabs(evalcond[3]) > 0.000001  || IKabs(evalcond[4]) > 0.000001  || IKabs(evalcond[5]) > 0.000001  || IKabs(evalcond[6]) > 0.000001  || IKabs(evalcond[7]) > 0.000001  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(7);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j19;
vinfos[0].indices[0] = _ij19[0];
vinfos[0].indices[1] = _ij19[1];
vinfos[0].maxsolutions = _nj19;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j20;
vinfos[1].indices[0] = _ij20[0];
vinfos[1].indices[1] = _ij20[1];
vinfos[1].maxsolutions = _nj20;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j21;
vinfos[2].indices[0] = _ij21[0];
vinfos[2].indices[1] = _ij21[1];
vinfos[2].maxsolutions = _nj21;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j22;
vinfos[3].indices[0] = _ij22[0];
vinfos[3].indices[1] = _ij22[1];
vinfos[3].maxsolutions = _nj22;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j23;
vinfos[4].indices[0] = _ij23[0];
vinfos[4].indices[1] = _ij23[1];
vinfos[4].maxsolutions = _nj23;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j24;
vinfos[5].indices[0] = _ij24[0];
vinfos[5].indices[1] = _ij24[1];
vinfos[5].maxsolutions = _nj24;
vinfos[6].jointtype = 1;
vinfos[6].foffset = j25;
vinfos[6].indices[0] = _ij25[0];
vinfos[6].indices[1] = _ij25[1];
vinfos[6].maxsolutions = _nj25;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j25array[1], cj25array[1], sj25array[1];
bool j25valid[1]={false};
_nj25 = 1;
if( IKabs(((gconst55)*(new_r21))) < IKFAST_ATAN2_MAGTHRESH && IKabs(((IkReal(-1.00000000000000))*(gconst55)*(new_r20))) < IKFAST_ATAN2_MAGTHRESH )
    continue;
j25array[0]=IKatan2(((gconst55)*(new_r21)), ((IkReal(-1.00000000000000))*(gconst55)*(new_r20)));
sj25array[0]=IKsin(j25array[0]);
cj25array[0]=IKcos(j25array[0]);
if( j25array[0] > IKPI )
{
    j25array[0]-=IK2PI;
}
else if( j25array[0] < -IKPI )
{    j25array[0]+=IK2PI;
}
j25valid[0] = true;
for(int ij25 = 0; ij25 < 1; ++ij25)
{
if( !j25valid[ij25] )
{
    continue;
}
_ij25[0] = ij25; _ij25[1] = -1;
for(int iij25 = ij25+1; iij25 < 1; ++iij25)
{
if( j25valid[iij25] && IKabs(cj25array[ij25]-cj25array[iij25]) < IKFAST_SOLUTION_THRESH && IKabs(sj25array[ij25]-sj25array[iij25]) < IKFAST_SOLUTION_THRESH )
{
    j25valid[iij25]=false; _ij25[1] = iij25; break; 
}
}
j25 = j25array[ij25]; cj25 = cj25array[ij25]; sj25 = sj25array[ij25];
{
IkReal evalcond[8];
IkReal x226=IKsin(j25);
IkReal x227=IKcos(j25);
IkReal x228=((new_r11)*(sj23));
IkReal x229=((cj23)*(new_r01));
IkReal x230=((new_r10)*(sj23));
IkReal x231=((IkReal(1.00000000000000))*(sj24));
IkReal x232=((IkReal(1.00000000000000))*(sj23));
IkReal x233=((cj23)*(new_r00));
IkReal x234=((IkReal(1.00000000000000))*(x227));
IkReal x235=((IkReal(1.00000000000000))*(x226));
evalcond[0]=((((sj24)*(x227)))+(new_r20));
evalcond[1]=((((IkReal(-1.00000000000000))*(x226)*(x231)))+(new_r21));
evalcond[2]=((((cj23)*(new_r10)))+(((IkReal(-1.00000000000000))*(x235)))+(((IkReal(-1.00000000000000))*(new_r00)*(x232))));
evalcond[3]=((((cj23)*(new_r11)))+(((IkReal(-1.00000000000000))*(x234)))+(((IkReal(-1.00000000000000))*(new_r01)*(x232))));
evalcond[4]=((((cj24)*(x226)))+(x229)+(x228));
evalcond[5]=((((IkReal(-1.00000000000000))*(cj24)*(x234)))+(x233)+(x230));
evalcond[6]=((((IkReal(-1.00000000000000))*(new_r21)*(x231)))+(((cj24)*(x229)))+(((cj24)*(x228)))+(x226));
evalcond[7]=((((cj24)*(x233)))+(((cj24)*(x230)))+(((IkReal(-1.00000000000000))*(new_r20)*(x231)))+(((IkReal(-1.00000000000000))*(x234))));
if( IKabs(evalcond[0]) > 0.000001  || IKabs(evalcond[1]) > 0.000001  || IKabs(evalcond[2]) > 0.000001  || IKabs(evalcond[3]) > 0.000001  || IKabs(evalcond[4]) > 0.000001  || IKabs(evalcond[5]) > 0.000001  || IKabs(evalcond[6]) > 0.000001  || IKabs(evalcond[7]) > 0.000001  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(7);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j19;
vinfos[0].indices[0] = _ij19[0];
vinfos[0].indices[1] = _ij19[1];
vinfos[0].maxsolutions = _nj19;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j20;
vinfos[1].indices[0] = _ij20[0];
vinfos[1].indices[1] = _ij20[1];
vinfos[1].maxsolutions = _nj20;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j21;
vinfos[2].indices[0] = _ij21[0];
vinfos[2].indices[1] = _ij21[1];
vinfos[2].maxsolutions = _nj21;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j22;
vinfos[3].indices[0] = _ij22[0];
vinfos[3].indices[1] = _ij22[1];
vinfos[3].maxsolutions = _nj22;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j23;
vinfos[4].indices[0] = _ij23[0];
vinfos[4].indices[1] = _ij23[1];
vinfos[4].maxsolutions = _nj23;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j24;
vinfos[5].indices[0] = _ij24[0];
vinfos[5].indices[1] = _ij24[1];
vinfos[5].maxsolutions = _nj24;
vinfos[6].jointtype = 1;
vinfos[6].foffset = j25;
vinfos[6].indices[0] = _ij25[0];
vinfos[6].indices[1] = _ij25[1];
vinfos[6].maxsolutions = _nj25;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}
}
}

}

}

} else
{
{
IkReal j25array[1], cj25array[1], sj25array[1];
bool j25valid[1]={false};
_nj25 = 1;
if( IKabs(((gconst54)*(new_r21))) < IKFAST_ATAN2_MAGTHRESH && IKabs(((IkReal(-1.00000000000000))*(gconst54)*(new_r20))) < IKFAST_ATAN2_MAGTHRESH )
    continue;
j25array[0]=IKatan2(((gconst54)*(new_r21)), ((IkReal(-1.00000000000000))*(gconst54)*(new_r20)));
sj25array[0]=IKsin(j25array[0]);
cj25array[0]=IKcos(j25array[0]);
if( j25array[0] > IKPI )
{
    j25array[0]-=IK2PI;
}
else if( j25array[0] < -IKPI )
{    j25array[0]+=IK2PI;
}
j25valid[0] = true;
for(int ij25 = 0; ij25 < 1; ++ij25)
{
if( !j25valid[ij25] )
{
    continue;
}
_ij25[0] = ij25; _ij25[1] = -1;
for(int iij25 = ij25+1; iij25 < 1; ++iij25)
{
if( j25valid[iij25] && IKabs(cj25array[ij25]-cj25array[iij25]) < IKFAST_SOLUTION_THRESH && IKabs(sj25array[ij25]-sj25array[iij25]) < IKFAST_SOLUTION_THRESH )
{
    j25valid[iij25]=false; _ij25[1] = iij25; break; 
}
}
j25 = j25array[ij25]; cj25 = cj25array[ij25]; sj25 = sj25array[ij25];
{
IkReal evalcond[2];
evalcond[0]=((((sj24)*(IKcos(j25))))+(new_r20));
evalcond[1]=((((IkReal(-1.00000000000000))*(sj24)*(IKsin(j25))))+(new_r21));
if( IKabs(evalcond[0]) > 0.000001  || IKabs(evalcond[1]) > 0.000001  )
{
continue;
}
}

{
IkReal dummyeval[1];
IkReal gconst56;
gconst56=IKsign((((new_r12)*(new_r12))+((new_r02)*(new_r02))));
dummyeval[0]=(((new_r12)*(new_r12))+((new_r02)*(new_r02)));
if( IKabs(dummyeval[0]) < 0.0000010000000000  )
{
{
IkReal dummyeval[1];
IkReal gconst57;
gconst57=IKsign(((((IkReal(-1.00000000000000))*(new_r00)*(new_r12)))+(((new_r02)*(new_r10)))));
dummyeval[0]=((((IkReal(-1.00000000000000))*(new_r00)*(new_r12)))+(((new_r02)*(new_r10))));
if( IKabs(dummyeval[0]) < 0.0000010000000000  )
{
continue;

} else
{
{
IkReal j23array[1], cj23array[1], sj23array[1];
bool j23valid[1]={false};
_nj23 = 1;
IkReal x236=((gconst57)*(sj25));
if( IKabs(((new_r12)*(x236))) < IKFAST_ATAN2_MAGTHRESH && IKabs(((new_r02)*(x236))) < IKFAST_ATAN2_MAGTHRESH )
    continue;
j23array[0]=IKatan2(((new_r12)*(x236)), ((new_r02)*(x236)));
sj23array[0]=IKsin(j23array[0]);
cj23array[0]=IKcos(j23array[0]);
if( j23array[0] > IKPI )
{
    j23array[0]-=IK2PI;
}
else if( j23array[0] < -IKPI )
{    j23array[0]+=IK2PI;
}
j23valid[0] = true;
for(int ij23 = 0; ij23 < 1; ++ij23)
{
if( !j23valid[ij23] )
{
    continue;
}
_ij23[0] = ij23; _ij23[1] = -1;
for(int iij23 = ij23+1; iij23 < 1; ++iij23)
{
if( j23valid[iij23] && IKabs(cj23array[ij23]-cj23array[iij23]) < IKFAST_SOLUTION_THRESH && IKabs(sj23array[ij23]-sj23array[iij23]) < IKFAST_SOLUTION_THRESH )
{
    j23valid[iij23]=false; _ij23[1] = iij23; break; 
}
}
j23 = j23array[ij23]; cj23 = cj23array[ij23]; sj23 = sj23array[ij23];
{
IkReal evalcond[12];
IkReal x237=IKsin(j23);
IkReal x238=IKcos(j23);
IkReal x239=((IkReal(1.00000000000000))*(cj25));
IkReal x240=((IkReal(1.00000000000000))*(sj24));
IkReal x241=((IkReal(1.00000000000000))*(cj24));
IkReal x242=((new_r01)*(x238));
IkReal x243=((new_r10)*(x237));
IkReal x244=((new_r12)*(x237));
IkReal x245=((new_r00)*(x238));
IkReal x246=((new_r02)*(x238));
IkReal x247=((IkReal(1.00000000000000))*(x237));
IkReal x248=((new_r11)*(x237));
evalcond[0]=((((new_r12)*(x238)))+(((IkReal(-1.00000000000000))*(new_r02)*(x247))));
evalcond[1]=((x246)+(x244)+(((IkReal(-1.00000000000000))*(x240))));
evalcond[2]=((((new_r10)*(x238)))+(((IkReal(-1.00000000000000))*(new_r00)*(x247)))+(((IkReal(-1.00000000000000))*(sj25))));
evalcond[3]=((((IkReal(-1.00000000000000))*(new_r01)*(x247)))+(((new_r11)*(x238)))+(((IkReal(-1.00000000000000))*(x239))));
evalcond[4]=((((cj24)*(sj25)))+(x242)+(x248));
evalcond[5]=((((IkReal(-1.00000000000000))*(cj24)*(x239)))+(x243)+(x245));
evalcond[6]=((((IkReal(-1.00000000000000))*(new_r22)*(x240)))+(((cj24)*(x244)))+(((cj24)*(x246))));
evalcond[7]=((((IkReal(-1.00000000000000))*(new_r20)*(x241)))+(((IkReal(-1.00000000000000))*(x240)*(x243)))+(((IkReal(-1.00000000000000))*(x240)*(x245))));
evalcond[8]=((((IkReal(-1.00000000000000))*(new_r21)*(x241)))+(((IkReal(-1.00000000000000))*(x240)*(x242)))+(((IkReal(-1.00000000000000))*(x240)*(x248))));
evalcond[9]=((((IkReal(-1.00000000000000))*(new_r21)*(x240)))+(((cj24)*(x248)))+(((cj24)*(x242)))+(sj25));
evalcond[10]=((IkReal(1.00000000000000))+(((IkReal(-1.00000000000000))*(new_r22)*(x241)))+(((IkReal(-1.00000000000000))*(x240)*(x246)))+(((IkReal(-1.00000000000000))*(x240)*(x244))));
evalcond[11]=((((cj24)*(x245)))+(((cj24)*(x243)))+(((IkReal(-1.00000000000000))*(x239)))+(((IkReal(-1.00000000000000))*(new_r20)*(x240))));
if( IKabs(evalcond[0]) > 0.000001  || IKabs(evalcond[1]) > 0.000001  || IKabs(evalcond[2]) > 0.000001  || IKabs(evalcond[3]) > 0.000001  || IKabs(evalcond[4]) > 0.000001  || IKabs(evalcond[5]) > 0.000001  || IKabs(evalcond[6]) > 0.000001  || IKabs(evalcond[7]) > 0.000001  || IKabs(evalcond[8]) > 0.000001  || IKabs(evalcond[9]) > 0.000001  || IKabs(evalcond[10]) > 0.000001  || IKabs(evalcond[11]) > 0.000001  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(7);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j19;
vinfos[0].indices[0] = _ij19[0];
vinfos[0].indices[1] = _ij19[1];
vinfos[0].maxsolutions = _nj19;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j20;
vinfos[1].indices[0] = _ij20[0];
vinfos[1].indices[1] = _ij20[1];
vinfos[1].maxsolutions = _nj20;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j21;
vinfos[2].indices[0] = _ij21[0];
vinfos[2].indices[1] = _ij21[1];
vinfos[2].maxsolutions = _nj21;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j22;
vinfos[3].indices[0] = _ij22[0];
vinfos[3].indices[1] = _ij22[1];
vinfos[3].maxsolutions = _nj22;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j23;
vinfos[4].indices[0] = _ij23[0];
vinfos[4].indices[1] = _ij23[1];
vinfos[4].maxsolutions = _nj23;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j24;
vinfos[5].indices[0] = _ij24[0];
vinfos[5].indices[1] = _ij24[1];
vinfos[5].maxsolutions = _nj24;
vinfos[6].jointtype = 1;
vinfos[6].foffset = j25;
vinfos[6].indices[0] = _ij25[0];
vinfos[6].indices[1] = _ij25[1];
vinfos[6].maxsolutions = _nj25;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j23array[1], cj23array[1], sj23array[1];
bool j23valid[1]={false};
_nj23 = 1;
IkReal x249=((gconst56)*(sj24));
if( IKabs(((new_r12)*(x249))) < IKFAST_ATAN2_MAGTHRESH && IKabs(((new_r02)*(x249))) < IKFAST_ATAN2_MAGTHRESH )
    continue;
j23array[0]=IKatan2(((new_r12)*(x249)), ((new_r02)*(x249)));
sj23array[0]=IKsin(j23array[0]);
cj23array[0]=IKcos(j23array[0]);
if( j23array[0] > IKPI )
{
    j23array[0]-=IK2PI;
}
else if( j23array[0] < -IKPI )
{    j23array[0]+=IK2PI;
}
j23valid[0] = true;
for(int ij23 = 0; ij23 < 1; ++ij23)
{
if( !j23valid[ij23] )
{
    continue;
}
_ij23[0] = ij23; _ij23[1] = -1;
for(int iij23 = ij23+1; iij23 < 1; ++iij23)
{
if( j23valid[iij23] && IKabs(cj23array[ij23]-cj23array[iij23]) < IKFAST_SOLUTION_THRESH && IKabs(sj23array[ij23]-sj23array[iij23]) < IKFAST_SOLUTION_THRESH )
{
    j23valid[iij23]=false; _ij23[1] = iij23; break; 
}
}
j23 = j23array[ij23]; cj23 = cj23array[ij23]; sj23 = sj23array[ij23];
{
IkReal evalcond[12];
IkReal x250=IKsin(j23);
IkReal x251=IKcos(j23);
IkReal x252=((IkReal(1.00000000000000))*(cj25));
IkReal x253=((IkReal(1.00000000000000))*(sj24));
IkReal x254=((IkReal(1.00000000000000))*(cj24));
IkReal x255=((new_r01)*(x251));
IkReal x256=((new_r10)*(x250));
IkReal x257=((new_r12)*(x250));
IkReal x258=((new_r00)*(x251));
IkReal x259=((new_r02)*(x251));
IkReal x260=((IkReal(1.00000000000000))*(x250));
IkReal x261=((new_r11)*(x250));
evalcond[0]=((((new_r12)*(x251)))+(((IkReal(-1.00000000000000))*(new_r02)*(x260))));
evalcond[1]=((x259)+(x257)+(((IkReal(-1.00000000000000))*(x253))));
evalcond[2]=((((IkReal(-1.00000000000000))*(new_r00)*(x260)))+(((IkReal(-1.00000000000000))*(sj25)))+(((new_r10)*(x251))));
evalcond[3]=((((IkReal(-1.00000000000000))*(new_r01)*(x260)))+(((new_r11)*(x251)))+(((IkReal(-1.00000000000000))*(x252))));
evalcond[4]=((((cj24)*(sj25)))+(x255)+(x261));
evalcond[5]=((((IkReal(-1.00000000000000))*(cj24)*(x252)))+(x258)+(x256));
evalcond[6]=((((cj24)*(x257)))+(((cj24)*(x259)))+(((IkReal(-1.00000000000000))*(new_r22)*(x253))));
evalcond[7]=((((IkReal(-1.00000000000000))*(new_r20)*(x254)))+(((IkReal(-1.00000000000000))*(x253)*(x256)))+(((IkReal(-1.00000000000000))*(x253)*(x258))));
evalcond[8]=((((IkReal(-1.00000000000000))*(new_r21)*(x254)))+(((IkReal(-1.00000000000000))*(x253)*(x261)))+(((IkReal(-1.00000000000000))*(x253)*(x255))));
evalcond[9]=((((IkReal(-1.00000000000000))*(new_r21)*(x253)))+(((cj24)*(x255)))+(((cj24)*(x261)))+(sj25));
evalcond[10]=((IkReal(1.00000000000000))+(((IkReal(-1.00000000000000))*(new_r22)*(x254)))+(((IkReal(-1.00000000000000))*(x253)*(x257)))+(((IkReal(-1.00000000000000))*(x253)*(x259))));
evalcond[11]=((((cj24)*(x256)))+(((cj24)*(x258)))+(((IkReal(-1.00000000000000))*(new_r20)*(x253)))+(((IkReal(-1.00000000000000))*(x252))));
if( IKabs(evalcond[0]) > 0.000001  || IKabs(evalcond[1]) > 0.000001  || IKabs(evalcond[2]) > 0.000001  || IKabs(evalcond[3]) > 0.000001  || IKabs(evalcond[4]) > 0.000001  || IKabs(evalcond[5]) > 0.000001  || IKabs(evalcond[6]) > 0.000001  || IKabs(evalcond[7]) > 0.000001  || IKabs(evalcond[8]) > 0.000001  || IKabs(evalcond[9]) > 0.000001  || IKabs(evalcond[10]) > 0.000001  || IKabs(evalcond[11]) > 0.000001  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(7);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j19;
vinfos[0].indices[0] = _ij19[0];
vinfos[0].indices[1] = _ij19[1];
vinfos[0].maxsolutions = _nj19;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j20;
vinfos[1].indices[0] = _ij20[0];
vinfos[1].indices[1] = _ij20[1];
vinfos[1].maxsolutions = _nj20;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j21;
vinfos[2].indices[0] = _ij21[0];
vinfos[2].indices[1] = _ij21[1];
vinfos[2].maxsolutions = _nj21;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j22;
vinfos[3].indices[0] = _ij22[0];
vinfos[3].indices[1] = _ij22[1];
vinfos[3].maxsolutions = _nj22;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j23;
vinfos[4].indices[0] = _ij23[0];
vinfos[4].indices[1] = _ij23[1];
vinfos[4].maxsolutions = _nj23;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j24;
vinfos[5].indices[0] = _ij24[0];
vinfos[5].indices[1] = _ij24[1];
vinfos[5].maxsolutions = _nj24;
vinfos[6].jointtype = 1;
vinfos[6].foffset = j25;
vinfos[6].indices[0] = _ij25[0];
vinfos[6].indices[1] = _ij25[1];
vinfos[6].maxsolutions = _nj25;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}
}
}

}

}
}
}
}
}static inline void polyroots2(IkReal rawcoeffs[2+1], IkReal rawroots[2], int& numroots) {
    IkReal det = rawcoeffs[1]*rawcoeffs[1]-4*rawcoeffs[0]*rawcoeffs[2];
    if( det < 0 ) {
        numroots=0;
    }
    else if( det == 0 ) {
        rawroots[0] = -0.5*rawcoeffs[1]/rawcoeffs[0];
        numroots = 1;
    }
    else {
        det = IKsqrt(det);
        rawroots[0] = (-rawcoeffs[1]+det)/(2*rawcoeffs[0]);
        rawroots[1] = (-rawcoeffs[1]-det)/(2*rawcoeffs[0]);//rawcoeffs[2]/(rawcoeffs[0]*rawroots[0]);
        numroots = 2;
    }
}
};


/// solves the inverse kinematics equations.
/// \param pfree is an array specifying the free joints of the chain.
IKFAST_API bool ComputeIk(const IkReal* eetrans, const IkReal* eerot, const IkReal* pfree, IkSolutionListBase<IkReal>& solutions) {
IKSolver solver;
return solver.ComputeIk(eetrans,eerot,pfree,solutions);
}

IKFAST_API const char* GetKinematicsHash() { return "b3af7519e6d64d9c63db31c826d8da15"; }

IKFAST_API const char* GetIkFastVersion() { return IKFAST_STRINGIZE(IKFAST_VERSION); }

#ifdef IKFAST_NAMESPACE
} // end namespace
#endif

#ifndef IKFAST_NO_MAIN
#include <stdio.h>
#include <stdlib.h>
#ifdef IKFAST_NAMESPACE
using namespace IKFAST_NAMESPACE;
#endif
int main(int argc, char** argv)
{
    if( argc != 12+GetNumFreeParameters()+1 ) {
        printf("\nUsage: ./ik r00 r01 r02 t0 r10 r11 r12 t1 r20 r21 r22 t2 free0 ...\n\n"
               "Returns the ik solutions given the transformation of the end effector specified by\n"
               "a 3x3 rotation R (rXX), and a 3x1 translation (tX).\n"
               "There are %d free parameters that have to be specified.\n\n",GetNumFreeParameters());
        return 1;
    }

    IkSolutionList<IkReal> solutions;
    std::vector<IkReal> vfree(GetNumFreeParameters());
    IkReal eerot[9],eetrans[3];
    eerot[0] = atof(argv[1]); eerot[1] = atof(argv[2]); eerot[2] = atof(argv[3]); eetrans[0] = atof(argv[4]);
    eerot[3] = atof(argv[5]); eerot[4] = atof(argv[6]); eerot[5] = atof(argv[7]); eetrans[1] = atof(argv[8]);
    eerot[6] = atof(argv[9]); eerot[7] = atof(argv[10]); eerot[8] = atof(argv[11]); eetrans[2] = atof(argv[12]);
    for(std::size_t i = 0; i < vfree.size(); ++i)
        vfree[i] = atof(argv[13+i]);
    bool bSuccess = ComputeIk(eetrans, eerot, vfree.size() > 0 ? &vfree[0] : NULL, solutions);

    if( !bSuccess ) {
        fprintf(stderr,"Failed to get ik solution\n");
        return -1;
    }

    printf("Found %d ik solutions:\n", (int)solutions.GetNumSolutions());
    std::vector<IkReal> solvalues(GetNumJoints());
    for(std::size_t i = 0; i < solutions.GetNumSolutions(); ++i) {
        const IkSolutionBase<IkReal>& sol = solutions.GetSolution(i);
        printf("sol%d (free=%d): ", (int)i, (int)sol.GetFree().size());
        std::vector<IkReal> vsolfree(sol.GetFree().size());
        sol.GetSolution(&solvalues[0],vsolfree.size()>0?&vsolfree[0]:NULL);
        for( std::size_t j = 0; j < solvalues.size(); ++j)
            printf("%.15f, ", solvalues[j]);
        printf("\n");
    }
    return 0;
}

#endif

#include "plugindefs.h"
namespace IKFAST_NAMESPACE {
IkSolverBasePtr CreateIkSolver(EnvironmentBasePtr penv, std::istream& sinput, const std::vector<dReal>& vfreeinc) {
    boost::shared_ptr<ikfast::IkFastFunctions<IkReal> > ikfunctions(new ikfast::IkFastFunctions<IkReal>());
    ikfunctions->_ComputeIk = IKFAST_NAMESPACE::ComputeIk;
    ikfunctions->_ComputeFk = IKFAST_NAMESPACE::ComputeFk;
    ikfunctions->_GetNumFreeParameters = IKFAST_NAMESPACE::GetNumFreeParameters;
    ikfunctions->_GetFreeParameters = IKFAST_NAMESPACE::GetFreeParameters;
    ikfunctions->_GetNumJoints = IKFAST_NAMESPACE::GetNumJoints;
    ikfunctions->_GetIkRealSize = IKFAST_NAMESPACE::GetIkRealSize;
    ikfunctions->_GetIkFastVersion = IKFAST_NAMESPACE::GetIkFastVersion;
    ikfunctions->_GetIkType = IKFAST_NAMESPACE::GetIkType;
    ikfunctions->_GetKinematicsHash = IKFAST_NAMESPACE::GetKinematicsHash;
    return CreateIkFastSolver(penv,sinput,ikfunctions,vfreeinc);
}
} // end namespace
