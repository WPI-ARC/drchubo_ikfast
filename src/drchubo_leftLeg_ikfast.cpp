#define IKFAST_NAMESPACE drchubo_leftleg_ikfast
#include "plugindefs.h"

/// autogenerated analytical inverse kinematics code from ikfast program part of OpenRAVE
/// \author Rosen Diankov
///
/// Licensed under the Apache License, Version 2.0 (the "License");
/// you may not use this file except in compliance with the License.
/// You may obtain a copy of the License at
///     http://www.apache.org/licenses/LICENSE-2.0
/// 
/// Unless required by applicable law or agreed to in writing, software
/// distributed under the License is distributed on an "AS IS" BASIS,
/// WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
/// See the License for the specific language governing permissions and
/// limitations under the License.
///
/// ikfast version 61 generated on 2013-10-23 12:47:20.917524
/// To compile with gcc:
///     gcc -lstdc++ ik.cpp
/// To compile without any main function as a shared object (might need -llapack):
///     gcc -fPIC -lstdc++ -DIKFAST_NO_MAIN -DIKFAST_CLIBRARY -shared -Wl,-soname,libik.so -o libik.so ik.cpp
#define IKFAST_HAS_LIBRARY
#include "ikfast.h" // found inside share/openrave-X.Y/python/ikfast.h
using namespace ikfast;

// check if the included ikfast version matches what this file was compiled with
#define IKFAST_COMPILE_ASSERT(x) extern int __dummy[(int)x]
IKFAST_COMPILE_ASSERT(IKFAST_VERSION==61);

#include <cmath>
#include <vector>
#include <limits>
#include <algorithm>
#include <complex>

#define IKFAST_STRINGIZE2(s) #s
#define IKFAST_STRINGIZE(s) IKFAST_STRINGIZE2(s)

#ifndef IKFAST_ASSERT
#include <stdexcept>
#include <sstream>
#include <iostream>

#ifdef _MSC_VER
#ifndef __PRETTY_FUNCTION__
#define __PRETTY_FUNCTION__ __FUNCDNAME__
#endif
#endif

#ifndef __PRETTY_FUNCTION__
#define __PRETTY_FUNCTION__ __func__
#endif

#define IKFAST_ASSERT(b) { if( !(b) ) { std::stringstream ss; ss << "ikfast exception: " << __FILE__ << ":" << __LINE__ << ": " <<__PRETTY_FUNCTION__ << ": Assertion '" << #b << "' failed"; throw std::runtime_error(ss.str()); } }

#endif

#if defined(_MSC_VER)
#define IKFAST_ALIGNED16(x) __declspec(align(16)) x
#else
#define IKFAST_ALIGNED16(x) x __attribute((aligned(16)))
#endif

#define IK2PI  ((IkReal)6.28318530717959)
#define IKPI  ((IkReal)3.14159265358979)
#define IKPI_2  ((IkReal)1.57079632679490)

#ifdef _MSC_VER
#ifndef isnan
#define isnan _isnan
#endif
#endif // _MSC_VER

// lapack routines
extern "C" {
  void dgetrf_ (const int* m, const int* n, double* a, const int* lda, int* ipiv, int* info);
  void zgetrf_ (const int* m, const int* n, std::complex<double>* a, const int* lda, int* ipiv, int* info);
  void dgetri_(const int* n, const double* a, const int* lda, int* ipiv, double* work, const int* lwork, int* info);
  void dgesv_ (const int* n, const int* nrhs, double* a, const int* lda, int* ipiv, double* b, const int* ldb, int* info);
  void dgetrs_(const char *trans, const int *n, const int *nrhs, double *a, const int *lda, int *ipiv, double *b, const int *ldb, int *info);
  void dgeev_(const char *jobvl, const char *jobvr, const int *n, double *a, const int *lda, double *wr, double *wi,double *vl, const int *ldvl, double *vr, const int *ldvr, double *work, const int *lwork, int *info);
}

using namespace std; // necessary to get std math routines

#ifdef IKFAST_NAMESPACE
namespace IKFAST_NAMESPACE {
#endif

inline float IKabs(float f) { return fabsf(f); }
inline double IKabs(double f) { return fabs(f); }

inline float IKsqr(float f) { return f*f; }
inline double IKsqr(double f) { return f*f; }

inline float IKlog(float f) { return logf(f); }
inline double IKlog(double f) { return log(f); }

// allows asin and acos to exceed 1
#ifndef IKFAST_SINCOS_THRESH
#define IKFAST_SINCOS_THRESH ((IkReal)0.000001)
#endif

// used to check input to atan2 for degenerate cases
#ifndef IKFAST_ATAN2_MAGTHRESH
#define IKFAST_ATAN2_MAGTHRESH ((IkReal)2e-6)
#endif

// minimum distance of separate solutions
#ifndef IKFAST_SOLUTION_THRESH
#define IKFAST_SOLUTION_THRESH ((IkReal)1e-6)
#endif

inline float IKasin(float f)
{
IKFAST_ASSERT( f > -1-IKFAST_SINCOS_THRESH && f < 1+IKFAST_SINCOS_THRESH ); // any more error implies something is wrong with the solver
if( f <= -1 ) return float(-IKPI_2);
else if( f >= 1 ) return float(IKPI_2);
return asinf(f);
}
inline double IKasin(double f)
{
IKFAST_ASSERT( f > -1-IKFAST_SINCOS_THRESH && f < 1+IKFAST_SINCOS_THRESH ); // any more error implies something is wrong with the solver
if( f <= -1 ) return -IKPI_2;
else if( f >= 1 ) return IKPI_2;
return asin(f);
}

// return positive value in [0,y)
inline float IKfmod(float x, float y)
{
    while(x < 0) {
        x += y;
    }
    return fmodf(x,y);
}

// return positive value in [0,y)
inline double IKfmod(double x, double y)
{
    while(x < 0) {
        x += y;
    }
    return fmod(x,y);
}

inline float IKacos(float f)
{
IKFAST_ASSERT( f > -1-IKFAST_SINCOS_THRESH && f < 1+IKFAST_SINCOS_THRESH ); // any more error implies something is wrong with the solver
if( f <= -1 ) return float(IKPI);
else if( f >= 1 ) return float(0);
return acosf(f);
}
inline double IKacos(double f)
{
IKFAST_ASSERT( f > -1-IKFAST_SINCOS_THRESH && f < 1+IKFAST_SINCOS_THRESH ); // any more error implies something is wrong with the solver
if( f <= -1 ) return IKPI;
else if( f >= 1 ) return 0;
return acos(f);
}
inline float IKsin(float f) { return sinf(f); }
inline double IKsin(double f) { return sin(f); }
inline float IKcos(float f) { return cosf(f); }
inline double IKcos(double f) { return cos(f); }
inline float IKtan(float f) { return tanf(f); }
inline double IKtan(double f) { return tan(f); }
inline float IKsqrt(float f) { if( f <= 0.0f ) return 0.0f; return sqrtf(f); }
inline double IKsqrt(double f) { if( f <= 0.0 ) return 0.0; return sqrt(f); }
inline float IKatan2(float fy, float fx) {
    if( isnan(fy) ) {
        IKFAST_ASSERT(!isnan(fx)); // if both are nan, probably wrong value will be returned
        return float(IKPI_2);
    }
    else if( isnan(fx) ) {
        return 0;
    }
    return atan2f(fy,fx);
}
inline double IKatan2(double fy, double fx) {
    if( isnan(fy) ) {
        IKFAST_ASSERT(!isnan(fx)); // if both are nan, probably wrong value will be returned
        return IKPI_2;
    }
    else if( isnan(fx) ) {
        return 0;
    }
    return atan2(fy,fx);
}

inline float IKsign(float f) {
    if( f > 0 ) {
        return float(1);
    }
    else if( f < 0 ) {
        return float(-1);
    }
    return 0;
}

inline double IKsign(double f) {
    if( f > 0 ) {
        return 1.0;
    }
    else if( f < 0 ) {
        return -1.0;
    }
    return 0;
}

/// solves the forward kinematics equations.
/// \param pfree is an array specifying the free joints of the chain.
IKFAST_API void ComputeFk(const IkReal* j, IkReal* eetrans, IkReal* eerot) {
IkReal x0,x1,x2,x3,x4,x5,x6,x7,x8,x9,x10,x11,x12,x13,x14,x15,x16,x17,x18,x19,x20,x21,x22,x23,x24,x25,x26,x27,x28,x29,x30,x31,x32,x33,x34,x35,x36,x37,x38,x39,x40,x41,x42,x43,x44,x45,x46,x47,x48,x49,x50,x51,x52,x53,x54,x55;
x0=IKcos(j[2]);
x1=IKsin(j[0]);
x2=IKsin(j[1]);
x3=IKcos(j[0]);
x4=IKsin(j[2]);
x5=IKcos(j[3]);
x6=IKsin(j[3]);
x7=IKcos(j[4]);
x8=IKsin(j[4]);
x9=IKcos(j[5]);
x10=IKcos(j[1]);
x11=IKsin(j[5]);
x12=((IkReal(0.137100000000000))*(x7));
x13=((IkReal(0.137100000000000))*(x8));
x14=((IkReal(0.0705000000000000))*(x6));
x15=((IkReal(1.00000000000000))*(x2));
x16=((IkReal(0.0705000000000000))*(x5));
x17=((IkReal(1.00000000000000))*(x8));
x18=((IkReal(0.330000000000000))*(x2));
x19=((IkReal(1.00000000000000))*(x7));
x20=((x0)*(x3));
x21=((x0)*(x1));
x22=((x3)*(x4));
x23=((IkReal(-1.00000000000000))*(x6));
x24=((x10)*(x4));
x25=((x1)*(x4));
x26=((x0)*(x10));
x27=((IkReal(-1.00000000000000))*(x5));
x28=((x10)*(x11));
x29=((x10)*(x9));
x30=((IkReal(0.330000000000000))*(x22));
x31=((IkReal(0.330000000000000))*(x25));
x32=((IkReal(1.00000000000000))*(x10)*(x5));
x33=((x15)*(x25));
x34=((x18)*(x21));
x35=((x18)*(x20));
x36=((((IkReal(-1.00000000000000))*(x33)))+(x20));
x37=((((IkReal(-1.00000000000000))*(x25)))+(((x2)*(x20))));
x38=((((x2)*(x22)))+(x21));
x39=((((IkReal(-1.00000000000000))*(x20)))+(x33));
x40=((((IkReal(-1.00000000000000))*(x15)*(x21)))+(((IkReal(-1.00000000000000))*(x22))));
x41=((((IkReal(-1.00000000000000))*(x15)*(x22)))+(((IkReal(-1.00000000000000))*(x21))));
x42=((((IkReal(-1.00000000000000))*(x26)*(x5)))+(((x24)*(x6))));
x43=((x30)+(x34));
x44=((x37)*(x6));
x45=((x37)*(x5));
x46=((x36)*(x5));
x47=((((IkReal(1.00000000000000))*(x24)*(x5)))+(((IkReal(1.00000000000000))*(x26)*(x6))));
x48=((x42)*(x7));
x49=((((x41)*(x6)))+(x45));
x50=((((x40)*(x5)))+(((x39)*(x6))));
x51=((((x27)*(x38)))+(((x23)*(x37))));
x52=((((x27)*(x36)))+(((x23)*(x40))));
x53=((((IkReal(-1.00000000000000))*(x17)*(x47)))+(((IkReal(-1.00000000000000))*(x19)*(x42))));
x54=((((IkReal(-1.00000000000000))*(x19)*(x49)))+(((IkReal(-1.00000000000000))*(x17)*(x51))));
x55=((((IkReal(-1.00000000000000))*(x19)*(x50)))+(((IkReal(-1.00000000000000))*(x17)*(x52))));
eerot[0]=((((x7)*(((x46)+(((x40)*(x6)))))))+(((x50)*(x8))));
eerot[1]=((((IkReal(-1.00000000000000))*(x1)*(x29)))+(((x11)*(x55))));
eerot[2]=((((x1)*(x28)))+(((x55)*(x9))));
IkReal x56=((IkReal(1.00000000000000))*(x43));
eetrans[0]=((((x6)*(((((x18)*(x25)))+(((IkReal(-0.330000000000000))*(x20)))))))+(((x8)*(((((x16)*(x40)))+(((x14)*(x39)))))))+(((IkReal(-0.137100000000000))*(x1)*(x28)))+(((IkReal(-1.00000000000000))*(x5)*(x56)))+(((x7)*(((((x16)*(x36)))+(((x14)*(x40)))))))+(((IkReal(-1.00000000000000))*(x56)))+(((x9)*(((((x13)*(x52)))+(((x12)*(x50))))))));
eerot[3]=((((x7)*(((x44)+(((x38)*(x5)))))))+(((x49)*(x8))));
eerot[4]=((((x29)*(x3)))+(((x11)*(x54))));
eerot[5]=((((IkReal(-1.00000000000000))*(x28)*(x3)))+(((x54)*(x9))));
IkReal x57=((IkReal(1.00000000000000))*(x31));
eetrans[1]=((IkReal(0.0885000000000000))+(((x6)*(((((IkReal(-1.00000000000000))*(x18)*(x22)))+(((IkReal(-0.330000000000000))*(x21)))))))+(((IkReal(0.137100000000000))*(x28)*(x3)))+(x35)+(((x7)*(((((x16)*(x38)))+(((x14)*(x37)))))))+(((x5)*(((x35)+(((IkReal(-1.00000000000000))*(x57)))))))+(((IkReal(-1.00000000000000))*(x57)))+(((x9)*(((((x13)*(x51)))+(((x12)*(x49)))))))+(((x8)*(((((x16)*(x37)))+(((x14)*(x41))))))));
eerot[6]=((((x42)*(x8)))+(((IkReal(-1.00000000000000))*(x47)*(x7))));
eerot[7]=((((x11)*(x53)))+(((x2)*(x9))));
eerot[8]=((((x53)*(x9)))+(((IkReal(-1.00000000000000))*(x11)*(x15))));
IkReal x58=((IkReal(1.00000000000000))*(x16));
IkReal x59=((IkReal(0.330000000000000))*(x26));
eetrans[2]=((IkReal(-0.166100000000000))+(((IkReal(0.330000000000000))*(x24)*(x6)))+(((x7)*(((((IkReal(-1.00000000000000))*(x24)*(x58)))+(((IkReal(-1.00000000000000))*(x14)*(x26)))))))+(((x8)*(((((x14)*(x24)))+(((IkReal(-1.00000000000000))*(x26)*(x58)))))))+(((IkReal(-1.00000000000000))*(x5)*(x59)))+(((x9)*(((((x12)*(x42)))+(((x13)*(x47)))))))+(((IkReal(-1.00000000000000))*(x59)))+(((IkReal(0.137100000000000))*(x11)*(x2))));
}

IKFAST_API int GetNumFreeParameters() { return 0; }
IKFAST_API int* GetFreeParameters() { return NULL; }
IKFAST_API int GetNumJoints() { return 6; }

IKFAST_API int GetIkRealSize() { return sizeof(IkReal); }

IKFAST_API int GetIkType() { return 0x67000001; }

class IKSolver {
public:
IkReal j26,cj26,sj26,htj26,j27,cj27,sj27,htj27,j28,cj28,sj28,htj28,j29,cj29,sj29,htj29,j30,cj30,sj30,htj30,j31,cj31,sj31,htj31,new_r00,r00,rxp0_0,new_r01,r01,rxp0_1,new_r02,r02,rxp0_2,new_r10,r10,rxp1_0,new_r11,r11,rxp1_1,new_r12,r12,rxp1_2,new_r20,r20,rxp2_0,new_r21,r21,rxp2_1,new_r22,r22,rxp2_2,new_px,px,npx,new_py,py,npy,new_pz,pz,npz,pp;
unsigned char _ij26[2], _nj26,_ij27[2], _nj27,_ij28[2], _nj28,_ij29[2], _nj29,_ij30[2], _nj30,_ij31[2], _nj31;

bool ComputeIk(const IkReal* eetrans, const IkReal* eerot, const IkReal* pfree, IkSolutionListBase<IkReal>& solutions) {
j26=numeric_limits<IkReal>::quiet_NaN(); _ij26[0] = -1; _ij26[1] = -1; _nj26 = -1; j27=numeric_limits<IkReal>::quiet_NaN(); _ij27[0] = -1; _ij27[1] = -1; _nj27 = -1; j28=numeric_limits<IkReal>::quiet_NaN(); _ij28[0] = -1; _ij28[1] = -1; _nj28 = -1; j29=numeric_limits<IkReal>::quiet_NaN(); _ij29[0] = -1; _ij29[1] = -1; _nj29 = -1; j30=numeric_limits<IkReal>::quiet_NaN(); _ij30[0] = -1; _ij30[1] = -1; _nj30 = -1; j31=numeric_limits<IkReal>::quiet_NaN(); _ij31[0] = -1; _ij31[1] = -1; _nj31 = -1; 
for(int dummyiter = 0; dummyiter < 1; ++dummyiter) {
    solutions.Clear();
r00 = eerot[0*3+0];
r01 = eerot[0*3+1];
r02 = eerot[0*3+2];
r10 = eerot[1*3+0];
r11 = eerot[1*3+1];
r12 = eerot[1*3+2];
r20 = eerot[2*3+0];
r21 = eerot[2*3+1];
r22 = eerot[2*3+2];
px = eetrans[0]; py = eetrans[1]; pz = eetrans[2];

new_r00=((IkReal(-1.00000000000000))*(r02));
new_r01=r01;
new_r02=r00;
new_px=((((IkReal(-0.0705000000000000))*(r00)))+(px)+(((IkReal(0.137100000000000))*(r02))));
new_r10=((IkReal(-1.00000000000000))*(r12));
new_r11=r11;
new_r12=r10;
new_py=((IkReal(-0.0885000000000000))+(((IkReal(-0.0705000000000000))*(r10)))+(py)+(((IkReal(0.137100000000000))*(r12))));
new_r20=((IkReal(-1.00000000000000))*(r22));
new_r21=r21;
new_r22=r20;
new_pz=((IkReal(0.166100000000000))+(((IkReal(-0.0705000000000000))*(r20)))+(pz)+(((IkReal(0.137100000000000))*(r22))));
r00 = new_r00; r01 = new_r01; r02 = new_r02; r10 = new_r10; r11 = new_r11; r12 = new_r12; r20 = new_r20; r21 = new_r21; r22 = new_r22; px = new_px; py = new_py; pz = new_pz;
pp=(((px)*(px))+((py)*(py))+((pz)*(pz)));
npx=((((px)*(r00)))+(((py)*(r10)))+(((pz)*(r20))));
npy=((((px)*(r01)))+(((py)*(r11)))+(((pz)*(r21))));
npz=((((px)*(r02)))+(((py)*(r12)))+(((pz)*(r22))));
rxp0_0=((((IkReal(-1.00000000000000))*(py)*(r20)))+(((pz)*(r10))));
rxp0_1=((((px)*(r20)))+(((IkReal(-1.00000000000000))*(pz)*(r00))));
rxp0_2=((((IkReal(-1.00000000000000))*(px)*(r10)))+(((py)*(r00))));
rxp1_0=((((IkReal(-1.00000000000000))*(py)*(r21)))+(((pz)*(r11))));
rxp1_1=((((px)*(r21)))+(((IkReal(-1.00000000000000))*(pz)*(r01))));
rxp1_2=((((IkReal(-1.00000000000000))*(px)*(r11)))+(((py)*(r01))));
rxp2_0=((((IkReal(-1.00000000000000))*(py)*(r22)))+(((pz)*(r12))));
rxp2_1=((((px)*(r22)))+(((IkReal(-1.00000000000000))*(pz)*(r02))));
rxp2_2=((((IkReal(-1.00000000000000))*(px)*(r12)))+(((py)*(r02))));
{
IkReal j29array[2], cj29array[2], sj29array[2];
bool j29valid[2]={false};
_nj29 = 2;
cj29array[0]=((IkReal(-1.00000000000000))+(((IkReal(4.59136822773186))*(pp))));
if( cj29array[0] >= -1-IKFAST_SINCOS_THRESH && cj29array[0] <= 1+IKFAST_SINCOS_THRESH )
{
    j29valid[0] = j29valid[1] = true;
    j29array[0] = IKacos(cj29array[0]);
    sj29array[0] = IKsin(j29array[0]);
    cj29array[1] = cj29array[0];
    j29array[1] = -j29array[0];
    sj29array[1] = -sj29array[0];
}
else if( isnan(cj29array[0]) )
{
    // probably any value will work
    j29valid[0] = true;
    cj29array[0] = 1; sj29array[0] = 0; j29array[0] = 0;
}
for(int ij29 = 0; ij29 < 2; ++ij29)
{
if( !j29valid[ij29] )
{
    continue;
}
_ij29[0] = ij29; _ij29[1] = -1;
for(int iij29 = ij29+1; iij29 < 2; ++iij29)
{
if( j29valid[iij29] && IKabs(cj29array[ij29]-cj29array[iij29]) < IKFAST_SOLUTION_THRESH && IKabs(sj29array[ij29]-sj29array[iij29]) < IKFAST_SOLUTION_THRESH )
{
    j29valid[iij29]=false; _ij29[1] = iij29; break; 
}
}
j29 = j29array[ij29]; cj29 = cj29array[ij29]; sj29 = sj29array[ij29];

{
IkReal j31array[2], cj31array[2], sj31array[2];
bool j31valid[2]={false};
_nj31 = 2;
if( IKabs(npy) < IKFAST_ATAN2_MAGTHRESH && IKabs(npx) < IKFAST_ATAN2_MAGTHRESH )
    continue;
IkReal x60=IKatan2(npy, npx);
j31array[0]=((IkReal(-1.00000000000000))*(x60));
sj31array[0]=IKsin(j31array[0]);
cj31array[0]=IKcos(j31array[0]);
j31array[1]=((IkReal(3.14159265358979))+(((IkReal(-1.00000000000000))*(x60))));
sj31array[1]=IKsin(j31array[1]);
cj31array[1]=IKcos(j31array[1]);
if( j31array[0] > IKPI )
{
    j31array[0]-=IK2PI;
}
else if( j31array[0] < -IKPI )
{    j31array[0]+=IK2PI;
}
j31valid[0] = true;
if( j31array[1] > IKPI )
{
    j31array[1]-=IK2PI;
}
else if( j31array[1] < -IKPI )
{    j31array[1]+=IK2PI;
}
j31valid[1] = true;
for(int ij31 = 0; ij31 < 2; ++ij31)
{
if( !j31valid[ij31] )
{
    continue;
}
_ij31[0] = ij31; _ij31[1] = -1;
for(int iij31 = ij31+1; iij31 < 2; ++iij31)
{
if( j31valid[iij31] && IKabs(cj31array[ij31]-cj31array[iij31]) < IKFAST_SOLUTION_THRESH && IKabs(sj31array[ij31]-sj31array[iij31]) < IKFAST_SOLUTION_THRESH )
{
    j31valid[iij31]=false; _ij31[1] = iij31; break; 
}
}
j31 = j31array[ij31]; cj31 = cj31array[ij31]; sj31 = sj31array[ij31];

{
IkReal dummyeval[1];
IkReal gconst0;
IkReal x61=((IkReal(1089.00000000000))*(cj29));
IkReal x62=((npy)*(sj31));
IkReal x63=((cj31)*(npx));
gconst0=IKsign(((((IkReal(-1.00000000000000))*(x61)*(x63)))+(((IkReal(1089.00000000000))*(npz)*(sj29)))+(((IkReal(-1089.00000000000))*(x63)))+(((x61)*(x62)))+(((IkReal(1089.00000000000))*(x62)))));
IkReal x64=((npy)*(sj31));
IkReal x65=((IkReal(1.00000000000000))*(cj31)*(npx));
dummyeval[0]=((((IkReal(-1.00000000000000))*(cj29)*(x65)))+(((cj29)*(x64)))+(((npz)*(sj29)))+(x64)+(((IkReal(-1.00000000000000))*(x65))));
if( IKabs(dummyeval[0]) < 0.0000010000000000  )
{
{
IkReal dummyeval[1];
IkReal x66=((IkReal(1.00000000000000))*(npz));
dummyeval[0]=((((IkReal(-1.00000000000000))*(cj29)*(x66)))+(((IkReal(-1.00000000000000))*(x66)))+(((npy)*(sj29)*(sj31)))+(((IkReal(-1.00000000000000))*(cj31)*(npx)*(sj29))));
if( IKabs(dummyeval[0]) < 0.0000010000000000  )
{
{
IkReal evalcond[5];
evalcond[0]=((IkReal(-3.14159265358979))+(IKfmod(j29, IkReal(6.28318530717959))));
evalcond[1]=((IkReal(-1.00000000000000))*(pp));
evalcond[2]=((((npx)*(sj31)))+(((cj31)*(npy))));
evalcond[3]=npz;
evalcond[4]=((((IkReal(-1.00000000000000))*(npy)*(sj31)))+(((cj31)*(npx))));
if( IKabs(evalcond[0]) < 0.0000010000000000  && IKabs(evalcond[1]) < 0.0000010000000000  && IKabs(evalcond[2]) < 0.0000010000000000  && IKabs(evalcond[3]) < 0.0000010000000000  && IKabs(evalcond[4]) < 0.0000010000000000  )
{
{
IkReal dummyeval[1];
IkReal gconst1;
gconst1=IKsign(((((IkReal(-66.0000000000000))*(cj31)*(npx)*(npy)*(sj31)))+(((IkReal(33.0000000000000))*((cj31)*(cj31))*((npx)*(npx))))+(((IkReal(33.0000000000000))*((npy)*(npy))*((sj31)*(sj31))))+(((IkReal(33.0000000000000))*((npz)*(npz))))));
dummyeval[0]=(((((npy)*(npy))*((sj31)*(sj31))))+((npz)*(npz))+(((IkReal(-2.00000000000000))*(cj31)*(npx)*(npy)*(sj31)))+((((cj31)*(cj31))*((npx)*(npx)))));
if( IKabs(dummyeval[0]) < 0.0000010000000000  )
{
continue;

} else
{
{
IkReal j30array[1], cj30array[1], sj30array[1];
bool j30valid[1]={false};
_nj30 = 1;
IkReal x67=((IkReal(50.0000000000000))*(pp));
if( IKabs(((gconst1)*(npz)*(x67))) < IKFAST_ATAN2_MAGTHRESH && IKabs(((gconst1)*(((((IkReal(-1.00000000000000))*(npy)*(sj31)*(x67)))+(((cj31)*(npx)*(x67))))))) < IKFAST_ATAN2_MAGTHRESH )
    continue;
j30array[0]=IKatan2(((gconst1)*(npz)*(x67)), ((gconst1)*(((((IkReal(-1.00000000000000))*(npy)*(sj31)*(x67)))+(((cj31)*(npx)*(x67)))))));
sj30array[0]=IKsin(j30array[0]);
cj30array[0]=IKcos(j30array[0]);
if( j30array[0] > IKPI )
{
    j30array[0]-=IK2PI;
}
else if( j30array[0] < -IKPI )
{    j30array[0]+=IK2PI;
}
j30valid[0] = true;
for(int ij30 = 0; ij30 < 1; ++ij30)
{
if( !j30valid[ij30] )
{
    continue;
}
_ij30[0] = ij30; _ij30[1] = -1;
for(int iij30 = ij30+1; iij30 < 1; ++iij30)
{
if( j30valid[iij30] && IKabs(cj30array[ij30]-cj30array[iij30]) < IKFAST_SOLUTION_THRESH && IKabs(sj30array[ij30]-sj30array[iij30]) < IKFAST_SOLUTION_THRESH )
{
    j30valid[iij30]=false; _ij30[1] = iij30; break; 
}
}
j30 = j30array[ij30]; cj30 = cj30array[ij30]; sj30 = sj30array[ij30];
{
IkReal evalcond[3];
IkReal x68=IKsin(j30);
IkReal x69=IKcos(j30);
IkReal x70=((cj31)*(npx));
IkReal x71=((npy)*(sj31));
IkReal x72=((IkReal(0.660000000000000))*(x69));
IkReal x73=((npz)*(x68));
evalcond[0]=((((IkReal(-1.00000000000000))*(x68)*(x70)))+(((npz)*(x69)))+(((x68)*(x71))));
evalcond[1]=((((IkReal(0.660000000000000))*(x73)))+(((IkReal(-1.00000000000000))*(pp)))+(((IkReal(-1.00000000000000))*(x71)*(x72)))+(((x70)*(x72))));
evalcond[2]=((((IkReal(-1.00000000000000))*(x69)*(x71)))+(((x69)*(x70)))+(x73));
if( IKabs(evalcond[0]) > 0.000001  || IKabs(evalcond[1]) > 0.000001  || IKabs(evalcond[2]) > 0.000001  )
{
continue;
}
}

rotationfunction0(solutions);
}
}

}

}

} else
{
if( 1 )
{
continue;

} else
{
}
}
}

} else
{
{
IkReal j30array[1], cj30array[1], sj30array[1];
bool j30valid[1]={false};
_nj30 = 1;
IkReal x248=((cj31)*(npx));
IkReal x249=((IkReal(33.0000000000000))*(sj29));
IkReal x250=((IkReal(100.000000000000))*(npz));
IkReal x251=((IkReal(3300.00000000000))*(npz));
IkReal x252=((npy)*(sj31));
IkReal x253=((IkReal(3300.00000000000))*(sj29));
IkReal x254=((IkReal(10.8900000000000))*(sj29));
IkReal x255=((IkReal(33.0000000000000))*(npz));
if( IKabs(((((IKabs(((((IkReal(-1.00000000000000))*(cj29)*(x251)))+(((IkReal(-1.00000000000000))*(x248)*(x253)))+(((x252)*(x253)))+(((IkReal(-1.00000000000000))*(x251))))) != 0)?((IkReal)1/(((((IkReal(-1.00000000000000))*(cj29)*(x251)))+(((IkReal(-1.00000000000000))*(x248)*(x253)))+(((x252)*(x253)))+(((IkReal(-1.00000000000000))*(x251)))))):(IkReal)1.0e30))*(((((IkReal(1089.00000000000))*((sj29)*(sj29))))+(((IkReal(-10000.0000000000))*((npz)*(npz)))))))) < IKFAST_ATAN2_MAGTHRESH && IKabs(((((IKabs(((((IkReal(-1.00000000000000))*(x248)*(x249)))+(((x249)*(x252)))+(((IkReal(-1.00000000000000))*(cj29)*(x255)))+(((IkReal(-1.00000000000000))*(x255))))) != 0)?((IkReal)1/(((((IkReal(-1.00000000000000))*(x248)*(x249)))+(((x249)*(x252)))+(((IkReal(-1.00000000000000))*(cj29)*(x255)))+(((IkReal(-1.00000000000000))*(x255)))))):(IkReal)1.0e30))*(((((x250)*(x252)))+(((IkReal(-1.00000000000000))*(cj29)*(x254)))+(((IkReal(-1.00000000000000))*(x248)*(x250)))+(((IkReal(-1.00000000000000))*(x254))))))) < IKFAST_ATAN2_MAGTHRESH && IKabs(IKsqr(((((IKabs(((((IkReal(-1.00000000000000))*(cj29)*(x251)))+(((IkReal(-1.00000000000000))*(x248)*(x253)))+(((x252)*(x253)))+(((IkReal(-1.00000000000000))*(x251))))) != 0)?((IkReal)1/(((((IkReal(-1.00000000000000))*(cj29)*(x251)))+(((IkReal(-1.00000000000000))*(x248)*(x253)))+(((x252)*(x253)))+(((IkReal(-1.00000000000000))*(x251)))))):(IkReal)1.0e30))*(((((IkReal(1089.00000000000))*((sj29)*(sj29))))+(((IkReal(-10000.0000000000))*((npz)*(npz))))))))+IKsqr(((((IKabs(((((IkReal(-1.00000000000000))*(x248)*(x249)))+(((x249)*(x252)))+(((IkReal(-1.00000000000000))*(cj29)*(x255)))+(((IkReal(-1.00000000000000))*(x255))))) != 0)?((IkReal)1/(((((IkReal(-1.00000000000000))*(x248)*(x249)))+(((x249)*(x252)))+(((IkReal(-1.00000000000000))*(cj29)*(x255)))+(((IkReal(-1.00000000000000))*(x255)))))):(IkReal)1.0e30))*(((((x250)*(x252)))+(((IkReal(-1.00000000000000))*(cj29)*(x254)))+(((IkReal(-1.00000000000000))*(x248)*(x250)))+(((IkReal(-1.00000000000000))*(x254)))))))-1) <= IKFAST_SINCOS_THRESH )
    continue;
j30array[0]=IKatan2(((((IKabs(((((IkReal(-1.00000000000000))*(cj29)*(x251)))+(((IkReal(-1.00000000000000))*(x248)*(x253)))+(((x252)*(x253)))+(((IkReal(-1.00000000000000))*(x251))))) != 0)?((IkReal)1/(((((IkReal(-1.00000000000000))*(cj29)*(x251)))+(((IkReal(-1.00000000000000))*(x248)*(x253)))+(((x252)*(x253)))+(((IkReal(-1.00000000000000))*(x251)))))):(IkReal)1.0e30))*(((((IkReal(1089.00000000000))*((sj29)*(sj29))))+(((IkReal(-10000.0000000000))*((npz)*(npz))))))), ((((IKabs(((((IkReal(-1.00000000000000))*(x248)*(x249)))+(((x249)*(x252)))+(((IkReal(-1.00000000000000))*(cj29)*(x255)))+(((IkReal(-1.00000000000000))*(x255))))) != 0)?((IkReal)1/(((((IkReal(-1.00000000000000))*(x248)*(x249)))+(((x249)*(x252)))+(((IkReal(-1.00000000000000))*(cj29)*(x255)))+(((IkReal(-1.00000000000000))*(x255)))))):(IkReal)1.0e30))*(((((x250)*(x252)))+(((IkReal(-1.00000000000000))*(cj29)*(x254)))+(((IkReal(-1.00000000000000))*(x248)*(x250)))+(((IkReal(-1.00000000000000))*(x254)))))));
sj30array[0]=IKsin(j30array[0]);
cj30array[0]=IKcos(j30array[0]);
if( j30array[0] > IKPI )
{
    j30array[0]-=IK2PI;
}
else if( j30array[0] < -IKPI )
{    j30array[0]+=IK2PI;
}
j30valid[0] = true;
for(int ij30 = 0; ij30 < 1; ++ij30)
{
if( !j30valid[ij30] )
{
    continue;
}
_ij30[0] = ij30; _ij30[1] = -1;
for(int iij30 = ij30+1; iij30 < 1; ++iij30)
{
if( j30valid[iij30] && IKabs(cj30array[ij30]-cj30array[iij30]) < IKFAST_SOLUTION_THRESH && IKabs(sj30array[ij30]-sj30array[iij30]) < IKFAST_SOLUTION_THRESH )
{
    j30valid[iij30]=false; _ij30[1] = iij30; break; 
}
}
j30 = j30array[ij30]; cj30 = cj30array[ij30]; sj30 = sj30array[ij30];
{
IkReal evalcond[5];
IkReal x256=IKsin(j30);
IkReal x257=IKcos(j30);
IkReal x258=((cj31)*(npx));
IkReal x259=((npy)*(sj31));
IkReal x260=((IkReal(0.330000000000000))*(sj29));
IkReal x261=((IkReal(0.660000000000000))*(x257));
IkReal x262=((IkReal(0.330000000000000))*(x256));
IkReal x263=((npz)*(x256));
IkReal x264=((IkReal(0.330000000000000))*(x257));
evalcond[0]=((npz)+(((IkReal(-1.00000000000000))*(x262)))+(((IkReal(-1.00000000000000))*(cj29)*(x262)))+(((IkReal(-1.00000000000000))*(x257)*(x260))));
evalcond[1]=((((IkReal(-1.00000000000000))*(x256)*(x258)))+(((npz)*(x257)))+(((x256)*(x259)))+(((IkReal(-1.00000000000000))*(x260))));
evalcond[2]=((((x258)*(x261)))+(((IkReal(-1.00000000000000))*(x259)*(x261)))+(((IkReal(0.660000000000000))*(x263)))+(((IkReal(-1.00000000000000))*(pp))));
evalcond[3]=((IkReal(-0.330000000000000))+(((IkReal(-0.330000000000000))*(cj29)))+(((x257)*(x258)))+(((IkReal(-1.00000000000000))*(x257)*(x259)))+(x263));
evalcond[4]=((x258)+(((x256)*(x260)))+(((IkReal(-1.00000000000000))*(x264)))+(((IkReal(-1.00000000000000))*(cj29)*(x264)))+(((IkReal(-1.00000000000000))*(x259))));
if( IKabs(evalcond[0]) > 0.000001  || IKabs(evalcond[1]) > 0.000001  || IKabs(evalcond[2]) > 0.000001  || IKabs(evalcond[3]) > 0.000001  || IKabs(evalcond[4]) > 0.000001  )
{
continue;
}
}

rotationfunction0(solutions);
}
}

}

}

} else
{
{
IkReal j30array[1], cj30array[1], sj30array[1];
bool j30valid[1]={false};
_nj30 = 1;
IkReal x265=((IkReal(1650.00000000000))*(pp));
IkReal x266=((IkReal(3300.00000000000))*(npz));
if( IKabs(((gconst0)*(((((npy)*(sj31)*(x266)))+(((IkReal(-1.00000000000000))*(cj31)*(npx)*(x266)))+(((sj29)*(x265))))))) < IKFAST_ATAN2_MAGTHRESH && IKabs(((gconst0)*(((((npz)*(x266)))+(((IkReal(-1.00000000000000))*(x265)))+(((IkReal(-1.00000000000000))*(cj29)*(x265))))))) < IKFAST_ATAN2_MAGTHRESH )
    continue;
j30array[0]=IKatan2(((gconst0)*(((((npy)*(sj31)*(x266)))+(((IkReal(-1.00000000000000))*(cj31)*(npx)*(x266)))+(((sj29)*(x265)))))), ((gconst0)*(((((npz)*(x266)))+(((IkReal(-1.00000000000000))*(x265)))+(((IkReal(-1.00000000000000))*(cj29)*(x265)))))));
sj30array[0]=IKsin(j30array[0]);
cj30array[0]=IKcos(j30array[0]);
if( j30array[0] > IKPI )
{
    j30array[0]-=IK2PI;
}
else if( j30array[0] < -IKPI )
{    j30array[0]+=IK2PI;
}
j30valid[0] = true;
for(int ij30 = 0; ij30 < 1; ++ij30)
{
if( !j30valid[ij30] )
{
    continue;
}
_ij30[0] = ij30; _ij30[1] = -1;
for(int iij30 = ij30+1; iij30 < 1; ++iij30)
{
if( j30valid[iij30] && IKabs(cj30array[ij30]-cj30array[iij30]) < IKFAST_SOLUTION_THRESH && IKabs(sj30array[ij30]-sj30array[iij30]) < IKFAST_SOLUTION_THRESH )
{
    j30valid[iij30]=false; _ij30[1] = iij30; break; 
}
}
j30 = j30array[ij30]; cj30 = cj30array[ij30]; sj30 = sj30array[ij30];
{
IkReal evalcond[5];
IkReal x267=IKsin(j30);
IkReal x268=IKcos(j30);
IkReal x269=((cj31)*(npx));
IkReal x270=((npy)*(sj31));
IkReal x271=((IkReal(0.330000000000000))*(sj29));
IkReal x272=((IkReal(0.660000000000000))*(x268));
IkReal x273=((IkReal(0.330000000000000))*(x267));
IkReal x274=((npz)*(x267));
IkReal x275=((IkReal(0.330000000000000))*(x268));
evalcond[0]=((npz)+(((IkReal(-1.00000000000000))*(x268)*(x271)))+(((IkReal(-1.00000000000000))*(cj29)*(x273)))+(((IkReal(-1.00000000000000))*(x273))));
evalcond[1]=((((IkReal(-1.00000000000000))*(x267)*(x269)))+(((npz)*(x268)))+(((IkReal(-1.00000000000000))*(x271)))+(((x267)*(x270))));
evalcond[2]=((((IkReal(0.660000000000000))*(x274)))+(((IkReal(-1.00000000000000))*(pp)))+(((IkReal(-1.00000000000000))*(x270)*(x272)))+(((x269)*(x272))));
evalcond[3]=((IkReal(-0.330000000000000))+(((IkReal(-0.330000000000000))*(cj29)))+(x274)+(((IkReal(-1.00000000000000))*(x268)*(x270)))+(((x268)*(x269))));
evalcond[4]=((((IkReal(-1.00000000000000))*(x270)))+(x269)+(((IkReal(-1.00000000000000))*(cj29)*(x275)))+(((IkReal(-1.00000000000000))*(x275)))+(((x267)*(x271))));
if( IKabs(evalcond[0]) > 0.000001  || IKabs(evalcond[1]) > 0.000001  || IKabs(evalcond[2]) > 0.000001  || IKabs(evalcond[3]) > 0.000001  || IKabs(evalcond[4]) > 0.000001  )
{
continue;
}
}

rotationfunction0(solutions);
}
}

}

}
}
}
}
}
}
return solutions.GetNumSolutions()>0;
}
inline void rotationfunction0(IkSolutionListBase<IkReal>& solutions) {
for(int rotationiter = 0; rotationiter < 1; ++rotationiter) {
IkReal x74=((IkReal(1.00000000000000))*(sj30));
IkReal x75=((IkReal(1.00000000000000))*(sj31));
IkReal x76=((cj31)*(r10));
IkReal x77=((cj30)*(sj29));
IkReal x78=((cj31)*(r20));
IkReal x79=((cj31)*(r00));
IkReal x80=((r21)*(x75));
IkReal x81=((((IkReal(-1.00000000000000))*(sj29)*(x74)))+(((cj29)*(cj30))));
IkReal x82=((((cj29)*(sj30)))+(x77));
IkReal x83=((cj31)*(x81));
IkReal x84=((((IkReal(-1.00000000000000))*(cj29)*(x74)))+(((IkReal(-1.00000000000000))*(x77))));
new_r00=((((IkReal(-1.00000000000000))*(r01)*(x75)*(x84)))+(((x79)*(x84)))+(((r02)*(x81))));
new_r01=((((r12)*(x81)))+(((IkReal(-1.00000000000000))*(r11)*(x75)*(x84)))+(((x76)*(x84))));
new_r02=((((IkReal(-1.00000000000000))*(x80)*(x84)))+(((x78)*(x84)))+(((r22)*(x81))));
new_r10=((((IkReal(-1.00000000000000))*(r01)*(x75)*(x81)))+(((x79)*(x81)))+(((r02)*(x82))));
new_r11=((((r12)*(x82)))+(((IkReal(-1.00000000000000))*(r11)*(x75)*(x81)))+(((x76)*(x81))));
new_r12=((((IkReal(-1.00000000000000))*(x80)*(x81)))+(((x78)*(x81)))+(((r22)*(x82))));
new_r20=((((r00)*(sj31)))+(((cj31)*(r01))));
new_r21=((((cj31)*(r11)))+(((r10)*(sj31))));
new_r22=((((r20)*(sj31)))+(((cj31)*(r21))));
{
IkReal j27array[2], cj27array[2], sj27array[2];
bool j27valid[2]={false};
_nj27 = 2;
sj27array[0]=new_r22;
if( sj27array[0] >= -1-IKFAST_SINCOS_THRESH && sj27array[0] <= 1+IKFAST_SINCOS_THRESH )
{
    j27valid[0] = j27valid[1] = true;
    j27array[0] = IKasin(sj27array[0]);
    cj27array[0] = IKcos(j27array[0]);
    sj27array[1] = sj27array[0];
    j27array[1] = j27array[0] > 0 ? (IKPI-j27array[0]) : (-IKPI-j27array[0]);
    cj27array[1] = -cj27array[0];
}
else if( isnan(sj27array[0]) )
{
    // probably any value will work
    j27valid[0] = true;
    cj27array[0] = 1; sj27array[0] = 0; j27array[0] = 0;
}
for(int ij27 = 0; ij27 < 2; ++ij27)
{
if( !j27valid[ij27] )
{
    continue;
}
_ij27[0] = ij27; _ij27[1] = -1;
for(int iij27 = ij27+1; iij27 < 2; ++iij27)
{
if( j27valid[iij27] && IKabs(cj27array[ij27]-cj27array[iij27]) < IKFAST_SOLUTION_THRESH && IKabs(sj27array[ij27]-sj27array[iij27]) < IKFAST_SOLUTION_THRESH )
{
    j27valid[iij27]=false; _ij27[1] = iij27; break; 
}
}
j27 = j27array[ij27]; cj27 = cj27array[ij27]; sj27 = sj27array[ij27];

{
IkReal dummyeval[1];
IkReal gconst2;
gconst2=IKsign(cj27);
dummyeval[0]=cj27;
if( IKabs(dummyeval[0]) < 0.0000010000000000  )
{
{
IkReal dummyeval[1];
IkReal gconst3;
gconst3=IKsign(((((IkReal(-1.00000000000000))*((new_r02)*(new_r02))))+(((IkReal(-1.00000000000000))*((new_r12)*(new_r12))))));
dummyeval[0]=((((IkReal(-1.00000000000000))*((new_r02)*(new_r02))))+(((IkReal(-1.00000000000000))*((new_r12)*(new_r12)))));
if( IKabs(dummyeval[0]) < 0.0000010000000000  )
{
{
IkReal dummyeval[1];
IkReal gconst4;
gconst4=IKsign(((((sj27)*((new_r02)*(new_r02))))+(((sj27)*((new_r12)*(new_r12))))));
dummyeval[0]=((((sj27)*((new_r02)*(new_r02))))+(((sj27)*((new_r12)*(new_r12)))));
if( IKabs(dummyeval[0]) < 0.0000010000000000  )
{
{
IkReal evalcond[7];
evalcond[0]=((IkReal(-3.14159265358979))+(IKfmod(((IkReal(3.14159265358979))+(j27)), IkReal(6.28318530717959))));
evalcond[1]=new_r22;
evalcond[2]=new_r22;
if( IKabs(evalcond[0]) < 0.0000010000000000  && IKabs(evalcond[1]) < 0.0000010000000000  && IKabs(evalcond[2]) < 0.0000010000000000  )
{
{
IkReal j26array[1], cj26array[1], sj26array[1];
bool j26valid[1]={false};
_nj26 = 1;
if( IKabs(((IkReal(-1.00000000000000))*(new_r20))) < IKFAST_ATAN2_MAGTHRESH && IKabs(new_r21) < IKFAST_ATAN2_MAGTHRESH && IKabs(IKsqr(((IkReal(-1.00000000000000))*(new_r20)))+IKsqr(new_r21)-1) <= IKFAST_SINCOS_THRESH )
    continue;
j26array[0]=IKatan2(((IkReal(-1.00000000000000))*(new_r20)), new_r21);
sj26array[0]=IKsin(j26array[0]);
cj26array[0]=IKcos(j26array[0]);
if( j26array[0] > IKPI )
{
    j26array[0]-=IK2PI;
}
else if( j26array[0] < -IKPI )
{    j26array[0]+=IK2PI;
}
j26valid[0] = true;
for(int ij26 = 0; ij26 < 1; ++ij26)
{
if( !j26valid[ij26] )
{
    continue;
}
_ij26[0] = ij26; _ij26[1] = -1;
for(int iij26 = ij26+1; iij26 < 1; ++iij26)
{
if( j26valid[iij26] && IKabs(cj26array[ij26]-cj26array[iij26]) < IKFAST_SOLUTION_THRESH && IKabs(sj26array[ij26]-sj26array[iij26]) < IKFAST_SOLUTION_THRESH )
{
    j26valid[iij26]=false; _ij26[1] = iij26; break; 
}
}
j26 = j26array[ij26]; cj26 = cj26array[ij26]; sj26 = sj26array[ij26];
{
IkReal evalcond[2];
evalcond[0]=((new_r20)+(IKsin(j26)));
evalcond[1]=((((IkReal(-1.00000000000000))*(IKcos(j26))))+(new_r21));
if( IKabs(evalcond[0]) > 0.000001  || IKabs(evalcond[1]) > 0.000001  )
{
continue;
}
}

{
IkReal dummyeval[1];
IkReal gconst10;
gconst10=IKsign(((((new_r00)*(new_r12)))+(((IkReal(-1.00000000000000))*(new_r02)*(new_r10)))));
dummyeval[0]=((((new_r00)*(new_r12)))+(((IkReal(-1.00000000000000))*(new_r02)*(new_r10))));
if( IKabs(dummyeval[0]) < 0.0000010000000000  )
{
{
IkReal dummyeval[1];
IkReal gconst11;
gconst11=IKsign(((((new_r01)*(new_r12)))+(((IkReal(-1.00000000000000))*(new_r02)*(new_r11)))));
dummyeval[0]=((((new_r01)*(new_r12)))+(((IkReal(-1.00000000000000))*(new_r02)*(new_r11))));
if( IKabs(dummyeval[0]) < 0.0000010000000000  )
{
continue;

} else
{
{
IkReal j28array[1], cj28array[1], sj28array[1];
bool j28valid[1]={false};
_nj28 = 1;
if( IKabs(((gconst11)*(new_r11))) < IKFAST_ATAN2_MAGTHRESH && IKabs(((IkReal(-1.00000000000000))*(gconst11)*(new_r01))) < IKFAST_ATAN2_MAGTHRESH )
    continue;
j28array[0]=IKatan2(((gconst11)*(new_r11)), ((IkReal(-1.00000000000000))*(gconst11)*(new_r01)));
sj28array[0]=IKsin(j28array[0]);
cj28array[0]=IKcos(j28array[0]);
if( j28array[0] > IKPI )
{
    j28array[0]-=IK2PI;
}
else if( j28array[0] < -IKPI )
{    j28array[0]+=IK2PI;
}
j28valid[0] = true;
for(int ij28 = 0; ij28 < 1; ++ij28)
{
if( !j28valid[ij28] )
{
    continue;
}
_ij28[0] = ij28; _ij28[1] = -1;
for(int iij28 = ij28+1; iij28 < 1; ++iij28)
{
if( j28valid[iij28] && IKabs(cj28array[ij28]-cj28array[iij28]) < IKFAST_SOLUTION_THRESH && IKabs(sj28array[ij28]-sj28array[iij28]) < IKFAST_SOLUTION_THRESH )
{
    j28valid[iij28]=false; _ij28[1] = iij28; break; 
}
}
j28 = j28array[ij28]; cj28 = cj28array[ij28]; sj28 = sj28array[ij28];
{
IkReal evalcond[6];
IkReal x85=IKsin(j28);
IkReal x86=IKcos(j28);
IkReal x87=((IkReal(1.00000000000000))*(x85));
evalcond[0]=((((new_r02)*(x86)))+(((IkReal(-1.00000000000000))*(new_r12)*(x87))));
evalcond[1]=((IkReal(1.00000000000000))+(((new_r12)*(x86)))+(((new_r02)*(x85))));
evalcond[2]=((((new_r00)*(x86)))+(((IkReal(-1.00000000000000))*(cj26)))+(((IkReal(-1.00000000000000))*(new_r10)*(x87))));
evalcond[3]=((((IkReal(-1.00000000000000))*(new_r11)*(x87)))+(((new_r01)*(x86)))+(((IkReal(-1.00000000000000))*(sj26))));
evalcond[4]=((((new_r00)*(x85)))+(((new_r10)*(x86))));
evalcond[5]=((((new_r01)*(x85)))+(((new_r11)*(x86))));
if( IKabs(evalcond[0]) > 0.000001  || IKabs(evalcond[1]) > 0.000001  || IKabs(evalcond[2]) > 0.000001  || IKabs(evalcond[3]) > 0.000001  || IKabs(evalcond[4]) > 0.000001  || IKabs(evalcond[5]) > 0.000001  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j26;
vinfos[0].indices[0] = _ij26[0];
vinfos[0].indices[1] = _ij26[1];
vinfos[0].maxsolutions = _nj26;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j27;
vinfos[1].indices[0] = _ij27[0];
vinfos[1].indices[1] = _ij27[1];
vinfos[1].maxsolutions = _nj27;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j28;
vinfos[2].indices[0] = _ij28[0];
vinfos[2].indices[1] = _ij28[1];
vinfos[2].maxsolutions = _nj28;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j29;
vinfos[3].indices[0] = _ij29[0];
vinfos[3].indices[1] = _ij29[1];
vinfos[3].maxsolutions = _nj29;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j30;
vinfos[4].indices[0] = _ij30[0];
vinfos[4].indices[1] = _ij30[1];
vinfos[4].maxsolutions = _nj30;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j31;
vinfos[5].indices[0] = _ij31[0];
vinfos[5].indices[1] = _ij31[1];
vinfos[5].maxsolutions = _nj31;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j28array[1], cj28array[1], sj28array[1];
bool j28valid[1]={false};
_nj28 = 1;
if( IKabs(((gconst10)*(new_r10))) < IKFAST_ATAN2_MAGTHRESH && IKabs(((IkReal(-1.00000000000000))*(gconst10)*(new_r00))) < IKFAST_ATAN2_MAGTHRESH )
    continue;
j28array[0]=IKatan2(((gconst10)*(new_r10)), ((IkReal(-1.00000000000000))*(gconst10)*(new_r00)));
sj28array[0]=IKsin(j28array[0]);
cj28array[0]=IKcos(j28array[0]);
if( j28array[0] > IKPI )
{
    j28array[0]-=IK2PI;
}
else if( j28array[0] < -IKPI )
{    j28array[0]+=IK2PI;
}
j28valid[0] = true;
for(int ij28 = 0; ij28 < 1; ++ij28)
{
if( !j28valid[ij28] )
{
    continue;
}
_ij28[0] = ij28; _ij28[1] = -1;
for(int iij28 = ij28+1; iij28 < 1; ++iij28)
{
if( j28valid[iij28] && IKabs(cj28array[ij28]-cj28array[iij28]) < IKFAST_SOLUTION_THRESH && IKabs(sj28array[ij28]-sj28array[iij28]) < IKFAST_SOLUTION_THRESH )
{
    j28valid[iij28]=false; _ij28[1] = iij28; break; 
}
}
j28 = j28array[ij28]; cj28 = cj28array[ij28]; sj28 = sj28array[ij28];
{
IkReal evalcond[6];
IkReal x88=IKsin(j28);
IkReal x89=IKcos(j28);
IkReal x90=((IkReal(1.00000000000000))*(x88));
evalcond[0]=((((new_r02)*(x89)))+(((IkReal(-1.00000000000000))*(new_r12)*(x90))));
evalcond[1]=((IkReal(1.00000000000000))+(((new_r12)*(x89)))+(((new_r02)*(x88))));
evalcond[2]=((((IkReal(-1.00000000000000))*(new_r10)*(x90)))+(((new_r00)*(x89)))+(((IkReal(-1.00000000000000))*(cj26))));
evalcond[3]=((((IkReal(-1.00000000000000))*(new_r11)*(x90)))+(((new_r01)*(x89)))+(((IkReal(-1.00000000000000))*(sj26))));
evalcond[4]=((((new_r00)*(x88)))+(((new_r10)*(x89))));
evalcond[5]=((((new_r01)*(x88)))+(((new_r11)*(x89))));
if( IKabs(evalcond[0]) > 0.000001  || IKabs(evalcond[1]) > 0.000001  || IKabs(evalcond[2]) > 0.000001  || IKabs(evalcond[3]) > 0.000001  || IKabs(evalcond[4]) > 0.000001  || IKabs(evalcond[5]) > 0.000001  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j26;
vinfos[0].indices[0] = _ij26[0];
vinfos[0].indices[1] = _ij26[1];
vinfos[0].maxsolutions = _nj26;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j27;
vinfos[1].indices[0] = _ij27[0];
vinfos[1].indices[1] = _ij27[1];
vinfos[1].maxsolutions = _nj27;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j28;
vinfos[2].indices[0] = _ij28[0];
vinfos[2].indices[1] = _ij28[1];
vinfos[2].maxsolutions = _nj28;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j29;
vinfos[3].indices[0] = _ij29[0];
vinfos[3].indices[1] = _ij29[1];
vinfos[3].maxsolutions = _nj29;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j30;
vinfos[4].indices[0] = _ij30[0];
vinfos[4].indices[1] = _ij30[1];
vinfos[4].maxsolutions = _nj30;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j31;
vinfos[5].indices[0] = _ij31[0];
vinfos[5].indices[1] = _ij31[1];
vinfos[5].maxsolutions = _nj31;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}
}
}

} else
{
evalcond[0]=((IkReal(-3.14159265358979))+(IKfmod(j27, IkReal(6.28318530717959))));
evalcond[1]=new_r22;
evalcond[2]=((IkReal(-1.00000000000000))*(new_r22));
if( IKabs(evalcond[0]) < 0.0000010000000000  && IKabs(evalcond[1]) < 0.0000010000000000  && IKabs(evalcond[2]) < 0.0000010000000000  )
{
{
IkReal j26array[1], cj26array[1], sj26array[1];
bool j26valid[1]={false};
_nj26 = 1;
if( IKabs(new_r20) < IKFAST_ATAN2_MAGTHRESH && IKabs(((IkReal(-1.00000000000000))*(new_r21))) < IKFAST_ATAN2_MAGTHRESH && IKabs(IKsqr(new_r20)+IKsqr(((IkReal(-1.00000000000000))*(new_r21)))-1) <= IKFAST_SINCOS_THRESH )
    continue;
j26array[0]=IKatan2(new_r20, ((IkReal(-1.00000000000000))*(new_r21)));
sj26array[0]=IKsin(j26array[0]);
cj26array[0]=IKcos(j26array[0]);
if( j26array[0] > IKPI )
{
    j26array[0]-=IK2PI;
}
else if( j26array[0] < -IKPI )
{    j26array[0]+=IK2PI;
}
j26valid[0] = true;
for(int ij26 = 0; ij26 < 1; ++ij26)
{
if( !j26valid[ij26] )
{
    continue;
}
_ij26[0] = ij26; _ij26[1] = -1;
for(int iij26 = ij26+1; iij26 < 1; ++iij26)
{
if( j26valid[iij26] && IKabs(cj26array[ij26]-cj26array[iij26]) < IKFAST_SOLUTION_THRESH && IKabs(sj26array[ij26]-sj26array[iij26]) < IKFAST_SOLUTION_THRESH )
{
    j26valid[iij26]=false; _ij26[1] = iij26; break; 
}
}
j26 = j26array[ij26]; cj26 = cj26array[ij26]; sj26 = sj26array[ij26];
{
IkReal evalcond[2];
evalcond[0]=((((IkReal(-1.00000000000000))*(IKsin(j26))))+(new_r20));
evalcond[1]=((IKcos(j26))+(new_r21));
if( IKabs(evalcond[0]) > 0.000001  || IKabs(evalcond[1]) > 0.000001  )
{
continue;
}
}

{
IkReal dummyeval[1];
IkReal gconst14;
gconst14=IKsign(((((IkReal(-1.00000000000000))*(new_r00)*(new_r12)))+(((new_r02)*(new_r10)))));
dummyeval[0]=((((IkReal(-1.00000000000000))*(new_r00)*(new_r12)))+(((new_r02)*(new_r10))));
if( IKabs(dummyeval[0]) < 0.0000010000000000  )
{
{
IkReal dummyeval[1];
IkReal gconst15;
gconst15=IKsign(((((IkReal(-1.00000000000000))*(new_r01)*(new_r12)))+(((new_r02)*(new_r11)))));
dummyeval[0]=((((IkReal(-1.00000000000000))*(new_r01)*(new_r12)))+(((new_r02)*(new_r11))));
if( IKabs(dummyeval[0]) < 0.0000010000000000  )
{
continue;

} else
{
{
IkReal j28array[1], cj28array[1], sj28array[1];
bool j28valid[1]={false};
_nj28 = 1;
if( IKabs(((gconst15)*(new_r11))) < IKFAST_ATAN2_MAGTHRESH && IKabs(((IkReal(-1.00000000000000))*(gconst15)*(new_r01))) < IKFAST_ATAN2_MAGTHRESH )
    continue;
j28array[0]=IKatan2(((gconst15)*(new_r11)), ((IkReal(-1.00000000000000))*(gconst15)*(new_r01)));
sj28array[0]=IKsin(j28array[0]);
cj28array[0]=IKcos(j28array[0]);
if( j28array[0] > IKPI )
{
    j28array[0]-=IK2PI;
}
else if( j28array[0] < -IKPI )
{    j28array[0]+=IK2PI;
}
j28valid[0] = true;
for(int ij28 = 0; ij28 < 1; ++ij28)
{
if( !j28valid[ij28] )
{
    continue;
}
_ij28[0] = ij28; _ij28[1] = -1;
for(int iij28 = ij28+1; iij28 < 1; ++iij28)
{
if( j28valid[iij28] && IKabs(cj28array[ij28]-cj28array[iij28]) < IKFAST_SOLUTION_THRESH && IKabs(sj28array[ij28]-sj28array[iij28]) < IKFAST_SOLUTION_THRESH )
{
    j28valid[iij28]=false; _ij28[1] = iij28; break; 
}
}
j28 = j28array[ij28]; cj28 = cj28array[ij28]; sj28 = sj28array[ij28];
{
IkReal evalcond[6];
IkReal x91=IKsin(j28);
IkReal x92=IKcos(j28);
IkReal x93=((IkReal(1.00000000000000))*(x91));
evalcond[0]=((((new_r02)*(x92)))+(((IkReal(-1.00000000000000))*(new_r12)*(x93))));
evalcond[1]=((IkReal(-1.00000000000000))+(((new_r02)*(x91)))+(((new_r12)*(x92))));
evalcond[2]=((((IkReal(-1.00000000000000))*(new_r10)*(x93)))+(((new_r00)*(x92)))+(((IkReal(-1.00000000000000))*(cj26))));
evalcond[3]=((((IkReal(-1.00000000000000))*(new_r11)*(x93)))+(((new_r01)*(x92)))+(((IkReal(-1.00000000000000))*(sj26))));
evalcond[4]=((((new_r00)*(x91)))+(((new_r10)*(x92))));
evalcond[5]=((((new_r01)*(x91)))+(((new_r11)*(x92))));
if( IKabs(evalcond[0]) > 0.000001  || IKabs(evalcond[1]) > 0.000001  || IKabs(evalcond[2]) > 0.000001  || IKabs(evalcond[3]) > 0.000001  || IKabs(evalcond[4]) > 0.000001  || IKabs(evalcond[5]) > 0.000001  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j26;
vinfos[0].indices[0] = _ij26[0];
vinfos[0].indices[1] = _ij26[1];
vinfos[0].maxsolutions = _nj26;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j27;
vinfos[1].indices[0] = _ij27[0];
vinfos[1].indices[1] = _ij27[1];
vinfos[1].maxsolutions = _nj27;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j28;
vinfos[2].indices[0] = _ij28[0];
vinfos[2].indices[1] = _ij28[1];
vinfos[2].maxsolutions = _nj28;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j29;
vinfos[3].indices[0] = _ij29[0];
vinfos[3].indices[1] = _ij29[1];
vinfos[3].maxsolutions = _nj29;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j30;
vinfos[4].indices[0] = _ij30[0];
vinfos[4].indices[1] = _ij30[1];
vinfos[4].maxsolutions = _nj30;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j31;
vinfos[5].indices[0] = _ij31[0];
vinfos[5].indices[1] = _ij31[1];
vinfos[5].maxsolutions = _nj31;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j28array[1], cj28array[1], sj28array[1];
bool j28valid[1]={false};
_nj28 = 1;
if( IKabs(((gconst14)*(new_r10))) < IKFAST_ATAN2_MAGTHRESH && IKabs(((IkReal(-1.00000000000000))*(gconst14)*(new_r00))) < IKFAST_ATAN2_MAGTHRESH )
    continue;
j28array[0]=IKatan2(((gconst14)*(new_r10)), ((IkReal(-1.00000000000000))*(gconst14)*(new_r00)));
sj28array[0]=IKsin(j28array[0]);
cj28array[0]=IKcos(j28array[0]);
if( j28array[0] > IKPI )
{
    j28array[0]-=IK2PI;
}
else if( j28array[0] < -IKPI )
{    j28array[0]+=IK2PI;
}
j28valid[0] = true;
for(int ij28 = 0; ij28 < 1; ++ij28)
{
if( !j28valid[ij28] )
{
    continue;
}
_ij28[0] = ij28; _ij28[1] = -1;
for(int iij28 = ij28+1; iij28 < 1; ++iij28)
{
if( j28valid[iij28] && IKabs(cj28array[ij28]-cj28array[iij28]) < IKFAST_SOLUTION_THRESH && IKabs(sj28array[ij28]-sj28array[iij28]) < IKFAST_SOLUTION_THRESH )
{
    j28valid[iij28]=false; _ij28[1] = iij28; break; 
}
}
j28 = j28array[ij28]; cj28 = cj28array[ij28]; sj28 = sj28array[ij28];
{
IkReal evalcond[6];
IkReal x94=IKsin(j28);
IkReal x95=IKcos(j28);
IkReal x96=((IkReal(1.00000000000000))*(x94));
evalcond[0]=((((new_r02)*(x95)))+(((IkReal(-1.00000000000000))*(new_r12)*(x96))));
evalcond[1]=((IkReal(-1.00000000000000))+(((new_r02)*(x94)))+(((new_r12)*(x95))));
evalcond[2]=((((IkReal(-1.00000000000000))*(new_r10)*(x96)))+(((new_r00)*(x95)))+(((IkReal(-1.00000000000000))*(cj26))));
evalcond[3]=((((IkReal(-1.00000000000000))*(new_r11)*(x96)))+(((new_r01)*(x95)))+(((IkReal(-1.00000000000000))*(sj26))));
evalcond[4]=((((new_r00)*(x94)))+(((new_r10)*(x95))));
evalcond[5]=((((new_r01)*(x94)))+(((new_r11)*(x95))));
if( IKabs(evalcond[0]) > 0.000001  || IKabs(evalcond[1]) > 0.000001  || IKabs(evalcond[2]) > 0.000001  || IKabs(evalcond[3]) > 0.000001  || IKabs(evalcond[4]) > 0.000001  || IKabs(evalcond[5]) > 0.000001  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j26;
vinfos[0].indices[0] = _ij26[0];
vinfos[0].indices[1] = _ij26[1];
vinfos[0].maxsolutions = _nj26;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j27;
vinfos[1].indices[0] = _ij27[0];
vinfos[1].indices[1] = _ij27[1];
vinfos[1].maxsolutions = _nj27;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j28;
vinfos[2].indices[0] = _ij28[0];
vinfos[2].indices[1] = _ij28[1];
vinfos[2].maxsolutions = _nj28;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j29;
vinfos[3].indices[0] = _ij29[0];
vinfos[3].indices[1] = _ij29[1];
vinfos[3].maxsolutions = _nj29;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j30;
vinfos[4].indices[0] = _ij30[0];
vinfos[4].indices[1] = _ij30[1];
vinfos[4].maxsolutions = _nj30;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j31;
vinfos[5].indices[0] = _ij31[0];
vinfos[5].indices[1] = _ij31[1];
vinfos[5].maxsolutions = _nj31;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}
}
}

} else
{
evalcond[0]=((IkReal(-3.14159265358979))+(IKfmod(((IkReal(1.57079632679490))+(j27)), IkReal(6.28318530717959))));
evalcond[1]=((IkReal(-1.00000000000000))+(new_r22));
evalcond[2]=new_r20;
evalcond[3]=new_r21;
evalcond[4]=((IkReal(-1.00000000000000))*(new_r20));
evalcond[5]=((IkReal(-1.00000000000000))*(new_r21));
evalcond[6]=((IkReal(1.00000000000000))+(((IkReal(-1.00000000000000))*(new_r22))));
if( IKabs(evalcond[0]) < 0.0000010000000000  && IKabs(evalcond[1]) < 0.0000010000000000  && IKabs(evalcond[2]) < 0.0000010000000000  && IKabs(evalcond[3]) < 0.0000010000000000  && IKabs(evalcond[4]) < 0.0000010000000000  && IKabs(evalcond[5]) < 0.0000010000000000  && IKabs(evalcond[6]) < 0.0000010000000000  )
{
{
IkReal j28array[2], cj28array[2], sj28array[2];
bool j28valid[2]={false};
_nj28 = 2;
if( IKabs(new_r12) < IKFAST_ATAN2_MAGTHRESH && IKabs(new_r02) < IKFAST_ATAN2_MAGTHRESH )
    continue;
IkReal x97=IKatan2(new_r12, new_r02);
j28array[0]=((IkReal(-1.00000000000000))*(x97));
sj28array[0]=IKsin(j28array[0]);
cj28array[0]=IKcos(j28array[0]);
j28array[1]=((IkReal(3.14159265358979))+(((IkReal(-1.00000000000000))*(x97))));
sj28array[1]=IKsin(j28array[1]);
cj28array[1]=IKcos(j28array[1]);
if( j28array[0] > IKPI )
{
    j28array[0]-=IK2PI;
}
else if( j28array[0] < -IKPI )
{    j28array[0]+=IK2PI;
}
j28valid[0] = true;
if( j28array[1] > IKPI )
{
    j28array[1]-=IK2PI;
}
else if( j28array[1] < -IKPI )
{    j28array[1]+=IK2PI;
}
j28valid[1] = true;
for(int ij28 = 0; ij28 < 2; ++ij28)
{
if( !j28valid[ij28] )
{
    continue;
}
_ij28[0] = ij28; _ij28[1] = -1;
for(int iij28 = ij28+1; iij28 < 2; ++iij28)
{
if( j28valid[iij28] && IKabs(cj28array[ij28]-cj28array[iij28]) < IKFAST_SOLUTION_THRESH && IKabs(sj28array[ij28]-sj28array[iij28]) < IKFAST_SOLUTION_THRESH )
{
    j28valid[iij28]=false; _ij28[1] = iij28; break; 
}
}
j28 = j28array[ij28]; cj28 = cj28array[ij28]; sj28 = sj28array[ij28];
{
IkReal evalcond[1];
evalcond[0]=((((new_r02)*(IKcos(j28))))+(((IkReal(-1.00000000000000))*(new_r12)*(IKsin(j28)))));
if( IKabs(evalcond[0]) > 0.000001  )
{
continue;
}
}

{
IkReal j26array[1], cj26array[1], sj26array[1];
bool j26valid[1]={false};
_nj26 = 1;
if( IKabs(((((IkReal(-1.00000000000000))*(new_r00)*(sj28)))+(((IkReal(-1.00000000000000))*(cj28)*(new_r10))))) < IKFAST_ATAN2_MAGTHRESH && IKabs(((((new_r01)*(sj28)))+(((cj28)*(new_r11))))) < IKFAST_ATAN2_MAGTHRESH && IKabs(IKsqr(((((IkReal(-1.00000000000000))*(new_r00)*(sj28)))+(((IkReal(-1.00000000000000))*(cj28)*(new_r10)))))+IKsqr(((((new_r01)*(sj28)))+(((cj28)*(new_r11)))))-1) <= IKFAST_SINCOS_THRESH )
    continue;
j26array[0]=IKatan2(((((IkReal(-1.00000000000000))*(new_r00)*(sj28)))+(((IkReal(-1.00000000000000))*(cj28)*(new_r10)))), ((((new_r01)*(sj28)))+(((cj28)*(new_r11)))));
sj26array[0]=IKsin(j26array[0]);
cj26array[0]=IKcos(j26array[0]);
if( j26array[0] > IKPI )
{
    j26array[0]-=IK2PI;
}
else if( j26array[0] < -IKPI )
{    j26array[0]+=IK2PI;
}
j26valid[0] = true;
for(int ij26 = 0; ij26 < 1; ++ij26)
{
if( !j26valid[ij26] )
{
    continue;
}
_ij26[0] = ij26; _ij26[1] = -1;
for(int iij26 = ij26+1; iij26 < 1; ++iij26)
{
if( j26valid[iij26] && IKabs(cj26array[ij26]-cj26array[iij26]) < IKFAST_SOLUTION_THRESH && IKabs(sj26array[ij26]-sj26array[iij26]) < IKFAST_SOLUTION_THRESH )
{
    j26valid[iij26]=false; _ij26[1] = iij26; break; 
}
}
j26 = j26array[ij26]; cj26 = cj26array[ij26]; sj26 = sj26array[ij26];
{
IkReal evalcond[4];
IkReal x98=IKsin(j26);
IkReal x99=((IkReal(1.00000000000000))*(sj28));
IkReal x100=((IkReal(1.00000000000000))*(IKcos(j26)));
evalcond[0]=((((IkReal(-1.00000000000000))*(new_r10)*(x99)))+(((IkReal(-1.00000000000000))*(x100)))+(((cj28)*(new_r00))));
evalcond[1]=((((IkReal(-1.00000000000000))*(new_r11)*(x99)))+(((IkReal(-1.00000000000000))*(x98)))+(((cj28)*(new_r01))));
evalcond[2]=((((new_r00)*(sj28)))+(x98)+(((cj28)*(new_r10))));
evalcond[3]=((((new_r01)*(sj28)))+(((IkReal(-1.00000000000000))*(x100)))+(((cj28)*(new_r11))));
if( IKabs(evalcond[0]) > 0.000001  || IKabs(evalcond[1]) > 0.000001  || IKabs(evalcond[2]) > 0.000001  || IKabs(evalcond[3]) > 0.000001  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j26;
vinfos[0].indices[0] = _ij26[0];
vinfos[0].indices[1] = _ij26[1];
vinfos[0].maxsolutions = _nj26;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j27;
vinfos[1].indices[0] = _ij27[0];
vinfos[1].indices[1] = _ij27[1];
vinfos[1].maxsolutions = _nj27;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j28;
vinfos[2].indices[0] = _ij28[0];
vinfos[2].indices[1] = _ij28[1];
vinfos[2].maxsolutions = _nj28;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j29;
vinfos[3].indices[0] = _ij29[0];
vinfos[3].indices[1] = _ij29[1];
vinfos[3].maxsolutions = _nj29;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j30;
vinfos[4].indices[0] = _ij30[0];
vinfos[4].indices[1] = _ij30[1];
vinfos[4].maxsolutions = _nj30;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j31;
vinfos[5].indices[0] = _ij31[0];
vinfos[5].indices[1] = _ij31[1];
vinfos[5].maxsolutions = _nj31;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}
}
}

} else
{
IkReal x101=((IkReal(1.00000000000000))+(new_r22));
evalcond[0]=((IkReal(-3.14159265358979))+(IKfmod(((IkReal(4.71238898038469))+(j27)), IkReal(6.28318530717959))));
evalcond[1]=x101;
evalcond[2]=new_r20;
evalcond[3]=new_r21;
evalcond[4]=new_r20;
evalcond[5]=new_r21;
evalcond[6]=x101;
if( IKabs(evalcond[0]) < 0.0000010000000000  && IKabs(evalcond[1]) < 0.0000010000000000  && IKabs(evalcond[2]) < 0.0000010000000000  && IKabs(evalcond[3]) < 0.0000010000000000  && IKabs(evalcond[4]) < 0.0000010000000000  && IKabs(evalcond[5]) < 0.0000010000000000  && IKabs(evalcond[6]) < 0.0000010000000000  )
{
{
IkReal j28array[2], cj28array[2], sj28array[2];
bool j28valid[2]={false};
_nj28 = 2;
if( IKabs(new_r12) < IKFAST_ATAN2_MAGTHRESH && IKabs(new_r02) < IKFAST_ATAN2_MAGTHRESH )
    continue;
IkReal x102=IKatan2(new_r12, new_r02);
j28array[0]=((IkReal(-1.00000000000000))*(x102));
sj28array[0]=IKsin(j28array[0]);
cj28array[0]=IKcos(j28array[0]);
j28array[1]=((IkReal(3.14159265358979))+(((IkReal(-1.00000000000000))*(x102))));
sj28array[1]=IKsin(j28array[1]);
cj28array[1]=IKcos(j28array[1]);
if( j28array[0] > IKPI )
{
    j28array[0]-=IK2PI;
}
else if( j28array[0] < -IKPI )
{    j28array[0]+=IK2PI;
}
j28valid[0] = true;
if( j28array[1] > IKPI )
{
    j28array[1]-=IK2PI;
}
else if( j28array[1] < -IKPI )
{    j28array[1]+=IK2PI;
}
j28valid[1] = true;
for(int ij28 = 0; ij28 < 2; ++ij28)
{
if( !j28valid[ij28] )
{
    continue;
}
_ij28[0] = ij28; _ij28[1] = -1;
for(int iij28 = ij28+1; iij28 < 2; ++iij28)
{
if( j28valid[iij28] && IKabs(cj28array[ij28]-cj28array[iij28]) < IKFAST_SOLUTION_THRESH && IKabs(sj28array[ij28]-sj28array[iij28]) < IKFAST_SOLUTION_THRESH )
{
    j28valid[iij28]=false; _ij28[1] = iij28; break; 
}
}
j28 = j28array[ij28]; cj28 = cj28array[ij28]; sj28 = sj28array[ij28];
{
IkReal evalcond[1];
evalcond[0]=((((new_r02)*(IKcos(j28))))+(((IkReal(-1.00000000000000))*(new_r12)*(IKsin(j28)))));
if( IKabs(evalcond[0]) > 0.000001  )
{
continue;
}
}

{
IkReal j26array[1], cj26array[1], sj26array[1];
bool j26valid[1]={false};
_nj26 = 1;
if( IKabs(((((new_r00)*(sj28)))+(((cj28)*(new_r10))))) < IKFAST_ATAN2_MAGTHRESH && IKabs(((((IkReal(-1.00000000000000))*(new_r01)*(sj28)))+(((IkReal(-1.00000000000000))*(cj28)*(new_r11))))) < IKFAST_ATAN2_MAGTHRESH && IKabs(IKsqr(((((new_r00)*(sj28)))+(((cj28)*(new_r10)))))+IKsqr(((((IkReal(-1.00000000000000))*(new_r01)*(sj28)))+(((IkReal(-1.00000000000000))*(cj28)*(new_r11)))))-1) <= IKFAST_SINCOS_THRESH )
    continue;
j26array[0]=IKatan2(((((new_r00)*(sj28)))+(((cj28)*(new_r10)))), ((((IkReal(-1.00000000000000))*(new_r01)*(sj28)))+(((IkReal(-1.00000000000000))*(cj28)*(new_r11)))));
sj26array[0]=IKsin(j26array[0]);
cj26array[0]=IKcos(j26array[0]);
if( j26array[0] > IKPI )
{
    j26array[0]-=IK2PI;
}
else if( j26array[0] < -IKPI )
{    j26array[0]+=IK2PI;
}
j26valid[0] = true;
for(int ij26 = 0; ij26 < 1; ++ij26)
{
if( !j26valid[ij26] )
{
    continue;
}
_ij26[0] = ij26; _ij26[1] = -1;
for(int iij26 = ij26+1; iij26 < 1; ++iij26)
{
if( j26valid[iij26] && IKabs(cj26array[ij26]-cj26array[iij26]) < IKFAST_SOLUTION_THRESH && IKabs(sj26array[ij26]-sj26array[iij26]) < IKFAST_SOLUTION_THRESH )
{
    j26valid[iij26]=false; _ij26[1] = iij26; break; 
}
}
j26 = j26array[ij26]; cj26 = cj26array[ij26]; sj26 = sj26array[ij26];
{
IkReal evalcond[4];
IkReal x103=IKcos(j26);
IkReal x104=((IkReal(1.00000000000000))*(sj28));
IkReal x105=((IkReal(1.00000000000000))*(IKsin(j26)));
evalcond[0]=((((IkReal(-1.00000000000000))*(new_r10)*(x104)))+(((cj28)*(new_r00)))+(((IkReal(-1.00000000000000))*(x103))));
evalcond[1]=((((IkReal(-1.00000000000000))*(new_r11)*(x104)))+(((IkReal(-1.00000000000000))*(x105)))+(((cj28)*(new_r01))));
evalcond[2]=((((new_r00)*(sj28)))+(((IkReal(-1.00000000000000))*(x105)))+(((cj28)*(new_r10))));
evalcond[3]=((((new_r01)*(sj28)))+(x103)+(((cj28)*(new_r11))));
if( IKabs(evalcond[0]) > 0.000001  || IKabs(evalcond[1]) > 0.000001  || IKabs(evalcond[2]) > 0.000001  || IKabs(evalcond[3]) > 0.000001  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j26;
vinfos[0].indices[0] = _ij26[0];
vinfos[0].indices[1] = _ij26[1];
vinfos[0].maxsolutions = _nj26;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j27;
vinfos[1].indices[0] = _ij27[0];
vinfos[1].indices[1] = _ij27[1];
vinfos[1].maxsolutions = _nj27;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j28;
vinfos[2].indices[0] = _ij28[0];
vinfos[2].indices[1] = _ij28[1];
vinfos[2].maxsolutions = _nj28;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j29;
vinfos[3].indices[0] = _ij29[0];
vinfos[3].indices[1] = _ij29[1];
vinfos[3].maxsolutions = _nj29;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j30;
vinfos[4].indices[0] = _ij30[0];
vinfos[4].indices[1] = _ij30[1];
vinfos[4].maxsolutions = _nj30;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j31;
vinfos[5].indices[0] = _ij31[0];
vinfos[5].indices[1] = _ij31[1];
vinfos[5].maxsolutions = _nj31;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}
}
}

} else
{
if( 1 )
{
continue;

} else
{
}
}
}
}
}
}

} else
{
{
IkReal j28array[1], cj28array[1], sj28array[1];
bool j28valid[1]={false};
_nj28 = 1;
IkReal x106=((IkReal(-1.00000000000000))*(cj27)*(gconst4)*(new_r22));
if( IKabs(((new_r02)*(x106))) < IKFAST_ATAN2_MAGTHRESH && IKabs(((new_r12)*(x106))) < IKFAST_ATAN2_MAGTHRESH )
    continue;
j28array[0]=IKatan2(((new_r02)*(x106)), ((new_r12)*(x106)));
sj28array[0]=IKsin(j28array[0]);
cj28array[0]=IKcos(j28array[0]);
if( j28array[0] > IKPI )
{
    j28array[0]-=IK2PI;
}
else if( j28array[0] < -IKPI )
{    j28array[0]+=IK2PI;
}
j28valid[0] = true;
for(int ij28 = 0; ij28 < 1; ++ij28)
{
if( !j28valid[ij28] )
{
    continue;
}
_ij28[0] = ij28; _ij28[1] = -1;
for(int iij28 = ij28+1; iij28 < 1; ++iij28)
{
if( j28valid[iij28] && IKabs(cj28array[ij28]-cj28array[iij28]) < IKFAST_SOLUTION_THRESH && IKabs(sj28array[ij28]-sj28array[iij28]) < IKFAST_SOLUTION_THRESH )
{
    j28valid[iij28]=false; _ij28[1] = iij28; break; 
}
}
j28 = j28array[ij28]; cj28 = cj28array[ij28]; sj28 = sj28array[ij28];
{
IkReal evalcond[6];
IkReal x107=IKsin(j28);
IkReal x108=IKcos(j28);
IkReal x109=((IkReal(1.00000000000000))*(sj27));
IkReal x110=((cj27)*(x107));
IkReal x111=((cj27)*(x108));
IkReal x112=((new_r12)*(x108));
IkReal x113=((new_r02)*(x107));
evalcond[0]=((((IkReal(-1.00000000000000))*(new_r12)*(x107)))+(((new_r02)*(x108))));
evalcond[1]=((x113)+(x112)+(cj27));
evalcond[2]=((((sj27)*(x112)))+(((sj27)*(x113)))+(((cj27)*(new_r22))));
evalcond[3]=((((new_r10)*(x111)))+(((IkReal(-1.00000000000000))*(new_r20)*(x109)))+(((new_r00)*(x110))));
evalcond[4]=((((new_r11)*(x111)))+(((new_r01)*(x110)))+(((IkReal(-1.00000000000000))*(new_r21)*(x109))));
evalcond[5]=((IkReal(1.00000000000000))+(((IkReal(-1.00000000000000))*(new_r22)*(x109)))+(((new_r02)*(x110)))+(((new_r12)*(x111))));
if( IKabs(evalcond[0]) > 0.000001  || IKabs(evalcond[1]) > 0.000001  || IKabs(evalcond[2]) > 0.000001  || IKabs(evalcond[3]) > 0.000001  || IKabs(evalcond[4]) > 0.000001  || IKabs(evalcond[5]) > 0.000001  )
{
continue;
}
}

{
IkReal dummyeval[1];
IkReal gconst5;
gconst5=IKsign(cj27);
dummyeval[0]=cj27;
if( IKabs(dummyeval[0]) < 0.0000010000000000  )
{
{
IkReal dummyeval[1];
dummyeval[0]=cj27;
if( IKabs(dummyeval[0]) < 0.0000010000000000  )
{
{
IkReal dummyeval[2];
dummyeval[0]=cj27;
dummyeval[1]=sj27;
if( IKabs(dummyeval[0]) < 0.0000010000000000  || IKabs(dummyeval[1]) < 0.0000010000000000  )
{
{
IkReal evalcond[11];
IkReal x114=((((cj28)*(new_r02)))+(((IkReal(-1.00000000000000))*(new_r12)*(sj28))));
IkReal x115=((((cj28)*(new_r12)))+(((new_r02)*(sj28))));
evalcond[0]=((IkReal(-3.14159265358979))+(IKfmod(((IkReal(1.57079632679490))+(j27)), IkReal(6.28318530717959))));
evalcond[1]=((IkReal(-1.00000000000000))+(new_r22));
evalcond[2]=new_r20;
evalcond[3]=new_r21;
evalcond[4]=x114;
evalcond[5]=x114;
evalcond[6]=x115;
evalcond[7]=x115;
evalcond[8]=((IkReal(-1.00000000000000))*(new_r20));
evalcond[9]=((IkReal(-1.00000000000000))*(new_r21));
evalcond[10]=((IkReal(1.00000000000000))+(((IkReal(-1.00000000000000))*(new_r22))));
if( IKabs(evalcond[0]) < 0.0000010000000000  && IKabs(evalcond[1]) < 0.0000010000000000  && IKabs(evalcond[2]) < 0.0000010000000000  && IKabs(evalcond[3]) < 0.0000010000000000  && IKabs(evalcond[4]) < 0.0000010000000000  && IKabs(evalcond[5]) < 0.0000010000000000  && IKabs(evalcond[6]) < 0.0000010000000000  && IKabs(evalcond[7]) < 0.0000010000000000  && IKabs(evalcond[8]) < 0.0000010000000000  && IKabs(evalcond[9]) < 0.0000010000000000  && IKabs(evalcond[10]) < 0.0000010000000000  )
{
{
IkReal j26array[1], cj26array[1], sj26array[1];
bool j26valid[1]={false};
_nj26 = 1;
if( IKabs(((((IkReal(-1.00000000000000))*(new_r00)*(sj28)))+(((IkReal(-1.00000000000000))*(cj28)*(new_r10))))) < IKFAST_ATAN2_MAGTHRESH && IKabs(((((new_r01)*(sj28)))+(((cj28)*(new_r11))))) < IKFAST_ATAN2_MAGTHRESH && IKabs(IKsqr(((((IkReal(-1.00000000000000))*(new_r00)*(sj28)))+(((IkReal(-1.00000000000000))*(cj28)*(new_r10)))))+IKsqr(((((new_r01)*(sj28)))+(((cj28)*(new_r11)))))-1) <= IKFAST_SINCOS_THRESH )
    continue;
j26array[0]=IKatan2(((((IkReal(-1.00000000000000))*(new_r00)*(sj28)))+(((IkReal(-1.00000000000000))*(cj28)*(new_r10)))), ((((new_r01)*(sj28)))+(((cj28)*(new_r11)))));
sj26array[0]=IKsin(j26array[0]);
cj26array[0]=IKcos(j26array[0]);
if( j26array[0] > IKPI )
{
    j26array[0]-=IK2PI;
}
else if( j26array[0] < -IKPI )
{    j26array[0]+=IK2PI;
}
j26valid[0] = true;
for(int ij26 = 0; ij26 < 1; ++ij26)
{
if( !j26valid[ij26] )
{
    continue;
}
_ij26[0] = ij26; _ij26[1] = -1;
for(int iij26 = ij26+1; iij26 < 1; ++iij26)
{
if( j26valid[iij26] && IKabs(cj26array[ij26]-cj26array[iij26]) < IKFAST_SOLUTION_THRESH && IKabs(sj26array[ij26]-sj26array[iij26]) < IKFAST_SOLUTION_THRESH )
{
    j26valid[iij26]=false; _ij26[1] = iij26; break; 
}
}
j26 = j26array[ij26]; cj26 = cj26array[ij26]; sj26 = sj26array[ij26];
{
IkReal evalcond[4];
IkReal x116=IKsin(j26);
IkReal x117=((IkReal(1.00000000000000))*(sj28));
IkReal x118=((IkReal(1.00000000000000))*(IKcos(j26)));
evalcond[0]=((((IkReal(-1.00000000000000))*(new_r10)*(x117)))+(((IkReal(-1.00000000000000))*(x118)))+(((cj28)*(new_r00))));
evalcond[1]=((((IkReal(-1.00000000000000))*(new_r11)*(x117)))+(((cj28)*(new_r01)))+(((IkReal(-1.00000000000000))*(x116))));
evalcond[2]=((((new_r00)*(sj28)))+(x116)+(((cj28)*(new_r10))));
evalcond[3]=((((new_r01)*(sj28)))+(((IkReal(-1.00000000000000))*(x118)))+(((cj28)*(new_r11))));
if( IKabs(evalcond[0]) > 0.000001  || IKabs(evalcond[1]) > 0.000001  || IKabs(evalcond[2]) > 0.000001  || IKabs(evalcond[3]) > 0.000001  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j26;
vinfos[0].indices[0] = _ij26[0];
vinfos[0].indices[1] = _ij26[1];
vinfos[0].maxsolutions = _nj26;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j27;
vinfos[1].indices[0] = _ij27[0];
vinfos[1].indices[1] = _ij27[1];
vinfos[1].maxsolutions = _nj27;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j28;
vinfos[2].indices[0] = _ij28[0];
vinfos[2].indices[1] = _ij28[1];
vinfos[2].maxsolutions = _nj28;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j29;
vinfos[3].indices[0] = _ij29[0];
vinfos[3].indices[1] = _ij29[1];
vinfos[3].maxsolutions = _nj29;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j30;
vinfos[4].indices[0] = _ij30[0];
vinfos[4].indices[1] = _ij30[1];
vinfos[4].maxsolutions = _nj30;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j31;
vinfos[5].indices[0] = _ij31[0];
vinfos[5].indices[1] = _ij31[1];
vinfos[5].maxsolutions = _nj31;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

} else
{
IkReal x119=((IkReal(1.00000000000000))+(new_r22));
IkReal x120=((IkReal(1.00000000000000))*(sj28));
IkReal x121=((cj28)*(new_r12));
IkReal x122=((((cj28)*(new_r02)))+(((IkReal(-1.00000000000000))*(new_r12)*(x120))));
evalcond[0]=((IkReal(-3.14159265358979))+(IKfmod(((IkReal(4.71238898038469))+(j27)), IkReal(6.28318530717959))));
evalcond[1]=x119;
evalcond[2]=new_r20;
evalcond[3]=new_r21;
evalcond[4]=x122;
evalcond[5]=x122;
evalcond[6]=((x121)+(((new_r02)*(sj28))));
evalcond[7]=((((IkReal(-1.00000000000000))*(new_r02)*(x120)))+(((IkReal(-1.00000000000000))*(x121))));
evalcond[8]=new_r20;
evalcond[9]=new_r21;
evalcond[10]=x119;
if( IKabs(evalcond[0]) < 0.0000010000000000  && IKabs(evalcond[1]) < 0.0000010000000000  && IKabs(evalcond[2]) < 0.0000010000000000  && IKabs(evalcond[3]) < 0.0000010000000000  && IKabs(evalcond[4]) < 0.0000010000000000  && IKabs(evalcond[5]) < 0.0000010000000000  && IKabs(evalcond[6]) < 0.0000010000000000  && IKabs(evalcond[7]) < 0.0000010000000000  && IKabs(evalcond[8]) < 0.0000010000000000  && IKabs(evalcond[9]) < 0.0000010000000000  && IKabs(evalcond[10]) < 0.0000010000000000  )
{
{
IkReal j26array[1], cj26array[1], sj26array[1];
bool j26valid[1]={false};
_nj26 = 1;
if( IKabs(((((new_r00)*(sj28)))+(((cj28)*(new_r10))))) < IKFAST_ATAN2_MAGTHRESH && IKabs(((((IkReal(-1.00000000000000))*(new_r01)*(sj28)))+(((IkReal(-1.00000000000000))*(cj28)*(new_r11))))) < IKFAST_ATAN2_MAGTHRESH && IKabs(IKsqr(((((new_r00)*(sj28)))+(((cj28)*(new_r10)))))+IKsqr(((((IkReal(-1.00000000000000))*(new_r01)*(sj28)))+(((IkReal(-1.00000000000000))*(cj28)*(new_r11)))))-1) <= IKFAST_SINCOS_THRESH )
    continue;
j26array[0]=IKatan2(((((new_r00)*(sj28)))+(((cj28)*(new_r10)))), ((((IkReal(-1.00000000000000))*(new_r01)*(sj28)))+(((IkReal(-1.00000000000000))*(cj28)*(new_r11)))));
sj26array[0]=IKsin(j26array[0]);
cj26array[0]=IKcos(j26array[0]);
if( j26array[0] > IKPI )
{
    j26array[0]-=IK2PI;
}
else if( j26array[0] < -IKPI )
{    j26array[0]+=IK2PI;
}
j26valid[0] = true;
for(int ij26 = 0; ij26 < 1; ++ij26)
{
if( !j26valid[ij26] )
{
    continue;
}
_ij26[0] = ij26; _ij26[1] = -1;
for(int iij26 = ij26+1; iij26 < 1; ++iij26)
{
if( j26valid[iij26] && IKabs(cj26array[ij26]-cj26array[iij26]) < IKFAST_SOLUTION_THRESH && IKabs(sj26array[ij26]-sj26array[iij26]) < IKFAST_SOLUTION_THRESH )
{
    j26valid[iij26]=false; _ij26[1] = iij26; break; 
}
}
j26 = j26array[ij26]; cj26 = cj26array[ij26]; sj26 = sj26array[ij26];
{
IkReal evalcond[4];
IkReal x123=IKcos(j26);
IkReal x124=((IkReal(1.00000000000000))*(sj28));
IkReal x125=((IkReal(1.00000000000000))*(IKsin(j26)));
evalcond[0]=((((IkReal(-1.00000000000000))*(new_r10)*(x124)))+(((cj28)*(new_r00)))+(((IkReal(-1.00000000000000))*(x123))));
evalcond[1]=((((IkReal(-1.00000000000000))*(x125)))+(((cj28)*(new_r01)))+(((IkReal(-1.00000000000000))*(new_r11)*(x124))));
evalcond[2]=((((new_r00)*(sj28)))+(((IkReal(-1.00000000000000))*(x125)))+(((cj28)*(new_r10))));
evalcond[3]=((((new_r01)*(sj28)))+(x123)+(((cj28)*(new_r11))));
if( IKabs(evalcond[0]) > 0.000001  || IKabs(evalcond[1]) > 0.000001  || IKabs(evalcond[2]) > 0.000001  || IKabs(evalcond[3]) > 0.000001  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j26;
vinfos[0].indices[0] = _ij26[0];
vinfos[0].indices[1] = _ij26[1];
vinfos[0].maxsolutions = _nj26;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j27;
vinfos[1].indices[0] = _ij27[0];
vinfos[1].indices[1] = _ij27[1];
vinfos[1].maxsolutions = _nj27;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j28;
vinfos[2].indices[0] = _ij28[0];
vinfos[2].indices[1] = _ij28[1];
vinfos[2].maxsolutions = _nj28;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j29;
vinfos[3].indices[0] = _ij29[0];
vinfos[3].indices[1] = _ij29[1];
vinfos[3].maxsolutions = _nj29;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j30;
vinfos[4].indices[0] = _ij30[0];
vinfos[4].indices[1] = _ij30[1];
vinfos[4].maxsolutions = _nj30;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j31;
vinfos[5].indices[0] = _ij31[0];
vinfos[5].indices[1] = _ij31[1];
vinfos[5].maxsolutions = _nj31;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

} else
{
IkReal x126=((((cj28)*(new_r02)))+(((IkReal(-1.00000000000000))*(new_r12)*(sj28))));
IkReal x127=((((new_r00)*(sj28)))+(((cj28)*(new_r10))));
IkReal x128=((((new_r01)*(sj28)))+(((cj28)*(new_r11))));
IkReal x129=((IkReal(1.00000000000000))+(((cj28)*(new_r12)))+(((new_r02)*(sj28))));
evalcond[0]=((IkReal(-3.14159265358979))+(IKfmod(((IkReal(3.14159265358979))+(j27)), IkReal(6.28318530717959))));
evalcond[1]=new_r22;
evalcond[2]=x126;
evalcond[3]=x126;
evalcond[4]=x129;
evalcond[5]=x127;
evalcond[6]=x128;
evalcond[7]=new_r22;
evalcond[8]=x127;
evalcond[9]=x128;
evalcond[10]=x129;
if( IKabs(evalcond[0]) < 0.0000010000000000  && IKabs(evalcond[1]) < 0.0000010000000000  && IKabs(evalcond[2]) < 0.0000010000000000  && IKabs(evalcond[3]) < 0.0000010000000000  && IKabs(evalcond[4]) < 0.0000010000000000  && IKabs(evalcond[5]) < 0.0000010000000000  && IKabs(evalcond[6]) < 0.0000010000000000  && IKabs(evalcond[7]) < 0.0000010000000000  && IKabs(evalcond[8]) < 0.0000010000000000  && IKabs(evalcond[9]) < 0.0000010000000000  && IKabs(evalcond[10]) < 0.0000010000000000  )
{
{
IkReal j26array[1], cj26array[1], sj26array[1];
bool j26valid[1]={false};
_nj26 = 1;
if( IKabs(((IkReal(-1.00000000000000))*(new_r20))) < IKFAST_ATAN2_MAGTHRESH && IKabs(new_r21) < IKFAST_ATAN2_MAGTHRESH && IKabs(IKsqr(((IkReal(-1.00000000000000))*(new_r20)))+IKsqr(new_r21)-1) <= IKFAST_SINCOS_THRESH )
    continue;
j26array[0]=IKatan2(((IkReal(-1.00000000000000))*(new_r20)), new_r21);
sj26array[0]=IKsin(j26array[0]);
cj26array[0]=IKcos(j26array[0]);
if( j26array[0] > IKPI )
{
    j26array[0]-=IK2PI;
}
else if( j26array[0] < -IKPI )
{    j26array[0]+=IK2PI;
}
j26valid[0] = true;
for(int ij26 = 0; ij26 < 1; ++ij26)
{
if( !j26valid[ij26] )
{
    continue;
}
_ij26[0] = ij26; _ij26[1] = -1;
for(int iij26 = ij26+1; iij26 < 1; ++iij26)
{
if( j26valid[iij26] && IKabs(cj26array[ij26]-cj26array[iij26]) < IKFAST_SOLUTION_THRESH && IKabs(sj26array[ij26]-sj26array[iij26]) < IKFAST_SOLUTION_THRESH )
{
    j26valid[iij26]=false; _ij26[1] = iij26; break; 
}
}
j26 = j26array[ij26]; cj26 = cj26array[ij26]; sj26 = sj26array[ij26];
{
IkReal evalcond[4];
IkReal x130=IKsin(j26);
IkReal x131=((IkReal(1.00000000000000))*(sj28));
IkReal x132=((IkReal(1.00000000000000))*(IKcos(j26)));
evalcond[0]=((x130)+(new_r20));
evalcond[1]=((((IkReal(-1.00000000000000))*(x132)))+(new_r21));
evalcond[2]=((((IkReal(-1.00000000000000))*(new_r10)*(x131)))+(((IkReal(-1.00000000000000))*(x132)))+(((cj28)*(new_r00))));
evalcond[3]=((((IkReal(-1.00000000000000))*(new_r11)*(x131)))+(((IkReal(-1.00000000000000))*(x130)))+(((cj28)*(new_r01))));
if( IKabs(evalcond[0]) > 0.000001  || IKabs(evalcond[1]) > 0.000001  || IKabs(evalcond[2]) > 0.000001  || IKabs(evalcond[3]) > 0.000001  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j26;
vinfos[0].indices[0] = _ij26[0];
vinfos[0].indices[1] = _ij26[1];
vinfos[0].maxsolutions = _nj26;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j27;
vinfos[1].indices[0] = _ij27[0];
vinfos[1].indices[1] = _ij27[1];
vinfos[1].maxsolutions = _nj27;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j28;
vinfos[2].indices[0] = _ij28[0];
vinfos[2].indices[1] = _ij28[1];
vinfos[2].maxsolutions = _nj28;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j29;
vinfos[3].indices[0] = _ij29[0];
vinfos[3].indices[1] = _ij29[1];
vinfos[3].maxsolutions = _nj29;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j30;
vinfos[4].indices[0] = _ij30[0];
vinfos[4].indices[1] = _ij30[1];
vinfos[4].maxsolutions = _nj30;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j31;
vinfos[5].indices[0] = _ij31[0];
vinfos[5].indices[1] = _ij31[1];
vinfos[5].maxsolutions = _nj31;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

} else
{
IkReal x133=((IkReal(1.00000000000000))*(sj28));
IkReal x134=((cj28)*(new_r11));
IkReal x135=((cj28)*(new_r12));
IkReal x136=((cj28)*(new_r10));
IkReal x137=((((cj28)*(new_r02)))+(((IkReal(-1.00000000000000))*(new_r12)*(x133))));
evalcond[0]=((IkReal(-3.14159265358979))+(IKfmod(j27, IkReal(6.28318530717959))));
evalcond[1]=new_r22;
evalcond[2]=x137;
evalcond[3]=x137;
evalcond[4]=((IkReal(-1.00000000000000))+(x135)+(((new_r02)*(sj28))));
evalcond[5]=((((new_r00)*(sj28)))+(x136));
evalcond[6]=((((new_r01)*(sj28)))+(x134));
evalcond[7]=((IkReal(-1.00000000000000))*(new_r22));
evalcond[8]=((((IkReal(-1.00000000000000))*(new_r00)*(x133)))+(((IkReal(-1.00000000000000))*(x136))));
evalcond[9]=((((IkReal(-1.00000000000000))*(new_r01)*(x133)))+(((IkReal(-1.00000000000000))*(x134))));
evalcond[10]=((IkReal(1.00000000000000))+(((IkReal(-1.00000000000000))*(new_r02)*(x133)))+(((IkReal(-1.00000000000000))*(x135))));
if( IKabs(evalcond[0]) < 0.0000010000000000  && IKabs(evalcond[1]) < 0.0000010000000000  && IKabs(evalcond[2]) < 0.0000010000000000  && IKabs(evalcond[3]) < 0.0000010000000000  && IKabs(evalcond[4]) < 0.0000010000000000  && IKabs(evalcond[5]) < 0.0000010000000000  && IKabs(evalcond[6]) < 0.0000010000000000  && IKabs(evalcond[7]) < 0.0000010000000000  && IKabs(evalcond[8]) < 0.0000010000000000  && IKabs(evalcond[9]) < 0.0000010000000000  && IKabs(evalcond[10]) < 0.0000010000000000  )
{
{
IkReal j26array[1], cj26array[1], sj26array[1];
bool j26valid[1]={false};
_nj26 = 1;
if( IKabs(new_r20) < IKFAST_ATAN2_MAGTHRESH && IKabs(((IkReal(-1.00000000000000))*(new_r21))) < IKFAST_ATAN2_MAGTHRESH && IKabs(IKsqr(new_r20)+IKsqr(((IkReal(-1.00000000000000))*(new_r21)))-1) <= IKFAST_SINCOS_THRESH )
    continue;
j26array[0]=IKatan2(new_r20, ((IkReal(-1.00000000000000))*(new_r21)));
sj26array[0]=IKsin(j26array[0]);
cj26array[0]=IKcos(j26array[0]);
if( j26array[0] > IKPI )
{
    j26array[0]-=IK2PI;
}
else if( j26array[0] < -IKPI )
{    j26array[0]+=IK2PI;
}
j26valid[0] = true;
for(int ij26 = 0; ij26 < 1; ++ij26)
{
if( !j26valid[ij26] )
{
    continue;
}
_ij26[0] = ij26; _ij26[1] = -1;
for(int iij26 = ij26+1; iij26 < 1; ++iij26)
{
if( j26valid[iij26] && IKabs(cj26array[ij26]-cj26array[iij26]) < IKFAST_SOLUTION_THRESH && IKabs(sj26array[ij26]-sj26array[iij26]) < IKFAST_SOLUTION_THRESH )
{
    j26valid[iij26]=false; _ij26[1] = iij26; break; 
}
}
j26 = j26array[ij26]; cj26 = cj26array[ij26]; sj26 = sj26array[ij26];
{
IkReal evalcond[4];
IkReal x138=IKcos(j26);
IkReal x139=((IkReal(1.00000000000000))*(sj28));
IkReal x140=((IkReal(1.00000000000000))*(IKsin(j26)));
evalcond[0]=((((IkReal(-1.00000000000000))*(x140)))+(new_r20));
evalcond[1]=((x138)+(new_r21));
evalcond[2]=((((IkReal(-1.00000000000000))*(new_r10)*(x139)))+(((IkReal(-1.00000000000000))*(x138)))+(((cj28)*(new_r00))));
evalcond[3]=((((IkReal(-1.00000000000000))*(x140)))+(((IkReal(-1.00000000000000))*(new_r11)*(x139)))+(((cj28)*(new_r01))));
if( IKabs(evalcond[0]) > 0.000001  || IKabs(evalcond[1]) > 0.000001  || IKabs(evalcond[2]) > 0.000001  || IKabs(evalcond[3]) > 0.000001  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j26;
vinfos[0].indices[0] = _ij26[0];
vinfos[0].indices[1] = _ij26[1];
vinfos[0].maxsolutions = _nj26;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j27;
vinfos[1].indices[0] = _ij27[0];
vinfos[1].indices[1] = _ij27[1];
vinfos[1].maxsolutions = _nj27;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j28;
vinfos[2].indices[0] = _ij28[0];
vinfos[2].indices[1] = _ij28[1];
vinfos[2].maxsolutions = _nj28;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j29;
vinfos[3].indices[0] = _ij29[0];
vinfos[3].indices[1] = _ij29[1];
vinfos[3].maxsolutions = _nj29;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j30;
vinfos[4].indices[0] = _ij30[0];
vinfos[4].indices[1] = _ij30[1];
vinfos[4].maxsolutions = _nj30;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j31;
vinfos[5].indices[0] = _ij31[0];
vinfos[5].indices[1] = _ij31[1];
vinfos[5].maxsolutions = _nj31;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

} else
{
if( 1 )
{
continue;

} else
{
}
}
}
}
}
}

} else
{
{
IkReal j26array[1], cj26array[1], sj26array[1];
bool j26valid[1]={false};
_nj26 = 1;
if( IKabs(((IkReal(-1.00000000000000))*(new_r20)*(((IKabs(cj27) != 0)?((IkReal)1/(cj27)):(IkReal)1.0e30)))) < IKFAST_ATAN2_MAGTHRESH && IKabs(((((IKabs(sj27) != 0)?((IkReal)1/(sj27)):(IkReal)1.0e30))*(((((new_r01)*(sj28)))+(((cj28)*(new_r11))))))) < IKFAST_ATAN2_MAGTHRESH && IKabs(IKsqr(((IkReal(-1.00000000000000))*(new_r20)*(((IKabs(cj27) != 0)?((IkReal)1/(cj27)):(IkReal)1.0e30))))+IKsqr(((((IKabs(sj27) != 0)?((IkReal)1/(sj27)):(IkReal)1.0e30))*(((((new_r01)*(sj28)))+(((cj28)*(new_r11)))))))-1) <= IKFAST_SINCOS_THRESH )
    continue;
j26array[0]=IKatan2(((IkReal(-1.00000000000000))*(new_r20)*(((IKabs(cj27) != 0)?((IkReal)1/(cj27)):(IkReal)1.0e30))), ((((IKabs(sj27) != 0)?((IkReal)1/(sj27)):(IkReal)1.0e30))*(((((new_r01)*(sj28)))+(((cj28)*(new_r11)))))));
sj26array[0]=IKsin(j26array[0]);
cj26array[0]=IKcos(j26array[0]);
if( j26array[0] > IKPI )
{
    j26array[0]-=IK2PI;
}
else if( j26array[0] < -IKPI )
{    j26array[0]+=IK2PI;
}
j26valid[0] = true;
for(int ij26 = 0; ij26 < 1; ++ij26)
{
if( !j26valid[ij26] )
{
    continue;
}
_ij26[0] = ij26; _ij26[1] = -1;
for(int iij26 = ij26+1; iij26 < 1; ++iij26)
{
if( j26valid[iij26] && IKabs(cj26array[ij26]-cj26array[iij26]) < IKFAST_SOLUTION_THRESH && IKabs(sj26array[ij26]-sj26array[iij26]) < IKFAST_SOLUTION_THRESH )
{
    j26valid[iij26]=false; _ij26[1] = iij26; break; 
}
}
j26 = j26array[ij26]; cj26 = cj26array[ij26]; sj26 = sj26array[ij26];
{
IkReal evalcond[8];
IkReal x141=IKcos(j26);
IkReal x142=IKsin(j26);
IkReal x143=((cj28)*(new_r11));
IkReal x144=((new_r01)*(sj28));
IkReal x145=((IkReal(1.00000000000000))*(sj28));
IkReal x146=((new_r00)*(sj28));
IkReal x147=((cj28)*(new_r10));
IkReal x148=((IkReal(1.00000000000000))*(x141));
evalcond[0]=((((cj27)*(x142)))+(new_r20));
evalcond[1]=((((IkReal(-1.00000000000000))*(cj27)*(x148)))+(new_r21));
evalcond[2]=((((IkReal(-1.00000000000000))*(x148)))+(((IkReal(-1.00000000000000))*(new_r10)*(x145)))+(((cj28)*(new_r00))));
evalcond[3]=((((IkReal(-1.00000000000000))*(new_r11)*(x145)))+(((IkReal(-1.00000000000000))*(x142)))+(((cj28)*(new_r01))));
evalcond[4]=((x146)+(x147)+(((sj27)*(x142))));
evalcond[5]=((((IkReal(-1.00000000000000))*(sj27)*(x148)))+(x143)+(x144));
evalcond[6]=((x142)+(((cj27)*(new_r20)))+(((sj27)*(x147)))+(((sj27)*(x146))));
evalcond[7]=((((IkReal(-1.00000000000000))*(x148)))+(((cj27)*(new_r21)))+(((sj27)*(x144)))+(((sj27)*(x143))));
if( IKabs(evalcond[0]) > 0.000001  || IKabs(evalcond[1]) > 0.000001  || IKabs(evalcond[2]) > 0.000001  || IKabs(evalcond[3]) > 0.000001  || IKabs(evalcond[4]) > 0.000001  || IKabs(evalcond[5]) > 0.000001  || IKabs(evalcond[6]) > 0.000001  || IKabs(evalcond[7]) > 0.000001  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j26;
vinfos[0].indices[0] = _ij26[0];
vinfos[0].indices[1] = _ij26[1];
vinfos[0].maxsolutions = _nj26;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j27;
vinfos[1].indices[0] = _ij27[0];
vinfos[1].indices[1] = _ij27[1];
vinfos[1].maxsolutions = _nj27;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j28;
vinfos[2].indices[0] = _ij28[0];
vinfos[2].indices[1] = _ij28[1];
vinfos[2].maxsolutions = _nj28;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j29;
vinfos[3].indices[0] = _ij29[0];
vinfos[3].indices[1] = _ij29[1];
vinfos[3].maxsolutions = _nj29;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j30;
vinfos[4].indices[0] = _ij30[0];
vinfos[4].indices[1] = _ij30[1];
vinfos[4].maxsolutions = _nj30;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j31;
vinfos[5].indices[0] = _ij31[0];
vinfos[5].indices[1] = _ij31[1];
vinfos[5].maxsolutions = _nj31;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j26array[1], cj26array[1], sj26array[1];
bool j26valid[1]={false};
_nj26 = 1;
if( IKabs(((IkReal(-1.00000000000000))*(new_r20)*(((IKabs(cj27) != 0)?((IkReal)1/(cj27)):(IkReal)1.0e30)))) < IKFAST_ATAN2_MAGTHRESH && IKabs(((((IkReal(-1.00000000000000))*(new_r10)*(sj28)))+(((cj28)*(new_r00))))) < IKFAST_ATAN2_MAGTHRESH && IKabs(IKsqr(((IkReal(-1.00000000000000))*(new_r20)*(((IKabs(cj27) != 0)?((IkReal)1/(cj27)):(IkReal)1.0e30))))+IKsqr(((((IkReal(-1.00000000000000))*(new_r10)*(sj28)))+(((cj28)*(new_r00)))))-1) <= IKFAST_SINCOS_THRESH )
    continue;
j26array[0]=IKatan2(((IkReal(-1.00000000000000))*(new_r20)*(((IKabs(cj27) != 0)?((IkReal)1/(cj27)):(IkReal)1.0e30))), ((((IkReal(-1.00000000000000))*(new_r10)*(sj28)))+(((cj28)*(new_r00)))));
sj26array[0]=IKsin(j26array[0]);
cj26array[0]=IKcos(j26array[0]);
if( j26array[0] > IKPI )
{
    j26array[0]-=IK2PI;
}
else if( j26array[0] < -IKPI )
{    j26array[0]+=IK2PI;
}
j26valid[0] = true;
for(int ij26 = 0; ij26 < 1; ++ij26)
{
if( !j26valid[ij26] )
{
    continue;
}
_ij26[0] = ij26; _ij26[1] = -1;
for(int iij26 = ij26+1; iij26 < 1; ++iij26)
{
if( j26valid[iij26] && IKabs(cj26array[ij26]-cj26array[iij26]) < IKFAST_SOLUTION_THRESH && IKabs(sj26array[ij26]-sj26array[iij26]) < IKFAST_SOLUTION_THRESH )
{
    j26valid[iij26]=false; _ij26[1] = iij26; break; 
}
}
j26 = j26array[ij26]; cj26 = cj26array[ij26]; sj26 = sj26array[ij26];
{
IkReal evalcond[8];
IkReal x149=IKcos(j26);
IkReal x150=IKsin(j26);
IkReal x151=((cj28)*(new_r11));
IkReal x152=((new_r01)*(sj28));
IkReal x153=((IkReal(1.00000000000000))*(sj28));
IkReal x154=((new_r00)*(sj28));
IkReal x155=((cj28)*(new_r10));
IkReal x156=((IkReal(1.00000000000000))*(x149));
evalcond[0]=((((cj27)*(x150)))+(new_r20));
evalcond[1]=((((IkReal(-1.00000000000000))*(cj27)*(x156)))+(new_r21));
evalcond[2]=((((IkReal(-1.00000000000000))*(x156)))+(((IkReal(-1.00000000000000))*(new_r10)*(x153)))+(((cj28)*(new_r00))));
evalcond[3]=((((IkReal(-1.00000000000000))*(new_r11)*(x153)))+(((IkReal(-1.00000000000000))*(x150)))+(((cj28)*(new_r01))));
evalcond[4]=((x155)+(x154)+(((sj27)*(x150))));
evalcond[5]=((((IkReal(-1.00000000000000))*(sj27)*(x156)))+(x152)+(x151));
evalcond[6]=((x150)+(((sj27)*(x154)))+(((sj27)*(x155)))+(((cj27)*(new_r20))));
evalcond[7]=((((IkReal(-1.00000000000000))*(x156)))+(((sj27)*(x151)))+(((sj27)*(x152)))+(((cj27)*(new_r21))));
if( IKabs(evalcond[0]) > 0.000001  || IKabs(evalcond[1]) > 0.000001  || IKabs(evalcond[2]) > 0.000001  || IKabs(evalcond[3]) > 0.000001  || IKabs(evalcond[4]) > 0.000001  || IKabs(evalcond[5]) > 0.000001  || IKabs(evalcond[6]) > 0.000001  || IKabs(evalcond[7]) > 0.000001  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j26;
vinfos[0].indices[0] = _ij26[0];
vinfos[0].indices[1] = _ij26[1];
vinfos[0].maxsolutions = _nj26;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j27;
vinfos[1].indices[0] = _ij27[0];
vinfos[1].indices[1] = _ij27[1];
vinfos[1].maxsolutions = _nj27;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j28;
vinfos[2].indices[0] = _ij28[0];
vinfos[2].indices[1] = _ij28[1];
vinfos[2].maxsolutions = _nj28;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j29;
vinfos[3].indices[0] = _ij29[0];
vinfos[3].indices[1] = _ij29[1];
vinfos[3].maxsolutions = _nj29;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j30;
vinfos[4].indices[0] = _ij30[0];
vinfos[4].indices[1] = _ij30[1];
vinfos[4].maxsolutions = _nj30;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j31;
vinfos[5].indices[0] = _ij31[0];
vinfos[5].indices[1] = _ij31[1];
vinfos[5].maxsolutions = _nj31;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j26array[1], cj26array[1], sj26array[1];
bool j26valid[1]={false};
_nj26 = 1;
if( IKabs(((IkReal(-1.00000000000000))*(gconst5)*(new_r20))) < IKFAST_ATAN2_MAGTHRESH && IKabs(((gconst5)*(new_r21))) < IKFAST_ATAN2_MAGTHRESH )
    continue;
j26array[0]=IKatan2(((IkReal(-1.00000000000000))*(gconst5)*(new_r20)), ((gconst5)*(new_r21)));
sj26array[0]=IKsin(j26array[0]);
cj26array[0]=IKcos(j26array[0]);
if( j26array[0] > IKPI )
{
    j26array[0]-=IK2PI;
}
else if( j26array[0] < -IKPI )
{    j26array[0]+=IK2PI;
}
j26valid[0] = true;
for(int ij26 = 0; ij26 < 1; ++ij26)
{
if( !j26valid[ij26] )
{
    continue;
}
_ij26[0] = ij26; _ij26[1] = -1;
for(int iij26 = ij26+1; iij26 < 1; ++iij26)
{
if( j26valid[iij26] && IKabs(cj26array[ij26]-cj26array[iij26]) < IKFAST_SOLUTION_THRESH && IKabs(sj26array[ij26]-sj26array[iij26]) < IKFAST_SOLUTION_THRESH )
{
    j26valid[iij26]=false; _ij26[1] = iij26; break; 
}
}
j26 = j26array[ij26]; cj26 = cj26array[ij26]; sj26 = sj26array[ij26];
{
IkReal evalcond[8];
IkReal x157=IKcos(j26);
IkReal x158=IKsin(j26);
IkReal x159=((cj28)*(new_r11));
IkReal x160=((new_r01)*(sj28));
IkReal x161=((IkReal(1.00000000000000))*(sj28));
IkReal x162=((new_r00)*(sj28));
IkReal x163=((cj28)*(new_r10));
IkReal x164=((IkReal(1.00000000000000))*(x157));
evalcond[0]=((((cj27)*(x158)))+(new_r20));
evalcond[1]=((new_r21)+(((IkReal(-1.00000000000000))*(cj27)*(x164))));
evalcond[2]=((((IkReal(-1.00000000000000))*(x164)))+(((IkReal(-1.00000000000000))*(new_r10)*(x161)))+(((cj28)*(new_r00))));
evalcond[3]=((((IkReal(-1.00000000000000))*(new_r11)*(x161)))+(((IkReal(-1.00000000000000))*(x158)))+(((cj28)*(new_r01))));
evalcond[4]=((x162)+(x163)+(((sj27)*(x158))));
evalcond[5]=((((IkReal(-1.00000000000000))*(sj27)*(x164)))+(x160)+(x159));
evalcond[6]=((((sj27)*(x162)))+(((sj27)*(x163)))+(x158)+(((cj27)*(new_r20))));
evalcond[7]=((((sj27)*(x160)))+(((IkReal(-1.00000000000000))*(x164)))+(((sj27)*(x159)))+(((cj27)*(new_r21))));
if( IKabs(evalcond[0]) > 0.000001  || IKabs(evalcond[1]) > 0.000001  || IKabs(evalcond[2]) > 0.000001  || IKabs(evalcond[3]) > 0.000001  || IKabs(evalcond[4]) > 0.000001  || IKabs(evalcond[5]) > 0.000001  || IKabs(evalcond[6]) > 0.000001  || IKabs(evalcond[7]) > 0.000001  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j26;
vinfos[0].indices[0] = _ij26[0];
vinfos[0].indices[1] = _ij26[1];
vinfos[0].maxsolutions = _nj26;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j27;
vinfos[1].indices[0] = _ij27[0];
vinfos[1].indices[1] = _ij27[1];
vinfos[1].maxsolutions = _nj27;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j28;
vinfos[2].indices[0] = _ij28[0];
vinfos[2].indices[1] = _ij28[1];
vinfos[2].maxsolutions = _nj28;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j29;
vinfos[3].indices[0] = _ij29[0];
vinfos[3].indices[1] = _ij29[1];
vinfos[3].maxsolutions = _nj29;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j30;
vinfos[4].indices[0] = _ij30[0];
vinfos[4].indices[1] = _ij30[1];
vinfos[4].maxsolutions = _nj30;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j31;
vinfos[5].indices[0] = _ij31[0];
vinfos[5].indices[1] = _ij31[1];
vinfos[5].maxsolutions = _nj31;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}
}
}

}

}

} else
{
{
IkReal j28array[1], cj28array[1], sj28array[1];
bool j28valid[1]={false};
_nj28 = 1;
IkReal x165=((cj27)*(gconst3));
if( IKabs(((new_r02)*(x165))) < IKFAST_ATAN2_MAGTHRESH && IKabs(((new_r12)*(x165))) < IKFAST_ATAN2_MAGTHRESH )
    continue;
j28array[0]=IKatan2(((new_r02)*(x165)), ((new_r12)*(x165)));
sj28array[0]=IKsin(j28array[0]);
cj28array[0]=IKcos(j28array[0]);
if( j28array[0] > IKPI )
{
    j28array[0]-=IK2PI;
}
else if( j28array[0] < -IKPI )
{    j28array[0]+=IK2PI;
}
j28valid[0] = true;
for(int ij28 = 0; ij28 < 1; ++ij28)
{
if( !j28valid[ij28] )
{
    continue;
}
_ij28[0] = ij28; _ij28[1] = -1;
for(int iij28 = ij28+1; iij28 < 1; ++iij28)
{
if( j28valid[iij28] && IKabs(cj28array[ij28]-cj28array[iij28]) < IKFAST_SOLUTION_THRESH && IKabs(sj28array[ij28]-sj28array[iij28]) < IKFAST_SOLUTION_THRESH )
{
    j28valid[iij28]=false; _ij28[1] = iij28; break; 
}
}
j28 = j28array[ij28]; cj28 = cj28array[ij28]; sj28 = sj28array[ij28];
{
IkReal evalcond[6];
IkReal x166=IKsin(j28);
IkReal x167=IKcos(j28);
IkReal x168=((IkReal(1.00000000000000))*(sj27));
IkReal x169=((cj27)*(x166));
IkReal x170=((cj27)*(x167));
IkReal x171=((new_r12)*(x167));
IkReal x172=((new_r02)*(x166));
evalcond[0]=((((new_r02)*(x167)))+(((IkReal(-1.00000000000000))*(new_r12)*(x166))));
evalcond[1]=((x171)+(x172)+(cj27));
evalcond[2]=((((cj27)*(new_r22)))+(((sj27)*(x171)))+(((sj27)*(x172))));
evalcond[3]=((((new_r00)*(x169)))+(((new_r10)*(x170)))+(((IkReal(-1.00000000000000))*(new_r20)*(x168))));
evalcond[4]=((((new_r01)*(x169)))+(((IkReal(-1.00000000000000))*(new_r21)*(x168)))+(((new_r11)*(x170))));
evalcond[5]=((IkReal(1.00000000000000))+(((new_r12)*(x170)))+(((IkReal(-1.00000000000000))*(new_r22)*(x168)))+(((new_r02)*(x169))));
if( IKabs(evalcond[0]) > 0.000001  || IKabs(evalcond[1]) > 0.000001  || IKabs(evalcond[2]) > 0.000001  || IKabs(evalcond[3]) > 0.000001  || IKabs(evalcond[4]) > 0.000001  || IKabs(evalcond[5]) > 0.000001  )
{
continue;
}
}

{
IkReal dummyeval[1];
IkReal gconst5;
gconst5=IKsign(cj27);
dummyeval[0]=cj27;
if( IKabs(dummyeval[0]) < 0.0000010000000000  )
{
{
IkReal dummyeval[1];
dummyeval[0]=cj27;
if( IKabs(dummyeval[0]) < 0.0000010000000000  )
{
{
IkReal dummyeval[2];
dummyeval[0]=cj27;
dummyeval[1]=sj27;
if( IKabs(dummyeval[0]) < 0.0000010000000000  || IKabs(dummyeval[1]) < 0.0000010000000000  )
{
{
IkReal evalcond[11];
IkReal x173=((((cj28)*(new_r02)))+(((IkReal(-1.00000000000000))*(new_r12)*(sj28))));
IkReal x174=((((cj28)*(new_r12)))+(((new_r02)*(sj28))));
evalcond[0]=((IkReal(-3.14159265358979))+(IKfmod(((IkReal(1.57079632679490))+(j27)), IkReal(6.28318530717959))));
evalcond[1]=((IkReal(-1.00000000000000))+(new_r22));
evalcond[2]=new_r20;
evalcond[3]=new_r21;
evalcond[4]=x173;
evalcond[5]=x173;
evalcond[6]=x174;
evalcond[7]=x174;
evalcond[8]=((IkReal(-1.00000000000000))*(new_r20));
evalcond[9]=((IkReal(-1.00000000000000))*(new_r21));
evalcond[10]=((IkReal(1.00000000000000))+(((IkReal(-1.00000000000000))*(new_r22))));
if( IKabs(evalcond[0]) < 0.0000010000000000  && IKabs(evalcond[1]) < 0.0000010000000000  && IKabs(evalcond[2]) < 0.0000010000000000  && IKabs(evalcond[3]) < 0.0000010000000000  && IKabs(evalcond[4]) < 0.0000010000000000  && IKabs(evalcond[5]) < 0.0000010000000000  && IKabs(evalcond[6]) < 0.0000010000000000  && IKabs(evalcond[7]) < 0.0000010000000000  && IKabs(evalcond[8]) < 0.0000010000000000  && IKabs(evalcond[9]) < 0.0000010000000000  && IKabs(evalcond[10]) < 0.0000010000000000  )
{
{
IkReal j26array[1], cj26array[1], sj26array[1];
bool j26valid[1]={false};
_nj26 = 1;
if( IKabs(((((IkReal(-1.00000000000000))*(new_r00)*(sj28)))+(((IkReal(-1.00000000000000))*(cj28)*(new_r10))))) < IKFAST_ATAN2_MAGTHRESH && IKabs(((((new_r01)*(sj28)))+(((cj28)*(new_r11))))) < IKFAST_ATAN2_MAGTHRESH && IKabs(IKsqr(((((IkReal(-1.00000000000000))*(new_r00)*(sj28)))+(((IkReal(-1.00000000000000))*(cj28)*(new_r10)))))+IKsqr(((((new_r01)*(sj28)))+(((cj28)*(new_r11)))))-1) <= IKFAST_SINCOS_THRESH )
    continue;
j26array[0]=IKatan2(((((IkReal(-1.00000000000000))*(new_r00)*(sj28)))+(((IkReal(-1.00000000000000))*(cj28)*(new_r10)))), ((((new_r01)*(sj28)))+(((cj28)*(new_r11)))));
sj26array[0]=IKsin(j26array[0]);
cj26array[0]=IKcos(j26array[0]);
if( j26array[0] > IKPI )
{
    j26array[0]-=IK2PI;
}
else if( j26array[0] < -IKPI )
{    j26array[0]+=IK2PI;
}
j26valid[0] = true;
for(int ij26 = 0; ij26 < 1; ++ij26)
{
if( !j26valid[ij26] )
{
    continue;
}
_ij26[0] = ij26; _ij26[1] = -1;
for(int iij26 = ij26+1; iij26 < 1; ++iij26)
{
if( j26valid[iij26] && IKabs(cj26array[ij26]-cj26array[iij26]) < IKFAST_SOLUTION_THRESH && IKabs(sj26array[ij26]-sj26array[iij26]) < IKFAST_SOLUTION_THRESH )
{
    j26valid[iij26]=false; _ij26[1] = iij26; break; 
}
}
j26 = j26array[ij26]; cj26 = cj26array[ij26]; sj26 = sj26array[ij26];
{
IkReal evalcond[4];
IkReal x175=IKsin(j26);
IkReal x176=((IkReal(1.00000000000000))*(sj28));
IkReal x177=((IkReal(1.00000000000000))*(IKcos(j26)));
evalcond[0]=((((IkReal(-1.00000000000000))*(x177)))+(((IkReal(-1.00000000000000))*(new_r10)*(x176)))+(((cj28)*(new_r00))));
evalcond[1]=((((IkReal(-1.00000000000000))*(x175)))+(((IkReal(-1.00000000000000))*(new_r11)*(x176)))+(((cj28)*(new_r01))));
evalcond[2]=((((new_r00)*(sj28)))+(x175)+(((cj28)*(new_r10))));
evalcond[3]=((((new_r01)*(sj28)))+(((IkReal(-1.00000000000000))*(x177)))+(((cj28)*(new_r11))));
if( IKabs(evalcond[0]) > 0.000001  || IKabs(evalcond[1]) > 0.000001  || IKabs(evalcond[2]) > 0.000001  || IKabs(evalcond[3]) > 0.000001  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j26;
vinfos[0].indices[0] = _ij26[0];
vinfos[0].indices[1] = _ij26[1];
vinfos[0].maxsolutions = _nj26;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j27;
vinfos[1].indices[0] = _ij27[0];
vinfos[1].indices[1] = _ij27[1];
vinfos[1].maxsolutions = _nj27;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j28;
vinfos[2].indices[0] = _ij28[0];
vinfos[2].indices[1] = _ij28[1];
vinfos[2].maxsolutions = _nj28;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j29;
vinfos[3].indices[0] = _ij29[0];
vinfos[3].indices[1] = _ij29[1];
vinfos[3].maxsolutions = _nj29;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j30;
vinfos[4].indices[0] = _ij30[0];
vinfos[4].indices[1] = _ij30[1];
vinfos[4].maxsolutions = _nj30;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j31;
vinfos[5].indices[0] = _ij31[0];
vinfos[5].indices[1] = _ij31[1];
vinfos[5].maxsolutions = _nj31;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

} else
{
IkReal x178=((IkReal(1.00000000000000))+(new_r22));
IkReal x179=((IkReal(1.00000000000000))*(sj28));
IkReal x180=((cj28)*(new_r12));
IkReal x181=((((IkReal(-1.00000000000000))*(new_r12)*(x179)))+(((cj28)*(new_r02))));
evalcond[0]=((IkReal(-3.14159265358979))+(IKfmod(((IkReal(4.71238898038469))+(j27)), IkReal(6.28318530717959))));
evalcond[1]=x178;
evalcond[2]=new_r20;
evalcond[3]=new_r21;
evalcond[4]=x181;
evalcond[5]=x181;
evalcond[6]=((x180)+(((new_r02)*(sj28))));
evalcond[7]=((((IkReal(-1.00000000000000))*(x180)))+(((IkReal(-1.00000000000000))*(new_r02)*(x179))));
evalcond[8]=new_r20;
evalcond[9]=new_r21;
evalcond[10]=x178;
if( IKabs(evalcond[0]) < 0.0000010000000000  && IKabs(evalcond[1]) < 0.0000010000000000  && IKabs(evalcond[2]) < 0.0000010000000000  && IKabs(evalcond[3]) < 0.0000010000000000  && IKabs(evalcond[4]) < 0.0000010000000000  && IKabs(evalcond[5]) < 0.0000010000000000  && IKabs(evalcond[6]) < 0.0000010000000000  && IKabs(evalcond[7]) < 0.0000010000000000  && IKabs(evalcond[8]) < 0.0000010000000000  && IKabs(evalcond[9]) < 0.0000010000000000  && IKabs(evalcond[10]) < 0.0000010000000000  )
{
{
IkReal j26array[1], cj26array[1], sj26array[1];
bool j26valid[1]={false};
_nj26 = 1;
if( IKabs(((((new_r00)*(sj28)))+(((cj28)*(new_r10))))) < IKFAST_ATAN2_MAGTHRESH && IKabs(((((IkReal(-1.00000000000000))*(new_r01)*(sj28)))+(((IkReal(-1.00000000000000))*(cj28)*(new_r11))))) < IKFAST_ATAN2_MAGTHRESH && IKabs(IKsqr(((((new_r00)*(sj28)))+(((cj28)*(new_r10)))))+IKsqr(((((IkReal(-1.00000000000000))*(new_r01)*(sj28)))+(((IkReal(-1.00000000000000))*(cj28)*(new_r11)))))-1) <= IKFAST_SINCOS_THRESH )
    continue;
j26array[0]=IKatan2(((((new_r00)*(sj28)))+(((cj28)*(new_r10)))), ((((IkReal(-1.00000000000000))*(new_r01)*(sj28)))+(((IkReal(-1.00000000000000))*(cj28)*(new_r11)))));
sj26array[0]=IKsin(j26array[0]);
cj26array[0]=IKcos(j26array[0]);
if( j26array[0] > IKPI )
{
    j26array[0]-=IK2PI;
}
else if( j26array[0] < -IKPI )
{    j26array[0]+=IK2PI;
}
j26valid[0] = true;
for(int ij26 = 0; ij26 < 1; ++ij26)
{
if( !j26valid[ij26] )
{
    continue;
}
_ij26[0] = ij26; _ij26[1] = -1;
for(int iij26 = ij26+1; iij26 < 1; ++iij26)
{
if( j26valid[iij26] && IKabs(cj26array[ij26]-cj26array[iij26]) < IKFAST_SOLUTION_THRESH && IKabs(sj26array[ij26]-sj26array[iij26]) < IKFAST_SOLUTION_THRESH )
{
    j26valid[iij26]=false; _ij26[1] = iij26; break; 
}
}
j26 = j26array[ij26]; cj26 = cj26array[ij26]; sj26 = sj26array[ij26];
{
IkReal evalcond[4];
IkReal x182=IKcos(j26);
IkReal x183=((IkReal(1.00000000000000))*(sj28));
IkReal x184=((IkReal(1.00000000000000))*(IKsin(j26)));
evalcond[0]=((((IkReal(-1.00000000000000))*(x182)))+(((IkReal(-1.00000000000000))*(new_r10)*(x183)))+(((cj28)*(new_r00))));
evalcond[1]=((((IkReal(-1.00000000000000))*(x184)))+(((IkReal(-1.00000000000000))*(new_r11)*(x183)))+(((cj28)*(new_r01))));
evalcond[2]=((((IkReal(-1.00000000000000))*(x184)))+(((new_r00)*(sj28)))+(((cj28)*(new_r10))));
evalcond[3]=((((new_r01)*(sj28)))+(x182)+(((cj28)*(new_r11))));
if( IKabs(evalcond[0]) > 0.000001  || IKabs(evalcond[1]) > 0.000001  || IKabs(evalcond[2]) > 0.000001  || IKabs(evalcond[3]) > 0.000001  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j26;
vinfos[0].indices[0] = _ij26[0];
vinfos[0].indices[1] = _ij26[1];
vinfos[0].maxsolutions = _nj26;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j27;
vinfos[1].indices[0] = _ij27[0];
vinfos[1].indices[1] = _ij27[1];
vinfos[1].maxsolutions = _nj27;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j28;
vinfos[2].indices[0] = _ij28[0];
vinfos[2].indices[1] = _ij28[1];
vinfos[2].maxsolutions = _nj28;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j29;
vinfos[3].indices[0] = _ij29[0];
vinfos[3].indices[1] = _ij29[1];
vinfos[3].maxsolutions = _nj29;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j30;
vinfos[4].indices[0] = _ij30[0];
vinfos[4].indices[1] = _ij30[1];
vinfos[4].maxsolutions = _nj30;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j31;
vinfos[5].indices[0] = _ij31[0];
vinfos[5].indices[1] = _ij31[1];
vinfos[5].maxsolutions = _nj31;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

} else
{
IkReal x185=((((cj28)*(new_r02)))+(((IkReal(-1.00000000000000))*(new_r12)*(sj28))));
IkReal x186=((((new_r00)*(sj28)))+(((cj28)*(new_r10))));
IkReal x187=((((new_r01)*(sj28)))+(((cj28)*(new_r11))));
IkReal x188=((IkReal(1.00000000000000))+(((cj28)*(new_r12)))+(((new_r02)*(sj28))));
evalcond[0]=((IkReal(-3.14159265358979))+(IKfmod(((IkReal(3.14159265358979))+(j27)), IkReal(6.28318530717959))));
evalcond[1]=new_r22;
evalcond[2]=x185;
evalcond[3]=x185;
evalcond[4]=x188;
evalcond[5]=x186;
evalcond[6]=x187;
evalcond[7]=new_r22;
evalcond[8]=x186;
evalcond[9]=x187;
evalcond[10]=x188;
if( IKabs(evalcond[0]) < 0.0000010000000000  && IKabs(evalcond[1]) < 0.0000010000000000  && IKabs(evalcond[2]) < 0.0000010000000000  && IKabs(evalcond[3]) < 0.0000010000000000  && IKabs(evalcond[4]) < 0.0000010000000000  && IKabs(evalcond[5]) < 0.0000010000000000  && IKabs(evalcond[6]) < 0.0000010000000000  && IKabs(evalcond[7]) < 0.0000010000000000  && IKabs(evalcond[8]) < 0.0000010000000000  && IKabs(evalcond[9]) < 0.0000010000000000  && IKabs(evalcond[10]) < 0.0000010000000000  )
{
{
IkReal j26array[1], cj26array[1], sj26array[1];
bool j26valid[1]={false};
_nj26 = 1;
if( IKabs(((IkReal(-1.00000000000000))*(new_r20))) < IKFAST_ATAN2_MAGTHRESH && IKabs(new_r21) < IKFAST_ATAN2_MAGTHRESH && IKabs(IKsqr(((IkReal(-1.00000000000000))*(new_r20)))+IKsqr(new_r21)-1) <= IKFAST_SINCOS_THRESH )
    continue;
j26array[0]=IKatan2(((IkReal(-1.00000000000000))*(new_r20)), new_r21);
sj26array[0]=IKsin(j26array[0]);
cj26array[0]=IKcos(j26array[0]);
if( j26array[0] > IKPI )
{
    j26array[0]-=IK2PI;
}
else if( j26array[0] < -IKPI )
{    j26array[0]+=IK2PI;
}
j26valid[0] = true;
for(int ij26 = 0; ij26 < 1; ++ij26)
{
if( !j26valid[ij26] )
{
    continue;
}
_ij26[0] = ij26; _ij26[1] = -1;
for(int iij26 = ij26+1; iij26 < 1; ++iij26)
{
if( j26valid[iij26] && IKabs(cj26array[ij26]-cj26array[iij26]) < IKFAST_SOLUTION_THRESH && IKabs(sj26array[ij26]-sj26array[iij26]) < IKFAST_SOLUTION_THRESH )
{
    j26valid[iij26]=false; _ij26[1] = iij26; break; 
}
}
j26 = j26array[ij26]; cj26 = cj26array[ij26]; sj26 = sj26array[ij26];
{
IkReal evalcond[4];
IkReal x189=IKsin(j26);
IkReal x190=((IkReal(1.00000000000000))*(sj28));
IkReal x191=((IkReal(1.00000000000000))*(IKcos(j26)));
evalcond[0]=((x189)+(new_r20));
evalcond[1]=((((IkReal(-1.00000000000000))*(x191)))+(new_r21));
evalcond[2]=((((IkReal(-1.00000000000000))*(x191)))+(((IkReal(-1.00000000000000))*(new_r10)*(x190)))+(((cj28)*(new_r00))));
evalcond[3]=((((IkReal(-1.00000000000000))*(x189)))+(((IkReal(-1.00000000000000))*(new_r11)*(x190)))+(((cj28)*(new_r01))));
if( IKabs(evalcond[0]) > 0.000001  || IKabs(evalcond[1]) > 0.000001  || IKabs(evalcond[2]) > 0.000001  || IKabs(evalcond[3]) > 0.000001  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j26;
vinfos[0].indices[0] = _ij26[0];
vinfos[0].indices[1] = _ij26[1];
vinfos[0].maxsolutions = _nj26;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j27;
vinfos[1].indices[0] = _ij27[0];
vinfos[1].indices[1] = _ij27[1];
vinfos[1].maxsolutions = _nj27;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j28;
vinfos[2].indices[0] = _ij28[0];
vinfos[2].indices[1] = _ij28[1];
vinfos[2].maxsolutions = _nj28;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j29;
vinfos[3].indices[0] = _ij29[0];
vinfos[3].indices[1] = _ij29[1];
vinfos[3].maxsolutions = _nj29;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j30;
vinfos[4].indices[0] = _ij30[0];
vinfos[4].indices[1] = _ij30[1];
vinfos[4].maxsolutions = _nj30;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j31;
vinfos[5].indices[0] = _ij31[0];
vinfos[5].indices[1] = _ij31[1];
vinfos[5].maxsolutions = _nj31;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

} else
{
IkReal x192=((IkReal(1.00000000000000))*(sj28));
IkReal x193=((cj28)*(new_r11));
IkReal x194=((cj28)*(new_r12));
IkReal x195=((cj28)*(new_r10));
IkReal x196=((((IkReal(-1.00000000000000))*(new_r12)*(x192)))+(((cj28)*(new_r02))));
evalcond[0]=((IkReal(-3.14159265358979))+(IKfmod(j27, IkReal(6.28318530717959))));
evalcond[1]=new_r22;
evalcond[2]=x196;
evalcond[3]=x196;
evalcond[4]=((IkReal(-1.00000000000000))+(x194)+(((new_r02)*(sj28))));
evalcond[5]=((((new_r00)*(sj28)))+(x195));
evalcond[6]=((((new_r01)*(sj28)))+(x193));
evalcond[7]=((IkReal(-1.00000000000000))*(new_r22));
evalcond[8]=((((IkReal(-1.00000000000000))*(x195)))+(((IkReal(-1.00000000000000))*(new_r00)*(x192))));
evalcond[9]=((((IkReal(-1.00000000000000))*(x193)))+(((IkReal(-1.00000000000000))*(new_r01)*(x192))));
evalcond[10]=((IkReal(1.00000000000000))+(((IkReal(-1.00000000000000))*(x194)))+(((IkReal(-1.00000000000000))*(new_r02)*(x192))));
if( IKabs(evalcond[0]) < 0.0000010000000000  && IKabs(evalcond[1]) < 0.0000010000000000  && IKabs(evalcond[2]) < 0.0000010000000000  && IKabs(evalcond[3]) < 0.0000010000000000  && IKabs(evalcond[4]) < 0.0000010000000000  && IKabs(evalcond[5]) < 0.0000010000000000  && IKabs(evalcond[6]) < 0.0000010000000000  && IKabs(evalcond[7]) < 0.0000010000000000  && IKabs(evalcond[8]) < 0.0000010000000000  && IKabs(evalcond[9]) < 0.0000010000000000  && IKabs(evalcond[10]) < 0.0000010000000000  )
{
{
IkReal j26array[1], cj26array[1], sj26array[1];
bool j26valid[1]={false};
_nj26 = 1;
if( IKabs(new_r20) < IKFAST_ATAN2_MAGTHRESH && IKabs(((IkReal(-1.00000000000000))*(new_r21))) < IKFAST_ATAN2_MAGTHRESH && IKabs(IKsqr(new_r20)+IKsqr(((IkReal(-1.00000000000000))*(new_r21)))-1) <= IKFAST_SINCOS_THRESH )
    continue;
j26array[0]=IKatan2(new_r20, ((IkReal(-1.00000000000000))*(new_r21)));
sj26array[0]=IKsin(j26array[0]);
cj26array[0]=IKcos(j26array[0]);
if( j26array[0] > IKPI )
{
    j26array[0]-=IK2PI;
}
else if( j26array[0] < -IKPI )
{    j26array[0]+=IK2PI;
}
j26valid[0] = true;
for(int ij26 = 0; ij26 < 1; ++ij26)
{
if( !j26valid[ij26] )
{
    continue;
}
_ij26[0] = ij26; _ij26[1] = -1;
for(int iij26 = ij26+1; iij26 < 1; ++iij26)
{
if( j26valid[iij26] && IKabs(cj26array[ij26]-cj26array[iij26]) < IKFAST_SOLUTION_THRESH && IKabs(sj26array[ij26]-sj26array[iij26]) < IKFAST_SOLUTION_THRESH )
{
    j26valid[iij26]=false; _ij26[1] = iij26; break; 
}
}
j26 = j26array[ij26]; cj26 = cj26array[ij26]; sj26 = sj26array[ij26];
{
IkReal evalcond[4];
IkReal x197=IKcos(j26);
IkReal x198=((IkReal(1.00000000000000))*(sj28));
IkReal x199=((IkReal(1.00000000000000))*(IKsin(j26)));
evalcond[0]=((((IkReal(-1.00000000000000))*(x199)))+(new_r20));
evalcond[1]=((x197)+(new_r21));
evalcond[2]=((((IkReal(-1.00000000000000))*(x197)))+(((IkReal(-1.00000000000000))*(new_r10)*(x198)))+(((cj28)*(new_r00))));
evalcond[3]=((((IkReal(-1.00000000000000))*(x199)))+(((IkReal(-1.00000000000000))*(new_r11)*(x198)))+(((cj28)*(new_r01))));
if( IKabs(evalcond[0]) > 0.000001  || IKabs(evalcond[1]) > 0.000001  || IKabs(evalcond[2]) > 0.000001  || IKabs(evalcond[3]) > 0.000001  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j26;
vinfos[0].indices[0] = _ij26[0];
vinfos[0].indices[1] = _ij26[1];
vinfos[0].maxsolutions = _nj26;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j27;
vinfos[1].indices[0] = _ij27[0];
vinfos[1].indices[1] = _ij27[1];
vinfos[1].maxsolutions = _nj27;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j28;
vinfos[2].indices[0] = _ij28[0];
vinfos[2].indices[1] = _ij28[1];
vinfos[2].maxsolutions = _nj28;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j29;
vinfos[3].indices[0] = _ij29[0];
vinfos[3].indices[1] = _ij29[1];
vinfos[3].maxsolutions = _nj29;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j30;
vinfos[4].indices[0] = _ij30[0];
vinfos[4].indices[1] = _ij30[1];
vinfos[4].maxsolutions = _nj30;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j31;
vinfos[5].indices[0] = _ij31[0];
vinfos[5].indices[1] = _ij31[1];
vinfos[5].maxsolutions = _nj31;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

} else
{
if( 1 )
{
continue;

} else
{
}
}
}
}
}
}

} else
{
{
IkReal j26array[1], cj26array[1], sj26array[1];
bool j26valid[1]={false};
_nj26 = 1;
if( IKabs(((IkReal(-1.00000000000000))*(new_r20)*(((IKabs(cj27) != 0)?((IkReal)1/(cj27)):(IkReal)1.0e30)))) < IKFAST_ATAN2_MAGTHRESH && IKabs(((((IKabs(sj27) != 0)?((IkReal)1/(sj27)):(IkReal)1.0e30))*(((((new_r01)*(sj28)))+(((cj28)*(new_r11))))))) < IKFAST_ATAN2_MAGTHRESH && IKabs(IKsqr(((IkReal(-1.00000000000000))*(new_r20)*(((IKabs(cj27) != 0)?((IkReal)1/(cj27)):(IkReal)1.0e30))))+IKsqr(((((IKabs(sj27) != 0)?((IkReal)1/(sj27)):(IkReal)1.0e30))*(((((new_r01)*(sj28)))+(((cj28)*(new_r11)))))))-1) <= IKFAST_SINCOS_THRESH )
    continue;
j26array[0]=IKatan2(((IkReal(-1.00000000000000))*(new_r20)*(((IKabs(cj27) != 0)?((IkReal)1/(cj27)):(IkReal)1.0e30))), ((((IKabs(sj27) != 0)?((IkReal)1/(sj27)):(IkReal)1.0e30))*(((((new_r01)*(sj28)))+(((cj28)*(new_r11)))))));
sj26array[0]=IKsin(j26array[0]);
cj26array[0]=IKcos(j26array[0]);
if( j26array[0] > IKPI )
{
    j26array[0]-=IK2PI;
}
else if( j26array[0] < -IKPI )
{    j26array[0]+=IK2PI;
}
j26valid[0] = true;
for(int ij26 = 0; ij26 < 1; ++ij26)
{
if( !j26valid[ij26] )
{
    continue;
}
_ij26[0] = ij26; _ij26[1] = -1;
for(int iij26 = ij26+1; iij26 < 1; ++iij26)
{
if( j26valid[iij26] && IKabs(cj26array[ij26]-cj26array[iij26]) < IKFAST_SOLUTION_THRESH && IKabs(sj26array[ij26]-sj26array[iij26]) < IKFAST_SOLUTION_THRESH )
{
    j26valid[iij26]=false; _ij26[1] = iij26; break; 
}
}
j26 = j26array[ij26]; cj26 = cj26array[ij26]; sj26 = sj26array[ij26];
{
IkReal evalcond[8];
IkReal x200=IKcos(j26);
IkReal x201=IKsin(j26);
IkReal x202=((cj28)*(new_r11));
IkReal x203=((new_r01)*(sj28));
IkReal x204=((IkReal(1.00000000000000))*(sj28));
IkReal x205=((new_r00)*(sj28));
IkReal x206=((cj28)*(new_r10));
IkReal x207=((IkReal(1.00000000000000))*(x200));
evalcond[0]=((((cj27)*(x201)))+(new_r20));
evalcond[1]=((new_r21)+(((IkReal(-1.00000000000000))*(cj27)*(x207))));
evalcond[2]=((((IkReal(-1.00000000000000))*(x207)))+(((cj28)*(new_r00)))+(((IkReal(-1.00000000000000))*(new_r10)*(x204))));
evalcond[3]=((((cj28)*(new_r01)))+(((IkReal(-1.00000000000000))*(x201)))+(((IkReal(-1.00000000000000))*(new_r11)*(x204))));
evalcond[4]=((x206)+(x205)+(((sj27)*(x201))));
evalcond[5]=((((IkReal(-1.00000000000000))*(sj27)*(x207)))+(x203)+(x202));
evalcond[6]=((x201)+(((sj27)*(x205)))+(((sj27)*(x206)))+(((cj27)*(new_r20))));
evalcond[7]=((((IkReal(-1.00000000000000))*(x207)))+(((sj27)*(x202)))+(((sj27)*(x203)))+(((cj27)*(new_r21))));
if( IKabs(evalcond[0]) > 0.000001  || IKabs(evalcond[1]) > 0.000001  || IKabs(evalcond[2]) > 0.000001  || IKabs(evalcond[3]) > 0.000001  || IKabs(evalcond[4]) > 0.000001  || IKabs(evalcond[5]) > 0.000001  || IKabs(evalcond[6]) > 0.000001  || IKabs(evalcond[7]) > 0.000001  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j26;
vinfos[0].indices[0] = _ij26[0];
vinfos[0].indices[1] = _ij26[1];
vinfos[0].maxsolutions = _nj26;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j27;
vinfos[1].indices[0] = _ij27[0];
vinfos[1].indices[1] = _ij27[1];
vinfos[1].maxsolutions = _nj27;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j28;
vinfos[2].indices[0] = _ij28[0];
vinfos[2].indices[1] = _ij28[1];
vinfos[2].maxsolutions = _nj28;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j29;
vinfos[3].indices[0] = _ij29[0];
vinfos[3].indices[1] = _ij29[1];
vinfos[3].maxsolutions = _nj29;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j30;
vinfos[4].indices[0] = _ij30[0];
vinfos[4].indices[1] = _ij30[1];
vinfos[4].maxsolutions = _nj30;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j31;
vinfos[5].indices[0] = _ij31[0];
vinfos[5].indices[1] = _ij31[1];
vinfos[5].maxsolutions = _nj31;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j26array[1], cj26array[1], sj26array[1];
bool j26valid[1]={false};
_nj26 = 1;
if( IKabs(((IkReal(-1.00000000000000))*(new_r20)*(((IKabs(cj27) != 0)?((IkReal)1/(cj27)):(IkReal)1.0e30)))) < IKFAST_ATAN2_MAGTHRESH && IKabs(((((IkReal(-1.00000000000000))*(new_r10)*(sj28)))+(((cj28)*(new_r00))))) < IKFAST_ATAN2_MAGTHRESH && IKabs(IKsqr(((IkReal(-1.00000000000000))*(new_r20)*(((IKabs(cj27) != 0)?((IkReal)1/(cj27)):(IkReal)1.0e30))))+IKsqr(((((IkReal(-1.00000000000000))*(new_r10)*(sj28)))+(((cj28)*(new_r00)))))-1) <= IKFAST_SINCOS_THRESH )
    continue;
j26array[0]=IKatan2(((IkReal(-1.00000000000000))*(new_r20)*(((IKabs(cj27) != 0)?((IkReal)1/(cj27)):(IkReal)1.0e30))), ((((IkReal(-1.00000000000000))*(new_r10)*(sj28)))+(((cj28)*(new_r00)))));
sj26array[0]=IKsin(j26array[0]);
cj26array[0]=IKcos(j26array[0]);
if( j26array[0] > IKPI )
{
    j26array[0]-=IK2PI;
}
else if( j26array[0] < -IKPI )
{    j26array[0]+=IK2PI;
}
j26valid[0] = true;
for(int ij26 = 0; ij26 < 1; ++ij26)
{
if( !j26valid[ij26] )
{
    continue;
}
_ij26[0] = ij26; _ij26[1] = -1;
for(int iij26 = ij26+1; iij26 < 1; ++iij26)
{
if( j26valid[iij26] && IKabs(cj26array[ij26]-cj26array[iij26]) < IKFAST_SOLUTION_THRESH && IKabs(sj26array[ij26]-sj26array[iij26]) < IKFAST_SOLUTION_THRESH )
{
    j26valid[iij26]=false; _ij26[1] = iij26; break; 
}
}
j26 = j26array[ij26]; cj26 = cj26array[ij26]; sj26 = sj26array[ij26];
{
IkReal evalcond[8];
IkReal x208=IKcos(j26);
IkReal x209=IKsin(j26);
IkReal x210=((cj28)*(new_r11));
IkReal x211=((new_r01)*(sj28));
IkReal x212=((IkReal(1.00000000000000))*(sj28));
IkReal x213=((new_r00)*(sj28));
IkReal x214=((cj28)*(new_r10));
IkReal x215=((IkReal(1.00000000000000))*(x208));
evalcond[0]=((((cj27)*(x209)))+(new_r20));
evalcond[1]=((((IkReal(-1.00000000000000))*(cj27)*(x215)))+(new_r21));
evalcond[2]=((((IkReal(-1.00000000000000))*(new_r10)*(x212)))+(((cj28)*(new_r00)))+(((IkReal(-1.00000000000000))*(x215))));
evalcond[3]=((((IkReal(-1.00000000000000))*(new_r11)*(x212)))+(((cj28)*(new_r01)))+(((IkReal(-1.00000000000000))*(x209))));
evalcond[4]=((x213)+(x214)+(((sj27)*(x209))));
evalcond[5]=((((IkReal(-1.00000000000000))*(sj27)*(x215)))+(x210)+(x211));
evalcond[6]=((((sj27)*(x214)))+(((sj27)*(x213)))+(x209)+(((cj27)*(new_r20))));
evalcond[7]=((((sj27)*(x211)))+(((sj27)*(x210)))+(((IkReal(-1.00000000000000))*(x215)))+(((cj27)*(new_r21))));
if( IKabs(evalcond[0]) > 0.000001  || IKabs(evalcond[1]) > 0.000001  || IKabs(evalcond[2]) > 0.000001  || IKabs(evalcond[3]) > 0.000001  || IKabs(evalcond[4]) > 0.000001  || IKabs(evalcond[5]) > 0.000001  || IKabs(evalcond[6]) > 0.000001  || IKabs(evalcond[7]) > 0.000001  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j26;
vinfos[0].indices[0] = _ij26[0];
vinfos[0].indices[1] = _ij26[1];
vinfos[0].maxsolutions = _nj26;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j27;
vinfos[1].indices[0] = _ij27[0];
vinfos[1].indices[1] = _ij27[1];
vinfos[1].maxsolutions = _nj27;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j28;
vinfos[2].indices[0] = _ij28[0];
vinfos[2].indices[1] = _ij28[1];
vinfos[2].maxsolutions = _nj28;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j29;
vinfos[3].indices[0] = _ij29[0];
vinfos[3].indices[1] = _ij29[1];
vinfos[3].maxsolutions = _nj29;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j30;
vinfos[4].indices[0] = _ij30[0];
vinfos[4].indices[1] = _ij30[1];
vinfos[4].maxsolutions = _nj30;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j31;
vinfos[5].indices[0] = _ij31[0];
vinfos[5].indices[1] = _ij31[1];
vinfos[5].maxsolutions = _nj31;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j26array[1], cj26array[1], sj26array[1];
bool j26valid[1]={false};
_nj26 = 1;
if( IKabs(((IkReal(-1.00000000000000))*(gconst5)*(new_r20))) < IKFAST_ATAN2_MAGTHRESH && IKabs(((gconst5)*(new_r21))) < IKFAST_ATAN2_MAGTHRESH )
    continue;
j26array[0]=IKatan2(((IkReal(-1.00000000000000))*(gconst5)*(new_r20)), ((gconst5)*(new_r21)));
sj26array[0]=IKsin(j26array[0]);
cj26array[0]=IKcos(j26array[0]);
if( j26array[0] > IKPI )
{
    j26array[0]-=IK2PI;
}
else if( j26array[0] < -IKPI )
{    j26array[0]+=IK2PI;
}
j26valid[0] = true;
for(int ij26 = 0; ij26 < 1; ++ij26)
{
if( !j26valid[ij26] )
{
    continue;
}
_ij26[0] = ij26; _ij26[1] = -1;
for(int iij26 = ij26+1; iij26 < 1; ++iij26)
{
if( j26valid[iij26] && IKabs(cj26array[ij26]-cj26array[iij26]) < IKFAST_SOLUTION_THRESH && IKabs(sj26array[ij26]-sj26array[iij26]) < IKFAST_SOLUTION_THRESH )
{
    j26valid[iij26]=false; _ij26[1] = iij26; break; 
}
}
j26 = j26array[ij26]; cj26 = cj26array[ij26]; sj26 = sj26array[ij26];
{
IkReal evalcond[8];
IkReal x216=IKcos(j26);
IkReal x217=IKsin(j26);
IkReal x218=((cj28)*(new_r11));
IkReal x219=((new_r01)*(sj28));
IkReal x220=((IkReal(1.00000000000000))*(sj28));
IkReal x221=((new_r00)*(sj28));
IkReal x222=((cj28)*(new_r10));
IkReal x223=((IkReal(1.00000000000000))*(x216));
evalcond[0]=((((cj27)*(x217)))+(new_r20));
evalcond[1]=((((IkReal(-1.00000000000000))*(cj27)*(x223)))+(new_r21));
evalcond[2]=((((IkReal(-1.00000000000000))*(new_r10)*(x220)))+(((cj28)*(new_r00)))+(((IkReal(-1.00000000000000))*(x223))));
evalcond[3]=((((IkReal(-1.00000000000000))*(new_r11)*(x220)))+(((IkReal(-1.00000000000000))*(x217)))+(((cj28)*(new_r01))));
evalcond[4]=((((sj27)*(x217)))+(x221)+(x222));
evalcond[5]=((((IkReal(-1.00000000000000))*(sj27)*(x223)))+(x218)+(x219));
evalcond[6]=((x217)+(((sj27)*(x221)))+(((sj27)*(x222)))+(((cj27)*(new_r20))));
evalcond[7]=((((sj27)*(x219)))+(((sj27)*(x218)))+(((cj27)*(new_r21)))+(((IkReal(-1.00000000000000))*(x223))));
if( IKabs(evalcond[0]) > 0.000001  || IKabs(evalcond[1]) > 0.000001  || IKabs(evalcond[2]) > 0.000001  || IKabs(evalcond[3]) > 0.000001  || IKabs(evalcond[4]) > 0.000001  || IKabs(evalcond[5]) > 0.000001  || IKabs(evalcond[6]) > 0.000001  || IKabs(evalcond[7]) > 0.000001  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j26;
vinfos[0].indices[0] = _ij26[0];
vinfos[0].indices[1] = _ij26[1];
vinfos[0].maxsolutions = _nj26;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j27;
vinfos[1].indices[0] = _ij27[0];
vinfos[1].indices[1] = _ij27[1];
vinfos[1].maxsolutions = _nj27;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j28;
vinfos[2].indices[0] = _ij28[0];
vinfos[2].indices[1] = _ij28[1];
vinfos[2].maxsolutions = _nj28;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j29;
vinfos[3].indices[0] = _ij29[0];
vinfos[3].indices[1] = _ij29[1];
vinfos[3].maxsolutions = _nj29;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j30;
vinfos[4].indices[0] = _ij30[0];
vinfos[4].indices[1] = _ij30[1];
vinfos[4].maxsolutions = _nj30;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j31;
vinfos[5].indices[0] = _ij31[0];
vinfos[5].indices[1] = _ij31[1];
vinfos[5].maxsolutions = _nj31;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}
}
}

}

}

} else
{
{
IkReal j26array[1], cj26array[1], sj26array[1];
bool j26valid[1]={false};
_nj26 = 1;
if( IKabs(((IkReal(-1.00000000000000))*(gconst2)*(new_r20))) < IKFAST_ATAN2_MAGTHRESH && IKabs(((gconst2)*(new_r21))) < IKFAST_ATAN2_MAGTHRESH )
    continue;
j26array[0]=IKatan2(((IkReal(-1.00000000000000))*(gconst2)*(new_r20)), ((gconst2)*(new_r21)));
sj26array[0]=IKsin(j26array[0]);
cj26array[0]=IKcos(j26array[0]);
if( j26array[0] > IKPI )
{
    j26array[0]-=IK2PI;
}
else if( j26array[0] < -IKPI )
{    j26array[0]+=IK2PI;
}
j26valid[0] = true;
for(int ij26 = 0; ij26 < 1; ++ij26)
{
if( !j26valid[ij26] )
{
    continue;
}
_ij26[0] = ij26; _ij26[1] = -1;
for(int iij26 = ij26+1; iij26 < 1; ++iij26)
{
if( j26valid[iij26] && IKabs(cj26array[ij26]-cj26array[iij26]) < IKFAST_SOLUTION_THRESH && IKabs(sj26array[ij26]-sj26array[iij26]) < IKFAST_SOLUTION_THRESH )
{
    j26valid[iij26]=false; _ij26[1] = iij26; break; 
}
}
j26 = j26array[ij26]; cj26 = cj26array[ij26]; sj26 = sj26array[ij26];
{
IkReal evalcond[2];
evalcond[0]=((((cj27)*(IKsin(j26))))+(new_r20));
evalcond[1]=((((IkReal(-1.00000000000000))*(cj27)*(IKcos(j26))))+(new_r21));
if( IKabs(evalcond[0]) > 0.000001  || IKabs(evalcond[1]) > 0.000001  )
{
continue;
}
}

{
IkReal dummyeval[1];
IkReal gconst6;
gconst6=IKsign(((((IkReal(-1.00000000000000))*((new_r02)*(new_r02))))+(((IkReal(-1.00000000000000))*((new_r12)*(new_r12))))));
dummyeval[0]=((((IkReal(-1.00000000000000))*((new_r02)*(new_r02))))+(((IkReal(-1.00000000000000))*((new_r12)*(new_r12)))));
if( IKabs(dummyeval[0]) < 0.0000010000000000  )
{
{
IkReal dummyeval[1];
IkReal gconst7;
gconst7=IKsign(((((IkReal(-1.00000000000000))*(new_r00)*(new_r02)))+(((IkReal(-1.00000000000000))*(new_r10)*(new_r12)))));
dummyeval[0]=((((IkReal(-1.00000000000000))*(new_r00)*(new_r02)))+(((IkReal(-1.00000000000000))*(new_r10)*(new_r12))));
if( IKabs(dummyeval[0]) < 0.0000010000000000  )
{
continue;

} else
{
{
IkReal j28array[1], cj28array[1], sj28array[1];
bool j28valid[1]={false};
_nj28 = 1;
IkReal x224=((gconst7)*(sj26)*(sj27));
if( IKabs(((new_r02)*(x224))) < IKFAST_ATAN2_MAGTHRESH && IKabs(((new_r12)*(x224))) < IKFAST_ATAN2_MAGTHRESH )
    continue;
j28array[0]=IKatan2(((new_r02)*(x224)), ((new_r12)*(x224)));
sj28array[0]=IKsin(j28array[0]);
cj28array[0]=IKcos(j28array[0]);
if( j28array[0] > IKPI )
{
    j28array[0]-=IK2PI;
}
else if( j28array[0] < -IKPI )
{    j28array[0]+=IK2PI;
}
j28valid[0] = true;
for(int ij28 = 0; ij28 < 1; ++ij28)
{
if( !j28valid[ij28] )
{
    continue;
}
_ij28[0] = ij28; _ij28[1] = -1;
for(int iij28 = ij28+1; iij28 < 1; ++iij28)
{
if( j28valid[iij28] && IKabs(cj28array[ij28]-cj28array[iij28]) < IKFAST_SOLUTION_THRESH && IKabs(sj28array[ij28]-sj28array[iij28]) < IKFAST_SOLUTION_THRESH )
{
    j28valid[iij28]=false; _ij28[1] = iij28; break; 
}
}
j28 = j28array[ij28]; cj28 = cj28array[ij28]; sj28 = sj28array[ij28];
{
IkReal evalcond[12];
IkReal x225=IKsin(j28);
IkReal x226=IKcos(j28);
IkReal x227=((IkReal(1.00000000000000))*(cj26));
IkReal x228=((IkReal(1.00000000000000))*(sj27));
IkReal x229=((new_r12)*(x226));
IkReal x230=((new_r00)*(x225));
IkReal x231=((new_r11)*(x226));
IkReal x232=((new_r10)*(x226));
IkReal x233=((new_r02)*(x225));
IkReal x234=((IkReal(1.00000000000000))*(x225));
IkReal x235=((new_r01)*(x225));
evalcond[0]=((((IkReal(-1.00000000000000))*(new_r12)*(x234)))+(((new_r02)*(x226))));
evalcond[1]=((cj27)+(x229)+(x233));
evalcond[2]=((((new_r00)*(x226)))+(((IkReal(-1.00000000000000))*(new_r10)*(x234)))+(((IkReal(-1.00000000000000))*(x227))));
evalcond[3]=((((new_r01)*(x226)))+(((IkReal(-1.00000000000000))*(sj26)))+(((IkReal(-1.00000000000000))*(new_r11)*(x234))));
evalcond[4]=((((sj26)*(sj27)))+(x232)+(x230));
evalcond[5]=((((IkReal(-1.00000000000000))*(sj27)*(x227)))+(x231)+(x235));
evalcond[6]=((((sj27)*(x229)))+(((sj27)*(x233)))+(((cj27)*(new_r22))));
evalcond[7]=((((cj27)*(x232)))+(((cj27)*(x230)))+(((IkReal(-1.00000000000000))*(new_r20)*(x228))));
evalcond[8]=((((cj27)*(x235)))+(((cj27)*(x231)))+(((IkReal(-1.00000000000000))*(new_r21)*(x228))));
evalcond[9]=((IkReal(1.00000000000000))+(((cj27)*(x229)))+(((IkReal(-1.00000000000000))*(new_r22)*(x228)))+(((cj27)*(x233))));
evalcond[10]=((sj26)+(((sj27)*(x230)))+(((sj27)*(x232)))+(((cj27)*(new_r20))));
evalcond[11]=((((sj27)*(x231)))+(((sj27)*(x235)))+(((cj27)*(new_r21)))+(((IkReal(-1.00000000000000))*(x227))));
if( IKabs(evalcond[0]) > 0.000001  || IKabs(evalcond[1]) > 0.000001  || IKabs(evalcond[2]) > 0.000001  || IKabs(evalcond[3]) > 0.000001  || IKabs(evalcond[4]) > 0.000001  || IKabs(evalcond[5]) > 0.000001  || IKabs(evalcond[6]) > 0.000001  || IKabs(evalcond[7]) > 0.000001  || IKabs(evalcond[8]) > 0.000001  || IKabs(evalcond[9]) > 0.000001  || IKabs(evalcond[10]) > 0.000001  || IKabs(evalcond[11]) > 0.000001  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j26;
vinfos[0].indices[0] = _ij26[0];
vinfos[0].indices[1] = _ij26[1];
vinfos[0].maxsolutions = _nj26;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j27;
vinfos[1].indices[0] = _ij27[0];
vinfos[1].indices[1] = _ij27[1];
vinfos[1].maxsolutions = _nj27;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j28;
vinfos[2].indices[0] = _ij28[0];
vinfos[2].indices[1] = _ij28[1];
vinfos[2].maxsolutions = _nj28;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j29;
vinfos[3].indices[0] = _ij29[0];
vinfos[3].indices[1] = _ij29[1];
vinfos[3].maxsolutions = _nj29;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j30;
vinfos[4].indices[0] = _ij30[0];
vinfos[4].indices[1] = _ij30[1];
vinfos[4].maxsolutions = _nj30;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j31;
vinfos[5].indices[0] = _ij31[0];
vinfos[5].indices[1] = _ij31[1];
vinfos[5].maxsolutions = _nj31;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j28array[1], cj28array[1], sj28array[1];
bool j28valid[1]={false};
_nj28 = 1;
IkReal x236=((cj27)*(gconst6));
if( IKabs(((new_r02)*(x236))) < IKFAST_ATAN2_MAGTHRESH && IKabs(((new_r12)*(x236))) < IKFAST_ATAN2_MAGTHRESH )
    continue;
j28array[0]=IKatan2(((new_r02)*(x236)), ((new_r12)*(x236)));
sj28array[0]=IKsin(j28array[0]);
cj28array[0]=IKcos(j28array[0]);
if( j28array[0] > IKPI )
{
    j28array[0]-=IK2PI;
}
else if( j28array[0] < -IKPI )
{    j28array[0]+=IK2PI;
}
j28valid[0] = true;
for(int ij28 = 0; ij28 < 1; ++ij28)
{
if( !j28valid[ij28] )
{
    continue;
}
_ij28[0] = ij28; _ij28[1] = -1;
for(int iij28 = ij28+1; iij28 < 1; ++iij28)
{
if( j28valid[iij28] && IKabs(cj28array[ij28]-cj28array[iij28]) < IKFAST_SOLUTION_THRESH && IKabs(sj28array[ij28]-sj28array[iij28]) < IKFAST_SOLUTION_THRESH )
{
    j28valid[iij28]=false; _ij28[1] = iij28; break; 
}
}
j28 = j28array[ij28]; cj28 = cj28array[ij28]; sj28 = sj28array[ij28];
{
IkReal evalcond[12];
IkReal x237=IKsin(j28);
IkReal x238=IKcos(j28);
IkReal x239=((IkReal(1.00000000000000))*(cj26));
IkReal x240=((IkReal(1.00000000000000))*(sj27));
IkReal x241=((new_r12)*(x238));
IkReal x242=((new_r00)*(x237));
IkReal x243=((new_r11)*(x238));
IkReal x244=((new_r10)*(x238));
IkReal x245=((new_r02)*(x237));
IkReal x246=((IkReal(1.00000000000000))*(x237));
IkReal x247=((new_r01)*(x237));
evalcond[0]=((((new_r02)*(x238)))+(((IkReal(-1.00000000000000))*(new_r12)*(x246))));
evalcond[1]=((cj27)+(x241)+(x245));
evalcond[2]=((((new_r00)*(x238)))+(((IkReal(-1.00000000000000))*(x239)))+(((IkReal(-1.00000000000000))*(new_r10)*(x246))));
evalcond[3]=((((new_r01)*(x238)))+(((IkReal(-1.00000000000000))*(sj26)))+(((IkReal(-1.00000000000000))*(new_r11)*(x246))));
evalcond[4]=((((sj26)*(sj27)))+(x242)+(x244));
evalcond[5]=((x243)+(x247)+(((IkReal(-1.00000000000000))*(sj27)*(x239))));
evalcond[6]=((((sj27)*(x241)))+(((sj27)*(x245)))+(((cj27)*(new_r22))));
evalcond[7]=((((IkReal(-1.00000000000000))*(new_r20)*(x240)))+(((cj27)*(x242)))+(((cj27)*(x244))));
evalcond[8]=((((IkReal(-1.00000000000000))*(new_r21)*(x240)))+(((cj27)*(x243)))+(((cj27)*(x247))));
evalcond[9]=((IkReal(1.00000000000000))+(((IkReal(-1.00000000000000))*(new_r22)*(x240)))+(((cj27)*(x241)))+(((cj27)*(x245))));
evalcond[10]=((((sj27)*(x242)))+(((sj27)*(x244)))+(sj26)+(((cj27)*(new_r20))));
evalcond[11]=((((sj27)*(x243)))+(((sj27)*(x247)))+(((IkReal(-1.00000000000000))*(x239)))+(((cj27)*(new_r21))));
if( IKabs(evalcond[0]) > 0.000001  || IKabs(evalcond[1]) > 0.000001  || IKabs(evalcond[2]) > 0.000001  || IKabs(evalcond[3]) > 0.000001  || IKabs(evalcond[4]) > 0.000001  || IKabs(evalcond[5]) > 0.000001  || IKabs(evalcond[6]) > 0.000001  || IKabs(evalcond[7]) > 0.000001  || IKabs(evalcond[8]) > 0.000001  || IKabs(evalcond[9]) > 0.000001  || IKabs(evalcond[10]) > 0.000001  || IKabs(evalcond[11]) > 0.000001  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j26;
vinfos[0].indices[0] = _ij26[0];
vinfos[0].indices[1] = _ij26[1];
vinfos[0].maxsolutions = _nj26;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j27;
vinfos[1].indices[0] = _ij27[0];
vinfos[1].indices[1] = _ij27[1];
vinfos[1].maxsolutions = _nj27;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j28;
vinfos[2].indices[0] = _ij28[0];
vinfos[2].indices[1] = _ij28[1];
vinfos[2].maxsolutions = _nj28;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j29;
vinfos[3].indices[0] = _ij29[0];
vinfos[3].indices[1] = _ij29[1];
vinfos[3].maxsolutions = _nj29;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j30;
vinfos[4].indices[0] = _ij30[0];
vinfos[4].indices[1] = _ij30[1];
vinfos[4].maxsolutions = _nj30;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j31;
vinfos[5].indices[0] = _ij31[0];
vinfos[5].indices[1] = _ij31[1];
vinfos[5].maxsolutions = _nj31;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}
}
}

}

}
}
}
}
}};


/// solves the inverse kinematics equations.
/// \param pfree is an array specifying the free joints of the chain.
IKFAST_API bool ComputeIk(const IkReal* eetrans, const IkReal* eerot, const IkReal* pfree, IkSolutionListBase<IkReal>& solutions) {
IKSolver solver;
return solver.ComputeIk(eetrans,eerot,pfree,solutions);
}

IKFAST_API const char* GetKinematicsHash() { return "44b0ff28c6cbe740f0fd1e6899308cda"; }

IKFAST_API const char* GetIkFastVersion() { return IKFAST_STRINGIZE(IKFAST_VERSION); }

#ifdef IKFAST_NAMESPACE
} // end namespace
#endif

#ifndef IKFAST_NO_MAIN
#include <stdio.h>
#include <stdlib.h>
#ifdef IKFAST_NAMESPACE
using namespace IKFAST_NAMESPACE;
#endif
int main(int argc, char** argv)
{
    if( argc != 12+GetNumFreeParameters()+1 ) {
        printf("\nUsage: ./ik r00 r01 r02 t0 r10 r11 r12 t1 r20 r21 r22 t2 free0 ...\n\n"
               "Returns the ik solutions given the transformation of the end effector specified by\n"
               "a 3x3 rotation R (rXX), and a 3x1 translation (tX).\n"
               "There are %d free parameters that have to be specified.\n\n",GetNumFreeParameters());
        return 1;
    }

    IkSolutionList<IkReal> solutions;
    std::vector<IkReal> vfree(GetNumFreeParameters());
    IkReal eerot[9],eetrans[3];
    eerot[0] = atof(argv[1]); eerot[1] = atof(argv[2]); eerot[2] = atof(argv[3]); eetrans[0] = atof(argv[4]);
    eerot[3] = atof(argv[5]); eerot[4] = atof(argv[6]); eerot[5] = atof(argv[7]); eetrans[1] = atof(argv[8]);
    eerot[6] = atof(argv[9]); eerot[7] = atof(argv[10]); eerot[8] = atof(argv[11]); eetrans[2] = atof(argv[12]);
    for(std::size_t i = 0; i < vfree.size(); ++i)
        vfree[i] = atof(argv[13+i]);
    bool bSuccess = ComputeIk(eetrans, eerot, vfree.size() > 0 ? &vfree[0] : NULL, solutions);

    if( !bSuccess ) {
        fprintf(stderr,"Failed to get ik solution\n");
        return -1;
    }

    printf("Found %d ik solutions:\n", (int)solutions.GetNumSolutions());
    std::vector<IkReal> solvalues(GetNumJoints());
    for(std::size_t i = 0; i < solutions.GetNumSolutions(); ++i) {
        const IkSolutionBase<IkReal>& sol = solutions.GetSolution(i);
        printf("sol%d (free=%d): ", (int)i, (int)sol.GetFree().size());
        std::vector<IkReal> vsolfree(sol.GetFree().size());
        sol.GetSolution(&solvalues[0],vsolfree.size()>0?&vsolfree[0]:NULL);
        for( std::size_t j = 0; j < solvalues.size(); ++j)
            printf("%.15f, ", solvalues[j]);
        printf("\n");
    }
    return 0;
}

#endif

#include "plugindefs.h"
namespace IKFAST_NAMESPACE {
IkSolverBasePtr CreateIkSolver(EnvironmentBasePtr penv, std::istream& sinput, const std::vector<dReal>& vfreeinc) {
    boost::shared_ptr<ikfast::IkFastFunctions<IkReal> > ikfunctions(new ikfast::IkFastFunctions<IkReal>());
    ikfunctions->_ComputeIk = IKFAST_NAMESPACE::ComputeIk;
    ikfunctions->_ComputeFk = IKFAST_NAMESPACE::ComputeFk;
    ikfunctions->_GetNumFreeParameters = IKFAST_NAMESPACE::GetNumFreeParameters;
    ikfunctions->_GetFreeParameters = IKFAST_NAMESPACE::GetFreeParameters;
    ikfunctions->_GetNumJoints = IKFAST_NAMESPACE::GetNumJoints;
    ikfunctions->_GetIkRealSize = IKFAST_NAMESPACE::GetIkRealSize;
    ikfunctions->_GetIkFastVersion = IKFAST_NAMESPACE::GetIkFastVersion;
    ikfunctions->_GetIkType = IKFAST_NAMESPACE::GetIkType;
    ikfunctions->_GetKinematicsHash = IKFAST_NAMESPACE::GetKinematicsHash;
    return CreateIkFastSolver(penv,sinput,ikfunctions,vfreeinc);
}
} // end namespace
