#define IKFAST_NAMESPACE drchubo_rightarm_ikfast
#include "plugindefs.h"

/// autogenerated analytical inverse kinematics code from ikfast program part of OpenRAVE
/// \author Rosen Diankov
///
/// Licensed under the Apache License, Version 2.0 (the "License");
/// you may not use this file except in compliance with the License.
/// You may obtain a copy of the License at
///     http://www.apache.org/licenses/LICENSE-2.0
/// 
/// Unless required by applicable law or agreed to in writing, software
/// distributed under the License is distributed on an "AS IS" BASIS,
/// WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
/// See the License for the specific language governing permissions and
/// limitations under the License.
///
/// ikfast version 61 generated on 2013-11-20 15:54:16.096562
/// To compile with gcc:
///     gcc -lstdc++ ik.cpp
/// To compile without any main function as a shared object (might need -llapack):
///     gcc -fPIC -lstdc++ -DIKFAST_NO_MAIN -DIKFAST_CLIBRARY -shared -Wl,-soname,libik.so -o libik.so ik.cpp
#define IKFAST_HAS_LIBRARY
#include "ikfast.h" // found inside share/openrave-X.Y/python/ikfast.h
using namespace ikfast;

// check if the included ikfast version matches what this file was compiled with
#define IKFAST_COMPILE_ASSERT(x) extern int __dummy[(int)x]
IKFAST_COMPILE_ASSERT(IKFAST_VERSION==61);

#include <cmath>
#include <vector>
#include <limits>
#include <algorithm>
#include <complex>

#define IKFAST_STRINGIZE2(s) #s
#define IKFAST_STRINGIZE(s) IKFAST_STRINGIZE2(s)

#ifndef IKFAST_ASSERT
#include <stdexcept>
#include <sstream>
#include <iostream>

#ifdef _MSC_VER
#ifndef __PRETTY_FUNCTION__
#define __PRETTY_FUNCTION__ __FUNCDNAME__
#endif
#endif

#ifndef __PRETTY_FUNCTION__
#define __PRETTY_FUNCTION__ __func__
#endif

#define IKFAST_ASSERT(b) { if( !(b) ) { std::stringstream ss; ss << "ikfast exception: " << __FILE__ << ":" << __LINE__ << ": " <<__PRETTY_FUNCTION__ << ": Assertion '" << #b << "' failed"; throw std::runtime_error(ss.str()); } }

#endif

#if defined(_MSC_VER)
#define IKFAST_ALIGNED16(x) __declspec(align(16)) x
#else
#define IKFAST_ALIGNED16(x) x __attribute((aligned(16)))
#endif

#define IK2PI  ((IkReal)6.28318530717959)
#define IKPI  ((IkReal)3.14159265358979)
#define IKPI_2  ((IkReal)1.57079632679490)

#ifdef _MSC_VER
#ifndef isnan
#define isnan _isnan
#endif
#endif // _MSC_VER

// lapack routines
extern "C" {
  void dgetrf_ (const int* m, const int* n, double* a, const int* lda, int* ipiv, int* info);
  void zgetrf_ (const int* m, const int* n, std::complex<double>* a, const int* lda, int* ipiv, int* info);
  void dgetri_(const int* n, const double* a, const int* lda, int* ipiv, double* work, const int* lwork, int* info);
  void dgesv_ (const int* n, const int* nrhs, double* a, const int* lda, int* ipiv, double* b, const int* ldb, int* info);
  void dgetrs_(const char *trans, const int *n, const int *nrhs, double *a, const int *lda, int *ipiv, double *b, const int *ldb, int *info);
  void dgeev_(const char *jobvl, const char *jobvr, const int *n, double *a, const int *lda, double *wr, double *wi,double *vl, const int *ldvl, double *vr, const int *ldvr, double *work, const int *lwork, int *info);
}

using namespace std; // necessary to get std math routines

#ifdef IKFAST_NAMESPACE
namespace IKFAST_NAMESPACE {
#endif

inline float IKabs(float f) { return fabsf(f); }
inline double IKabs(double f) { return fabs(f); }

inline float IKsqr(float f) { return f*f; }
inline double IKsqr(double f) { return f*f; }

inline float IKlog(float f) { return logf(f); }
inline double IKlog(double f) { return log(f); }

// allows asin and acos to exceed 1
#ifndef IKFAST_SINCOS_THRESH
#define IKFAST_SINCOS_THRESH ((IkReal)0.000001)
#endif

// used to check input to atan2 for degenerate cases
#ifndef IKFAST_ATAN2_MAGTHRESH
#define IKFAST_ATAN2_MAGTHRESH ((IkReal)2e-6)
#endif

// minimum distance of separate solutions
#ifndef IKFAST_SOLUTION_THRESH
#define IKFAST_SOLUTION_THRESH ((IkReal)1e-6)
#endif

inline float IKasin(float f)
{
IKFAST_ASSERT( f > -1-IKFAST_SINCOS_THRESH && f < 1+IKFAST_SINCOS_THRESH ); // any more error implies something is wrong with the solver
if( f <= -1 ) return float(-IKPI_2);
else if( f >= 1 ) return float(IKPI_2);
return asinf(f);
}
inline double IKasin(double f)
{
IKFAST_ASSERT( f > -1-IKFAST_SINCOS_THRESH && f < 1+IKFAST_SINCOS_THRESH ); // any more error implies something is wrong with the solver
if( f <= -1 ) return -IKPI_2;
else if( f >= 1 ) return IKPI_2;
return asin(f);
}

// return positive value in [0,y)
inline float IKfmod(float x, float y)
{
    while(x < 0) {
        x += y;
    }
    return fmodf(x,y);
}

// return positive value in [0,y)
inline double IKfmod(double x, double y)
{
    while(x < 0) {
        x += y;
    }
    return fmod(x,y);
}

inline float IKacos(float f)
{
IKFAST_ASSERT( f > -1-IKFAST_SINCOS_THRESH && f < 1+IKFAST_SINCOS_THRESH ); // any more error implies something is wrong with the solver
if( f <= -1 ) return float(IKPI);
else if( f >= 1 ) return float(0);
return acosf(f);
}
inline double IKacos(double f)
{
IKFAST_ASSERT( f > -1-IKFAST_SINCOS_THRESH && f < 1+IKFAST_SINCOS_THRESH ); // any more error implies something is wrong with the solver
if( f <= -1 ) return IKPI;
else if( f >= 1 ) return 0;
return acos(f);
}
inline float IKsin(float f) { return sinf(f); }
inline double IKsin(double f) { return sin(f); }
inline float IKcos(float f) { return cosf(f); }
inline double IKcos(double f) { return cos(f); }
inline float IKtan(float f) { return tanf(f); }
inline double IKtan(double f) { return tan(f); }
inline float IKsqrt(float f) { if( f <= 0.0f ) return 0.0f; return sqrtf(f); }
inline double IKsqrt(double f) { if( f <= 0.0 ) return 0.0; return sqrt(f); }
inline float IKatan2(float fy, float fx) {
    if( isnan(fy) ) {
        IKFAST_ASSERT(!isnan(fx)); // if both are nan, probably wrong value will be returned
        return float(IKPI_2);
    }
    else if( isnan(fx) ) {
        return 0;
    }
    return atan2f(fy,fx);
}
inline double IKatan2(double fy, double fx) {
    if( isnan(fy) ) {
        IKFAST_ASSERT(!isnan(fx)); // if both are nan, probably wrong value will be returned
        return IKPI_2;
    }
    else if( isnan(fx) ) {
        return 0;
    }
    return atan2(fy,fx);
}

inline float IKsign(float f) {
    if( f > 0 ) {
        return float(1);
    }
    else if( f < 0 ) {
        return float(-1);
    }
    return 0;
}

inline double IKsign(double f) {
    if( f > 0 ) {
        return 1.0;
    }
    else if( f < 0 ) {
        return -1.0;
    }
    return 0;
}

/// solves the forward kinematics equations.
/// \param pfree is an array specifying the free joints of the chain.
IKFAST_API void ComputeFk(const IkReal* j, IkReal* eetrans, IkReal* eerot) {
IkReal x0,x1,x2,x3,x4,x5,x6,x7,x8,x9,x10,x11,x12,x13,x14,x15,x16,x17,x18,x19,x20,x21,x22,x23,x24,x25,x26,x27,x28,x29,x30,x31,x32,x33,x34,x35,x36,x37,x38,x39,x40,x41,x42,x43,x44,x45,x46,x47,x48,x49,x50,x51,x52,x53,x54,x55,x56,x57,x58,x59,x60,x61,x62,x63,x64,x65,x66,x67;
x0=IKsin(j[0]);
x1=IKcos(j[2]);
x2=IKsin(j[1]);
x3=IKcos(j[0]);
x4=IKsin(j[2]);
x5=IKcos(j[3]);
x6=IKcos(j[1]);
x7=IKsin(j[3]);
x8=IKsin(j[4]);
x9=IKcos(j[4]);
x10=IKcos(j[5]);
x11=IKsin(j[5]);
x12=IKcos(j[6]);
x13=IKsin(j[6]);
x14=((IkReal(0.127000000000000))*(x7));
x15=((IkReal(0.0300000000000000))*(x1));
x16=((IkReal(1.00000000000000))*(x8));
x17=((IkReal(1.00000000000000))*(x5));
x18=((IkReal(1.00000000000000))*(x4));
x19=((IkReal(0.0300000000000000))*(x2));
x20=((IkReal(0.127000000000000))*(x8));
x21=((IkReal(1.00000000000000))*(x7));
x22=((IkReal(0.313800000000000))*(x5));
x23=((IkReal(0.127000000000000))*(x9));
x24=((IkReal(0.313800000000000))*(x2));
x25=((IkReal(1.00000000000000))*(x9));
x26=((IkReal(0.127000000000000))*(x5));
x27=((x0)*(x1));
x28=((x2)*(x5));
x29=((x4)*(x6));
x30=((x0)*(x4));
x31=((x0)*(x6));
x32=((x1)*(x6));
x33=((x3)*(x6));
x34=((x1)*(x3));
x35=((x3)*(x4));
x36=((x15)*(x3));
x37=((x0)*(x15));
x38=((x33)*(x7));
x39=((x21)*(x31));
x40=((x19)*(x30));
x41=((x18)*(x2)*(x3));
x42=((x19)*(x35));
x43=((((x2)*(x30)))+(x34));
x44=((((IkReal(-1.00000000000000))*(x18)*(x3)))+(((x2)*(x27))));
x45=((((x29)*(x5)))+(((x2)*(x7))));
x46=((x28)+(((IkReal(-1.00000000000000))*(x18)*(x6)*(x7))));
x47=((((IkReal(-1.00000000000000))*(x41)))+(x27));
x48=((((IkReal(-1.00000000000000))*(x27)))+(x41));
x49=((((IkReal(-1.00000000000000))*(x34)))+(((IkReal(-1.00000000000000))*(x0)*(x18)*(x2))));
x50=((((IkReal(-1.00000000000000))*(x2)*(x21)))+(((IkReal(-1.00000000000000))*(x17)*(x29))));
x51=((((IkReal(-1.00000000000000))*(x0)*(x18)))+(((IkReal(-1.00000000000000))*(x2)*(x34))));
x52=((x36)+(x40));
x53=((x44)*(x9));
x54=((x47)*(x5));
x55=((x51)*(x8));
x56=((x51)*(x9));
x57=((((IkReal(-1.00000000000000))*(x39)))+(((x43)*(x5))));
x58=((x38)+(x54));
x59=((((IkReal(-1.00000000000000))*(x17)*(x43)))+(x39));
x60=((((IkReal(-1.00000000000000))*(x17)*(x31)))+(((x49)*(x7))));
x61=((x57)*(x9));
x62=((((IkReal(-1.00000000000000))*(x38)))+(((IkReal(-1.00000000000000))*(x54))));
x63=((x62)*(x8));
x64=((((x10)*(((((x32)*(x8)))+(((x45)*(x9)))))))+(((x11)*(x46))));
x65=((x55)+(((x58)*(x9))));
x66=((((x11)*(x60)))+(((x10)*(((x61)+(((x44)*(x8))))))));
x67=((((x11)*(((((IkReal(-1.00000000000000))*(x48)*(x7)))+(((IkReal(-1.00000000000000))*(x33)*(x5)))))))+(((IkReal(-1.00000000000000))*(x10)*(x65))));
eerot[0]=((((x12)*(((((IkReal(-1.00000000000000))*(x25)*(x44)))+(((IkReal(-1.00000000000000))*(x16)*(x59)))))))+(((x13)*(x66))));
eerot[1]=((((x11)*(((((IkReal(-1.00000000000000))*(x16)*(x44)))+(((IkReal(-1.00000000000000))*(x25)*(x57)))))))+(((x10)*(x60))));
eerot[2]=((((x12)*(x66)))+(((x13)*(((x53)+(((x59)*(x8))))))));
IkReal x68=((IkReal(1.00000000000000))*(x31));
eetrans[0]=((((IkReal(-1.00000000000000))*(x5)*(x52)))+(((x11)*(((((IkReal(-1.00000000000000))*(x20)*(x44)))+(((IkReal(-1.00000000000000))*(x23)*(x57)))))))+(((x10)*(((((x14)*(x49)))+(((IkReal(-1.00000000000000))*(x26)*(x68)))))))+(((IkReal(-0.300000000000000))*(x31)))+(x52)+(((x7)*(((((IkReal(-0.313800000000000))*(x34)))+(((IkReal(-1.00000000000000))*(x24)*(x30)))))))+(((IkReal(0.0300000000000000))*(x31)*(x7)))+(((IkReal(-1.00000000000000))*(x22)*(x68))));
eerot[3]=((((x13)*(x64)))+(((x12)*(((((IkReal(-1.00000000000000))*(x25)*(x32)))+(((IkReal(-1.00000000000000))*(x16)*(x50))))))));
eerot[4]=((((x10)*(x46)))+(((x11)*(((((IkReal(-1.00000000000000))*(x25)*(x45)))+(((IkReal(-1.00000000000000))*(x16)*(x32))))))));
eerot[5]=((((x12)*(x64)))+(((x13)*(((((x32)*(x9)))+(((x50)*(x8))))))));
IkReal x69=((IkReal(0.0300000000000000))*(x29));
eetrans[1]=((IkReal(-0.229500000000000))+(((x10)*(((((IkReal(-1.00000000000000))*(x14)*(x29)))+(((x2)*(x26)))))))+(((IkReal(-0.313800000000000))*(x29)*(x7)))+(((IkReal(-1.00000000000000))*(x19)*(x7)))+(((IkReal(-1.00000000000000))*(x5)*(x69)))+(((x11)*(((((IkReal(-1.00000000000000))*(x20)*(x32)))+(((IkReal(-1.00000000000000))*(x23)*(x45)))))))+(((x2)*(x22)))+(x69)+(((IkReal(0.300000000000000))*(x2))));
eerot[6]=((((x13)*(x67)))+(((x12)*(((x56)+(x63))))));
eerot[7]=((((x10)*(((((IkReal(-1.00000000000000))*(x17)*(x33)))+(((IkReal(-1.00000000000000))*(x21)*(x48)))))))+(((x11)*(x65))));
eerot[8]=((((x12)*(x67)))+(((x13)*(((((IkReal(-1.00000000000000))*(x56)))+(((IkReal(-1.00000000000000))*(x63))))))));
IkReal x70=((IkReal(1.00000000000000))*(x33));
eetrans[2]=((((IkReal(-1.00000000000000))*(x37)))+(((x11)*(((((x20)*(x51)))+(((x23)*(x58)))))))+(((x10)*(((((IkReal(-1.00000000000000))*(x26)*(x70)))+(((IkReal(-1.00000000000000))*(x14)*(x48)))))))+(((IkReal(0.0300000000000000))*(x38)))+(((IkReal(-0.300000000000000))*(x33)))+(x42)+(((IkReal(-1.00000000000000))*(x22)*(x70)))+(((x7)*(((((IkReal(-1.00000000000000))*(x24)*(x35)))+(((IkReal(0.313800000000000))*(x27)))))))+(((x5)*(((((IkReal(-1.00000000000000))*(x42)))+(x37))))));
}

IKFAST_API int GetNumFreeParameters() { return 1; }
IKFAST_API int* GetFreeParameters() { static int freeparams[] = {2}; return freeparams; }
IKFAST_API int GetNumJoints() { return 7; }

IKFAST_API int GetIkRealSize() { return sizeof(IkReal); }

IKFAST_API int GetIkType() { return 0x67000001; }

class IKSolver {
public:
IkReal j7,cj7,sj7,htj7,j8,cj8,sj8,htj8,j10,cj10,sj10,htj10,j11,cj11,sj11,htj11,j12,cj12,sj12,htj12,j13,cj13,sj13,htj13,j9,cj9,sj9,htj9,new_r00,r00,rxp0_0,new_r01,r01,rxp0_1,new_r02,r02,rxp0_2,new_r10,r10,rxp1_0,new_r11,r11,rxp1_1,new_r12,r12,rxp1_2,new_r20,r20,rxp2_0,new_r21,r21,rxp2_1,new_r22,r22,rxp2_2,new_px,px,npx,new_py,py,npy,new_pz,pz,npz,pp;
unsigned char _ij7[2], _nj7,_ij8[2], _nj8,_ij10[2], _nj10,_ij11[2], _nj11,_ij12[2], _nj12,_ij13[2], _nj13,_ij9[2], _nj9;

bool ComputeIk(const IkReal* eetrans, const IkReal* eerot, const IkReal* pfree, IkSolutionListBase<IkReal>& solutions) {
j7=numeric_limits<IkReal>::quiet_NaN(); _ij7[0] = -1; _ij7[1] = -1; _nj7 = -1; j8=numeric_limits<IkReal>::quiet_NaN(); _ij8[0] = -1; _ij8[1] = -1; _nj8 = -1; j10=numeric_limits<IkReal>::quiet_NaN(); _ij10[0] = -1; _ij10[1] = -1; _nj10 = -1; j11=numeric_limits<IkReal>::quiet_NaN(); _ij11[0] = -1; _ij11[1] = -1; _nj11 = -1; j12=numeric_limits<IkReal>::quiet_NaN(); _ij12[0] = -1; _ij12[1] = -1; _nj12 = -1; j13=numeric_limits<IkReal>::quiet_NaN(); _ij13[0] = -1; _ij13[1] = -1; _nj13 = -1;  _ij9[0] = -1; _ij9[1] = -1; _nj9 = 0; 
for(int dummyiter = 0; dummyiter < 1; ++dummyiter) {
    solutions.Clear();
j9=pfree[0]; cj9=cos(pfree[0]); sj9=sin(pfree[0]);
r00 = eerot[0*3+0];
r01 = eerot[0*3+1];
r02 = eerot[0*3+2];
r10 = eerot[1*3+0];
r11 = eerot[1*3+1];
r12 = eerot[1*3+2];
r20 = eerot[2*3+0];
r21 = eerot[2*3+1];
r22 = eerot[2*3+2];
px = eetrans[0]; py = eetrans[1]; pz = eetrans[2];

new_r00=r02;
new_r01=((IkReal(-1.00000000000000))*(r00));
new_r02=((IkReal(-1.00000000000000))*(r01));
new_px=((((IkReal(-0.127000000000000))*(r01)))+(px));
new_r10=((IkReal(-1.00000000000000))*(r22));
new_r11=r20;
new_r12=r21;
new_py=((((IkReal(-1.00000000000000))*(pz)))+(((IkReal(0.127000000000000))*(r21))));
new_r20=r12;
new_r21=((IkReal(-1.00000000000000))*(r10));
new_r22=((IkReal(-1.00000000000000))*(r11));
new_pz=((IkReal(0.229500000000000))+(((IkReal(-0.127000000000000))*(r11)))+(py));
r00 = new_r00; r01 = new_r01; r02 = new_r02; r10 = new_r10; r11 = new_r11; r12 = new_r12; r20 = new_r20; r21 = new_r21; r22 = new_r22; px = new_px; py = new_py; pz = new_pz;
pp=(((px)*(px))+((py)*(py))+((pz)*(pz)));
npx=((((px)*(r00)))+(((py)*(r10)))+(((pz)*(r20))));
npy=((((px)*(r01)))+(((py)*(r11)))+(((pz)*(r21))));
npz=((((px)*(r02)))+(((py)*(r12)))+(((pz)*(r22))));
rxp0_0=((((IkReal(-1.00000000000000))*(py)*(r20)))+(((pz)*(r10))));
rxp0_1=((((px)*(r20)))+(((IkReal(-1.00000000000000))*(pz)*(r00))));
rxp0_2=((((IkReal(-1.00000000000000))*(px)*(r10)))+(((py)*(r00))));
rxp1_0=((((IkReal(-1.00000000000000))*(py)*(r21)))+(((pz)*(r11))));
rxp1_1=((((px)*(r21)))+(((IkReal(-1.00000000000000))*(pz)*(r01))));
rxp1_2=((((IkReal(-1.00000000000000))*(px)*(r11)))+(((py)*(r01))));
rxp2_0=((((IkReal(-1.00000000000000))*(py)*(r22)))+(((pz)*(r12))));
rxp2_1=((((px)*(r22)))+(((IkReal(-1.00000000000000))*(pz)*(r02))));
rxp2_2=((((IkReal(-1.00000000000000))*(px)*(r12)))+(((py)*(r02))));
{
IkReal j10array[2], cj10array[2], sj10array[2];
bool j10valid[2]={false};
_nj10 = 2;
if( (((IkReal(1.00099239693695))+(((IkReal(-5.26089284776420))*(pp))))) < -1-IKFAST_SINCOS_THRESH || (((IkReal(1.00099239693695))+(((IkReal(-5.26089284776420))*(pp))))) > 1+IKFAST_SINCOS_THRESH )
    continue;
IkReal x71=IKasin(((IkReal(1.00099239693695))+(((IkReal(-5.26089284776420))*(pp)))));
j10array[0]=((IkReal(-1.76577759872331))+(((IkReal(-1.00000000000000))*(x71))));
sj10array[0]=IKsin(j10array[0]);
cj10array[0]=IKcos(j10array[0]);
j10array[1]=((IkReal(1.37581505486648))+(x71));
sj10array[1]=IKsin(j10array[1]);
cj10array[1]=IKcos(j10array[1]);
if( j10array[0] > IKPI )
{
    j10array[0]-=IK2PI;
}
else if( j10array[0] < -IKPI )
{    j10array[0]+=IK2PI;
}
j10valid[0] = true;
if( j10array[1] > IKPI )
{
    j10array[1]-=IK2PI;
}
else if( j10array[1] < -IKPI )
{    j10array[1]+=IK2PI;
}
j10valid[1] = true;
for(int ij10 = 0; ij10 < 2; ++ij10)
{
if( !j10valid[ij10] )
{
    continue;
}
_ij10[0] = ij10; _ij10[1] = -1;
for(int iij10 = ij10+1; iij10 < 2; ++iij10)
{
if( j10valid[iij10] && IKabs(cj10array[ij10]-cj10array[iij10]) < IKFAST_SOLUTION_THRESH && IKabs(sj10array[ij10]-sj10array[iij10]) < IKFAST_SOLUTION_THRESH )
{
    j10valid[iij10]=false; _ij10[1] = iij10; break; 
}
}
j10 = j10array[ij10]; cj10 = cj10array[ij10]; sj10 = sj10array[ij10];

{
IkReal dummyeval[1];
dummyeval[0]=(((px)*(px))+((py)*(py)));
if( IKabs(dummyeval[0]) < 0.0000010000000000  )
{
{
IkReal dummyeval[1];
dummyeval[0]=(((px)*(px))+((py)*(py)));
if( IKabs(dummyeval[0]) < 0.0000010000000000  )
{
{
IkReal dummyeval[1];
IkReal x72=(sj9)*(sj9);
IkReal x73=(sj10)*(sj10);
IkReal x74=(cj10)*(cj10);
IkReal x75=((IkReal(20.9200000000000))*(cj10)*(sj10));
dummyeval[0]=((IkReal(100.000000000000))+(((IkReal(-2.00000000000000))*(cj10)*(x72)))+(((IkReal(109.411600000000))*(x72)*(x73)))+(((IkReal(-1.00000000000000))*(x75)))+(((IkReal(209.200000000000))*(cj10)))+(((IkReal(-20.9200000000000))*(sj10)*(x72)))+(x73)+(x72)+(((x72)*(x74)))+(((x72)*(x75)))+(((IkReal(109.411600000000))*(x74)))+(((IkReal(-20.0000000000000))*(sj10))));
if( IKabs(dummyeval[0]) < 0.0000010000000000  )
{
continue;

} else
{
{
IkReal j8array[2], cj8array[2], sj8array[2];
bool j8valid[2]={false};
_nj8 = 2;
IkReal x76=((IkReal(0.0300000000000000))*(sj9));
IkReal x77=((IkReal(0.300000000000000))+(((IkReal(-0.0300000000000000))*(sj10)))+(((IkReal(0.313800000000000))*(cj10))));
IkReal x78=((((IkReal(-0.313800000000000))*(sj10)*(sj9)))+(((IkReal(-1.00000000000000))*(cj10)*(x76)))+(x76));
if( IKabs(x78) < IKFAST_ATAN2_MAGTHRESH && IKabs(x77) < IKFAST_ATAN2_MAGTHRESH )
    continue;
IkReal x79=((IkReal(1.00000000000000))*(IKatan2(x78, x77)));
if( ((((x77)*(x77))+((x78)*(x78)))) < (IkReal)-0.00001 )
    continue;
if( (((pz)*(((IKabs(IKabs(IKsqrt((((x77)*(x77))+((x78)*(x78)))))) != 0)?((IkReal)1/(IKabs(IKsqrt((((x77)*(x77))+((x78)*(x78))))))):(IkReal)1.0e30)))) < -1-IKFAST_SINCOS_THRESH || (((pz)*(((IKabs(IKabs(IKsqrt((((x77)*(x77))+((x78)*(x78)))))) != 0)?((IkReal)1/(IKabs(IKsqrt((((x77)*(x77))+((x78)*(x78))))))):(IkReal)1.0e30)))) > 1+IKFAST_SINCOS_THRESH )
    continue;
IkReal x80=IKasin(((pz)*(((IKabs(IKabs(IKsqrt((((x77)*(x77))+((x78)*(x78)))))) != 0)?((IkReal)1/(IKabs(IKsqrt((((x77)*(x77))+((x78)*(x78))))))):(IkReal)1.0e30))));
j8array[0]=((((IkReal(-1.00000000000000))*(x79)))+(x80));
sj8array[0]=IKsin(j8array[0]);
cj8array[0]=IKcos(j8array[0]);
j8array[1]=((IkReal(3.14159265358979))+(((IkReal(-1.00000000000000))*(x79)))+(((IkReal(-1.00000000000000))*(x80))));
sj8array[1]=IKsin(j8array[1]);
cj8array[1]=IKcos(j8array[1]);
if( j8array[0] > IKPI )
{
    j8array[0]-=IK2PI;
}
else if( j8array[0] < -IKPI )
{    j8array[0]+=IK2PI;
}
j8valid[0] = true;
if( j8array[1] > IKPI )
{
    j8array[1]-=IK2PI;
}
else if( j8array[1] < -IKPI )
{    j8array[1]+=IK2PI;
}
j8valid[1] = true;
for(int ij8 = 0; ij8 < 2; ++ij8)
{
if( !j8valid[ij8] )
{
    continue;
}
_ij8[0] = ij8; _ij8[1] = -1;
for(int iij8 = ij8+1; iij8 < 2; ++iij8)
{
if( j8valid[iij8] && IKabs(cj8array[ij8]-cj8array[iij8]) < IKFAST_SOLUTION_THRESH && IKabs(sj8array[ij8]-sj8array[iij8]) < IKFAST_SOLUTION_THRESH )
{
    j8valid[iij8]=false; _ij8[1] = iij8; break; 
}
}
j8 = j8array[ij8]; cj8 = cj8array[ij8]; sj8 = sj8array[ij8];

{
IkReal dummyeval[1];
IkReal gconst0;
gconst0=IKsign(((((cj8)*((px)*(px))))+(((cj8)*((py)*(py))))));
dummyeval[0]=((((cj8)*((px)*(px))))+(((cj8)*((py)*(py)))));
if( IKabs(dummyeval[0]) < 0.0000010000000000  )
{
{
IkReal dummyeval[1];
IkReal gconst1;
IkReal x81=((cj9)*(sj8));
gconst1=IKsign(((((x81)*((px)*(px))))+(((x81)*((py)*(py))))));
IkReal x82=((cj9)*(sj8));
dummyeval[0]=((((x82)*((px)*(px))))+(((x82)*((py)*(py)))));
if( IKabs(dummyeval[0]) < 0.0000010000000000  )
{
{
IkReal evalcond[4];
IkReal x83=((IkReal(0.0300000000000000))*(cj8));
evalcond[0]=((IkReal(-3.14159265358979))+(IKfmod(((IkReal(1.57079632679490))+(j9)), IkReal(6.28318530717959))));
evalcond[1]=((IkReal(0.190270440000000))+(((IkReal(-0.0368280000000000))*(sj10)))+(((IkReal(0.186480000000000))*(cj10)))+(((IkReal(-1.00000000000000))*(pp))));
evalcond[2]=((((IkReal(-1.00000000000000))*(cj10)*(x83)))+(((IkReal(0.313800000000000))*(cj10)*(sj8)))+(((IkReal(-0.313800000000000))*(cj8)*(sj10)))+(((IkReal(-1.00000000000000))*(pz)))+(x83)+(((IkReal(0.300000000000000))*(sj8)))+(((IkReal(-0.0300000000000000))*(sj10)*(sj8))));
if( IKabs(evalcond[0]) < 0.0000010000000000  && IKabs(evalcond[1]) < 0.0000010000000000  && IKabs(evalcond[2]) < 0.0000010000000000  )
{
{
IkReal dummyeval[1];
IkReal gconst2;
gconst2=IKsign(((((cj8)*((px)*(px))))+(((cj8)*((py)*(py))))));
dummyeval[0]=((((cj8)*((px)*(px))))+(((cj8)*((py)*(py)))));
if( IKabs(dummyeval[0]) < 0.0000010000000000  )
{
{
IkReal dummyeval[1];
IkReal gconst3;
gconst3=IKsign(((((sj8)*((py)*(py))))+(((sj8)*((px)*(px))))));
dummyeval[0]=((((sj8)*((py)*(py))))+(((sj8)*((px)*(px)))));
if( IKabs(dummyeval[0]) < 0.0000010000000000  )
{
{
IkReal evalcond[4];
IkReal x84=((IkReal(0.0300000000000000))+(((IkReal(-0.313800000000000))*(sj10)))+(((IkReal(-1.00000000000000))*(pz)))+(((IkReal(-0.0300000000000000))*(cj10))));
evalcond[0]=((IkReal(-3.14159265358979))+(IKfmod(((IkReal(3.14159265358979))+(j8)), IkReal(6.28318530717959))));
evalcond[1]=((IkReal(0.190270440000000))+(((IkReal(-0.0368280000000000))*(sj10)))+(((IkReal(0.186480000000000))*(cj10)))+(((IkReal(-1.00000000000000))*(pp))));
evalcond[2]=x84;
evalcond[3]=x84;
if( IKabs(evalcond[0]) < 0.0000010000000000  && IKabs(evalcond[1]) < 0.0000010000000000  && IKabs(evalcond[2]) < 0.0000010000000000  && IKabs(evalcond[3]) < 0.0000010000000000  )
{
{
IkReal dummyeval[1];
IkReal gconst4;
gconst4=IKsign(((((IkReal(-1.00000000000000))*((px)*(px))))+(((IkReal(-1.00000000000000))*((py)*(py))))));
dummyeval[0]=((((IkReal(-1.00000000000000))*((px)*(px))))+(((IkReal(-1.00000000000000))*((py)*(py)))));
if( IKabs(dummyeval[0]) < 0.0000010000000000  )
{
{
IkReal dummyeval[1];
IkReal gconst5;
gconst5=IKsign(((((IkReal(3.00000000000000))*((py)*(py))))+(((IkReal(3.00000000000000))*((px)*(px))))));
dummyeval[0]=(((px)*(px))+((py)*(py)));
if( IKabs(dummyeval[0]) < 0.0000010000000000  )
{
continue;

} else
{
{
IkReal j7array[1], cj7array[1], sj7array[1];
bool j7valid[1]={false};
_nj7 = 1;
IkReal x85=((IkReal(5.00000000000000))*(pp));
IkReal x86=((IkReal(0.300000000000000))*(pz));
if( IKabs(((gconst5)*(((((IkReal(0.0423522000000000))*(px)))+(((px)*(x86)))+(((IkReal(-1.00000000000000))*(px)*(x85))))))) < IKFAST_ATAN2_MAGTHRESH && IKabs(((gconst5)*(((((IkReal(-1.00000000000000))*(py)*(x86)))+(((IkReal(-0.0423522000000000))*(py)))+(((py)*(x85))))))) < IKFAST_ATAN2_MAGTHRESH )
    continue;
j7array[0]=IKatan2(((gconst5)*(((((IkReal(0.0423522000000000))*(px)))+(((px)*(x86)))+(((IkReal(-1.00000000000000))*(px)*(x85)))))), ((gconst5)*(((((IkReal(-1.00000000000000))*(py)*(x86)))+(((IkReal(-0.0423522000000000))*(py)))+(((py)*(x85)))))));
sj7array[0]=IKsin(j7array[0]);
cj7array[0]=IKcos(j7array[0]);
if( j7array[0] > IKPI )
{
    j7array[0]-=IK2PI;
}
else if( j7array[0] < -IKPI )
{    j7array[0]+=IK2PI;
}
j7valid[0] = true;
for(int ij7 = 0; ij7 < 1; ++ij7)
{
if( !j7valid[ij7] )
{
    continue;
}
_ij7[0] = ij7; _ij7[1] = -1;
for(int iij7 = ij7+1; iij7 < 1; ++iij7)
{
if( j7valid[iij7] && IKabs(cj7array[ij7]-cj7array[iij7]) < IKFAST_SOLUTION_THRESH && IKabs(sj7array[ij7]-sj7array[iij7]) < IKFAST_SOLUTION_THRESH )
{
    j7valid[iij7]=false; _ij7[1] = iij7; break; 
}
}
j7 = j7array[ij7]; cj7 = cj7array[ij7]; sj7 = sj7array[ij7];
{
IkReal evalcond[3];
IkReal x87=IKsin(j7);
IkReal x88=IKcos(j7);
IkReal x89=((px)*(x87));
IkReal x90=((IkReal(1.00000000000000))*(x88));
evalcond[0]=((((IkReal(-1.00000000000000))*(py)*(x87)))+(((IkReal(-1.00000000000000))*(px)*(x90))));
evalcond[1]=((IkReal(0.300000000000000))+(((IkReal(-0.0300000000000000))*(sj10)))+(x89)+(((IkReal(0.313800000000000))*(cj10)))+(((IkReal(-1.00000000000000))*(py)*(x90))));
evalcond[2]=((IkReal(0.00847044000000000))+(((IkReal(0.600000000000000))*(py)*(x88)))+(((IkReal(-1.00000000000000))*(pp)))+(((IkReal(0.0600000000000000))*(pz)))+(((IkReal(-0.600000000000000))*(x89))));
if( IKabs(evalcond[0]) > 0.000001  || IKabs(evalcond[1]) > 0.000001  || IKabs(evalcond[2]) > 0.000001  )
{
continue;
}
}

rotationfunction0(solutions);
}
}

}

}

} else
{
{
IkReal j7array[1], cj7array[1], sj7array[1];
bool j7valid[1]={false};
_nj7 = 1;
IkReal x257=((IkReal(0.0300000000000000))*(sj10));
IkReal x258=((IkReal(0.313800000000000))*(cj10));
if( IKabs(((gconst4)*(((((IkReal(0.300000000000000))*(px)))+(((px)*(x258)))+(((IkReal(-1.00000000000000))*(px)*(x257))))))) < IKFAST_ATAN2_MAGTHRESH && IKabs(((gconst4)*(((((IkReal(-0.300000000000000))*(py)))+(((py)*(x257)))+(((IkReal(-1.00000000000000))*(py)*(x258))))))) < IKFAST_ATAN2_MAGTHRESH )
    continue;
j7array[0]=IKatan2(((gconst4)*(((((IkReal(0.300000000000000))*(px)))+(((px)*(x258)))+(((IkReal(-1.00000000000000))*(px)*(x257)))))), ((gconst4)*(((((IkReal(-0.300000000000000))*(py)))+(((py)*(x257)))+(((IkReal(-1.00000000000000))*(py)*(x258)))))));
sj7array[0]=IKsin(j7array[0]);
cj7array[0]=IKcos(j7array[0]);
if( j7array[0] > IKPI )
{
    j7array[0]-=IK2PI;
}
else if( j7array[0] < -IKPI )
{    j7array[0]+=IK2PI;
}
j7valid[0] = true;
for(int ij7 = 0; ij7 < 1; ++ij7)
{
if( !j7valid[ij7] )
{
    continue;
}
_ij7[0] = ij7; _ij7[1] = -1;
for(int iij7 = ij7+1; iij7 < 1; ++iij7)
{
if( j7valid[iij7] && IKabs(cj7array[ij7]-cj7array[iij7]) < IKFAST_SOLUTION_THRESH && IKabs(sj7array[ij7]-sj7array[iij7]) < IKFAST_SOLUTION_THRESH )
{
    j7valid[iij7]=false; _ij7[1] = iij7; break; 
}
}
j7 = j7array[ij7]; cj7 = cj7array[ij7]; sj7 = sj7array[ij7];
{
IkReal evalcond[3];
IkReal x259=IKsin(j7);
IkReal x260=IKcos(j7);
IkReal x261=((px)*(x259));
IkReal x262=((IkReal(1.00000000000000))*(x260));
evalcond[0]=((((IkReal(-1.00000000000000))*(py)*(x259)))+(((IkReal(-1.00000000000000))*(px)*(x262))));
evalcond[1]=((IkReal(0.300000000000000))+(((IkReal(-0.0300000000000000))*(sj10)))+(x261)+(((IkReal(0.313800000000000))*(cj10)))+(((IkReal(-1.00000000000000))*(py)*(x262))));
evalcond[2]=((IkReal(0.00847044000000000))+(((IkReal(-1.00000000000000))*(pp)))+(((IkReal(-0.600000000000000))*(x261)))+(((IkReal(0.0600000000000000))*(pz)))+(((IkReal(0.600000000000000))*(py)*(x260))));
if( IKabs(evalcond[0]) > 0.000001  || IKabs(evalcond[1]) > 0.000001  || IKabs(evalcond[2]) > 0.000001  )
{
continue;
}
}

rotationfunction0(solutions);
}
}

}

}

} else
{
IkReal x263=((IkReal(0.313800000000000))*(sj10));
IkReal x264=((IkReal(0.0300000000000000))*(cj10));
IkReal x265=((x264)+(x263));
evalcond[0]=((IkReal(-3.14159265358979))+(IKfmod(((IkReal(1.11022302462516e-16))+(j8)), IkReal(6.28318530717959))));
evalcond[1]=((IkReal(0.190270440000000))+(((IkReal(-0.0368280000000000))*(sj10)))+(((IkReal(0.186480000000000))*(cj10)))+(((IkReal(-1.00000000000000))*(pp))));
evalcond[2]=((IkReal(-0.0300000000000000))+(((IkReal(-1.00000000000000))*(pz)))+(x265));
evalcond[3]=((IkReal(0.0300000000000000))+(pz)+(((IkReal(-1.00000000000000))*(x265))));
if( IKabs(evalcond[0]) < 0.0000010000000000  && IKabs(evalcond[1]) < 0.0000010000000000  && IKabs(evalcond[2]) < 0.0000010000000000  && IKabs(evalcond[3]) < 0.0000010000000000  )
{
{
IkReal dummyeval[1];
IkReal gconst6;
gconst6=IKsign((((px)*(px))+((py)*(py))));
dummyeval[0]=(((px)*(px))+((py)*(py)));
if( IKabs(dummyeval[0]) < 0.0000010000000000  )
{
{
IkReal dummyeval[1];
IkReal gconst7;
gconst7=IKsign(((((IkReal(-3.00000000000000))*((px)*(px))))+(((IkReal(-3.00000000000000))*((py)*(py))))));
dummyeval[0]=((((IkReal(-1.00000000000000))*((px)*(px))))+(((IkReal(-1.00000000000000))*((py)*(py)))));
if( IKabs(dummyeval[0]) < 0.0000010000000000  )
{
continue;

} else
{
{
IkReal j7array[1], cj7array[1], sj7array[1];
bool j7valid[1]={false};
_nj7 = 1;
IkReal x266=((IkReal(5.00000000000000))*(pp));
IkReal x267=((IkReal(0.300000000000000))*(pz));
if( IKabs(((gconst7)*(((((IkReal(0.0423522000000000))*(px)))+(((IkReal(-1.00000000000000))*(px)*(x267)))+(((IkReal(-1.00000000000000))*(px)*(x266))))))) < IKFAST_ATAN2_MAGTHRESH && IKabs(((gconst7)*(((((IkReal(-0.0423522000000000))*(py)))+(((py)*(x267)))+(((py)*(x266))))))) < IKFAST_ATAN2_MAGTHRESH )
    continue;
j7array[0]=IKatan2(((gconst7)*(((((IkReal(0.0423522000000000))*(px)))+(((IkReal(-1.00000000000000))*(px)*(x267)))+(((IkReal(-1.00000000000000))*(px)*(x266)))))), ((gconst7)*(((((IkReal(-0.0423522000000000))*(py)))+(((py)*(x267)))+(((py)*(x266)))))));
sj7array[0]=IKsin(j7array[0]);
cj7array[0]=IKcos(j7array[0]);
if( j7array[0] > IKPI )
{
    j7array[0]-=IK2PI;
}
else if( j7array[0] < -IKPI )
{    j7array[0]+=IK2PI;
}
j7valid[0] = true;
for(int ij7 = 0; ij7 < 1; ++ij7)
{
if( !j7valid[ij7] )
{
    continue;
}
_ij7[0] = ij7; _ij7[1] = -1;
for(int iij7 = ij7+1; iij7 < 1; ++iij7)
{
if( j7valid[iij7] && IKabs(cj7array[ij7]-cj7array[iij7]) < IKFAST_SOLUTION_THRESH && IKabs(sj7array[ij7]-sj7array[iij7]) < IKFAST_SOLUTION_THRESH )
{
    j7valid[iij7]=false; _ij7[1] = iij7; break; 
}
}
j7 = j7array[ij7]; cj7 = cj7array[ij7]; sj7 = sj7array[ij7];
{
IkReal evalcond[3];
IkReal x268=IKcos(j7);
IkReal x269=IKsin(j7);
IkReal x270=((px)*(x269));
IkReal x271=((py)*(x268));
evalcond[0]=((((IkReal(-1.00000000000000))*(px)*(x268)))+(((IkReal(-1.00000000000000))*(py)*(x269))));
evalcond[1]=((IkReal(0.300000000000000))+(((IkReal(-1.00000000000000))*(x270)))+(((IkReal(-0.0300000000000000))*(sj10)))+(x271)+(((IkReal(0.313800000000000))*(cj10))));
evalcond[2]=((IkReal(0.00847044000000000))+(((IkReal(-1.00000000000000))*(pp)))+(((IkReal(-0.0600000000000000))*(pz)))+(((IkReal(0.600000000000000))*(x270)))+(((IkReal(-0.600000000000000))*(x271))));
if( IKabs(evalcond[0]) > 0.000001  || IKabs(evalcond[1]) > 0.000001  || IKabs(evalcond[2]) > 0.000001  )
{
continue;
}
}

rotationfunction0(solutions);
}
}

}

}

} else
{
{
IkReal j7array[1], cj7array[1], sj7array[1];
bool j7valid[1]={false};
_nj7 = 1;
IkReal x272=((IkReal(0.0300000000000000))*(sj10));
IkReal x273=((IkReal(0.313800000000000))*(cj10));
if( IKabs(((gconst6)*(((((px)*(x273)))+(((IkReal(0.300000000000000))*(px)))+(((IkReal(-1.00000000000000))*(px)*(x272))))))) < IKFAST_ATAN2_MAGTHRESH && IKabs(((gconst6)*(((((IkReal(-0.300000000000000))*(py)))+(((py)*(x272)))+(((IkReal(-1.00000000000000))*(py)*(x273))))))) < IKFAST_ATAN2_MAGTHRESH )
    continue;
j7array[0]=IKatan2(((gconst6)*(((((px)*(x273)))+(((IkReal(0.300000000000000))*(px)))+(((IkReal(-1.00000000000000))*(px)*(x272)))))), ((gconst6)*(((((IkReal(-0.300000000000000))*(py)))+(((py)*(x272)))+(((IkReal(-1.00000000000000))*(py)*(x273)))))));
sj7array[0]=IKsin(j7array[0]);
cj7array[0]=IKcos(j7array[0]);
if( j7array[0] > IKPI )
{
    j7array[0]-=IK2PI;
}
else if( j7array[0] < -IKPI )
{    j7array[0]+=IK2PI;
}
j7valid[0] = true;
for(int ij7 = 0; ij7 < 1; ++ij7)
{
if( !j7valid[ij7] )
{
    continue;
}
_ij7[0] = ij7; _ij7[1] = -1;
for(int iij7 = ij7+1; iij7 < 1; ++iij7)
{
if( j7valid[iij7] && IKabs(cj7array[ij7]-cj7array[iij7]) < IKFAST_SOLUTION_THRESH && IKabs(sj7array[ij7]-sj7array[iij7]) < IKFAST_SOLUTION_THRESH )
{
    j7valid[iij7]=false; _ij7[1] = iij7; break; 
}
}
j7 = j7array[ij7]; cj7 = cj7array[ij7]; sj7 = sj7array[ij7];
{
IkReal evalcond[3];
IkReal x274=IKcos(j7);
IkReal x275=IKsin(j7);
IkReal x276=((px)*(x275));
IkReal x277=((py)*(x274));
evalcond[0]=((((IkReal(-1.00000000000000))*(px)*(x274)))+(((IkReal(-1.00000000000000))*(py)*(x275))));
evalcond[1]=((IkReal(0.300000000000000))+(((IkReal(-1.00000000000000))*(x276)))+(((IkReal(-0.0300000000000000))*(sj10)))+(x277)+(((IkReal(0.313800000000000))*(cj10))));
evalcond[2]=((IkReal(0.00847044000000000))+(((IkReal(-1.00000000000000))*(pp)))+(((IkReal(-0.0600000000000000))*(pz)))+(((IkReal(0.600000000000000))*(x276)))+(((IkReal(-0.600000000000000))*(x277))));
if( IKabs(evalcond[0]) > 0.000001  || IKabs(evalcond[1]) > 0.000001  || IKabs(evalcond[2]) > 0.000001  )
{
continue;
}
}

rotationfunction0(solutions);
}
}

}

}

} else
{
IkReal x278=((IkReal(0.300000000000000))+(((IkReal(-0.0300000000000000))*(sj10)))+(((IkReal(-1.00000000000000))*(pz)))+(((IkReal(0.313800000000000))*(cj10))));
evalcond[0]=((IkReal(-3.14159265358979))+(IKfmod(((IkReal(1.57079632679490))+(j8)), IkReal(6.28318530717959))));
evalcond[1]=((IkReal(0.190270440000000))+(((IkReal(-0.0368280000000000))*(sj10)))+(((IkReal(0.186480000000000))*(cj10)))+(((IkReal(-1.00000000000000))*(pp))));
evalcond[2]=x278;
evalcond[3]=x278;
if( IKabs(evalcond[0]) < 0.0000010000000000  && IKabs(evalcond[1]) < 0.0000010000000000  && IKabs(evalcond[2]) < 0.0000010000000000  && IKabs(evalcond[3]) < 0.0000010000000000  )
{
{
IkReal dummyeval[1];
IkReal gconst8;
gconst8=IKsign((((px)*(px))+((py)*(py))));
dummyeval[0]=(((px)*(px))+((py)*(py)));
if( IKabs(dummyeval[0]) < 0.0000010000000000  )
{
{
IkReal dummyeval[1];
IkReal gconst9;
gconst9=IKsign(((((IkReal(-3.00000000000000))*((px)*(px))))+(((IkReal(-3.00000000000000))*((py)*(py))))));
dummyeval[0]=((((IkReal(-1.00000000000000))*((px)*(px))))+(((IkReal(-1.00000000000000))*((py)*(py)))));
if( IKabs(dummyeval[0]) < 0.0000010000000000  )
{
continue;

} else
{
{
IkReal j7array[1], cj7array[1], sj7array[1];
bool j7valid[1]={false};
_nj7 = 1;
IkReal x279=((IkReal(50.0000000000000))*(pp));
IkReal x280=((IkReal(30.0000000000000))*(pz));
if( IKabs(((gconst9)*(((((IkReal(0.423522000000000))*(px)))+(((IkReal(-1.00000000000000))*(px)*(x279)))+(((px)*(x280))))))) < IKFAST_ATAN2_MAGTHRESH && IKabs(((gconst9)*(((((IkReal(-1.00000000000000))*(py)*(x280)))+(((py)*(x279)))+(((IkReal(-0.423522000000000))*(py))))))) < IKFAST_ATAN2_MAGTHRESH )
    continue;
j7array[0]=IKatan2(((gconst9)*(((((IkReal(0.423522000000000))*(px)))+(((IkReal(-1.00000000000000))*(px)*(x279)))+(((px)*(x280)))))), ((gconst9)*(((((IkReal(-1.00000000000000))*(py)*(x280)))+(((py)*(x279)))+(((IkReal(-0.423522000000000))*(py)))))));
sj7array[0]=IKsin(j7array[0]);
cj7array[0]=IKcos(j7array[0]);
if( j7array[0] > IKPI )
{
    j7array[0]-=IK2PI;
}
else if( j7array[0] < -IKPI )
{    j7array[0]+=IK2PI;
}
j7valid[0] = true;
for(int ij7 = 0; ij7 < 1; ++ij7)
{
if( !j7valid[ij7] )
{
    continue;
}
_ij7[0] = ij7; _ij7[1] = -1;
for(int iij7 = ij7+1; iij7 < 1; ++iij7)
{
if( j7valid[iij7] && IKabs(cj7array[ij7]-cj7array[iij7]) < IKFAST_SOLUTION_THRESH && IKabs(sj7array[ij7]-sj7array[iij7]) < IKFAST_SOLUTION_THRESH )
{
    j7valid[iij7]=false; _ij7[1] = iij7; break; 
}
}
j7 = j7array[ij7]; cj7 = cj7array[ij7]; sj7 = sj7array[ij7];
{
IkReal evalcond[3];
IkReal x281=IKcos(j7);
IkReal x282=IKsin(j7);
IkReal x283=((IkReal(1.00000000000000))*(x282));
IkReal x284=((py)*(x281));
evalcond[0]=((((IkReal(-1.00000000000000))*(py)*(x283)))+(((IkReal(-1.00000000000000))*(px)*(x281))));
evalcond[1]=((IkReal(0.0300000000000000))+(((IkReal(-0.313800000000000))*(sj10)))+(((IkReal(-1.00000000000000))*(px)*(x283)))+(x284)+(((IkReal(-0.0300000000000000))*(cj10))));
evalcond[2]=((IkReal(0.00847044000000000))+(((IkReal(0.600000000000000))*(pz)))+(((IkReal(-0.0600000000000000))*(x284)))+(((IkReal(-1.00000000000000))*(pp)))+(((IkReal(0.0600000000000000))*(px)*(x282))));
if( IKabs(evalcond[0]) > 0.000001  || IKabs(evalcond[1]) > 0.000001  || IKabs(evalcond[2]) > 0.000001  )
{
continue;
}
}

rotationfunction0(solutions);
}
}

}

}

} else
{
{
IkReal j7array[1], cj7array[1], sj7array[1];
bool j7valid[1]={false};
_nj7 = 1;
IkReal x285=((IkReal(0.0300000000000000))*(px));
IkReal x286=((IkReal(0.313800000000000))*(sj10));
IkReal x287=((IkReal(0.0300000000000000))*(py));
if( IKabs(((gconst8)*(((((IkReal(-1.00000000000000))*(px)*(x286)))+(x285)+(((IkReal(-1.00000000000000))*(cj10)*(x285))))))) < IKFAST_ATAN2_MAGTHRESH && IKabs(((gconst8)*(((((cj10)*(x287)))+(((IkReal(-1.00000000000000))*(x287)))+(((py)*(x286))))))) < IKFAST_ATAN2_MAGTHRESH )
    continue;
j7array[0]=IKatan2(((gconst8)*(((((IkReal(-1.00000000000000))*(px)*(x286)))+(x285)+(((IkReal(-1.00000000000000))*(cj10)*(x285)))))), ((gconst8)*(((((cj10)*(x287)))+(((IkReal(-1.00000000000000))*(x287)))+(((py)*(x286)))))));
sj7array[0]=IKsin(j7array[0]);
cj7array[0]=IKcos(j7array[0]);
if( j7array[0] > IKPI )
{
    j7array[0]-=IK2PI;
}
else if( j7array[0] < -IKPI )
{    j7array[0]+=IK2PI;
}
j7valid[0] = true;
for(int ij7 = 0; ij7 < 1; ++ij7)
{
if( !j7valid[ij7] )
{
    continue;
}
_ij7[0] = ij7; _ij7[1] = -1;
for(int iij7 = ij7+1; iij7 < 1; ++iij7)
{
if( j7valid[iij7] && IKabs(cj7array[ij7]-cj7array[iij7]) < IKFAST_SOLUTION_THRESH && IKabs(sj7array[ij7]-sj7array[iij7]) < IKFAST_SOLUTION_THRESH )
{
    j7valid[iij7]=false; _ij7[1] = iij7; break; 
}
}
j7 = j7array[ij7]; cj7 = cj7array[ij7]; sj7 = sj7array[ij7];
{
IkReal evalcond[3];
IkReal x288=IKcos(j7);
IkReal x289=IKsin(j7);
IkReal x290=((IkReal(1.00000000000000))*(x289));
IkReal x291=((py)*(x288));
evalcond[0]=((((IkReal(-1.00000000000000))*(py)*(x290)))+(((IkReal(-1.00000000000000))*(px)*(x288))));
evalcond[1]=((IkReal(0.0300000000000000))+(((IkReal(-0.313800000000000))*(sj10)))+(x291)+(((IkReal(-1.00000000000000))*(px)*(x290)))+(((IkReal(-0.0300000000000000))*(cj10))));
evalcond[2]=((IkReal(0.00847044000000000))+(((IkReal(0.600000000000000))*(pz)))+(((IkReal(-1.00000000000000))*(pp)))+(((IkReal(-0.0600000000000000))*(x291)))+(((IkReal(0.0600000000000000))*(px)*(x289))));
if( IKabs(evalcond[0]) > 0.000001  || IKabs(evalcond[1]) > 0.000001  || IKabs(evalcond[2]) > 0.000001  )
{
continue;
}
}

rotationfunction0(solutions);
}
}

}

}

} else
{
IkReal x292=((IkReal(0.0300000000000000))*(sj10));
IkReal x293=((IkReal(0.313800000000000))*(cj10));
evalcond[0]=((IkReal(-3.14159265358979))+(IKfmod(((IkReal(4.71238898038469))+(j8)), IkReal(6.28318530717959))));
evalcond[1]=((IkReal(0.190270440000000))+(((IkReal(-0.0368280000000000))*(sj10)))+(((IkReal(0.186480000000000))*(cj10)))+(((IkReal(-1.00000000000000))*(pp))));
evalcond[2]=((IkReal(0.300000000000000))+(((IkReal(-1.00000000000000))*(x292)))+(x293)+(pz));
evalcond[3]=((IkReal(-0.300000000000000))+(((IkReal(-1.00000000000000))*(x293)))+(((IkReal(-1.00000000000000))*(pz)))+(x292));
if( IKabs(evalcond[0]) < 0.0000010000000000  && IKabs(evalcond[1]) < 0.0000010000000000  && IKabs(evalcond[2]) < 0.0000010000000000  && IKabs(evalcond[3]) < 0.0000010000000000  )
{
{
IkReal dummyeval[1];
IkReal gconst10;
gconst10=IKsign(((((IkReal(-1.00000000000000))*((px)*(px))))+(((IkReal(-1.00000000000000))*((py)*(py))))));
dummyeval[0]=((((IkReal(-1.00000000000000))*((px)*(px))))+(((IkReal(-1.00000000000000))*((py)*(py)))));
if( IKabs(dummyeval[0]) < 0.0000010000000000  )
{
{
IkReal dummyeval[1];
IkReal gconst11;
gconst11=IKsign(((((IkReal(3.00000000000000))*((py)*(py))))+(((IkReal(3.00000000000000))*((px)*(px))))));
dummyeval[0]=(((px)*(px))+((py)*(py)));
if( IKabs(dummyeval[0]) < 0.0000010000000000  )
{
continue;

} else
{
{
IkReal j7array[1], cj7array[1], sj7array[1];
bool j7valid[1]={false};
_nj7 = 1;
IkReal x294=((IkReal(50.0000000000000))*(pp));
IkReal x295=((IkReal(30.0000000000000))*(pz));
if( IKabs(((gconst11)*(((((IkReal(0.423522000000000))*(px)))+(((IkReal(-1.00000000000000))*(px)*(x294)))+(((IkReal(-1.00000000000000))*(px)*(x295))))))) < IKFAST_ATAN2_MAGTHRESH && IKabs(((gconst11)*(((((py)*(x294)))+(((py)*(x295)))+(((IkReal(-0.423522000000000))*(py))))))) < IKFAST_ATAN2_MAGTHRESH )
    continue;
j7array[0]=IKatan2(((gconst11)*(((((IkReal(0.423522000000000))*(px)))+(((IkReal(-1.00000000000000))*(px)*(x294)))+(((IkReal(-1.00000000000000))*(px)*(x295)))))), ((gconst11)*(((((py)*(x294)))+(((py)*(x295)))+(((IkReal(-0.423522000000000))*(py)))))));
sj7array[0]=IKsin(j7array[0]);
cj7array[0]=IKcos(j7array[0]);
if( j7array[0] > IKPI )
{
    j7array[0]-=IK2PI;
}
else if( j7array[0] < -IKPI )
{    j7array[0]+=IK2PI;
}
j7valid[0] = true;
for(int ij7 = 0; ij7 < 1; ++ij7)
{
if( !j7valid[ij7] )
{
    continue;
}
_ij7[0] = ij7; _ij7[1] = -1;
for(int iij7 = ij7+1; iij7 < 1; ++iij7)
{
if( j7valid[iij7] && IKabs(cj7array[ij7]-cj7array[iij7]) < IKFAST_SOLUTION_THRESH && IKabs(sj7array[ij7]-sj7array[iij7]) < IKFAST_SOLUTION_THRESH )
{
    j7valid[iij7]=false; _ij7[1] = iij7; break; 
}
}
j7 = j7array[ij7]; cj7 = cj7array[ij7]; sj7 = sj7array[ij7];
{
IkReal evalcond[3];
IkReal x296=IKsin(j7);
IkReal x297=IKcos(j7);
IkReal x298=((IkReal(1.00000000000000))*(py));
IkReal x299=((px)*(x296));
evalcond[0]=((((IkReal(-1.00000000000000))*(x296)*(x298)))+(((IkReal(-1.00000000000000))*(px)*(x297))));
evalcond[1]=((IkReal(0.0300000000000000))+(((IkReal(-0.313800000000000))*(sj10)))+(((IkReal(-1.00000000000000))*(x297)*(x298)))+(x299)+(((IkReal(-0.0300000000000000))*(cj10))));
evalcond[2]=((IkReal(0.00847044000000000))+(((IkReal(-0.600000000000000))*(pz)))+(((IkReal(-1.00000000000000))*(pp)))+(((IkReal(0.0600000000000000))*(py)*(x297)))+(((IkReal(-0.0600000000000000))*(x299))));
if( IKabs(evalcond[0]) > 0.000001  || IKabs(evalcond[1]) > 0.000001  || IKabs(evalcond[2]) > 0.000001  )
{
continue;
}
}

rotationfunction0(solutions);
}
}

}

}

} else
{
{
IkReal j7array[1], cj7array[1], sj7array[1];
bool j7valid[1]={false};
_nj7 = 1;
IkReal x300=((IkReal(0.0300000000000000))*(px));
IkReal x301=((IkReal(0.313800000000000))*(sj10));
IkReal x302=((IkReal(0.0300000000000000))*(py));
if( IKabs(((gconst10)*(((((IkReal(-1.00000000000000))*(px)*(x301)))+(((IkReal(-1.00000000000000))*(cj10)*(x300)))+(x300))))) < IKFAST_ATAN2_MAGTHRESH && IKabs(((gconst10)*(((((py)*(x301)))+(((IkReal(-1.00000000000000))*(x302)))+(((cj10)*(x302))))))) < IKFAST_ATAN2_MAGTHRESH )
    continue;
j7array[0]=IKatan2(((gconst10)*(((((IkReal(-1.00000000000000))*(px)*(x301)))+(((IkReal(-1.00000000000000))*(cj10)*(x300)))+(x300)))), ((gconst10)*(((((py)*(x301)))+(((IkReal(-1.00000000000000))*(x302)))+(((cj10)*(x302)))))));
sj7array[0]=IKsin(j7array[0]);
cj7array[0]=IKcos(j7array[0]);
if( j7array[0] > IKPI )
{
    j7array[0]-=IK2PI;
}
else if( j7array[0] < -IKPI )
{    j7array[0]+=IK2PI;
}
j7valid[0] = true;
for(int ij7 = 0; ij7 < 1; ++ij7)
{
if( !j7valid[ij7] )
{
    continue;
}
_ij7[0] = ij7; _ij7[1] = -1;
for(int iij7 = ij7+1; iij7 < 1; ++iij7)
{
if( j7valid[iij7] && IKabs(cj7array[ij7]-cj7array[iij7]) < IKFAST_SOLUTION_THRESH && IKabs(sj7array[ij7]-sj7array[iij7]) < IKFAST_SOLUTION_THRESH )
{
    j7valid[iij7]=false; _ij7[1] = iij7; break; 
}
}
j7 = j7array[ij7]; cj7 = cj7array[ij7]; sj7 = sj7array[ij7];
{
IkReal evalcond[3];
IkReal x303=IKsin(j7);
IkReal x304=IKcos(j7);
IkReal x305=((IkReal(1.00000000000000))*(py));
IkReal x306=((px)*(x303));
evalcond[0]=((((IkReal(-1.00000000000000))*(px)*(x304)))+(((IkReal(-1.00000000000000))*(x303)*(x305))));
evalcond[1]=((IkReal(0.0300000000000000))+(((IkReal(-0.313800000000000))*(sj10)))+(x306)+(((IkReal(-1.00000000000000))*(x304)*(x305)))+(((IkReal(-0.0300000000000000))*(cj10))));
evalcond[2]=((IkReal(0.00847044000000000))+(((IkReal(-0.600000000000000))*(pz)))+(((IkReal(0.0600000000000000))*(py)*(x304)))+(((IkReal(-0.0600000000000000))*(x306)))+(((IkReal(-1.00000000000000))*(pp))));
if( IKabs(evalcond[0]) > 0.000001  || IKabs(evalcond[1]) > 0.000001  || IKabs(evalcond[2]) > 0.000001  )
{
continue;
}
}

rotationfunction0(solutions);
}
}

}

}

} else
{
if( 1 )
{
continue;

} else
{
}
}
}
}
}
}

} else
{
{
IkReal j7array[1], cj7array[1], sj7array[1];
bool j7valid[1]={false};
_nj7 = 1;
IkReal x307=((IkReal(0.0300000000000000))*(px));
IkReal x308=((cj8)*(pz));
IkReal x309=((IkReal(0.313800000000000))*(sj10));
IkReal x310=((IkReal(0.0300000000000000))*(py));
if( IKabs(((gconst3)*(((((IkReal(-1.00000000000000))*(px)*(x309)))+(((IkReal(-1.00000000000000))*(px)*(x308)))+(((IkReal(-1.00000000000000))*(cj10)*(x307)))+(x307))))) < IKFAST_ATAN2_MAGTHRESH && IKabs(((gconst3)*(((((IkReal(-1.00000000000000))*(x310)))+(((cj10)*(x310)))+(((py)*(x309)))+(((py)*(x308))))))) < IKFAST_ATAN2_MAGTHRESH )
    continue;
j7array[0]=IKatan2(((gconst3)*(((((IkReal(-1.00000000000000))*(px)*(x309)))+(((IkReal(-1.00000000000000))*(px)*(x308)))+(((IkReal(-1.00000000000000))*(cj10)*(x307)))+(x307)))), ((gconst3)*(((((IkReal(-1.00000000000000))*(x310)))+(((cj10)*(x310)))+(((py)*(x309)))+(((py)*(x308)))))));
sj7array[0]=IKsin(j7array[0]);
cj7array[0]=IKcos(j7array[0]);
if( j7array[0] > IKPI )
{
    j7array[0]-=IK2PI;
}
else if( j7array[0] < -IKPI )
{    j7array[0]+=IK2PI;
}
j7valid[0] = true;
for(int ij7 = 0; ij7 < 1; ++ij7)
{
if( !j7valid[ij7] )
{
    continue;
}
_ij7[0] = ij7; _ij7[1] = -1;
for(int iij7 = ij7+1; iij7 < 1; ++iij7)
{
if( j7valid[iij7] && IKabs(cj7array[ij7]-cj7array[iij7]) < IKFAST_SOLUTION_THRESH && IKabs(sj7array[ij7]-sj7array[iij7]) < IKFAST_SOLUTION_THRESH )
{
    j7valid[iij7]=false; _ij7[1] = iij7; break; 
}
}
j7 = j7array[ij7]; cj7 = cj7array[ij7]; sj7 = sj7array[ij7];
{
IkReal evalcond[5];
IkReal x311=IKsin(j7);
IkReal x312=IKcos(j7);
IkReal x313=((IkReal(0.0300000000000000))*(sj8));
IkReal x314=((IkReal(0.0600000000000000))*(sj8));
IkReal x315=((IkReal(0.600000000000000))*(cj8));
IkReal x316=((cj8)*(pz));
IkReal x317=((IkReal(1.00000000000000))*(sj8));
IkReal x318=((IkReal(0.313800000000000))*(sj10));
IkReal x319=((IkReal(0.0300000000000000))*(sj10));
IkReal x320=((IkReal(0.313800000000000))*(cj10));
IkReal x321=((py)*(x312));
IkReal x322=((px)*(x311));
evalcond[0]=((((IkReal(-1.00000000000000))*(px)*(x312)))+(((IkReal(-1.00000000000000))*(py)*(x311))));
evalcond[1]=((IkReal(0.300000000000000))+(((cj8)*(x322)))+(((IkReal(-1.00000000000000))*(cj8)*(x321)))+(x320)+(((IkReal(-1.00000000000000))*(x319)))+(((IkReal(-1.00000000000000))*(pz)*(x317))));
evalcond[2]=((IkReal(0.0300000000000000))+(((IkReal(-1.00000000000000))*(x317)*(x322)))+(((IkReal(-1.00000000000000))*(x318)))+(((sj8)*(x321)))+(((IkReal(-1.00000000000000))*(x316)))+(((IkReal(-0.0300000000000000))*(cj10))));
evalcond[3]=((((cj8)*(x320)))+(((IkReal(-1.00000000000000))*(x321)))+(x322)+(((sj8)*(x318)))+(((IkReal(-1.00000000000000))*(x313)))+(((cj10)*(x313)))+(((IkReal(0.300000000000000))*(cj8)))+(((IkReal(-1.00000000000000))*(cj8)*(x319))));
evalcond[4]=((IkReal(0.00847044000000000))+(((IkReal(-1.00000000000000))*(x314)*(x321)))+(((IkReal(0.600000000000000))*(pz)*(sj8)))+(((IkReal(-1.00000000000000))*(x315)*(x322)))+(((IkReal(-1.00000000000000))*(pp)))+(((x314)*(x322)))+(((x315)*(x321)))+(((IkReal(0.0600000000000000))*(x316))));
if( IKabs(evalcond[0]) > 0.000001  || IKabs(evalcond[1]) > 0.000001  || IKabs(evalcond[2]) > 0.000001  || IKabs(evalcond[3]) > 0.000001  || IKabs(evalcond[4]) > 0.000001  )
{
continue;
}
}

rotationfunction0(solutions);
}
}

}

}

} else
{
{
IkReal j7array[1], cj7array[1], sj7array[1];
bool j7valid[1]={false};
_nj7 = 1;
IkReal x323=((pz)*(sj8));
IkReal x324=((IkReal(0.0300000000000000))*(sj10));
IkReal x325=((IkReal(0.313800000000000))*(cj10));
if( IKabs(((gconst2)*(((((IkReal(-0.300000000000000))*(px)))+(((IkReal(-1.00000000000000))*(px)*(x325)))+(((px)*(x324)))+(((px)*(x323))))))) < IKFAST_ATAN2_MAGTHRESH && IKabs(((gconst2)*(((((IkReal(-1.00000000000000))*(py)*(x323)))+(((IkReal(0.300000000000000))*(py)))+(((py)*(x325)))+(((IkReal(-1.00000000000000))*(py)*(x324))))))) < IKFAST_ATAN2_MAGTHRESH )
    continue;
j7array[0]=IKatan2(((gconst2)*(((((IkReal(-0.300000000000000))*(px)))+(((IkReal(-1.00000000000000))*(px)*(x325)))+(((px)*(x324)))+(((px)*(x323)))))), ((gconst2)*(((((IkReal(-1.00000000000000))*(py)*(x323)))+(((IkReal(0.300000000000000))*(py)))+(((py)*(x325)))+(((IkReal(-1.00000000000000))*(py)*(x324)))))));
sj7array[0]=IKsin(j7array[0]);
cj7array[0]=IKcos(j7array[0]);
if( j7array[0] > IKPI )
{
    j7array[0]-=IK2PI;
}
else if( j7array[0] < -IKPI )
{    j7array[0]+=IK2PI;
}
j7valid[0] = true;
for(int ij7 = 0; ij7 < 1; ++ij7)
{
if( !j7valid[ij7] )
{
    continue;
}
_ij7[0] = ij7; _ij7[1] = -1;
for(int iij7 = ij7+1; iij7 < 1; ++iij7)
{
if( j7valid[iij7] && IKabs(cj7array[ij7]-cj7array[iij7]) < IKFAST_SOLUTION_THRESH && IKabs(sj7array[ij7]-sj7array[iij7]) < IKFAST_SOLUTION_THRESH )
{
    j7valid[iij7]=false; _ij7[1] = iij7; break; 
}
}
j7 = j7array[ij7]; cj7 = cj7array[ij7]; sj7 = sj7array[ij7];
{
IkReal evalcond[5];
IkReal x326=IKsin(j7);
IkReal x327=IKcos(j7);
IkReal x328=((IkReal(0.0300000000000000))*(sj8));
IkReal x329=((IkReal(0.0600000000000000))*(sj8));
IkReal x330=((IkReal(0.600000000000000))*(cj8));
IkReal x331=((cj8)*(pz));
IkReal x332=((IkReal(1.00000000000000))*(sj8));
IkReal x333=((IkReal(0.313800000000000))*(sj10));
IkReal x334=((IkReal(0.0300000000000000))*(sj10));
IkReal x335=((IkReal(0.313800000000000))*(cj10));
IkReal x336=((py)*(x327));
IkReal x337=((px)*(x326));
evalcond[0]=((((IkReal(-1.00000000000000))*(py)*(x326)))+(((IkReal(-1.00000000000000))*(px)*(x327))));
evalcond[1]=((IkReal(0.300000000000000))+(((cj8)*(x337)))+(((IkReal(-1.00000000000000))*(cj8)*(x336)))+(((IkReal(-1.00000000000000))*(pz)*(x332)))+(x335)+(((IkReal(-1.00000000000000))*(x334))));
evalcond[2]=((IkReal(0.0300000000000000))+(((IkReal(-1.00000000000000))*(x331)))+(((IkReal(-1.00000000000000))*(x333)))+(((IkReal(-1.00000000000000))*(x332)*(x337)))+(((sj8)*(x336)))+(((IkReal(-0.0300000000000000))*(cj10))));
evalcond[3]=((((cj8)*(x335)))+(((IkReal(-1.00000000000000))*(x328)))+(((cj10)*(x328)))+(x337)+(((IkReal(-1.00000000000000))*(x336)))+(((IkReal(-1.00000000000000))*(cj8)*(x334)))+(((IkReal(0.300000000000000))*(cj8)))+(((sj8)*(x333))));
evalcond[4]=((IkReal(0.00847044000000000))+(((x330)*(x336)))+(((IkReal(-1.00000000000000))*(x329)*(x336)))+(((IkReal(0.600000000000000))*(pz)*(sj8)))+(((IkReal(0.0600000000000000))*(x331)))+(((IkReal(-1.00000000000000))*(pp)))+(((IkReal(-1.00000000000000))*(x330)*(x337)))+(((x329)*(x337))));
if( IKabs(evalcond[0]) > 0.000001  || IKabs(evalcond[1]) > 0.000001  || IKabs(evalcond[2]) > 0.000001  || IKabs(evalcond[3]) > 0.000001  || IKabs(evalcond[4]) > 0.000001  )
{
continue;
}
}

rotationfunction0(solutions);
}
}

}

}

} else
{
IkReal x338=((IkReal(0.0300000000000000))*(cj8));
evalcond[0]=((IkReal(-3.14159265358979))+(IKfmod(((IkReal(4.71238898038469))+(j9)), IkReal(6.28318530717959))));
evalcond[1]=((IkReal(0.190270440000000))+(((IkReal(-0.0368280000000000))*(sj10)))+(((IkReal(0.186480000000000))*(cj10)))+(((IkReal(-1.00000000000000))*(pp))));
evalcond[2]=((((IkReal(0.313800000000000))*(cj10)*(sj8)))+(((cj10)*(x338)))+(((IkReal(0.313800000000000))*(cj8)*(sj10)))+(((IkReal(-1.00000000000000))*(pz)))+(((IkReal(-1.00000000000000))*(x338)))+(((IkReal(0.300000000000000))*(sj8)))+(((IkReal(-0.0300000000000000))*(sj10)*(sj8))));
if( IKabs(evalcond[0]) < 0.0000010000000000  && IKabs(evalcond[1]) < 0.0000010000000000  && IKabs(evalcond[2]) < 0.0000010000000000  )
{
{
IkReal dummyeval[1];
IkReal gconst12;
gconst12=IKsign(((((sj8)*((py)*(py))))+(((sj8)*((px)*(px))))));
dummyeval[0]=((((sj8)*((py)*(py))))+(((sj8)*((px)*(px)))));
if( IKabs(dummyeval[0]) < 0.0000010000000000  )
{
{
IkReal dummyeval[1];
IkReal gconst13;
gconst13=IKsign(((((cj8)*((px)*(px))))+(((cj8)*((py)*(py))))));
dummyeval[0]=((((cj8)*((px)*(px))))+(((cj8)*((py)*(py)))));
if( IKabs(dummyeval[0]) < 0.0000010000000000  )
{
{
IkReal evalcond[4];
IkReal x339=((IkReal(0.300000000000000))+(((IkReal(-0.0300000000000000))*(sj10)))+(((IkReal(-1.00000000000000))*(pz)))+(((IkReal(0.313800000000000))*(cj10))));
evalcond[0]=((IkReal(-3.14159265358979))+(IKfmod(((IkReal(1.57079632679490))+(j8)), IkReal(6.28318530717959))));
evalcond[1]=((IkReal(0.190270440000000))+(((IkReal(-0.0368280000000000))*(sj10)))+(((IkReal(0.186480000000000))*(cj10)))+(((IkReal(-1.00000000000000))*(pp))));
evalcond[2]=x339;
evalcond[3]=x339;
if( IKabs(evalcond[0]) < 0.0000010000000000  && IKabs(evalcond[1]) < 0.0000010000000000  && IKabs(evalcond[2]) < 0.0000010000000000  && IKabs(evalcond[3]) < 0.0000010000000000  )
{
{
IkReal dummyeval[1];
IkReal gconst14;
gconst14=IKsign(((((IkReal(-1.00000000000000))*((px)*(px))))+(((IkReal(-1.00000000000000))*((py)*(py))))));
dummyeval[0]=((((IkReal(-1.00000000000000))*((px)*(px))))+(((IkReal(-1.00000000000000))*((py)*(py)))));
if( IKabs(dummyeval[0]) < 0.0000010000000000  )
{
{
IkReal dummyeval[1];
IkReal gconst15;
gconst15=IKsign(((((IkReal(3.00000000000000))*((py)*(py))))+(((IkReal(3.00000000000000))*((px)*(px))))));
dummyeval[0]=(((px)*(px))+((py)*(py)));
if( IKabs(dummyeval[0]) < 0.0000010000000000  )
{
continue;

} else
{
{
IkReal j7array[1], cj7array[1], sj7array[1];
bool j7valid[1]={false};
_nj7 = 1;
IkReal x340=((IkReal(50.0000000000000))*(pp));
IkReal x341=((IkReal(30.0000000000000))*(pz));
if( IKabs(((gconst15)*(((((IkReal(-1.00000000000000))*(px)*(x340)))+(((IkReal(0.423522000000000))*(px)))+(((px)*(x341))))))) < IKFAST_ATAN2_MAGTHRESH && IKabs(((gconst15)*(((((py)*(x340)))+(((IkReal(-0.423522000000000))*(py)))+(((IkReal(-1.00000000000000))*(py)*(x341))))))) < IKFAST_ATAN2_MAGTHRESH )
    continue;
j7array[0]=IKatan2(((gconst15)*(((((IkReal(-1.00000000000000))*(px)*(x340)))+(((IkReal(0.423522000000000))*(px)))+(((px)*(x341)))))), ((gconst15)*(((((py)*(x340)))+(((IkReal(-0.423522000000000))*(py)))+(((IkReal(-1.00000000000000))*(py)*(x341)))))));
sj7array[0]=IKsin(j7array[0]);
cj7array[0]=IKcos(j7array[0]);
if( j7array[0] > IKPI )
{
    j7array[0]-=IK2PI;
}
else if( j7array[0] < -IKPI )
{    j7array[0]+=IK2PI;
}
j7valid[0] = true;
for(int ij7 = 0; ij7 < 1; ++ij7)
{
if( !j7valid[ij7] )
{
    continue;
}
_ij7[0] = ij7; _ij7[1] = -1;
for(int iij7 = ij7+1; iij7 < 1; ++iij7)
{
if( j7valid[iij7] && IKabs(cj7array[ij7]-cj7array[iij7]) < IKFAST_SOLUTION_THRESH && IKabs(sj7array[ij7]-sj7array[iij7]) < IKFAST_SOLUTION_THRESH )
{
    j7valid[iij7]=false; _ij7[1] = iij7; break; 
}
}
j7 = j7array[ij7]; cj7 = cj7array[ij7]; sj7 = sj7array[ij7];
{
IkReal evalcond[3];
IkReal x342=IKsin(j7);
IkReal x343=IKcos(j7);
IkReal x344=((IkReal(1.00000000000000))*(py));
IkReal x345=((px)*(x342));
evalcond[0]=((((IkReal(-1.00000000000000))*(px)*(x343)))+(((IkReal(-1.00000000000000))*(x342)*(x344))));
evalcond[1]=((IkReal(0.0300000000000000))+(((IkReal(-0.313800000000000))*(sj10)))+(x345)+(((IkReal(-1.00000000000000))*(x343)*(x344)))+(((IkReal(-0.0300000000000000))*(cj10))));
evalcond[2]=((IkReal(0.00847044000000000))+(((IkReal(0.600000000000000))*(pz)))+(((IkReal(-0.0600000000000000))*(x345)))+(((IkReal(-1.00000000000000))*(pp)))+(((IkReal(0.0600000000000000))*(py)*(x343))));
if( IKabs(evalcond[0]) > 0.000001  || IKabs(evalcond[1]) > 0.000001  || IKabs(evalcond[2]) > 0.000001  )
{
continue;
}
}

rotationfunction0(solutions);
}
}

}

}

} else
{
{
IkReal j7array[1], cj7array[1], sj7array[1];
bool j7valid[1]={false};
_nj7 = 1;
IkReal x346=((IkReal(0.0300000000000000))*(px));
IkReal x347=((IkReal(0.313800000000000))*(sj10));
IkReal x348=((IkReal(0.0300000000000000))*(py));
if( IKabs(((gconst14)*(((((IkReal(-1.00000000000000))*(px)*(x347)))+(x346)+(((IkReal(-1.00000000000000))*(cj10)*(x346))))))) < IKFAST_ATAN2_MAGTHRESH && IKabs(((gconst14)*(((((py)*(x347)))+(((cj10)*(x348)))+(((IkReal(-1.00000000000000))*(x348))))))) < IKFAST_ATAN2_MAGTHRESH )
    continue;
j7array[0]=IKatan2(((gconst14)*(((((IkReal(-1.00000000000000))*(px)*(x347)))+(x346)+(((IkReal(-1.00000000000000))*(cj10)*(x346)))))), ((gconst14)*(((((py)*(x347)))+(((cj10)*(x348)))+(((IkReal(-1.00000000000000))*(x348)))))));
sj7array[0]=IKsin(j7array[0]);
cj7array[0]=IKcos(j7array[0]);
if( j7array[0] > IKPI )
{
    j7array[0]-=IK2PI;
}
else if( j7array[0] < -IKPI )
{    j7array[0]+=IK2PI;
}
j7valid[0] = true;
for(int ij7 = 0; ij7 < 1; ++ij7)
{
if( !j7valid[ij7] )
{
    continue;
}
_ij7[0] = ij7; _ij7[1] = -1;
for(int iij7 = ij7+1; iij7 < 1; ++iij7)
{
if( j7valid[iij7] && IKabs(cj7array[ij7]-cj7array[iij7]) < IKFAST_SOLUTION_THRESH && IKabs(sj7array[ij7]-sj7array[iij7]) < IKFAST_SOLUTION_THRESH )
{
    j7valid[iij7]=false; _ij7[1] = iij7; break; 
}
}
j7 = j7array[ij7]; cj7 = cj7array[ij7]; sj7 = sj7array[ij7];
{
IkReal evalcond[3];
IkReal x349=IKsin(j7);
IkReal x350=IKcos(j7);
IkReal x351=((IkReal(1.00000000000000))*(py));
IkReal x352=((px)*(x349));
evalcond[0]=((((IkReal(-1.00000000000000))*(x349)*(x351)))+(((IkReal(-1.00000000000000))*(px)*(x350))));
evalcond[1]=((IkReal(0.0300000000000000))+(((IkReal(-0.313800000000000))*(sj10)))+(x352)+(((IkReal(-1.00000000000000))*(x350)*(x351)))+(((IkReal(-0.0300000000000000))*(cj10))));
evalcond[2]=((IkReal(0.00847044000000000))+(((IkReal(-0.0600000000000000))*(x352)))+(((IkReal(0.600000000000000))*(pz)))+(((IkReal(0.0600000000000000))*(py)*(x350)))+(((IkReal(-1.00000000000000))*(pp))));
if( IKabs(evalcond[0]) > 0.000001  || IKabs(evalcond[1]) > 0.000001  || IKabs(evalcond[2]) > 0.000001  )
{
continue;
}
}

rotationfunction0(solutions);
}
}

}

}

} else
{
IkReal x353=((IkReal(0.0300000000000000))*(sj10));
IkReal x354=((IkReal(0.313800000000000))*(cj10));
evalcond[0]=((IkReal(-3.14159265358979))+(IKfmod(((IkReal(4.71238898038469))+(j8)), IkReal(6.28318530717959))));
evalcond[1]=((IkReal(0.190270440000000))+(((IkReal(-0.0368280000000000))*(sj10)))+(((IkReal(0.186480000000000))*(cj10)))+(((IkReal(-1.00000000000000))*(pp))));
evalcond[2]=((IkReal(0.300000000000000))+(((IkReal(-1.00000000000000))*(x353)))+(x354)+(pz));
evalcond[3]=((IkReal(-0.300000000000000))+(((IkReal(-1.00000000000000))*(x354)))+(x353)+(((IkReal(-1.00000000000000))*(pz))));
if( IKabs(evalcond[0]) < 0.0000010000000000  && IKabs(evalcond[1]) < 0.0000010000000000  && IKabs(evalcond[2]) < 0.0000010000000000  && IKabs(evalcond[3]) < 0.0000010000000000  )
{
{
IkReal dummyeval[1];
IkReal gconst16;
gconst16=IKsign((((px)*(px))+((py)*(py))));
dummyeval[0]=(((px)*(px))+((py)*(py)));
if( IKabs(dummyeval[0]) < 0.0000010000000000  )
{
{
IkReal dummyeval[1];
IkReal gconst17;
gconst17=IKsign(((((IkReal(-3.00000000000000))*((px)*(px))))+(((IkReal(-3.00000000000000))*((py)*(py))))));
dummyeval[0]=((((IkReal(-1.00000000000000))*((px)*(px))))+(((IkReal(-1.00000000000000))*((py)*(py)))));
if( IKabs(dummyeval[0]) < 0.0000010000000000  )
{
continue;

} else
{
{
IkReal j7array[1], cj7array[1], sj7array[1];
bool j7valid[1]={false};
_nj7 = 1;
IkReal x355=((IkReal(50.0000000000000))*(pp));
IkReal x356=((IkReal(30.0000000000000))*(pz));
if( IKabs(((gconst17)*(((((IkReal(0.423522000000000))*(px)))+(((IkReal(-1.00000000000000))*(px)*(x356)))+(((IkReal(-1.00000000000000))*(px)*(x355))))))) < IKFAST_ATAN2_MAGTHRESH && IKabs(((gconst17)*(((((py)*(x356)))+(((py)*(x355)))+(((IkReal(-0.423522000000000))*(py))))))) < IKFAST_ATAN2_MAGTHRESH )
    continue;
j7array[0]=IKatan2(((gconst17)*(((((IkReal(0.423522000000000))*(px)))+(((IkReal(-1.00000000000000))*(px)*(x356)))+(((IkReal(-1.00000000000000))*(px)*(x355)))))), ((gconst17)*(((((py)*(x356)))+(((py)*(x355)))+(((IkReal(-0.423522000000000))*(py)))))));
sj7array[0]=IKsin(j7array[0]);
cj7array[0]=IKcos(j7array[0]);
if( j7array[0] > IKPI )
{
    j7array[0]-=IK2PI;
}
else if( j7array[0] < -IKPI )
{    j7array[0]+=IK2PI;
}
j7valid[0] = true;
for(int ij7 = 0; ij7 < 1; ++ij7)
{
if( !j7valid[ij7] )
{
    continue;
}
_ij7[0] = ij7; _ij7[1] = -1;
for(int iij7 = ij7+1; iij7 < 1; ++iij7)
{
if( j7valid[iij7] && IKabs(cj7array[ij7]-cj7array[iij7]) < IKFAST_SOLUTION_THRESH && IKabs(sj7array[ij7]-sj7array[iij7]) < IKFAST_SOLUTION_THRESH )
{
    j7valid[iij7]=false; _ij7[1] = iij7; break; 
}
}
j7 = j7array[ij7]; cj7 = cj7array[ij7]; sj7 = sj7array[ij7];
{
IkReal evalcond[3];
IkReal x357=IKcos(j7);
IkReal x358=IKsin(j7);
IkReal x359=((IkReal(1.00000000000000))*(x358));
IkReal x360=((py)*(x357));
evalcond[0]=((((IkReal(-1.00000000000000))*(px)*(x357)))+(((IkReal(-1.00000000000000))*(py)*(x359))));
evalcond[1]=((IkReal(0.0300000000000000))+(((IkReal(-0.313800000000000))*(sj10)))+(((IkReal(-1.00000000000000))*(px)*(x359)))+(x360)+(((IkReal(-0.0300000000000000))*(cj10))));
evalcond[2]=((IkReal(0.00847044000000000))+(((IkReal(0.0600000000000000))*(px)*(x358)))+(((IkReal(-0.600000000000000))*(pz)))+(((IkReal(-1.00000000000000))*(pp)))+(((IkReal(-0.0600000000000000))*(x360))));
if( IKabs(evalcond[0]) > 0.000001  || IKabs(evalcond[1]) > 0.000001  || IKabs(evalcond[2]) > 0.000001  )
{
continue;
}
}

rotationfunction0(solutions);
}
}

}

}

} else
{
{
IkReal j7array[1], cj7array[1], sj7array[1];
bool j7valid[1]={false};
_nj7 = 1;
IkReal x361=((IkReal(0.0300000000000000))*(px));
IkReal x362=((IkReal(0.313800000000000))*(sj10));
IkReal x363=((IkReal(0.0300000000000000))*(py));
if( IKabs(((gconst16)*(((x361)+(((IkReal(-1.00000000000000))*(cj10)*(x361)))+(((IkReal(-1.00000000000000))*(px)*(x362))))))) < IKFAST_ATAN2_MAGTHRESH && IKabs(((gconst16)*(((((IkReal(-1.00000000000000))*(x363)))+(((cj10)*(x363)))+(((py)*(x362))))))) < IKFAST_ATAN2_MAGTHRESH )
    continue;
j7array[0]=IKatan2(((gconst16)*(((x361)+(((IkReal(-1.00000000000000))*(cj10)*(x361)))+(((IkReal(-1.00000000000000))*(px)*(x362)))))), ((gconst16)*(((((IkReal(-1.00000000000000))*(x363)))+(((cj10)*(x363)))+(((py)*(x362)))))));
sj7array[0]=IKsin(j7array[0]);
cj7array[0]=IKcos(j7array[0]);
if( j7array[0] > IKPI )
{
    j7array[0]-=IK2PI;
}
else if( j7array[0] < -IKPI )
{    j7array[0]+=IK2PI;
}
j7valid[0] = true;
for(int ij7 = 0; ij7 < 1; ++ij7)
{
if( !j7valid[ij7] )
{
    continue;
}
_ij7[0] = ij7; _ij7[1] = -1;
for(int iij7 = ij7+1; iij7 < 1; ++iij7)
{
if( j7valid[iij7] && IKabs(cj7array[ij7]-cj7array[iij7]) < IKFAST_SOLUTION_THRESH && IKabs(sj7array[ij7]-sj7array[iij7]) < IKFAST_SOLUTION_THRESH )
{
    j7valid[iij7]=false; _ij7[1] = iij7; break; 
}
}
j7 = j7array[ij7]; cj7 = cj7array[ij7]; sj7 = sj7array[ij7];
{
IkReal evalcond[3];
IkReal x364=IKcos(j7);
IkReal x365=IKsin(j7);
IkReal x366=((IkReal(1.00000000000000))*(x365));
IkReal x367=((py)*(x364));
evalcond[0]=((((IkReal(-1.00000000000000))*(px)*(x364)))+(((IkReal(-1.00000000000000))*(py)*(x366))));
evalcond[1]=((IkReal(0.0300000000000000))+(((IkReal(-0.313800000000000))*(sj10)))+(x367)+(((IkReal(-1.00000000000000))*(px)*(x366)))+(((IkReal(-0.0300000000000000))*(cj10))));
evalcond[2]=((IkReal(0.00847044000000000))+(((IkReal(-0.600000000000000))*(pz)))+(((IkReal(-1.00000000000000))*(pp)))+(((IkReal(0.0600000000000000))*(px)*(x365)))+(((IkReal(-0.0600000000000000))*(x367))));
if( IKabs(evalcond[0]) > 0.000001  || IKabs(evalcond[1]) > 0.000001  || IKabs(evalcond[2]) > 0.000001  )
{
continue;
}
}

rotationfunction0(solutions);
}
}

}

}

} else
{
IkReal x368=((IkReal(0.313800000000000))*(sj10));
IkReal x369=((IkReal(0.0300000000000000))*(cj10));
IkReal x370=((x368)+(x369));
evalcond[0]=((IkReal(-3.14159265358979))+(IKfmod(((IkReal(3.14159265358979))+(j8)), IkReal(6.28318530717959))));
evalcond[1]=((IkReal(0.190270440000000))+(((IkReal(-0.0368280000000000))*(sj10)))+(((IkReal(0.186480000000000))*(cj10)))+(((IkReal(-1.00000000000000))*(pp))));
evalcond[2]=((IkReal(-0.0300000000000000))+(x370)+(((IkReal(-1.00000000000000))*(pz))));
evalcond[3]=((IkReal(0.0300000000000000))+(((IkReal(-1.00000000000000))*(x370)))+(pz));
if( IKabs(evalcond[0]) < 0.0000010000000000  && IKabs(evalcond[1]) < 0.0000010000000000  && IKabs(evalcond[2]) < 0.0000010000000000  && IKabs(evalcond[3]) < 0.0000010000000000  )
{
{
IkReal dummyeval[1];
IkReal gconst18;
gconst18=IKsign(((((IkReal(-1.00000000000000))*((px)*(px))))+(((IkReal(-1.00000000000000))*((py)*(py))))));
dummyeval[0]=((((IkReal(-1.00000000000000))*((px)*(px))))+(((IkReal(-1.00000000000000))*((py)*(py)))));
if( IKabs(dummyeval[0]) < 0.0000010000000000  )
{
{
IkReal dummyeval[1];
IkReal gconst19;
gconst19=IKsign(((((IkReal(3.00000000000000))*((py)*(py))))+(((IkReal(3.00000000000000))*((px)*(px))))));
dummyeval[0]=(((px)*(px))+((py)*(py)));
if( IKabs(dummyeval[0]) < 0.0000010000000000  )
{
continue;

} else
{
{
IkReal j7array[1], cj7array[1], sj7array[1];
bool j7valid[1]={false};
_nj7 = 1;
IkReal x371=((IkReal(5.00000000000000))*(pp));
IkReal x372=((IkReal(0.300000000000000))*(pz));
if( IKabs(((gconst19)*(((((IkReal(0.0423522000000000))*(px)))+(((IkReal(-1.00000000000000))*(px)*(x372)))+(((IkReal(-1.00000000000000))*(px)*(x371))))))) < IKFAST_ATAN2_MAGTHRESH && IKabs(((gconst19)*(((((IkReal(-0.0423522000000000))*(py)))+(((py)*(x372)))+(((py)*(x371))))))) < IKFAST_ATAN2_MAGTHRESH )
    continue;
j7array[0]=IKatan2(((gconst19)*(((((IkReal(0.0423522000000000))*(px)))+(((IkReal(-1.00000000000000))*(px)*(x372)))+(((IkReal(-1.00000000000000))*(px)*(x371)))))), ((gconst19)*(((((IkReal(-0.0423522000000000))*(py)))+(((py)*(x372)))+(((py)*(x371)))))));
sj7array[0]=IKsin(j7array[0]);
cj7array[0]=IKcos(j7array[0]);
if( j7array[0] > IKPI )
{
    j7array[0]-=IK2PI;
}
else if( j7array[0] < -IKPI )
{    j7array[0]+=IK2PI;
}
j7valid[0] = true;
for(int ij7 = 0; ij7 < 1; ++ij7)
{
if( !j7valid[ij7] )
{
    continue;
}
_ij7[0] = ij7; _ij7[1] = -1;
for(int iij7 = ij7+1; iij7 < 1; ++iij7)
{
if( j7valid[iij7] && IKabs(cj7array[ij7]-cj7array[iij7]) < IKFAST_SOLUTION_THRESH && IKabs(sj7array[ij7]-sj7array[iij7]) < IKFAST_SOLUTION_THRESH )
{
    j7valid[iij7]=false; _ij7[1] = iij7; break; 
}
}
j7 = j7array[ij7]; cj7 = cj7array[ij7]; sj7 = sj7array[ij7];
{
IkReal evalcond[3];
IkReal x373=IKsin(j7);
IkReal x374=IKcos(j7);
IkReal x375=((px)*(x373));
IkReal x376=((IkReal(1.00000000000000))*(x374));
evalcond[0]=((((IkReal(-1.00000000000000))*(py)*(x373)))+(((IkReal(-1.00000000000000))*(px)*(x376))));
evalcond[1]=((IkReal(0.300000000000000))+(((IkReal(-0.0300000000000000))*(sj10)))+(x375)+(((IkReal(-1.00000000000000))*(py)*(x376)))+(((IkReal(0.313800000000000))*(cj10))));
evalcond[2]=((IkReal(0.00847044000000000))+(((IkReal(-0.600000000000000))*(x375)))+(((IkReal(-1.00000000000000))*(pp)))+(((IkReal(-0.0600000000000000))*(pz)))+(((IkReal(0.600000000000000))*(py)*(x374))));
if( IKabs(evalcond[0]) > 0.000001  || IKabs(evalcond[1]) > 0.000001  || IKabs(evalcond[2]) > 0.000001  )
{
continue;
}
}

rotationfunction0(solutions);
}
}

}

}

} else
{
{
IkReal j7array[1], cj7array[1], sj7array[1];
bool j7valid[1]={false};
_nj7 = 1;
IkReal x377=((IkReal(0.0300000000000000))*(sj10));
IkReal x378=((IkReal(0.313800000000000))*(cj10));
if( IKabs(((gconst18)*(((((IkReal(0.300000000000000))*(px)))+(((px)*(x378)))+(((IkReal(-1.00000000000000))*(px)*(x377))))))) < IKFAST_ATAN2_MAGTHRESH && IKabs(((gconst18)*(((((IkReal(-0.300000000000000))*(py)))+(((py)*(x377)))+(((IkReal(-1.00000000000000))*(py)*(x378))))))) < IKFAST_ATAN2_MAGTHRESH )
    continue;
j7array[0]=IKatan2(((gconst18)*(((((IkReal(0.300000000000000))*(px)))+(((px)*(x378)))+(((IkReal(-1.00000000000000))*(px)*(x377)))))), ((gconst18)*(((((IkReal(-0.300000000000000))*(py)))+(((py)*(x377)))+(((IkReal(-1.00000000000000))*(py)*(x378)))))));
sj7array[0]=IKsin(j7array[0]);
cj7array[0]=IKcos(j7array[0]);
if( j7array[0] > IKPI )
{
    j7array[0]-=IK2PI;
}
else if( j7array[0] < -IKPI )
{    j7array[0]+=IK2PI;
}
j7valid[0] = true;
for(int ij7 = 0; ij7 < 1; ++ij7)
{
if( !j7valid[ij7] )
{
    continue;
}
_ij7[0] = ij7; _ij7[1] = -1;
for(int iij7 = ij7+1; iij7 < 1; ++iij7)
{
if( j7valid[iij7] && IKabs(cj7array[ij7]-cj7array[iij7]) < IKFAST_SOLUTION_THRESH && IKabs(sj7array[ij7]-sj7array[iij7]) < IKFAST_SOLUTION_THRESH )
{
    j7valid[iij7]=false; _ij7[1] = iij7; break; 
}
}
j7 = j7array[ij7]; cj7 = cj7array[ij7]; sj7 = sj7array[ij7];
{
IkReal evalcond[3];
IkReal x379=IKsin(j7);
IkReal x380=IKcos(j7);
IkReal x381=((px)*(x379));
IkReal x382=((IkReal(1.00000000000000))*(x380));
evalcond[0]=((((IkReal(-1.00000000000000))*(py)*(x379)))+(((IkReal(-1.00000000000000))*(px)*(x382))));
evalcond[1]=((IkReal(0.300000000000000))+(((IkReal(-1.00000000000000))*(py)*(x382)))+(((IkReal(-0.0300000000000000))*(sj10)))+(x381)+(((IkReal(0.313800000000000))*(cj10))));
evalcond[2]=((IkReal(0.00847044000000000))+(((IkReal(0.600000000000000))*(py)*(x380)))+(((IkReal(-1.00000000000000))*(pp)))+(((IkReal(-0.0600000000000000))*(pz)))+(((IkReal(-0.600000000000000))*(x381))));
if( IKabs(evalcond[0]) > 0.000001  || IKabs(evalcond[1]) > 0.000001  || IKabs(evalcond[2]) > 0.000001  )
{
continue;
}
}

rotationfunction0(solutions);
}
}

}

}

} else
{
IkReal x383=((IkReal(0.0300000000000000))+(((IkReal(-0.313800000000000))*(sj10)))+(((IkReal(-1.00000000000000))*(pz)))+(((IkReal(-0.0300000000000000))*(cj10))));
evalcond[0]=((IkReal(-3.14159265358979))+(IKfmod(((IkReal(1.11022302462516e-16))+(j8)), IkReal(6.28318530717959))));
evalcond[1]=((IkReal(0.190270440000000))+(((IkReal(-0.0368280000000000))*(sj10)))+(((IkReal(0.186480000000000))*(cj10)))+(((IkReal(-1.00000000000000))*(pp))));
evalcond[2]=x383;
evalcond[3]=x383;
if( IKabs(evalcond[0]) < 0.0000010000000000  && IKabs(evalcond[1]) < 0.0000010000000000  && IKabs(evalcond[2]) < 0.0000010000000000  && IKabs(evalcond[3]) < 0.0000010000000000  )
{
{
IkReal dummyeval[1];
IkReal gconst20;
gconst20=IKsign((((px)*(px))+((py)*(py))));
dummyeval[0]=(((px)*(px))+((py)*(py)));
if( IKabs(dummyeval[0]) < 0.0000010000000000  )
{
{
IkReal dummyeval[1];
IkReal gconst21;
gconst21=IKsign(((((IkReal(-3.00000000000000))*((px)*(px))))+(((IkReal(-3.00000000000000))*((py)*(py))))));
dummyeval[0]=((((IkReal(-1.00000000000000))*((px)*(px))))+(((IkReal(-1.00000000000000))*((py)*(py)))));
if( IKabs(dummyeval[0]) < 0.0000010000000000  )
{
continue;

} else
{
{
IkReal j7array[1], cj7array[1], sj7array[1];
bool j7valid[1]={false};
_nj7 = 1;
IkReal x384=((IkReal(5.00000000000000))*(pp));
IkReal x385=((IkReal(0.300000000000000))*(pz));
if( IKabs(((gconst21)*(((((px)*(x385)))+(((IkReal(0.0423522000000000))*(px)))+(((IkReal(-1.00000000000000))*(px)*(x384))))))) < IKFAST_ATAN2_MAGTHRESH && IKabs(((gconst21)*(((((IkReal(-1.00000000000000))*(py)*(x385)))+(((IkReal(-0.0423522000000000))*(py)))+(((py)*(x384))))))) < IKFAST_ATAN2_MAGTHRESH )
    continue;
j7array[0]=IKatan2(((gconst21)*(((((px)*(x385)))+(((IkReal(0.0423522000000000))*(px)))+(((IkReal(-1.00000000000000))*(px)*(x384)))))), ((gconst21)*(((((IkReal(-1.00000000000000))*(py)*(x385)))+(((IkReal(-0.0423522000000000))*(py)))+(((py)*(x384)))))));
sj7array[0]=IKsin(j7array[0]);
cj7array[0]=IKcos(j7array[0]);
if( j7array[0] > IKPI )
{
    j7array[0]-=IK2PI;
}
else if( j7array[0] < -IKPI )
{    j7array[0]+=IK2PI;
}
j7valid[0] = true;
for(int ij7 = 0; ij7 < 1; ++ij7)
{
if( !j7valid[ij7] )
{
    continue;
}
_ij7[0] = ij7; _ij7[1] = -1;
for(int iij7 = ij7+1; iij7 < 1; ++iij7)
{
if( j7valid[iij7] && IKabs(cj7array[ij7]-cj7array[iij7]) < IKFAST_SOLUTION_THRESH && IKabs(sj7array[ij7]-sj7array[iij7]) < IKFAST_SOLUTION_THRESH )
{
    j7valid[iij7]=false; _ij7[1] = iij7; break; 
}
}
j7 = j7array[ij7]; cj7 = cj7array[ij7]; sj7 = sj7array[ij7];
{
IkReal evalcond[3];
IkReal x386=IKcos(j7);
IkReal x387=IKsin(j7);
IkReal x388=((px)*(x387));
IkReal x389=((py)*(x386));
evalcond[0]=((((IkReal(-1.00000000000000))*(px)*(x386)))+(((IkReal(-1.00000000000000))*(py)*(x387))));
evalcond[1]=((IkReal(0.300000000000000))+(((IkReal(-0.0300000000000000))*(sj10)))+(x389)+(((IkReal(-1.00000000000000))*(x388)))+(((IkReal(0.313800000000000))*(cj10))));
evalcond[2]=((IkReal(0.00847044000000000))+(((IkReal(-1.00000000000000))*(pp)))+(((IkReal(0.600000000000000))*(x388)))+(((IkReal(-0.600000000000000))*(x389)))+(((IkReal(0.0600000000000000))*(pz))));
if( IKabs(evalcond[0]) > 0.000001  || IKabs(evalcond[1]) > 0.000001  || IKabs(evalcond[2]) > 0.000001  )
{
continue;
}
}

rotationfunction0(solutions);
}
}

}

}

} else
{
{
IkReal j7array[1], cj7array[1], sj7array[1];
bool j7valid[1]={false};
_nj7 = 1;
IkReal x390=((IkReal(0.0300000000000000))*(sj10));
IkReal x391=((IkReal(0.313800000000000))*(cj10));
if( IKabs(((gconst20)*(((((IkReal(0.300000000000000))*(px)))+(((px)*(x391)))+(((IkReal(-1.00000000000000))*(px)*(x390))))))) < IKFAST_ATAN2_MAGTHRESH && IKabs(((gconst20)*(((((IkReal(-0.300000000000000))*(py)))+(((py)*(x390)))+(((IkReal(-1.00000000000000))*(py)*(x391))))))) < IKFAST_ATAN2_MAGTHRESH )
    continue;
j7array[0]=IKatan2(((gconst20)*(((((IkReal(0.300000000000000))*(px)))+(((px)*(x391)))+(((IkReal(-1.00000000000000))*(px)*(x390)))))), ((gconst20)*(((((IkReal(-0.300000000000000))*(py)))+(((py)*(x390)))+(((IkReal(-1.00000000000000))*(py)*(x391)))))));
sj7array[0]=IKsin(j7array[0]);
cj7array[0]=IKcos(j7array[0]);
if( j7array[0] > IKPI )
{
    j7array[0]-=IK2PI;
}
else if( j7array[0] < -IKPI )
{    j7array[0]+=IK2PI;
}
j7valid[0] = true;
for(int ij7 = 0; ij7 < 1; ++ij7)
{
if( !j7valid[ij7] )
{
    continue;
}
_ij7[0] = ij7; _ij7[1] = -1;
for(int iij7 = ij7+1; iij7 < 1; ++iij7)
{
if( j7valid[iij7] && IKabs(cj7array[ij7]-cj7array[iij7]) < IKFAST_SOLUTION_THRESH && IKabs(sj7array[ij7]-sj7array[iij7]) < IKFAST_SOLUTION_THRESH )
{
    j7valid[iij7]=false; _ij7[1] = iij7; break; 
}
}
j7 = j7array[ij7]; cj7 = cj7array[ij7]; sj7 = sj7array[ij7];
{
IkReal evalcond[3];
IkReal x392=IKcos(j7);
IkReal x393=IKsin(j7);
IkReal x394=((px)*(x393));
IkReal x395=((py)*(x392));
evalcond[0]=((((IkReal(-1.00000000000000))*(py)*(x393)))+(((IkReal(-1.00000000000000))*(px)*(x392))));
evalcond[1]=((IkReal(0.300000000000000))+(((IkReal(-1.00000000000000))*(x394)))+(((IkReal(-0.0300000000000000))*(sj10)))+(x395)+(((IkReal(0.313800000000000))*(cj10))));
evalcond[2]=((IkReal(0.00847044000000000))+(((IkReal(0.600000000000000))*(x394)))+(((IkReal(-0.600000000000000))*(x395)))+(((IkReal(-1.00000000000000))*(pp)))+(((IkReal(0.0600000000000000))*(pz))));
if( IKabs(evalcond[0]) > 0.000001  || IKabs(evalcond[1]) > 0.000001  || IKabs(evalcond[2]) > 0.000001  )
{
continue;
}
}

rotationfunction0(solutions);
}
}

}

}

} else
{
if( 1 )
{
continue;

} else
{
}
}
}
}
}
}

} else
{
{
IkReal j7array[1], cj7array[1], sj7array[1];
bool j7valid[1]={false};
_nj7 = 1;
IkReal x396=((pz)*(sj8));
IkReal x397=((IkReal(0.0300000000000000))*(sj10));
IkReal x398=((IkReal(0.313800000000000))*(cj10));
if( IKabs(((gconst13)*(((((IkReal(-0.300000000000000))*(px)))+(((px)*(x396)))+(((px)*(x397)))+(((IkReal(-1.00000000000000))*(px)*(x398))))))) < IKFAST_ATAN2_MAGTHRESH && IKabs(((gconst13)*(((((IkReal(-1.00000000000000))*(py)*(x396)))+(((IkReal(0.300000000000000))*(py)))+(((py)*(x398)))+(((IkReal(-1.00000000000000))*(py)*(x397))))))) < IKFAST_ATAN2_MAGTHRESH )
    continue;
j7array[0]=IKatan2(((gconst13)*(((((IkReal(-0.300000000000000))*(px)))+(((px)*(x396)))+(((px)*(x397)))+(((IkReal(-1.00000000000000))*(px)*(x398)))))), ((gconst13)*(((((IkReal(-1.00000000000000))*(py)*(x396)))+(((IkReal(0.300000000000000))*(py)))+(((py)*(x398)))+(((IkReal(-1.00000000000000))*(py)*(x397)))))));
sj7array[0]=IKsin(j7array[0]);
cj7array[0]=IKcos(j7array[0]);
if( j7array[0] > IKPI )
{
    j7array[0]-=IK2PI;
}
else if( j7array[0] < -IKPI )
{    j7array[0]+=IK2PI;
}
j7valid[0] = true;
for(int ij7 = 0; ij7 < 1; ++ij7)
{
if( !j7valid[ij7] )
{
    continue;
}
_ij7[0] = ij7; _ij7[1] = -1;
for(int iij7 = ij7+1; iij7 < 1; ++iij7)
{
if( j7valid[iij7] && IKabs(cj7array[ij7]-cj7array[iij7]) < IKFAST_SOLUTION_THRESH && IKabs(sj7array[ij7]-sj7array[iij7]) < IKFAST_SOLUTION_THRESH )
{
    j7valid[iij7]=false; _ij7[1] = iij7; break; 
}
}
j7 = j7array[ij7]; cj7 = cj7array[ij7]; sj7 = sj7array[ij7];
{
IkReal evalcond[5];
IkReal x399=IKsin(j7);
IkReal x400=IKcos(j7);
IkReal x401=((IkReal(0.0300000000000000))*(sj8));
IkReal x402=((IkReal(0.0600000000000000))*(sj8));
IkReal x403=((IkReal(0.600000000000000))*(cj8));
IkReal x404=((cj8)*(pz));
IkReal x405=((IkReal(0.313800000000000))*(sj10));
IkReal x406=((IkReal(0.0300000000000000))*(sj10));
IkReal x407=((IkReal(0.313800000000000))*(cj10));
IkReal x408=((pz)*(sj8));
IkReal x409=((py)*(x400));
IkReal x410=((px)*(x399));
IkReal x411=((IkReal(1.00000000000000))*(x409));
evalcond[0]=((((IkReal(-1.00000000000000))*(py)*(x399)))+(((IkReal(-1.00000000000000))*(px)*(x400))));
evalcond[1]=((IkReal(0.300000000000000))+(((IkReal(-1.00000000000000))*(cj8)*(x411)))+(x407)+(((cj8)*(x410)))+(((IkReal(-1.00000000000000))*(x408)))+(((IkReal(-1.00000000000000))*(x406))));
evalcond[2]=((IkReal(0.0300000000000000))+(((sj8)*(x410)))+(x404)+(((IkReal(-1.00000000000000))*(sj8)*(x411)))+(((IkReal(-1.00000000000000))*(x405)))+(((IkReal(-0.0300000000000000))*(cj10))));
evalcond[3]=((((IkReal(-1.00000000000000))*(cj8)*(x406)))+(x401)+(x410)+(((IkReal(-1.00000000000000))*(sj8)*(x405)))+(((IkReal(-1.00000000000000))*(cj10)*(x401)))+(((cj8)*(x407)))+(((IkReal(0.300000000000000))*(cj8)))+(((IkReal(-1.00000000000000))*(x411))));
evalcond[4]=((IkReal(0.00847044000000000))+(((IkReal(-0.0600000000000000))*(x404)))+(((IkReal(-1.00000000000000))*(x403)*(x410)))+(((IkReal(-1.00000000000000))*(x402)*(x410)))+(((IkReal(-1.00000000000000))*(pp)))+(((IkReal(0.600000000000000))*(x408)))+(((x403)*(x409)))+(((x402)*(x409))));
if( IKabs(evalcond[0]) > 0.000001  || IKabs(evalcond[1]) > 0.000001  || IKabs(evalcond[2]) > 0.000001  || IKabs(evalcond[3]) > 0.000001  || IKabs(evalcond[4]) > 0.000001  )
{
continue;
}
}

rotationfunction0(solutions);
}
}

}

}

} else
{
{
IkReal j7array[1], cj7array[1], sj7array[1];
bool j7valid[1]={false};
_nj7 = 1;
IkReal x412=((IkReal(0.0300000000000000))*(px));
IkReal x413=((cj8)*(pz));
IkReal x414=((IkReal(0.313800000000000))*(sj10));
IkReal x415=((IkReal(0.0300000000000000))*(py));
if( IKabs(((gconst12)*(((((px)*(x414)))+(((IkReal(-1.00000000000000))*(px)*(x413)))+(((IkReal(-1.00000000000000))*(x412)))+(((cj10)*(x412))))))) < IKFAST_ATAN2_MAGTHRESH && IKabs(((gconst12)*(((((py)*(x413)))+(((IkReal(-1.00000000000000))*(cj10)*(x415)))+(x415)+(((IkReal(-1.00000000000000))*(py)*(x414))))))) < IKFAST_ATAN2_MAGTHRESH )
    continue;
j7array[0]=IKatan2(((gconst12)*(((((px)*(x414)))+(((IkReal(-1.00000000000000))*(px)*(x413)))+(((IkReal(-1.00000000000000))*(x412)))+(((cj10)*(x412)))))), ((gconst12)*(((((py)*(x413)))+(((IkReal(-1.00000000000000))*(cj10)*(x415)))+(x415)+(((IkReal(-1.00000000000000))*(py)*(x414)))))));
sj7array[0]=IKsin(j7array[0]);
cj7array[0]=IKcos(j7array[0]);
if( j7array[0] > IKPI )
{
    j7array[0]-=IK2PI;
}
else if( j7array[0] < -IKPI )
{    j7array[0]+=IK2PI;
}
j7valid[0] = true;
for(int ij7 = 0; ij7 < 1; ++ij7)
{
if( !j7valid[ij7] )
{
    continue;
}
_ij7[0] = ij7; _ij7[1] = -1;
for(int iij7 = ij7+1; iij7 < 1; ++iij7)
{
if( j7valid[iij7] && IKabs(cj7array[ij7]-cj7array[iij7]) < IKFAST_SOLUTION_THRESH && IKabs(sj7array[ij7]-sj7array[iij7]) < IKFAST_SOLUTION_THRESH )
{
    j7valid[iij7]=false; _ij7[1] = iij7; break; 
}
}
j7 = j7array[ij7]; cj7 = cj7array[ij7]; sj7 = sj7array[ij7];
{
IkReal evalcond[5];
IkReal x416=IKsin(j7);
IkReal x417=IKcos(j7);
IkReal x418=((IkReal(0.0300000000000000))*(sj8));
IkReal x419=((IkReal(0.0600000000000000))*(sj8));
IkReal x420=((IkReal(0.600000000000000))*(cj8));
IkReal x421=((cj8)*(pz));
IkReal x422=((IkReal(0.313800000000000))*(sj10));
IkReal x423=((IkReal(0.0300000000000000))*(sj10));
IkReal x424=((IkReal(0.313800000000000))*(cj10));
IkReal x425=((pz)*(sj8));
IkReal x426=((py)*(x417));
IkReal x427=((px)*(x416));
IkReal x428=((IkReal(1.00000000000000))*(x426));
evalcond[0]=((((IkReal(-1.00000000000000))*(py)*(x416)))+(((IkReal(-1.00000000000000))*(px)*(x417))));
evalcond[1]=((IkReal(0.300000000000000))+(((IkReal(-1.00000000000000))*(x425)))+(((cj8)*(x427)))+(((IkReal(-1.00000000000000))*(x423)))+(((IkReal(-1.00000000000000))*(cj8)*(x428)))+(x424));
evalcond[2]=((IkReal(0.0300000000000000))+(((sj8)*(x427)))+(((IkReal(-1.00000000000000))*(x422)))+(((IkReal(-1.00000000000000))*(sj8)*(x428)))+(x421)+(((IkReal(-0.0300000000000000))*(cj10))));
evalcond[3]=((((cj8)*(x424)))+(((IkReal(-1.00000000000000))*(x428)))+(((IkReal(-1.00000000000000))*(cj8)*(x423)))+(((IkReal(-1.00000000000000))*(sj8)*(x422)))+(((IkReal(-1.00000000000000))*(cj10)*(x418)))+(x418)+(x427)+(((IkReal(0.300000000000000))*(cj8))));
evalcond[4]=((IkReal(0.00847044000000000))+(((x420)*(x426)))+(((IkReal(-1.00000000000000))*(x420)*(x427)))+(((x419)*(x426)))+(((IkReal(-1.00000000000000))*(pp)))+(((IkReal(-1.00000000000000))*(x419)*(x427)))+(((IkReal(0.600000000000000))*(x425)))+(((IkReal(-0.0600000000000000))*(x421))));
if( IKabs(evalcond[0]) > 0.000001  || IKabs(evalcond[1]) > 0.000001  || IKabs(evalcond[2]) > 0.000001  || IKabs(evalcond[3]) > 0.000001  || IKabs(evalcond[4]) > 0.000001  )
{
continue;
}
}

rotationfunction0(solutions);
}
}

}

}

} else
{
IkReal x429=((IkReal(0.0300000000000000))*(sj9));
evalcond[0]=((IkReal(-3.14159265358979))+(IKfmod(((IkReal(3.14159265358979))+(j8)), IkReal(6.28318530717959))));
evalcond[1]=((IkReal(0.190270440000000))+(((IkReal(-0.0368280000000000))*(sj10)))+(((IkReal(0.186480000000000))*(cj10)))+(((IkReal(-1.00000000000000))*(pp))));
evalcond[2]=((((IkReal(-0.313800000000000))*(sj10)*(sj9)))+(((IkReal(-1.00000000000000))*(pz)))+(x429)+(((IkReal(-1.00000000000000))*(cj10)*(x429))));
if( IKabs(evalcond[0]) < 0.0000010000000000  && IKabs(evalcond[1]) < 0.0000010000000000  && IKabs(evalcond[2]) < 0.0000010000000000  )
{
{
IkReal dummyeval[1];
IkReal gconst22;
gconst22=IKsign(((((sj9)*((px)*(px))))+(((sj9)*((py)*(py))))));
dummyeval[0]=((((sj9)*((px)*(px))))+(((sj9)*((py)*(py)))));
if( IKabs(dummyeval[0]) < 0.0000010000000000  )
{
{
IkReal dummyeval[1];
IkReal gconst23;
gconst23=IKsign((((px)*(px))+((py)*(py))));
dummyeval[0]=(((px)*(px))+((py)*(py)));
if( IKabs(dummyeval[0]) < 0.0000010000000000  )
{
{
IkReal evalcond[4];
IkReal x430=((IkReal(-1.00000000000000))*(pz));
evalcond[0]=((IkReal(-3.14159265358979))+(IKfmod(((IkReal(3.14159265358979))+(j9)), IkReal(6.28318530717959))));
evalcond[1]=((IkReal(0.190270440000000))+(((IkReal(-0.0368280000000000))*(sj10)))+(((IkReal(0.186480000000000))*(cj10)))+(((IkReal(-1.00000000000000))*(pp))));
evalcond[2]=x430;
evalcond[3]=x430;
if( IKabs(evalcond[0]) < 0.0000010000000000  && IKabs(evalcond[1]) < 0.0000010000000000  && IKabs(evalcond[2]) < 0.0000010000000000  && IKabs(evalcond[3]) < 0.0000010000000000  )
{
{
IkReal dummyeval[1];
IkReal gconst24;
gconst24=IKsign((((px)*(px))+((py)*(py))));
dummyeval[0]=(((px)*(px))+((py)*(py)));
if( IKabs(dummyeval[0]) < 0.0000010000000000  )
{
{
IkReal dummyeval[1];
IkReal gconst25;
gconst25=IKsign(((((IkReal(-0.0600000000000000))*((px)*(px))))+(((IkReal(-0.0600000000000000))*((py)*(py))))));
dummyeval[0]=((((IkReal(-1.00000000000000))*((px)*(px))))+(((IkReal(-1.00000000000000))*((py)*(py)))));
if( IKabs(dummyeval[0]) < 0.0000010000000000  )
{
continue;

} else
{
{
IkReal j7array[1], cj7array[1], sj7array[1];
bool j7valid[1]={false};
_nj7 = 1;
IkReal x431=((cj10)*(py));
IkReal x432=((IkReal(1.00000000000000))*(pp));
IkReal x433=((px)*(sj10));
IkReal x434=((cj10)*(px));
IkReal x435=((IkReal(0.0180000000000000))*(py));
if( IKabs(((gconst25)*(((((IkReal(0.0180000000000000))*(px)))+(((IkReal(0.188280000000000))*(x431)))+(((IkReal(-1.00000000000000))*(sj10)*(x435)))+(((IkReal(-0.00180000000000000))*(x433)))+(((IkReal(-1.00000000000000))*(py)*(x432)))+(((IkReal(0.188470440000000))*(py)))+(((IkReal(0.0188280000000000))*(x434))))))) < IKFAST_ATAN2_MAGTHRESH && IKabs(((gconst25)*(((((IkReal(0.00180000000000000))*(py)*(sj10)))+(((IkReal(-1.00000000000000))*(x435)))+(((IkReal(0.188280000000000))*(x434)))+(((IkReal(-0.0188280000000000))*(x431)))+(((IkReal(-0.0180000000000000))*(x433)))+(((IkReal(0.188470440000000))*(px)))+(((IkReal(-1.00000000000000))*(px)*(x432))))))) < IKFAST_ATAN2_MAGTHRESH )
    continue;
j7array[0]=IKatan2(((gconst25)*(((((IkReal(0.0180000000000000))*(px)))+(((IkReal(0.188280000000000))*(x431)))+(((IkReal(-1.00000000000000))*(sj10)*(x435)))+(((IkReal(-0.00180000000000000))*(x433)))+(((IkReal(-1.00000000000000))*(py)*(x432)))+(((IkReal(0.188470440000000))*(py)))+(((IkReal(0.0188280000000000))*(x434)))))), ((gconst25)*(((((IkReal(0.00180000000000000))*(py)*(sj10)))+(((IkReal(-1.00000000000000))*(x435)))+(((IkReal(0.188280000000000))*(x434)))+(((IkReal(-0.0188280000000000))*(x431)))+(((IkReal(-0.0180000000000000))*(x433)))+(((IkReal(0.188470440000000))*(px)))+(((IkReal(-1.00000000000000))*(px)*(x432)))))));
sj7array[0]=IKsin(j7array[0]);
cj7array[0]=IKcos(j7array[0]);
if( j7array[0] > IKPI )
{
    j7array[0]-=IK2PI;
}
else if( j7array[0] < -IKPI )
{    j7array[0]+=IK2PI;
}
j7valid[0] = true;
for(int ij7 = 0; ij7 < 1; ++ij7)
{
if( !j7valid[ij7] )
{
    continue;
}
_ij7[0] = ij7; _ij7[1] = -1;
for(int iij7 = ij7+1; iij7 < 1; ++iij7)
{
if( j7valid[iij7] && IKabs(cj7array[ij7]-cj7array[iij7]) < IKFAST_SOLUTION_THRESH && IKabs(sj7array[ij7]-sj7array[iij7]) < IKFAST_SOLUTION_THRESH )
{
    j7valid[iij7]=false; _ij7[1] = iij7; break; 
}
}
j7 = j7array[ij7]; cj7 = cj7array[ij7]; sj7 = sj7array[ij7];
{
IkReal evalcond[3];
IkReal x436=IKsin(j7);
IkReal x437=IKcos(j7);
IkReal x438=((px)*(x436));
IkReal x439=((IkReal(1.00000000000000))*(x437));
IkReal x440=((py)*(x436));
evalcond[0]=((IkReal(0.0300000000000000))+(((IkReal(-0.313800000000000))*(sj10)))+(((IkReal(-1.00000000000000))*(x440)))+(((IkReal(-0.0300000000000000))*(cj10)))+(((IkReal(-1.00000000000000))*(px)*(x439))));
evalcond[1]=((IkReal(0.300000000000000))+(((IkReal(-0.0300000000000000))*(sj10)))+(x438)+(((IkReal(-1.00000000000000))*(py)*(x439)))+(((IkReal(0.313800000000000))*(cj10))));
evalcond[2]=((IkReal(0.00847044000000000))+(((IkReal(-0.600000000000000))*(x438)))+(((IkReal(-1.00000000000000))*(pp)))+(((IkReal(0.0600000000000000))*(x440)))+(((IkReal(0.600000000000000))*(py)*(x437)))+(((IkReal(0.0600000000000000))*(px)*(x437))));
if( IKabs(evalcond[0]) > 0.000001  || IKabs(evalcond[1]) > 0.000001  || IKabs(evalcond[2]) > 0.000001  )
{
continue;
}
}

rotationfunction0(solutions);
}
}

}

}

} else
{
{
IkReal j7array[1], cj7array[1], sj7array[1];
bool j7valid[1]={false};
_nj7 = 1;
IkReal x441=((IkReal(0.0300000000000000))*(px));
IkReal x442=((IkReal(0.313800000000000))*(px));
IkReal x443=((IkReal(0.0300000000000000))*(py));
IkReal x444=((IkReal(0.313800000000000))*(py));
if( IKabs(((gconst24)*(((((IkReal(-0.300000000000000))*(px)))+(((IkReal(-1.00000000000000))*(sj10)*(x444)))+(((IkReal(-1.00000000000000))*(cj10)*(x442)))+(((IkReal(-1.00000000000000))*(cj10)*(x443)))+(((sj10)*(x441)))+(x443))))) < IKFAST_ATAN2_MAGTHRESH && IKabs(((gconst24)*(((((cj10)*(x444)))+(((IkReal(-1.00000000000000))*(sj10)*(x442)))+(((IkReal(-1.00000000000000))*(sj10)*(x443)))+(((IkReal(0.300000000000000))*(py)))+(((IkReal(-1.00000000000000))*(cj10)*(x441)))+(x441))))) < IKFAST_ATAN2_MAGTHRESH )
    continue;
j7array[0]=IKatan2(((gconst24)*(((((IkReal(-0.300000000000000))*(px)))+(((IkReal(-1.00000000000000))*(sj10)*(x444)))+(((IkReal(-1.00000000000000))*(cj10)*(x442)))+(((IkReal(-1.00000000000000))*(cj10)*(x443)))+(((sj10)*(x441)))+(x443)))), ((gconst24)*(((((cj10)*(x444)))+(((IkReal(-1.00000000000000))*(sj10)*(x442)))+(((IkReal(-1.00000000000000))*(sj10)*(x443)))+(((IkReal(0.300000000000000))*(py)))+(((IkReal(-1.00000000000000))*(cj10)*(x441)))+(x441)))));
sj7array[0]=IKsin(j7array[0]);
cj7array[0]=IKcos(j7array[0]);
if( j7array[0] > IKPI )
{
    j7array[0]-=IK2PI;
}
else if( j7array[0] < -IKPI )
{    j7array[0]+=IK2PI;
}
j7valid[0] = true;
for(int ij7 = 0; ij7 < 1; ++ij7)
{
if( !j7valid[ij7] )
{
    continue;
}
_ij7[0] = ij7; _ij7[1] = -1;
for(int iij7 = ij7+1; iij7 < 1; ++iij7)
{
if( j7valid[iij7] && IKabs(cj7array[ij7]-cj7array[iij7]) < IKFAST_SOLUTION_THRESH && IKabs(sj7array[ij7]-sj7array[iij7]) < IKFAST_SOLUTION_THRESH )
{
    j7valid[iij7]=false; _ij7[1] = iij7; break; 
}
}
j7 = j7array[ij7]; cj7 = cj7array[ij7]; sj7 = sj7array[ij7];
{
IkReal evalcond[3];
IkReal x445=IKsin(j7);
IkReal x446=IKcos(j7);
IkReal x447=((px)*(x445));
IkReal x448=((IkReal(1.00000000000000))*(x446));
IkReal x449=((py)*(x445));
evalcond[0]=((IkReal(0.0300000000000000))+(((IkReal(-0.313800000000000))*(sj10)))+(((IkReal(-1.00000000000000))*(x449)))+(((IkReal(-1.00000000000000))*(px)*(x448)))+(((IkReal(-0.0300000000000000))*(cj10))));
evalcond[1]=((IkReal(0.300000000000000))+(((IkReal(-0.0300000000000000))*(sj10)))+(x447)+(((IkReal(-1.00000000000000))*(py)*(x448)))+(((IkReal(0.313800000000000))*(cj10))));
evalcond[2]=((IkReal(0.00847044000000000))+(((IkReal(-0.600000000000000))*(x447)))+(((IkReal(-1.00000000000000))*(pp)))+(((IkReal(0.0600000000000000))*(x449)))+(((IkReal(0.600000000000000))*(py)*(x446)))+(((IkReal(0.0600000000000000))*(px)*(x446))));
if( IKabs(evalcond[0]) > 0.000001  || IKabs(evalcond[1]) > 0.000001  || IKabs(evalcond[2]) > 0.000001  )
{
continue;
}
}

rotationfunction0(solutions);
}
}

}

}

} else
{
evalcond[0]=((IkReal(-3.14159265358979))+(IKfmod(((IkReal(1.11022302462516e-16))+(j9)), IkReal(6.28318530717959))));
evalcond[1]=((IkReal(0.190270440000000))+(((IkReal(-0.0368280000000000))*(sj10)))+(((IkReal(0.186480000000000))*(cj10)))+(((IkReal(-1.00000000000000))*(pp))));
evalcond[2]=pz;
evalcond[3]=((IkReal(-1.00000000000000))*(pz));
if( IKabs(evalcond[0]) < 0.0000010000000000  && IKabs(evalcond[1]) < 0.0000010000000000  && IKabs(evalcond[2]) < 0.0000010000000000  && IKabs(evalcond[3]) < 0.0000010000000000  )
{
{
IkReal dummyeval[1];
IkReal gconst26;
gconst26=IKsign((((px)*(px))+((py)*(py))));
dummyeval[0]=(((px)*(px))+((py)*(py)));
if( IKabs(dummyeval[0]) < 0.0000010000000000  )
{
{
IkReal dummyeval[1];
IkReal gconst27;
gconst27=IKsign(((((IkReal(0.0600000000000000))*((py)*(py))))+(((IkReal(0.0600000000000000))*((px)*(px))))));
dummyeval[0]=(((px)*(px))+((py)*(py)));
if( IKabs(dummyeval[0]) < 0.0000010000000000  )
{
continue;

} else
{
{
IkReal j7array[1], cj7array[1], sj7array[1];
bool j7valid[1]={false};
_nj7 = 1;
IkReal x450=((cj10)*(py));
IkReal x451=((IkReal(1.00000000000000))*(pp));
IkReal x452=((px)*(sj10));
IkReal x453=((cj10)*(px));
IkReal x454=((IkReal(0.0180000000000000))*(py));
if( IKabs(((gconst27)*(((((IkReal(-1.00000000000000))*(sj10)*(x454)))+(((IkReal(-1.00000000000000))*(py)*(x451)))+(((IkReal(-0.0188280000000000))*(x453)))+(((IkReal(-0.0180000000000000))*(px)))+(((IkReal(0.188280000000000))*(x450)))+(((IkReal(0.00180000000000000))*(x452)))+(((IkReal(0.188470440000000))*(py))))))) < IKFAST_ATAN2_MAGTHRESH && IKabs(((gconst27)*(((((IkReal(-0.00180000000000000))*(py)*(sj10)))+(((IkReal(-0.0180000000000000))*(x452)))+(x454)+(((IkReal(0.188280000000000))*(x453)))+(((IkReal(0.0188280000000000))*(x450)))+(((IkReal(0.188470440000000))*(px)))+(((IkReal(-1.00000000000000))*(px)*(x451))))))) < IKFAST_ATAN2_MAGTHRESH )
    continue;
j7array[0]=IKatan2(((gconst27)*(((((IkReal(-1.00000000000000))*(sj10)*(x454)))+(((IkReal(-1.00000000000000))*(py)*(x451)))+(((IkReal(-0.0188280000000000))*(x453)))+(((IkReal(-0.0180000000000000))*(px)))+(((IkReal(0.188280000000000))*(x450)))+(((IkReal(0.00180000000000000))*(x452)))+(((IkReal(0.188470440000000))*(py)))))), ((gconst27)*(((((IkReal(-0.00180000000000000))*(py)*(sj10)))+(((IkReal(-0.0180000000000000))*(x452)))+(x454)+(((IkReal(0.188280000000000))*(x453)))+(((IkReal(0.0188280000000000))*(x450)))+(((IkReal(0.188470440000000))*(px)))+(((IkReal(-1.00000000000000))*(px)*(x451)))))));
sj7array[0]=IKsin(j7array[0]);
cj7array[0]=IKcos(j7array[0]);
if( j7array[0] > IKPI )
{
    j7array[0]-=IK2PI;
}
else if( j7array[0] < -IKPI )
{    j7array[0]+=IK2PI;
}
j7valid[0] = true;
for(int ij7 = 0; ij7 < 1; ++ij7)
{
if( !j7valid[ij7] )
{
    continue;
}
_ij7[0] = ij7; _ij7[1] = -1;
for(int iij7 = ij7+1; iij7 < 1; ++iij7)
{
if( j7valid[iij7] && IKabs(cj7array[ij7]-cj7array[iij7]) < IKFAST_SOLUTION_THRESH && IKabs(sj7array[ij7]-sj7array[iij7]) < IKFAST_SOLUTION_THRESH )
{
    j7valid[iij7]=false; _ij7[1] = iij7; break; 
}
}
j7 = j7array[ij7]; cj7 = cj7array[ij7]; sj7 = sj7array[ij7];
{
IkReal evalcond[3];
IkReal x455=IKsin(j7);
IkReal x456=IKcos(j7);
IkReal x457=((IkReal(1.00000000000000))*(py));
IkReal x458=((px)*(x455));
IkReal x459=((px)*(x456));
evalcond[0]=((IkReal(-0.0300000000000000))+(((IkReal(-1.00000000000000))*(x459)))+(((IkReal(0.313800000000000))*(sj10)))+(((IkReal(-1.00000000000000))*(x455)*(x457)))+(((IkReal(0.0300000000000000))*(cj10))));
evalcond[1]=((IkReal(0.300000000000000))+(((IkReal(-1.00000000000000))*(x456)*(x457)))+(((IkReal(-0.0300000000000000))*(sj10)))+(x458)+(((IkReal(0.313800000000000))*(cj10))));
evalcond[2]=((IkReal(0.00847044000000000))+(((IkReal(-0.600000000000000))*(x458)))+(((IkReal(-1.00000000000000))*(pp)))+(((IkReal(-0.0600000000000000))*(x459)))+(((IkReal(-0.0600000000000000))*(py)*(x455)))+(((IkReal(0.600000000000000))*(py)*(x456))));
if( IKabs(evalcond[0]) > 0.000001  || IKabs(evalcond[1]) > 0.000001  || IKabs(evalcond[2]) > 0.000001  )
{
continue;
}
}

rotationfunction0(solutions);
}
}

}

}

} else
{
{
IkReal j7array[1], cj7array[1], sj7array[1];
bool j7valid[1]={false};
_nj7 = 1;
IkReal x460=((IkReal(0.0300000000000000))*(px));
IkReal x461=((IkReal(0.313800000000000))*(px));
IkReal x462=((IkReal(0.0300000000000000))*(py));
IkReal x463=((IkReal(0.313800000000000))*(py));
if( IKabs(((gconst26)*(((((IkReal(-0.300000000000000))*(px)))+(((IkReal(-1.00000000000000))*(cj10)*(x461)))+(((cj10)*(x462)))+(((IkReal(-1.00000000000000))*(x462)))+(((sj10)*(x463)))+(((sj10)*(x460))))))) < IKFAST_ATAN2_MAGTHRESH && IKabs(((gconst26)*(((((IkReal(0.300000000000000))*(py)))+(((cj10)*(x460)))+(((cj10)*(x463)))+(((IkReal(-1.00000000000000))*(x460)))+(((IkReal(-1.00000000000000))*(sj10)*(x462)))+(((sj10)*(x461))))))) < IKFAST_ATAN2_MAGTHRESH )
    continue;
j7array[0]=IKatan2(((gconst26)*(((((IkReal(-0.300000000000000))*(px)))+(((IkReal(-1.00000000000000))*(cj10)*(x461)))+(((cj10)*(x462)))+(((IkReal(-1.00000000000000))*(x462)))+(((sj10)*(x463)))+(((sj10)*(x460)))))), ((gconst26)*(((((IkReal(0.300000000000000))*(py)))+(((cj10)*(x460)))+(((cj10)*(x463)))+(((IkReal(-1.00000000000000))*(x460)))+(((IkReal(-1.00000000000000))*(sj10)*(x462)))+(((sj10)*(x461)))))));
sj7array[0]=IKsin(j7array[0]);
cj7array[0]=IKcos(j7array[0]);
if( j7array[0] > IKPI )
{
    j7array[0]-=IK2PI;
}
else if( j7array[0] < -IKPI )
{    j7array[0]+=IK2PI;
}
j7valid[0] = true;
for(int ij7 = 0; ij7 < 1; ++ij7)
{
if( !j7valid[ij7] )
{
    continue;
}
_ij7[0] = ij7; _ij7[1] = -1;
for(int iij7 = ij7+1; iij7 < 1; ++iij7)
{
if( j7valid[iij7] && IKabs(cj7array[ij7]-cj7array[iij7]) < IKFAST_SOLUTION_THRESH && IKabs(sj7array[ij7]-sj7array[iij7]) < IKFAST_SOLUTION_THRESH )
{
    j7valid[iij7]=false; _ij7[1] = iij7; break; 
}
}
j7 = j7array[ij7]; cj7 = cj7array[ij7]; sj7 = sj7array[ij7];
{
IkReal evalcond[3];
IkReal x464=IKsin(j7);
IkReal x465=IKcos(j7);
IkReal x466=((IkReal(1.00000000000000))*(py));
IkReal x467=((px)*(x464));
IkReal x468=((px)*(x465));
evalcond[0]=((IkReal(-0.0300000000000000))+(((IkReal(-1.00000000000000))*(x468)))+(((IkReal(-1.00000000000000))*(x464)*(x466)))+(((IkReal(0.313800000000000))*(sj10)))+(((IkReal(0.0300000000000000))*(cj10))));
evalcond[1]=((IkReal(0.300000000000000))+(((IkReal(-1.00000000000000))*(x465)*(x466)))+(((IkReal(-0.0300000000000000))*(sj10)))+(x467)+(((IkReal(0.313800000000000))*(cj10))));
evalcond[2]=((IkReal(0.00847044000000000))+(((IkReal(-0.600000000000000))*(x467)))+(((IkReal(-1.00000000000000))*(pp)))+(((IkReal(-0.0600000000000000))*(x468)))+(((IkReal(-0.0600000000000000))*(py)*(x464)))+(((IkReal(0.600000000000000))*(py)*(x465))));
if( IKabs(evalcond[0]) > 0.000001  || IKabs(evalcond[1]) > 0.000001  || IKabs(evalcond[2]) > 0.000001  )
{
continue;
}
}

rotationfunction0(solutions);
}
}

}

}

} else
{
if( 1 )
{
continue;

} else
{
}
}
}
}

} else
{
{
IkReal j7array[1], cj7array[1], sj7array[1];
bool j7valid[1]={false};
_nj7 = 1;
IkReal x469=((cj10)*(py));
IkReal x470=((IkReal(0.0300000000000000))*(cj9));
IkReal x471=((px)*(sj10));
IkReal x472=((IkReal(0.313800000000000))*(cj9));
IkReal x473=((py)*(sj10));
IkReal x474=((cj10)*(px));
if( IKabs(((gconst23)*(((((IkReal(-0.300000000000000))*(px)))+(((IkReal(-1.00000000000000))*(x469)*(x470)))+(((IkReal(0.0300000000000000))*(x471)))+(((IkReal(-1.00000000000000))*(x472)*(x473)))+(((IkReal(-0.313800000000000))*(x474)))+(((py)*(x470))))))) < IKFAST_ATAN2_MAGTHRESH && IKabs(((gconst23)*(((((IkReal(0.300000000000000))*(py)))+(((IkReal(0.313800000000000))*(x469)))+(((IkReal(-0.0300000000000000))*(x473)))+(((IkReal(-1.00000000000000))*(x471)*(x472)))+(((IkReal(-1.00000000000000))*(x470)*(x474)))+(((px)*(x470))))))) < IKFAST_ATAN2_MAGTHRESH )
    continue;
j7array[0]=IKatan2(((gconst23)*(((((IkReal(-0.300000000000000))*(px)))+(((IkReal(-1.00000000000000))*(x469)*(x470)))+(((IkReal(0.0300000000000000))*(x471)))+(((IkReal(-1.00000000000000))*(x472)*(x473)))+(((IkReal(-0.313800000000000))*(x474)))+(((py)*(x470)))))), ((gconst23)*(((((IkReal(0.300000000000000))*(py)))+(((IkReal(0.313800000000000))*(x469)))+(((IkReal(-0.0300000000000000))*(x473)))+(((IkReal(-1.00000000000000))*(x471)*(x472)))+(((IkReal(-1.00000000000000))*(x470)*(x474)))+(((px)*(x470)))))));
sj7array[0]=IKsin(j7array[0]);
cj7array[0]=IKcos(j7array[0]);
if( j7array[0] > IKPI )
{
    j7array[0]-=IK2PI;
}
else if( j7array[0] < -IKPI )
{    j7array[0]+=IK2PI;
}
j7valid[0] = true;
for(int ij7 = 0; ij7 < 1; ++ij7)
{
if( !j7valid[ij7] )
{
    continue;
}
_ij7[0] = ij7; _ij7[1] = -1;
for(int iij7 = ij7+1; iij7 < 1; ++iij7)
{
if( j7valid[iij7] && IKabs(cj7array[ij7]-cj7array[iij7]) < IKFAST_SOLUTION_THRESH && IKabs(sj7array[ij7]-sj7array[iij7]) < IKFAST_SOLUTION_THRESH )
{
    j7valid[iij7]=false; _ij7[1] = iij7; break; 
}
}
j7 = j7array[ij7]; cj7 = cj7array[ij7]; sj7 = sj7array[ij7];
{
IkReal evalcond[5];
IkReal x475=IKsin(j7);
IkReal x476=IKcos(j7);
IkReal x477=((IkReal(1.00000000000000))*(py));
IkReal x478=((IkReal(0.0300000000000000))*(cj10));
IkReal x479=((pz)*(sj9));
IkReal x480=((IkReal(0.313800000000000))*(sj10));
IkReal x481=((IkReal(0.0600000000000000))*(cj9));
IkReal x482=((IkReal(1.00000000000000))*(cj9));
IkReal x483=((px)*(x476));
IkReal x484=((py)*(x475));
IkReal x485=((px)*(x475));
evalcond[0]=((((IkReal(-1.00000000000000))*(cj9)*(x480)))+(((IkReal(-1.00000000000000))*(x475)*(x477)))+(((IkReal(0.0300000000000000))*(cj9)))+(((IkReal(-1.00000000000000))*(x483)))+(((IkReal(-1.00000000000000))*(cj9)*(x478))));
evalcond[1]=((IkReal(0.300000000000000))+(((IkReal(-1.00000000000000))*(x476)*(x477)))+(((IkReal(-0.0300000000000000))*(sj10)))+(x485)+(((IkReal(0.313800000000000))*(cj10))));
evalcond[2]=((((IkReal(-1.00000000000000))*(pz)*(x482)))+(((sj9)*(x483)))+(((sj9)*(x484))));
evalcond[3]=((IkReal(0.0300000000000000))+(((IkReal(-1.00000000000000))*(x480)))+(((IkReal(-1.00000000000000))*(x478)))+(((IkReal(-1.00000000000000))*(x479)))+(((IkReal(-1.00000000000000))*(cj9)*(x475)*(x477)))+(((IkReal(-1.00000000000000))*(x482)*(x483))));
evalcond[4]=((IkReal(0.00847044000000000))+(((IkReal(0.600000000000000))*(py)*(x476)))+(((x481)*(x483)))+(((x481)*(x484)))+(((IkReal(-1.00000000000000))*(pp)))+(((IkReal(0.0600000000000000))*(x479)))+(((IkReal(-0.600000000000000))*(x485))));
if( IKabs(evalcond[0]) > 0.000001  || IKabs(evalcond[1]) > 0.000001  || IKabs(evalcond[2]) > 0.000001  || IKabs(evalcond[3]) > 0.000001  || IKabs(evalcond[4]) > 0.000001  )
{
continue;
}
}

rotationfunction0(solutions);
}
}

}

}

} else
{
{
IkReal j7array[1], cj7array[1], sj7array[1];
bool j7valid[1]={false};
_nj7 = 1;
IkReal x486=((py)*(sj9));
IkReal x487=((IkReal(0.313800000000000))*(cj10));
IkReal x488=((cj9)*(pz));
IkReal x489=((IkReal(0.0300000000000000))*(sj10));
IkReal x490=((px)*(sj9));
if( IKabs(((gconst22)*(((((py)*(x488)))+(((x489)*(x490)))+(((IkReal(-1.00000000000000))*(x487)*(x490)))+(((IkReal(-0.300000000000000))*(x490))))))) < IKFAST_ATAN2_MAGTHRESH && IKabs(((gconst22)*(((((IkReal(-1.00000000000000))*(x486)*(x489)))+(((px)*(x488)))+(((IkReal(0.300000000000000))*(x486)))+(((x486)*(x487))))))) < IKFAST_ATAN2_MAGTHRESH )
    continue;
j7array[0]=IKatan2(((gconst22)*(((((py)*(x488)))+(((x489)*(x490)))+(((IkReal(-1.00000000000000))*(x487)*(x490)))+(((IkReal(-0.300000000000000))*(x490)))))), ((gconst22)*(((((IkReal(-1.00000000000000))*(x486)*(x489)))+(((px)*(x488)))+(((IkReal(0.300000000000000))*(x486)))+(((x486)*(x487)))))));
sj7array[0]=IKsin(j7array[0]);
cj7array[0]=IKcos(j7array[0]);
if( j7array[0] > IKPI )
{
    j7array[0]-=IK2PI;
}
else if( j7array[0] < -IKPI )
{    j7array[0]+=IK2PI;
}
j7valid[0] = true;
for(int ij7 = 0; ij7 < 1; ++ij7)
{
if( !j7valid[ij7] )
{
    continue;
}
_ij7[0] = ij7; _ij7[1] = -1;
for(int iij7 = ij7+1; iij7 < 1; ++iij7)
{
if( j7valid[iij7] && IKabs(cj7array[ij7]-cj7array[iij7]) < IKFAST_SOLUTION_THRESH && IKabs(sj7array[ij7]-sj7array[iij7]) < IKFAST_SOLUTION_THRESH )
{
    j7valid[iij7]=false; _ij7[1] = iij7; break; 
}
}
j7 = j7array[ij7]; cj7 = cj7array[ij7]; sj7 = sj7array[ij7];
{
IkReal evalcond[5];
IkReal x491=IKsin(j7);
IkReal x492=IKcos(j7);
IkReal x493=((IkReal(1.00000000000000))*(py));
IkReal x494=((IkReal(0.0300000000000000))*(cj10));
IkReal x495=((pz)*(sj9));
IkReal x496=((IkReal(0.313800000000000))*(sj10));
IkReal x497=((IkReal(0.0600000000000000))*(cj9));
IkReal x498=((IkReal(1.00000000000000))*(cj9));
IkReal x499=((px)*(x492));
IkReal x500=((py)*(x491));
IkReal x501=((px)*(x491));
evalcond[0]=((((IkReal(-1.00000000000000))*(x491)*(x493)))+(((IkReal(-1.00000000000000))*(cj9)*(x494)))+(((IkReal(-1.00000000000000))*(cj9)*(x496)))+(((IkReal(0.0300000000000000))*(cj9)))+(((IkReal(-1.00000000000000))*(x499))));
evalcond[1]=((IkReal(0.300000000000000))+(((IkReal(-0.0300000000000000))*(sj10)))+(x501)+(((IkReal(0.313800000000000))*(cj10)))+(((IkReal(-1.00000000000000))*(x492)*(x493))));
evalcond[2]=((((IkReal(-1.00000000000000))*(pz)*(x498)))+(((sj9)*(x500)))+(((sj9)*(x499))));
evalcond[3]=((IkReal(0.0300000000000000))+(((IkReal(-1.00000000000000))*(x496)))+(((IkReal(-1.00000000000000))*(x494)))+(((IkReal(-1.00000000000000))*(x498)*(x499)))+(((IkReal(-1.00000000000000))*(x495)))+(((IkReal(-1.00000000000000))*(cj9)*(x491)*(x493))));
evalcond[4]=((IkReal(0.00847044000000000))+(((IkReal(0.600000000000000))*(py)*(x492)))+(((x497)*(x500)))+(((IkReal(0.0600000000000000))*(x495)))+(((x497)*(x499)))+(((IkReal(-0.600000000000000))*(x501)))+(((IkReal(-1.00000000000000))*(pp))));
if( IKabs(evalcond[0]) > 0.000001  || IKabs(evalcond[1]) > 0.000001  || IKabs(evalcond[2]) > 0.000001  || IKabs(evalcond[3]) > 0.000001  || IKabs(evalcond[4]) > 0.000001  )
{
continue;
}
}

rotationfunction0(solutions);
}
}

}

}

} else
{
IkReal x502=((IkReal(0.0300000000000000))*(sj9));
evalcond[0]=((IkReal(-3.14159265358979))+(IKfmod(((IkReal(1.11022302462516e-16))+(j8)), IkReal(6.28318530717959))));
evalcond[1]=((IkReal(0.190270440000000))+(((IkReal(-0.0368280000000000))*(sj10)))+(((IkReal(0.186480000000000))*(cj10)))+(((IkReal(-1.00000000000000))*(pp))));
evalcond[2]=((((IkReal(0.313800000000000))*(sj10)*(sj9)))+(((IkReal(-1.00000000000000))*(x502)))+(((IkReal(-1.00000000000000))*(pz)))+(((cj10)*(x502))));
if( IKabs(evalcond[0]) < 0.0000010000000000  && IKabs(evalcond[1]) < 0.0000010000000000  && IKabs(evalcond[2]) < 0.0000010000000000  )
{
{
IkReal dummyeval[1];
IkReal gconst28;
gconst28=IKsign(((((sj9)*((px)*(px))))+(((sj9)*((py)*(py))))));
dummyeval[0]=((((sj9)*((px)*(px))))+(((sj9)*((py)*(py)))));
if( IKabs(dummyeval[0]) < 0.0000010000000000  )
{
{
IkReal dummyeval[1];
IkReal gconst29;
gconst29=IKsign((((px)*(px))+((py)*(py))));
dummyeval[0]=(((px)*(px))+((py)*(py)));
if( IKabs(dummyeval[0]) < 0.0000010000000000  )
{
{
IkReal evalcond[4];
evalcond[0]=((IkReal(-3.14159265358979))+(IKfmod(((IkReal(3.14159265358979))+(j9)), IkReal(6.28318530717959))));
evalcond[1]=((IkReal(0.190270440000000))+(((IkReal(-0.0368280000000000))*(sj10)))+(((IkReal(0.186480000000000))*(cj10)))+(((IkReal(-1.00000000000000))*(pp))));
evalcond[2]=pz;
evalcond[3]=((IkReal(-1.00000000000000))*(pz));
if( IKabs(evalcond[0]) < 0.0000010000000000  && IKabs(evalcond[1]) < 0.0000010000000000  && IKabs(evalcond[2]) < 0.0000010000000000  && IKabs(evalcond[3]) < 0.0000010000000000  )
{
{
IkReal dummyeval[1];
IkReal gconst30;
gconst30=IKsign((((px)*(px))+((py)*(py))));
dummyeval[0]=(((px)*(px))+((py)*(py)));
if( IKabs(dummyeval[0]) < 0.0000010000000000  )
{
{
IkReal dummyeval[1];
IkReal gconst31;
gconst31=IKsign(((((IkReal(0.0600000000000000))*((py)*(py))))+(((IkReal(0.0600000000000000))*((px)*(px))))));
dummyeval[0]=(((px)*(px))+((py)*(py)));
if( IKabs(dummyeval[0]) < 0.0000010000000000  )
{
continue;

} else
{
{
IkReal j7array[1], cj7array[1], sj7array[1];
bool j7valid[1]={false};
_nj7 = 1;
IkReal x503=((cj10)*(py));
IkReal x504=((px)*(sj10));
IkReal x505=((cj10)*(px));
IkReal x506=((IkReal(0.0180000000000000))*(py));
if( IKabs(((gconst31)*(((((IkReal(0.0180000000000000))*(px)))+(((IkReal(-0.00180000000000000))*(x504)))+(((IkReal(0.0188280000000000))*(x505)))+(((sj10)*(x506)))+(((IkReal(-0.188280000000000))*(x503)))+(((pp)*(py)))+(((IkReal(-0.188470440000000))*(py))))))) < IKFAST_ATAN2_MAGTHRESH && IKabs(((gconst31)*(((((IkReal(0.00180000000000000))*(py)*(sj10)))+(((IkReal(-1.00000000000000))*(x506)))+(((IkReal(0.0180000000000000))*(x504)))+(((IkReal(-0.188280000000000))*(x505)))+(((IkReal(-0.0188280000000000))*(x503)))+(((pp)*(px)))+(((IkReal(-0.188470440000000))*(px))))))) < IKFAST_ATAN2_MAGTHRESH )
    continue;
j7array[0]=IKatan2(((gconst31)*(((((IkReal(0.0180000000000000))*(px)))+(((IkReal(-0.00180000000000000))*(x504)))+(((IkReal(0.0188280000000000))*(x505)))+(((sj10)*(x506)))+(((IkReal(-0.188280000000000))*(x503)))+(((pp)*(py)))+(((IkReal(-0.188470440000000))*(py)))))), ((gconst31)*(((((IkReal(0.00180000000000000))*(py)*(sj10)))+(((IkReal(-1.00000000000000))*(x506)))+(((IkReal(0.0180000000000000))*(x504)))+(((IkReal(-0.188280000000000))*(x505)))+(((IkReal(-0.0188280000000000))*(x503)))+(((pp)*(px)))+(((IkReal(-0.188470440000000))*(px)))))));
sj7array[0]=IKsin(j7array[0]);
cj7array[0]=IKcos(j7array[0]);
if( j7array[0] > IKPI )
{
    j7array[0]-=IK2PI;
}
else if( j7array[0] < -IKPI )
{    j7array[0]+=IK2PI;
}
j7valid[0] = true;
for(int ij7 = 0; ij7 < 1; ++ij7)
{
if( !j7valid[ij7] )
{
    continue;
}
_ij7[0] = ij7; _ij7[1] = -1;
for(int iij7 = ij7+1; iij7 < 1; ++iij7)
{
if( j7valid[iij7] && IKabs(cj7array[ij7]-cj7array[iij7]) < IKFAST_SOLUTION_THRESH && IKabs(sj7array[ij7]-sj7array[iij7]) < IKFAST_SOLUTION_THRESH )
{
    j7valid[iij7]=false; _ij7[1] = iij7; break; 
}
}
j7 = j7array[ij7]; cj7 = cj7array[ij7]; sj7 = sj7array[ij7];
{
IkReal evalcond[3];
IkReal x507=IKcos(j7);
IkReal x508=IKsin(j7);
IkReal x509=((px)*(x508));
IkReal x510=((py)*(x508));
IkReal x511=((px)*(x507));
IkReal x512=((py)*(x507));
evalcond[0]=((IkReal(0.0300000000000000))+(((IkReal(-0.313800000000000))*(sj10)))+(((IkReal(-1.00000000000000))*(x511)))+(((IkReal(-1.00000000000000))*(x510)))+(((IkReal(-0.0300000000000000))*(cj10))));
evalcond[1]=((IkReal(0.300000000000000))+(((IkReal(-0.0300000000000000))*(sj10)))+(x512)+(((IkReal(-1.00000000000000))*(x509)))+(((IkReal(0.313800000000000))*(cj10))));
evalcond[2]=((IkReal(0.00847044000000000))+(((IkReal(0.0600000000000000))*(x511)))+(((IkReal(0.0600000000000000))*(x510)))+(((IkReal(-1.00000000000000))*(pp)))+(((IkReal(0.600000000000000))*(x509)))+(((IkReal(-0.600000000000000))*(x512))));
if( IKabs(evalcond[0]) > 0.000001  || IKabs(evalcond[1]) > 0.000001  || IKabs(evalcond[2]) > 0.000001  )
{
continue;
}
}

rotationfunction0(solutions);
}
}

}

}

} else
{
{
IkReal j7array[1], cj7array[1], sj7array[1];
bool j7valid[1]={false};
_nj7 = 1;
IkReal x513=((IkReal(0.0300000000000000))*(px));
IkReal x514=((IkReal(0.313800000000000))*(px));
IkReal x515=((IkReal(0.0300000000000000))*(py));
IkReal x516=((IkReal(0.313800000000000))*(py));
if( IKabs(((gconst30)*(((((IkReal(0.300000000000000))*(px)))+(((IkReal(-1.00000000000000))*(cj10)*(x515)))+(((cj10)*(x514)))+(x515)+(((IkReal(-1.00000000000000))*(sj10)*(x516)))+(((IkReal(-1.00000000000000))*(sj10)*(x513))))))) < IKFAST_ATAN2_MAGTHRESH && IKabs(((gconst30)*(((((sj10)*(x515)))+(((IkReal(-0.300000000000000))*(py)))+(((IkReal(-1.00000000000000))*(cj10)*(x516)))+(((IkReal(-1.00000000000000))*(cj10)*(x513)))+(x513)+(((IkReal(-1.00000000000000))*(sj10)*(x514))))))) < IKFAST_ATAN2_MAGTHRESH )
    continue;
j7array[0]=IKatan2(((gconst30)*(((((IkReal(0.300000000000000))*(px)))+(((IkReal(-1.00000000000000))*(cj10)*(x515)))+(((cj10)*(x514)))+(x515)+(((IkReal(-1.00000000000000))*(sj10)*(x516)))+(((IkReal(-1.00000000000000))*(sj10)*(x513)))))), ((gconst30)*(((((sj10)*(x515)))+(((IkReal(-0.300000000000000))*(py)))+(((IkReal(-1.00000000000000))*(cj10)*(x516)))+(((IkReal(-1.00000000000000))*(cj10)*(x513)))+(x513)+(((IkReal(-1.00000000000000))*(sj10)*(x514)))))));
sj7array[0]=IKsin(j7array[0]);
cj7array[0]=IKcos(j7array[0]);
if( j7array[0] > IKPI )
{
    j7array[0]-=IK2PI;
}
else if( j7array[0] < -IKPI )
{    j7array[0]+=IK2PI;
}
j7valid[0] = true;
for(int ij7 = 0; ij7 < 1; ++ij7)
{
if( !j7valid[ij7] )
{
    continue;
}
_ij7[0] = ij7; _ij7[1] = -1;
for(int iij7 = ij7+1; iij7 < 1; ++iij7)
{
if( j7valid[iij7] && IKabs(cj7array[ij7]-cj7array[iij7]) < IKFAST_SOLUTION_THRESH && IKabs(sj7array[ij7]-sj7array[iij7]) < IKFAST_SOLUTION_THRESH )
{
    j7valid[iij7]=false; _ij7[1] = iij7; break; 
}
}
j7 = j7array[ij7]; cj7 = cj7array[ij7]; sj7 = sj7array[ij7];
{
IkReal evalcond[3];
IkReal x517=IKcos(j7);
IkReal x518=IKsin(j7);
IkReal x519=((px)*(x518));
IkReal x520=((py)*(x518));
IkReal x521=((px)*(x517));
IkReal x522=((py)*(x517));
evalcond[0]=((IkReal(0.0300000000000000))+(((IkReal(-0.313800000000000))*(sj10)))+(((IkReal(-1.00000000000000))*(x520)))+(((IkReal(-1.00000000000000))*(x521)))+(((IkReal(-0.0300000000000000))*(cj10))));
evalcond[1]=((IkReal(0.300000000000000))+(((IkReal(-1.00000000000000))*(x519)))+(((IkReal(-0.0300000000000000))*(sj10)))+(x522)+(((IkReal(0.313800000000000))*(cj10))));
evalcond[2]=((IkReal(0.00847044000000000))+(((IkReal(0.0600000000000000))*(x520)))+(((IkReal(0.0600000000000000))*(x521)))+(((IkReal(0.600000000000000))*(x519)))+(((IkReal(-1.00000000000000))*(pp)))+(((IkReal(-0.600000000000000))*(x522))));
if( IKabs(evalcond[0]) > 0.000001  || IKabs(evalcond[1]) > 0.000001  || IKabs(evalcond[2]) > 0.000001  )
{
continue;
}
}

rotationfunction0(solutions);
}
}

}

}

} else
{
IkReal x523=((IkReal(-1.00000000000000))*(pz));
evalcond[0]=((IkReal(-3.14159265358979))+(IKfmod(((IkReal(1.11022302462516e-16))+(j9)), IkReal(6.28318530717959))));
evalcond[1]=((IkReal(0.190270440000000))+(((IkReal(-0.0368280000000000))*(sj10)))+(((IkReal(0.186480000000000))*(cj10)))+(((IkReal(-1.00000000000000))*(pp))));
evalcond[2]=x523;
evalcond[3]=x523;
if( IKabs(evalcond[0]) < 0.0000010000000000  && IKabs(evalcond[1]) < 0.0000010000000000  && IKabs(evalcond[2]) < 0.0000010000000000  && IKabs(evalcond[3]) < 0.0000010000000000  )
{
{
IkReal dummyeval[1];
IkReal gconst32;
gconst32=IKsign((((px)*(px))+((py)*(py))));
dummyeval[0]=(((px)*(px))+((py)*(py)));
if( IKabs(dummyeval[0]) < 0.0000010000000000  )
{
{
IkReal dummyeval[1];
IkReal gconst33;
gconst33=IKsign(((((IkReal(-0.0600000000000000))*((px)*(px))))+(((IkReal(-0.0600000000000000))*((py)*(py))))));
dummyeval[0]=((((IkReal(-1.00000000000000))*((px)*(px))))+(((IkReal(-1.00000000000000))*((py)*(py)))));
if( IKabs(dummyeval[0]) < 0.0000010000000000  )
{
continue;

} else
{
{
IkReal j7array[1], cj7array[1], sj7array[1];
bool j7valid[1]={false};
_nj7 = 1;
IkReal x524=((cj10)*(py));
IkReal x525=((px)*(sj10));
IkReal x526=((cj10)*(px));
IkReal x527=((IkReal(0.0180000000000000))*(py));
if( IKabs(((gconst33)*(((((sj10)*(x527)))+(((IkReal(-0.0188280000000000))*(x526)))+(((IkReal(0.00180000000000000))*(x525)))+(((IkReal(-0.188280000000000))*(x524)))+(((IkReal(-0.0180000000000000))*(px)))+(((pp)*(py)))+(((IkReal(-0.188470440000000))*(py))))))) < IKFAST_ATAN2_MAGTHRESH && IKabs(((gconst33)*(((((IkReal(-0.00180000000000000))*(py)*(sj10)))+(((IkReal(0.0188280000000000))*(x524)))+(((IkReal(-0.188280000000000))*(x526)))+(x527)+(((IkReal(0.0180000000000000))*(x525)))+(((pp)*(px)))+(((IkReal(-0.188470440000000))*(px))))))) < IKFAST_ATAN2_MAGTHRESH )
    continue;
j7array[0]=IKatan2(((gconst33)*(((((sj10)*(x527)))+(((IkReal(-0.0188280000000000))*(x526)))+(((IkReal(0.00180000000000000))*(x525)))+(((IkReal(-0.188280000000000))*(x524)))+(((IkReal(-0.0180000000000000))*(px)))+(((pp)*(py)))+(((IkReal(-0.188470440000000))*(py)))))), ((gconst33)*(((((IkReal(-0.00180000000000000))*(py)*(sj10)))+(((IkReal(0.0188280000000000))*(x524)))+(((IkReal(-0.188280000000000))*(x526)))+(x527)+(((IkReal(0.0180000000000000))*(x525)))+(((pp)*(px)))+(((IkReal(-0.188470440000000))*(px)))))));
sj7array[0]=IKsin(j7array[0]);
cj7array[0]=IKcos(j7array[0]);
if( j7array[0] > IKPI )
{
    j7array[0]-=IK2PI;
}
else if( j7array[0] < -IKPI )
{    j7array[0]+=IK2PI;
}
j7valid[0] = true;
for(int ij7 = 0; ij7 < 1; ++ij7)
{
if( !j7valid[ij7] )
{
    continue;
}
_ij7[0] = ij7; _ij7[1] = -1;
for(int iij7 = ij7+1; iij7 < 1; ++iij7)
{
if( j7valid[iij7] && IKabs(cj7array[ij7]-cj7array[iij7]) < IKFAST_SOLUTION_THRESH && IKabs(sj7array[ij7]-sj7array[iij7]) < IKFAST_SOLUTION_THRESH )
{
    j7valid[iij7]=false; _ij7[1] = iij7; break; 
}
}
j7 = j7array[ij7]; cj7 = cj7array[ij7]; sj7 = sj7array[ij7];
{
IkReal evalcond[3];
IkReal x528=IKcos(j7);
IkReal x529=IKsin(j7);
IkReal x530=((px)*(x529));
IkReal x531=((py)*(x529));
IkReal x532=((px)*(x528));
IkReal x533=((py)*(x528));
evalcond[0]=((IkReal(-0.0300000000000000))+(((IkReal(-1.00000000000000))*(x532)))+(((IkReal(-1.00000000000000))*(x531)))+(((IkReal(0.313800000000000))*(sj10)))+(((IkReal(0.0300000000000000))*(cj10))));
evalcond[1]=((IkReal(0.300000000000000))+(((IkReal(-1.00000000000000))*(x530)))+(((IkReal(-0.0300000000000000))*(sj10)))+(x533)+(((IkReal(0.313800000000000))*(cj10))));
evalcond[2]=((IkReal(0.00847044000000000))+(((IkReal(0.600000000000000))*(x530)))+(((IkReal(-1.00000000000000))*(pp)))+(((IkReal(-0.0600000000000000))*(x532)))+(((IkReal(-0.0600000000000000))*(x531)))+(((IkReal(-0.600000000000000))*(x533))));
if( IKabs(evalcond[0]) > 0.000001  || IKabs(evalcond[1]) > 0.000001  || IKabs(evalcond[2]) > 0.000001  )
{
continue;
}
}

rotationfunction0(solutions);
}
}

}

}

} else
{
{
IkReal j7array[1], cj7array[1], sj7array[1];
bool j7valid[1]={false};
_nj7 = 1;
IkReal x534=((IkReal(0.0300000000000000))*(px));
IkReal x535=((IkReal(0.313800000000000))*(px));
IkReal x536=((IkReal(0.0300000000000000))*(py));
IkReal x537=((IkReal(0.313800000000000))*(py));
if( IKabs(((gconst32)*(((((sj10)*(x537)))+(((IkReal(0.300000000000000))*(px)))+(((cj10)*(x535)))+(((cj10)*(x536)))+(((IkReal(-1.00000000000000))*(x536)))+(((IkReal(-1.00000000000000))*(sj10)*(x534))))))) < IKFAST_ATAN2_MAGTHRESH && IKabs(((gconst32)*(((((sj10)*(x535)))+(((sj10)*(x536)))+(((IkReal(-0.300000000000000))*(py)))+(((IkReal(-1.00000000000000))*(cj10)*(x537)))+(((cj10)*(x534)))+(((IkReal(-1.00000000000000))*(x534))))))) < IKFAST_ATAN2_MAGTHRESH )
    continue;
j7array[0]=IKatan2(((gconst32)*(((((sj10)*(x537)))+(((IkReal(0.300000000000000))*(px)))+(((cj10)*(x535)))+(((cj10)*(x536)))+(((IkReal(-1.00000000000000))*(x536)))+(((IkReal(-1.00000000000000))*(sj10)*(x534)))))), ((gconst32)*(((((sj10)*(x535)))+(((sj10)*(x536)))+(((IkReal(-0.300000000000000))*(py)))+(((IkReal(-1.00000000000000))*(cj10)*(x537)))+(((cj10)*(x534)))+(((IkReal(-1.00000000000000))*(x534)))))));
sj7array[0]=IKsin(j7array[0]);
cj7array[0]=IKcos(j7array[0]);
if( j7array[0] > IKPI )
{
    j7array[0]-=IK2PI;
}
else if( j7array[0] < -IKPI )
{    j7array[0]+=IK2PI;
}
j7valid[0] = true;
for(int ij7 = 0; ij7 < 1; ++ij7)
{
if( !j7valid[ij7] )
{
    continue;
}
_ij7[0] = ij7; _ij7[1] = -1;
for(int iij7 = ij7+1; iij7 < 1; ++iij7)
{
if( j7valid[iij7] && IKabs(cj7array[ij7]-cj7array[iij7]) < IKFAST_SOLUTION_THRESH && IKabs(sj7array[ij7]-sj7array[iij7]) < IKFAST_SOLUTION_THRESH )
{
    j7valid[iij7]=false; _ij7[1] = iij7; break; 
}
}
j7 = j7array[ij7]; cj7 = cj7array[ij7]; sj7 = sj7array[ij7];
{
IkReal evalcond[3];
IkReal x538=IKcos(j7);
IkReal x539=IKsin(j7);
IkReal x540=((px)*(x539));
IkReal x541=((py)*(x539));
IkReal x542=((px)*(x538));
IkReal x543=((py)*(x538));
evalcond[0]=((IkReal(-0.0300000000000000))+(((IkReal(-1.00000000000000))*(x541)))+(((IkReal(-1.00000000000000))*(x542)))+(((IkReal(0.313800000000000))*(sj10)))+(((IkReal(0.0300000000000000))*(cj10))));
evalcond[1]=((IkReal(0.300000000000000))+(((IkReal(-1.00000000000000))*(x540)))+(((IkReal(-0.0300000000000000))*(sj10)))+(x543)+(((IkReal(0.313800000000000))*(cj10))));
evalcond[2]=((IkReal(0.00847044000000000))+(((IkReal(0.600000000000000))*(x540)))+(((IkReal(-1.00000000000000))*(pp)))+(((IkReal(-0.0600000000000000))*(x542)))+(((IkReal(-0.0600000000000000))*(x541)))+(((IkReal(-0.600000000000000))*(x543))));
if( IKabs(evalcond[0]) > 0.000001  || IKabs(evalcond[1]) > 0.000001  || IKabs(evalcond[2]) > 0.000001  )
{
continue;
}
}

rotationfunction0(solutions);
}
}

}

}

} else
{
if( 1 )
{
continue;

} else
{
}
}
}
}

} else
{
{
IkReal j7array[1], cj7array[1], sj7array[1];
bool j7valid[1]={false};
_nj7 = 1;
IkReal x544=((px)*(sj10));
IkReal x545=((IkReal(0.313800000000000))*(cj9));
IkReal x546=((py)*(sj10));
IkReal x547=((IkReal(0.313800000000000))*(cj10));
IkReal x548=((IkReal(0.0300000000000000))*(cj9));
IkReal x549=((cj10)*(x548));
if( IKabs(((gconst29)*(((((py)*(x548)))+(((IkReal(-1.00000000000000))*(x545)*(x546)))+(((IkReal(0.300000000000000))*(px)))+(((px)*(x547)))+(((IkReal(-1.00000000000000))*(py)*(x549)))+(((IkReal(-0.0300000000000000))*(x544))))))) < IKFAST_ATAN2_MAGTHRESH && IKabs(((gconst29)*(((((IkReal(-1.00000000000000))*(x544)*(x545)))+(((IkReal(-0.300000000000000))*(py)))+(((IkReal(0.0300000000000000))*(x546)))+(((px)*(x548)))+(((IkReal(-1.00000000000000))*(px)*(x549)))+(((IkReal(-1.00000000000000))*(py)*(x547))))))) < IKFAST_ATAN2_MAGTHRESH )
    continue;
j7array[0]=IKatan2(((gconst29)*(((((py)*(x548)))+(((IkReal(-1.00000000000000))*(x545)*(x546)))+(((IkReal(0.300000000000000))*(px)))+(((px)*(x547)))+(((IkReal(-1.00000000000000))*(py)*(x549)))+(((IkReal(-0.0300000000000000))*(x544)))))), ((gconst29)*(((((IkReal(-1.00000000000000))*(x544)*(x545)))+(((IkReal(-0.300000000000000))*(py)))+(((IkReal(0.0300000000000000))*(x546)))+(((px)*(x548)))+(((IkReal(-1.00000000000000))*(px)*(x549)))+(((IkReal(-1.00000000000000))*(py)*(x547)))))));
sj7array[0]=IKsin(j7array[0]);
cj7array[0]=IKcos(j7array[0]);
if( j7array[0] > IKPI )
{
    j7array[0]-=IK2PI;
}
else if( j7array[0] < -IKPI )
{    j7array[0]+=IK2PI;
}
j7valid[0] = true;
for(int ij7 = 0; ij7 < 1; ++ij7)
{
if( !j7valid[ij7] )
{
    continue;
}
_ij7[0] = ij7; _ij7[1] = -1;
for(int iij7 = ij7+1; iij7 < 1; ++iij7)
{
if( j7valid[iij7] && IKabs(cj7array[ij7]-cj7array[iij7]) < IKFAST_SOLUTION_THRESH && IKabs(sj7array[ij7]-sj7array[iij7]) < IKFAST_SOLUTION_THRESH )
{
    j7valid[iij7]=false; _ij7[1] = iij7; break; 
}
}
j7 = j7array[ij7]; cj7 = cj7array[ij7]; sj7 = sj7array[ij7];
{
IkReal evalcond[5];
IkReal x550=IKcos(j7);
IkReal x551=IKsin(j7);
IkReal x552=((pz)*(sj9));
IkReal x553=((IkReal(0.0300000000000000))*(cj10));
IkReal x554=((IkReal(0.313800000000000))*(sj10));
IkReal x555=((IkReal(0.0600000000000000))*(cj9));
IkReal x556=((IkReal(1.00000000000000))*(cj9));
IkReal x557=((py)*(x550));
IkReal x558=((px)*(x550));
IkReal x559=((py)*(x551));
IkReal x560=((px)*(x551));
evalcond[0]=((((IkReal(-1.00000000000000))*(x558)))+(((IkReal(-1.00000000000000))*(x559)))+(((IkReal(-1.00000000000000))*(cj9)*(x554)))+(((IkReal(-1.00000000000000))*(cj9)*(x553)))+(((IkReal(0.0300000000000000))*(cj9))));
evalcond[1]=((IkReal(0.300000000000000))+(((IkReal(-0.0300000000000000))*(sj10)))+(x557)+(((IkReal(-1.00000000000000))*(x560)))+(((IkReal(0.313800000000000))*(cj10))));
evalcond[2]=((((cj9)*(pz)))+(((sj9)*(x559)))+(((sj9)*(x558))));
evalcond[3]=((IkReal(0.0300000000000000))+(((IkReal(-1.00000000000000))*(x556)*(x558)))+(((IkReal(-1.00000000000000))*(x556)*(x559)))+(((IkReal(-1.00000000000000))*(x553)))+(((IkReal(-1.00000000000000))*(x554)))+(x552));
evalcond[4]=((IkReal(0.00847044000000000))+(((IkReal(0.600000000000000))*(x560)))+(((x555)*(x558)))+(((x555)*(x559)))+(((IkReal(-1.00000000000000))*(pp)))+(((IkReal(-0.600000000000000))*(x557)))+(((IkReal(-0.0600000000000000))*(x552))));
if( IKabs(evalcond[0]) > 0.000001  || IKabs(evalcond[1]) > 0.000001  || IKabs(evalcond[2]) > 0.000001  || IKabs(evalcond[3]) > 0.000001  || IKabs(evalcond[4]) > 0.000001  )
{
continue;
}
}

rotationfunction0(solutions);
}
}

}

}

} else
{
{
IkReal j7array[1], cj7array[1], sj7array[1];
bool j7valid[1]={false};
_nj7 = 1;
IkReal x561=((py)*(sj9));
IkReal x562=((IkReal(0.313800000000000))*(cj10));
IkReal x563=((px)*(sj9));
IkReal x564=((IkReal(0.0300000000000000))*(sj10));
IkReal x565=((IkReal(1.00000000000000))*(cj9)*(pz));
if( IKabs(((gconst28)*(((((x562)*(x563)))+(((IkReal(-1.00000000000000))*(py)*(x565)))+(((IkReal(-1.00000000000000))*(x563)*(x564)))+(((IkReal(0.300000000000000))*(x563))))))) < IKFAST_ATAN2_MAGTHRESH && IKabs(((gconst28)*(((((x561)*(x564)))+(((IkReal(-1.00000000000000))*(x561)*(x562)))+(((IkReal(-0.300000000000000))*(x561)))+(((IkReal(-1.00000000000000))*(px)*(x565))))))) < IKFAST_ATAN2_MAGTHRESH )
    continue;
j7array[0]=IKatan2(((gconst28)*(((((x562)*(x563)))+(((IkReal(-1.00000000000000))*(py)*(x565)))+(((IkReal(-1.00000000000000))*(x563)*(x564)))+(((IkReal(0.300000000000000))*(x563)))))), ((gconst28)*(((((x561)*(x564)))+(((IkReal(-1.00000000000000))*(x561)*(x562)))+(((IkReal(-0.300000000000000))*(x561)))+(((IkReal(-1.00000000000000))*(px)*(x565)))))));
sj7array[0]=IKsin(j7array[0]);
cj7array[0]=IKcos(j7array[0]);
if( j7array[0] > IKPI )
{
    j7array[0]-=IK2PI;
}
else if( j7array[0] < -IKPI )
{    j7array[0]+=IK2PI;
}
j7valid[0] = true;
for(int ij7 = 0; ij7 < 1; ++ij7)
{
if( !j7valid[ij7] )
{
    continue;
}
_ij7[0] = ij7; _ij7[1] = -1;
for(int iij7 = ij7+1; iij7 < 1; ++iij7)
{
if( j7valid[iij7] && IKabs(cj7array[ij7]-cj7array[iij7]) < IKFAST_SOLUTION_THRESH && IKabs(sj7array[ij7]-sj7array[iij7]) < IKFAST_SOLUTION_THRESH )
{
    j7valid[iij7]=false; _ij7[1] = iij7; break; 
}
}
j7 = j7array[ij7]; cj7 = cj7array[ij7]; sj7 = sj7array[ij7];
{
IkReal evalcond[5];
IkReal x566=IKcos(j7);
IkReal x567=IKsin(j7);
IkReal x568=((pz)*(sj9));
IkReal x569=((IkReal(0.0300000000000000))*(cj10));
IkReal x570=((IkReal(0.313800000000000))*(sj10));
IkReal x571=((IkReal(0.0600000000000000))*(cj9));
IkReal x572=((IkReal(1.00000000000000))*(cj9));
IkReal x573=((py)*(x566));
IkReal x574=((px)*(x566));
IkReal x575=((py)*(x567));
IkReal x576=((px)*(x567));
evalcond[0]=((((IkReal(-1.00000000000000))*(cj9)*(x570)))+(((IkReal(0.0300000000000000))*(cj9)))+(((IkReal(-1.00000000000000))*(cj9)*(x569)))+(((IkReal(-1.00000000000000))*(x575)))+(((IkReal(-1.00000000000000))*(x574))));
evalcond[1]=((IkReal(0.300000000000000))+(((IkReal(-0.0300000000000000))*(sj10)))+(((IkReal(-1.00000000000000))*(x576)))+(x573)+(((IkReal(0.313800000000000))*(cj10))));
evalcond[2]=((((cj9)*(pz)))+(((sj9)*(x574)))+(((sj9)*(x575))));
evalcond[3]=((IkReal(0.0300000000000000))+(((IkReal(-1.00000000000000))*(x570)))+(x568)+(((IkReal(-1.00000000000000))*(x572)*(x574)))+(((IkReal(-1.00000000000000))*(x572)*(x575)))+(((IkReal(-1.00000000000000))*(x569))));
evalcond[4]=((IkReal(0.00847044000000000))+(((x571)*(x575)))+(((x571)*(x574)))+(((IkReal(-0.600000000000000))*(x573)))+(((IkReal(0.600000000000000))*(x576)))+(((IkReal(-0.0600000000000000))*(x568)))+(((IkReal(-1.00000000000000))*(pp))));
if( IKabs(evalcond[0]) > 0.000001  || IKabs(evalcond[1]) > 0.000001  || IKabs(evalcond[2]) > 0.000001  || IKabs(evalcond[3]) > 0.000001  || IKabs(evalcond[4]) > 0.000001  )
{
continue;
}
}

rotationfunction0(solutions);
}
}

}

}

} else
{
IkReal x577=((IkReal(0.300000000000000))+(((IkReal(-0.0300000000000000))*(sj10)))+(((IkReal(-1.00000000000000))*(pz)))+(((IkReal(0.313800000000000))*(cj10))));
evalcond[0]=((IkReal(-3.14159265358979))+(IKfmod(((IkReal(1.57079632679490))+(j8)), IkReal(6.28318530717959))));
evalcond[1]=((IkReal(0.190270440000000))+(((IkReal(-0.0368280000000000))*(sj10)))+(((IkReal(0.186480000000000))*(cj10)))+(((IkReal(-1.00000000000000))*(pp))));
evalcond[2]=x577;
evalcond[3]=x577;
if( IKabs(evalcond[0]) < 0.0000010000000000  && IKabs(evalcond[1]) < 0.0000010000000000  && IKabs(evalcond[2]) < 0.0000010000000000  && IKabs(evalcond[3]) < 0.0000010000000000  )
{
{
IkReal dummyeval[1];
IkReal gconst34;
gconst34=IKsign((((px)*(px))+((py)*(py))));
dummyeval[0]=(((px)*(px))+((py)*(py)));
if( IKabs(dummyeval[0]) < 0.0000010000000000  )
{
{
IkReal dummyeval[1];
IkReal gconst35;
IkReal x578=((IkReal(1.00000000000000))*(sj9));
gconst35=IKsign(((((IkReal(-1.00000000000000))*(x578)*((py)*(py))))+(((IkReal(-1.00000000000000))*(x578)*((px)*(px))))));
IkReal x579=((IkReal(1.00000000000000))*(sj9));
dummyeval[0]=((((IkReal(-1.00000000000000))*(x579)*((py)*(py))))+(((IkReal(-1.00000000000000))*(x579)*((px)*(px)))));
if( IKabs(dummyeval[0]) < 0.0000010000000000  )
{
{
IkReal evalcond[4];
IkReal x580=x577;
evalcond[0]=((IkReal(-3.14159265358979))+(IKfmod(((IkReal(3.14159265358979))+(j9)), IkReal(6.28318530717959))));
evalcond[1]=((IkReal(0.190270440000000))+(((IkReal(-0.0368280000000000))*(sj10)))+(((IkReal(0.186480000000000))*(cj10)))+(((IkReal(-1.00000000000000))*(pp))));
evalcond[2]=x580;
evalcond[3]=x580;
if( IKabs(evalcond[0]) < 0.0000010000000000  && IKabs(evalcond[1]) < 0.0000010000000000  && IKabs(evalcond[2]) < 0.0000010000000000  && IKabs(evalcond[3]) < 0.0000010000000000  )
{
{
IkReal dummyeval[1];
IkReal gconst36;
gconst36=IKsign((((px)*(px))+((py)*(py))));
dummyeval[0]=(((px)*(px))+((py)*(py)));
if( IKabs(dummyeval[0]) < 0.0000010000000000  )
{
{
IkReal dummyeval[1];
IkReal gconst37;
gconst37=IKsign(((((IkReal(-3.00000000000000))*((px)*(px))))+(((IkReal(-3.00000000000000))*((py)*(py))))));
dummyeval[0]=((((IkReal(-1.00000000000000))*((px)*(px))))+(((IkReal(-1.00000000000000))*((py)*(py)))));
if( IKabs(dummyeval[0]) < 0.0000010000000000  )
{
continue;

} else
{
{
IkReal j7array[1], cj7array[1], sj7array[1];
bool j7valid[1]={false};
_nj7 = 1;
IkReal x581=((IkReal(50.0000000000000))*(pp));
IkReal x582=((IkReal(30.0000000000000))*(pz));
if( IKabs(((gconst37)*(((((IkReal(0.423522000000000))*(py)))+(((IkReal(-1.00000000000000))*(py)*(x581)))+(((py)*(x582))))))) < IKFAST_ATAN2_MAGTHRESH && IKabs(((gconst37)*(((((IkReal(0.423522000000000))*(px)))+(((px)*(x582)))+(((IkReal(-1.00000000000000))*(px)*(x581))))))) < IKFAST_ATAN2_MAGTHRESH )
    continue;
j7array[0]=IKatan2(((gconst37)*(((((IkReal(0.423522000000000))*(py)))+(((IkReal(-1.00000000000000))*(py)*(x581)))+(((py)*(x582)))))), ((gconst37)*(((((IkReal(0.423522000000000))*(px)))+(((px)*(x582)))+(((IkReal(-1.00000000000000))*(px)*(x581)))))));
sj7array[0]=IKsin(j7array[0]);
cj7array[0]=IKcos(j7array[0]);
if( j7array[0] > IKPI )
{
    j7array[0]-=IK2PI;
}
else if( j7array[0] < -IKPI )
{    j7array[0]+=IK2PI;
}
j7valid[0] = true;
for(int ij7 = 0; ij7 < 1; ++ij7)
{
if( !j7valid[ij7] )
{
    continue;
}
_ij7[0] = ij7; _ij7[1] = -1;
for(int iij7 = ij7+1; iij7 < 1; ++iij7)
{
if( j7valid[iij7] && IKabs(cj7array[ij7]-cj7array[iij7]) < IKFAST_SOLUTION_THRESH && IKabs(sj7array[ij7]-sj7array[iij7]) < IKFAST_SOLUTION_THRESH )
{
    j7valid[iij7]=false; _ij7[1] = iij7; break; 
}
}
j7 = j7array[ij7]; cj7 = cj7array[ij7]; sj7 = sj7array[ij7];
{
IkReal evalcond[3];
IkReal x583=IKcos(j7);
IkReal x584=IKsin(j7);
IkReal x585=((IkReal(1.00000000000000))*(x584));
IkReal x586=((px)*(x583));
evalcond[0]=((IkReal(0.0300000000000000))+(((IkReal(-0.313800000000000))*(sj10)))+(((IkReal(-1.00000000000000))*(x586)))+(((IkReal(-1.00000000000000))*(py)*(x585)))+(((IkReal(-0.0300000000000000))*(cj10))));
evalcond[1]=((((IkReal(-1.00000000000000))*(px)*(x585)))+(((py)*(x583))));
evalcond[2]=((IkReal(0.00847044000000000))+(((IkReal(0.600000000000000))*(pz)))+(((IkReal(0.0600000000000000))*(py)*(x584)))+(((IkReal(0.0600000000000000))*(x586)))+(((IkReal(-1.00000000000000))*(pp))));
if( IKabs(evalcond[0]) > 0.000001  || IKabs(evalcond[1]) > 0.000001  || IKabs(evalcond[2]) > 0.000001  )
{
continue;
}
}

rotationfunction0(solutions);
}
}

}

}

} else
{
{
IkReal j7array[1], cj7array[1], sj7array[1];
bool j7valid[1]={false};
_nj7 = 1;
IkReal x587=((IkReal(0.0300000000000000))*(px));
IkReal x588=((IkReal(0.313800000000000))*(sj10));
IkReal x589=((IkReal(0.0300000000000000))*(py));
if( IKabs(((gconst36)*(((((IkReal(-1.00000000000000))*(py)*(x588)))+(x589)+(((IkReal(-1.00000000000000))*(cj10)*(x589))))))) < IKFAST_ATAN2_MAGTHRESH && IKabs(((gconst36)*(((((IkReal(-1.00000000000000))*(px)*(x588)))+(x587)+(((IkReal(-1.00000000000000))*(cj10)*(x587))))))) < IKFAST_ATAN2_MAGTHRESH )
    continue;
j7array[0]=IKatan2(((gconst36)*(((((IkReal(-1.00000000000000))*(py)*(x588)))+(x589)+(((IkReal(-1.00000000000000))*(cj10)*(x589)))))), ((gconst36)*(((((IkReal(-1.00000000000000))*(px)*(x588)))+(x587)+(((IkReal(-1.00000000000000))*(cj10)*(x587)))))));
sj7array[0]=IKsin(j7array[0]);
cj7array[0]=IKcos(j7array[0]);
if( j7array[0] > IKPI )
{
    j7array[0]-=IK2PI;
}
else if( j7array[0] < -IKPI )
{    j7array[0]+=IK2PI;
}
j7valid[0] = true;
for(int ij7 = 0; ij7 < 1; ++ij7)
{
if( !j7valid[ij7] )
{
    continue;
}
_ij7[0] = ij7; _ij7[1] = -1;
for(int iij7 = ij7+1; iij7 < 1; ++iij7)
{
if( j7valid[iij7] && IKabs(cj7array[ij7]-cj7array[iij7]) < IKFAST_SOLUTION_THRESH && IKabs(sj7array[ij7]-sj7array[iij7]) < IKFAST_SOLUTION_THRESH )
{
    j7valid[iij7]=false; _ij7[1] = iij7; break; 
}
}
j7 = j7array[ij7]; cj7 = cj7array[ij7]; sj7 = sj7array[ij7];
{
IkReal evalcond[3];
IkReal x590=IKcos(j7);
IkReal x591=IKsin(j7);
IkReal x592=((IkReal(1.00000000000000))*(x591));
IkReal x593=((px)*(x590));
evalcond[0]=((IkReal(0.0300000000000000))+(((IkReal(-0.313800000000000))*(sj10)))+(((IkReal(-1.00000000000000))*(x593)))+(((IkReal(-1.00000000000000))*(py)*(x592)))+(((IkReal(-0.0300000000000000))*(cj10))));
evalcond[1]=((((IkReal(-1.00000000000000))*(px)*(x592)))+(((py)*(x590))));
evalcond[2]=((IkReal(0.00847044000000000))+(((IkReal(0.0600000000000000))*(py)*(x591)))+(((IkReal(0.600000000000000))*(pz)))+(((IkReal(-1.00000000000000))*(pp)))+(((IkReal(0.0600000000000000))*(x593))));
if( IKabs(evalcond[0]) > 0.000001  || IKabs(evalcond[1]) > 0.000001  || IKabs(evalcond[2]) > 0.000001  )
{
continue;
}
}

rotationfunction0(solutions);
}
}

}

}

} else
{
IkReal x594=x577;
evalcond[0]=((IkReal(-3.14159265358979))+(IKfmod(((IkReal(1.11022302462516e-16))+(j9)), IkReal(6.28318530717959))));
evalcond[1]=((IkReal(0.190270440000000))+(((IkReal(-0.0368280000000000))*(sj10)))+(((IkReal(0.186480000000000))*(cj10)))+(((IkReal(-1.00000000000000))*(pp))));
evalcond[2]=x594;
evalcond[3]=x594;
if( IKabs(evalcond[0]) < 0.0000010000000000  && IKabs(evalcond[1]) < 0.0000010000000000  && IKabs(evalcond[2]) < 0.0000010000000000  && IKabs(evalcond[3]) < 0.0000010000000000  )
{
{
IkReal dummyeval[1];
IkReal gconst38;
gconst38=IKsign((((px)*(px))+((py)*(py))));
dummyeval[0]=(((px)*(px))+((py)*(py)));
if( IKabs(dummyeval[0]) < 0.0000010000000000  )
{
{
IkReal dummyeval[1];
IkReal gconst39;
gconst39=IKsign(((((IkReal(3.00000000000000))*((py)*(py))))+(((IkReal(3.00000000000000))*((px)*(px))))));
dummyeval[0]=(((px)*(px))+((py)*(py)));
if( IKabs(dummyeval[0]) < 0.0000010000000000  )
{
continue;

} else
{
{
IkReal j7array[1], cj7array[1], sj7array[1];
bool j7valid[1]={false};
_nj7 = 1;
IkReal x595=((IkReal(50.0000000000000))*(pp));
IkReal x596=((IkReal(30.0000000000000))*(pz));
if( IKabs(((gconst39)*(((((IkReal(0.423522000000000))*(py)))+(((py)*(x596)))+(((IkReal(-1.00000000000000))*(py)*(x595))))))) < IKFAST_ATAN2_MAGTHRESH && IKabs(((gconst39)*(((((IkReal(0.423522000000000))*(px)))+(((IkReal(-1.00000000000000))*(px)*(x595)))+(((px)*(x596))))))) < IKFAST_ATAN2_MAGTHRESH )
    continue;
j7array[0]=IKatan2(((gconst39)*(((((IkReal(0.423522000000000))*(py)))+(((py)*(x596)))+(((IkReal(-1.00000000000000))*(py)*(x595)))))), ((gconst39)*(((((IkReal(0.423522000000000))*(px)))+(((IkReal(-1.00000000000000))*(px)*(x595)))+(((px)*(x596)))))));
sj7array[0]=IKsin(j7array[0]);
cj7array[0]=IKcos(j7array[0]);
if( j7array[0] > IKPI )
{
    j7array[0]-=IK2PI;
}
else if( j7array[0] < -IKPI )
{    j7array[0]+=IK2PI;
}
j7valid[0] = true;
for(int ij7 = 0; ij7 < 1; ++ij7)
{
if( !j7valid[ij7] )
{
    continue;
}
_ij7[0] = ij7; _ij7[1] = -1;
for(int iij7 = ij7+1; iij7 < 1; ++iij7)
{
if( j7valid[iij7] && IKabs(cj7array[ij7]-cj7array[iij7]) < IKFAST_SOLUTION_THRESH && IKabs(sj7array[ij7]-sj7array[iij7]) < IKFAST_SOLUTION_THRESH )
{
    j7valid[iij7]=false; _ij7[1] = iij7; break; 
}
}
j7 = j7array[ij7]; cj7 = cj7array[ij7]; sj7 = sj7array[ij7];
{
IkReal evalcond[3];
IkReal x597=IKsin(j7);
IkReal x598=IKcos(j7);
IkReal x599=((IkReal(1.00000000000000))*(x598));
IkReal x600=((py)*(x597));
evalcond[0]=((IkReal(-0.0300000000000000))+(((IkReal(-1.00000000000000))*(px)*(x599)))+(((IkReal(0.313800000000000))*(sj10)))+(((IkReal(-1.00000000000000))*(x600)))+(((IkReal(0.0300000000000000))*(cj10))));
evalcond[1]=((((IkReal(-1.00000000000000))*(py)*(x599)))+(((px)*(x597))));
evalcond[2]=((IkReal(0.00847044000000000))+(((IkReal(-0.0600000000000000))*(x600)))+(((IkReal(0.600000000000000))*(pz)))+(((IkReal(-0.0600000000000000))*(px)*(x598)))+(((IkReal(-1.00000000000000))*(pp))));
if( IKabs(evalcond[0]) > 0.000001  || IKabs(evalcond[1]) > 0.000001  || IKabs(evalcond[2]) > 0.000001  )
{
continue;
}
}

rotationfunction0(solutions);
}
}

}

}

} else
{
{
IkReal j7array[1], cj7array[1], sj7array[1];
bool j7valid[1]={false};
_nj7 = 1;
IkReal x601=((IkReal(0.0300000000000000))*(px));
IkReal x602=((IkReal(0.313800000000000))*(sj10));
IkReal x603=((IkReal(0.0300000000000000))*(py));
if( IKabs(((gconst38)*(((((py)*(x602)))+(((IkReal(-1.00000000000000))*(x603)))+(((cj10)*(x603))))))) < IKFAST_ATAN2_MAGTHRESH && IKabs(((gconst38)*(((((px)*(x602)))+(((IkReal(-1.00000000000000))*(x601)))+(((cj10)*(x601))))))) < IKFAST_ATAN2_MAGTHRESH )
    continue;
j7array[0]=IKatan2(((gconst38)*(((((py)*(x602)))+(((IkReal(-1.00000000000000))*(x603)))+(((cj10)*(x603)))))), ((gconst38)*(((((px)*(x602)))+(((IkReal(-1.00000000000000))*(x601)))+(((cj10)*(x601)))))));
sj7array[0]=IKsin(j7array[0]);
cj7array[0]=IKcos(j7array[0]);
if( j7array[0] > IKPI )
{
    j7array[0]-=IK2PI;
}
else if( j7array[0] < -IKPI )
{    j7array[0]+=IK2PI;
}
j7valid[0] = true;
for(int ij7 = 0; ij7 < 1; ++ij7)
{
if( !j7valid[ij7] )
{
    continue;
}
_ij7[0] = ij7; _ij7[1] = -1;
for(int iij7 = ij7+1; iij7 < 1; ++iij7)
{
if( j7valid[iij7] && IKabs(cj7array[ij7]-cj7array[iij7]) < IKFAST_SOLUTION_THRESH && IKabs(sj7array[ij7]-sj7array[iij7]) < IKFAST_SOLUTION_THRESH )
{
    j7valid[iij7]=false; _ij7[1] = iij7; break; 
}
}
j7 = j7array[ij7]; cj7 = cj7array[ij7]; sj7 = sj7array[ij7];
{
IkReal evalcond[3];
IkReal x604=IKsin(j7);
IkReal x605=IKcos(j7);
IkReal x606=((IkReal(1.00000000000000))*(x605));
IkReal x607=((py)*(x604));
evalcond[0]=((IkReal(-0.0300000000000000))+(((IkReal(0.313800000000000))*(sj10)))+(((IkReal(-1.00000000000000))*(x607)))+(((IkReal(0.0300000000000000))*(cj10)))+(((IkReal(-1.00000000000000))*(px)*(x606))));
evalcond[1]=((((px)*(x604)))+(((IkReal(-1.00000000000000))*(py)*(x606))));
evalcond[2]=((IkReal(0.00847044000000000))+(((IkReal(-0.0600000000000000))*(x607)))+(((IkReal(0.600000000000000))*(pz)))+(((IkReal(-1.00000000000000))*(pp)))+(((IkReal(-0.0600000000000000))*(px)*(x605))));
if( IKabs(evalcond[0]) > 0.000001  || IKabs(evalcond[1]) > 0.000001  || IKabs(evalcond[2]) > 0.000001  )
{
continue;
}
}

rotationfunction0(solutions);
}
}

}

}

} else
{
if( 1 )
{
continue;

} else
{
}
}
}
}

} else
{
{
IkReal j7array[1], cj7array[1], sj7array[1];
bool j7valid[1]={false};
_nj7 = 1;
IkReal x608=(sj9)*(sj9);
IkReal x609=((IkReal(0.0300000000000000))*(py));
IkReal x610=((cj9)*(sj9));
IkReal x611=((IkReal(0.0300000000000000))*(px));
IkReal x612=((IkReal(0.313800000000000))*(sj10));
IkReal x613=((cj10)*(x608));
if( IKabs(((gconst35)*(((((cj10)*(x609)*(x610)))+(((py)*(x610)*(x612)))+(((IkReal(-1.00000000000000))*(x609)*(x610)))+(((x611)*(x613)))+(((px)*(x608)*(x612)))+(((IkReal(-1.00000000000000))*(x608)*(x611))))))) < IKFAST_ATAN2_MAGTHRESH && IKabs(((gconst35)*(((((x608)*(x609)))+(((IkReal(-1.00000000000000))*(x610)*(x611)))+(((cj10)*(x610)*(x611)))+(((IkReal(-1.00000000000000))*(x609)*(x613)))+(((px)*(x610)*(x612)))+(((IkReal(-1.00000000000000))*(py)*(x608)*(x612))))))) < IKFAST_ATAN2_MAGTHRESH )
    continue;
j7array[0]=IKatan2(((gconst35)*(((((cj10)*(x609)*(x610)))+(((py)*(x610)*(x612)))+(((IkReal(-1.00000000000000))*(x609)*(x610)))+(((x611)*(x613)))+(((px)*(x608)*(x612)))+(((IkReal(-1.00000000000000))*(x608)*(x611)))))), ((gconst35)*(((((x608)*(x609)))+(((IkReal(-1.00000000000000))*(x610)*(x611)))+(((cj10)*(x610)*(x611)))+(((IkReal(-1.00000000000000))*(x609)*(x613)))+(((px)*(x610)*(x612)))+(((IkReal(-1.00000000000000))*(py)*(x608)*(x612)))))));
sj7array[0]=IKsin(j7array[0]);
cj7array[0]=IKcos(j7array[0]);
if( j7array[0] > IKPI )
{
    j7array[0]-=IK2PI;
}
else if( j7array[0] < -IKPI )
{    j7array[0]+=IK2PI;
}
j7valid[0] = true;
for(int ij7 = 0; ij7 < 1; ++ij7)
{
if( !j7valid[ij7] )
{
    continue;
}
_ij7[0] = ij7; _ij7[1] = -1;
for(int iij7 = ij7+1; iij7 < 1; ++iij7)
{
if( j7valid[iij7] && IKabs(cj7array[ij7]-cj7array[iij7]) < IKFAST_SOLUTION_THRESH && IKabs(sj7array[ij7]-sj7array[iij7]) < IKFAST_SOLUTION_THRESH )
{
    j7valid[iij7]=false; _ij7[1] = iij7; break; 
}
}
j7 = j7array[ij7]; cj7 = cj7array[ij7]; sj7 = sj7array[ij7];
{
IkReal evalcond[5];
IkReal x614=IKcos(j7);
IkReal x615=IKsin(j7);
IkReal x616=((IkReal(0.0600000000000000))*(sj9));
IkReal x617=((IkReal(0.0300000000000000))*(cj10));
IkReal x618=((IkReal(0.313800000000000))*(sj10));
IkReal x619=((IkReal(0.0600000000000000))*(cj9));
IkReal x620=((IkReal(1.00000000000000))*(cj9));
IkReal x621=((py)*(x614));
IkReal x622=((px)*(x614));
IkReal x623=((py)*(x615));
IkReal x624=((px)*(x615));
evalcond[0]=((((IkReal(0.0300000000000000))*(cj9)))+(((IkReal(-1.00000000000000))*(cj9)*(x618)))+(((IkReal(-1.00000000000000))*(cj9)*(x617)))+(((IkReal(-1.00000000000000))*(x623)))+(((IkReal(-1.00000000000000))*(x622))));
evalcond[1]=((((sj9)*(x622)))+(((sj9)*(x623)))+(((IkReal(-1.00000000000000))*(x620)*(x624)))+(((cj9)*(x621))));
evalcond[2]=((IkReal(0.0300000000000000))+(((IkReal(-1.00000000000000))*(sj9)*(x624)))+(((sj9)*(x621)))+(((IkReal(-1.00000000000000))*(x620)*(x623)))+(((IkReal(-1.00000000000000))*(x620)*(x622)))+(((IkReal(-1.00000000000000))*(x617)))+(((IkReal(-1.00000000000000))*(x618))));
evalcond[3]=((((IkReal(-0.0300000000000000))*(sj9)))+(x624)+(((sj9)*(x618)))+(((sj9)*(x617)))+(((IkReal(-1.00000000000000))*(x621))));
evalcond[4]=((IkReal(0.00847044000000000))+(((IkReal(0.600000000000000))*(pz)))+(((x616)*(x624)))+(((x619)*(x623)))+(((x619)*(x622)))+(((IkReal(-1.00000000000000))*(pp)))+(((IkReal(-1.00000000000000))*(x616)*(x621))));
if( IKabs(evalcond[0]) > 0.000001  || IKabs(evalcond[1]) > 0.000001  || IKabs(evalcond[2]) > 0.000001  || IKabs(evalcond[3]) > 0.000001  || IKabs(evalcond[4]) > 0.000001  )
{
continue;
}
}

rotationfunction0(solutions);
}
}

}

}

} else
{
{
IkReal j7array[1], cj7array[1], sj7array[1];
bool j7valid[1]={false};
_nj7 = 1;
IkReal x625=((IkReal(0.0300000000000000))*(sj9));
IkReal x626=((IkReal(0.0300000000000000))*(cj9));
IkReal x627=((IkReal(0.313800000000000))*(sj10)*(sj9));
IkReal x628=((cj10)*(x626));
IkReal x629=((IkReal(0.313800000000000))*(cj9)*(sj10));
if( IKabs(((gconst34)*(((((IkReal(-1.00000000000000))*(cj10)*(px)*(x625)))+(((py)*(x626)))+(((IkReal(-1.00000000000000))*(px)*(x627)))+(((px)*(x625)))+(((IkReal(-1.00000000000000))*(py)*(x628)))+(((IkReal(-1.00000000000000))*(py)*(x629))))))) < IKFAST_ATAN2_MAGTHRESH && IKabs(((gconst34)*(((((py)*(x627)))+(((IkReal(-1.00000000000000))*(px)*(x629)))+(((IkReal(-1.00000000000000))*(px)*(x628)))+(((cj10)*(py)*(x625)))+(((px)*(x626)))+(((IkReal(-1.00000000000000))*(py)*(x625))))))) < IKFAST_ATAN2_MAGTHRESH )
    continue;
j7array[0]=IKatan2(((gconst34)*(((((IkReal(-1.00000000000000))*(cj10)*(px)*(x625)))+(((py)*(x626)))+(((IkReal(-1.00000000000000))*(px)*(x627)))+(((px)*(x625)))+(((IkReal(-1.00000000000000))*(py)*(x628)))+(((IkReal(-1.00000000000000))*(py)*(x629)))))), ((gconst34)*(((((py)*(x627)))+(((IkReal(-1.00000000000000))*(px)*(x629)))+(((IkReal(-1.00000000000000))*(px)*(x628)))+(((cj10)*(py)*(x625)))+(((px)*(x626)))+(((IkReal(-1.00000000000000))*(py)*(x625)))))));
sj7array[0]=IKsin(j7array[0]);
cj7array[0]=IKcos(j7array[0]);
if( j7array[0] > IKPI )
{
    j7array[0]-=IK2PI;
}
else if( j7array[0] < -IKPI )
{    j7array[0]+=IK2PI;
}
j7valid[0] = true;
for(int ij7 = 0; ij7 < 1; ++ij7)
{
if( !j7valid[ij7] )
{
    continue;
}
_ij7[0] = ij7; _ij7[1] = -1;
for(int iij7 = ij7+1; iij7 < 1; ++iij7)
{
if( j7valid[iij7] && IKabs(cj7array[ij7]-cj7array[iij7]) < IKFAST_SOLUTION_THRESH && IKabs(sj7array[ij7]-sj7array[iij7]) < IKFAST_SOLUTION_THRESH )
{
    j7valid[iij7]=false; _ij7[1] = iij7; break; 
}
}
j7 = j7array[ij7]; cj7 = cj7array[ij7]; sj7 = sj7array[ij7];
{
IkReal evalcond[5];
IkReal x630=IKcos(j7);
IkReal x631=IKsin(j7);
IkReal x632=((IkReal(0.0600000000000000))*(sj9));
IkReal x633=((IkReal(0.0300000000000000))*(cj10));
IkReal x634=((IkReal(0.313800000000000))*(sj10));
IkReal x635=((IkReal(0.0600000000000000))*(cj9));
IkReal x636=((IkReal(1.00000000000000))*(cj9));
IkReal x637=((py)*(x630));
IkReal x638=((px)*(x630));
IkReal x639=((py)*(x631));
IkReal x640=((px)*(x631));
evalcond[0]=((((IkReal(0.0300000000000000))*(cj9)))+(((IkReal(-1.00000000000000))*(x639)))+(((IkReal(-1.00000000000000))*(x638)))+(((IkReal(-1.00000000000000))*(cj9)*(x633)))+(((IkReal(-1.00000000000000))*(cj9)*(x634))));
evalcond[1]=((((sj9)*(x638)))+(((sj9)*(x639)))+(((IkReal(-1.00000000000000))*(x636)*(x640)))+(((cj9)*(x637))));
evalcond[2]=((IkReal(0.0300000000000000))+(((sj9)*(x637)))+(((IkReal(-1.00000000000000))*(x634)))+(((IkReal(-1.00000000000000))*(x633)))+(((IkReal(-1.00000000000000))*(x636)*(x638)))+(((IkReal(-1.00000000000000))*(x636)*(x639)))+(((IkReal(-1.00000000000000))*(sj9)*(x640))));
evalcond[3]=((((IkReal(-0.0300000000000000))*(sj9)))+(((sj9)*(x634)))+(((sj9)*(x633)))+(x640)+(((IkReal(-1.00000000000000))*(x637))));
evalcond[4]=((IkReal(0.00847044000000000))+(((IkReal(0.600000000000000))*(pz)))+(((x635)*(x638)))+(((x635)*(x639)))+(((IkReal(-1.00000000000000))*(pp)))+(((x632)*(x640)))+(((IkReal(-1.00000000000000))*(x632)*(x637))));
if( IKabs(evalcond[0]) > 0.000001  || IKabs(evalcond[1]) > 0.000001  || IKabs(evalcond[2]) > 0.000001  || IKabs(evalcond[3]) > 0.000001  || IKabs(evalcond[4]) > 0.000001  )
{
continue;
}
}

rotationfunction0(solutions);
}
}

}

}

} else
{
IkReal x641=((IkReal(0.0300000000000000))*(sj10));
IkReal x642=((IkReal(0.313800000000000))*(cj10));
evalcond[0]=((IkReal(-3.14159265358979))+(IKfmod(((IkReal(4.71238898038469))+(j8)), IkReal(6.28318530717959))));
evalcond[1]=((IkReal(0.190270440000000))+(((IkReal(-0.0368280000000000))*(sj10)))+(((IkReal(0.186480000000000))*(cj10)))+(((IkReal(-1.00000000000000))*(pp))));
evalcond[2]=((IkReal(0.300000000000000))+(((IkReal(-1.00000000000000))*(x641)))+(pz)+(x642));
evalcond[3]=((IkReal(-0.300000000000000))+(((IkReal(-1.00000000000000))*(pz)))+(((IkReal(-1.00000000000000))*(x642)))+(x641));
if( IKabs(evalcond[0]) < 0.0000010000000000  && IKabs(evalcond[1]) < 0.0000010000000000  && IKabs(evalcond[2]) < 0.0000010000000000  && IKabs(evalcond[3]) < 0.0000010000000000  )
{
{
IkReal dummyeval[1];
IkReal gconst40;
gconst40=IKsign((((px)*(px))+((py)*(py))));
dummyeval[0]=(((px)*(px))+((py)*(py)));
if( IKabs(dummyeval[0]) < 0.0000010000000000  )
{
{
IkReal dummyeval[1];
IkReal gconst41;
IkReal x643=((IkReal(1.00000000000000))*(sj9));
gconst41=IKsign(((((IkReal(-1.00000000000000))*(x643)*((px)*(px))))+(((IkReal(-1.00000000000000))*(x643)*((py)*(py))))));
IkReal x644=((IkReal(1.00000000000000))*(sj9));
dummyeval[0]=((((IkReal(-1.00000000000000))*(x644)*((px)*(px))))+(((IkReal(-1.00000000000000))*(x644)*((py)*(py)))));
if( IKabs(dummyeval[0]) < 0.0000010000000000  )
{
{
IkReal evalcond[4];
IkReal x645=((IkReal(0.0300000000000000))*(sj10));
IkReal x646=((IkReal(0.313800000000000))*(cj10));
evalcond[0]=((IkReal(-3.14159265358979))+(IKfmod(((IkReal(3.14159265358979))+(j9)), IkReal(6.28318530717959))));
evalcond[1]=((IkReal(0.190270440000000))+(((IkReal(-0.0368280000000000))*(sj10)))+(((IkReal(0.186480000000000))*(cj10)))+(((IkReal(-1.00000000000000))*(pp))));
evalcond[2]=((IkReal(0.300000000000000))+(((IkReal(-1.00000000000000))*(x645)))+(pz)+(x646));
evalcond[3]=((IkReal(-0.300000000000000))+(((IkReal(-1.00000000000000))*(pz)))+(((IkReal(-1.00000000000000))*(x646)))+(x645));
if( IKabs(evalcond[0]) < 0.0000010000000000  && IKabs(evalcond[1]) < 0.0000010000000000  && IKabs(evalcond[2]) < 0.0000010000000000  && IKabs(evalcond[3]) < 0.0000010000000000  )
{
{
IkReal dummyeval[1];
IkReal gconst42;
gconst42=IKsign((((px)*(px))+((py)*(py))));
dummyeval[0]=(((px)*(px))+((py)*(py)));
if( IKabs(dummyeval[0]) < 0.0000010000000000  )
{
{
IkReal dummyeval[1];
IkReal gconst43;
gconst43=IKsign(((((IkReal(-3.00000000000000))*((px)*(px))))+(((IkReal(-3.00000000000000))*((py)*(py))))));
dummyeval[0]=((((IkReal(-1.00000000000000))*((px)*(px))))+(((IkReal(-1.00000000000000))*((py)*(py)))));
if( IKabs(dummyeval[0]) < 0.0000010000000000  )
{
continue;

} else
{
{
IkReal j7array[1], cj7array[1], sj7array[1];
bool j7valid[1]={false};
_nj7 = 1;
IkReal x647=((IkReal(50.0000000000000))*(pp));
IkReal x648=((IkReal(30.0000000000000))*(pz));
if( IKabs(((gconst43)*(((((IkReal(0.423522000000000))*(py)))+(((IkReal(-1.00000000000000))*(py)*(x647)))+(((IkReal(-1.00000000000000))*(py)*(x648))))))) < IKFAST_ATAN2_MAGTHRESH && IKabs(((gconst43)*(((((IkReal(0.423522000000000))*(px)))+(((IkReal(-1.00000000000000))*(px)*(x647)))+(((IkReal(-1.00000000000000))*(px)*(x648))))))) < IKFAST_ATAN2_MAGTHRESH )
    continue;
j7array[0]=IKatan2(((gconst43)*(((((IkReal(0.423522000000000))*(py)))+(((IkReal(-1.00000000000000))*(py)*(x647)))+(((IkReal(-1.00000000000000))*(py)*(x648)))))), ((gconst43)*(((((IkReal(0.423522000000000))*(px)))+(((IkReal(-1.00000000000000))*(px)*(x647)))+(((IkReal(-1.00000000000000))*(px)*(x648)))))));
sj7array[0]=IKsin(j7array[0]);
cj7array[0]=IKcos(j7array[0]);
if( j7array[0] > IKPI )
{
    j7array[0]-=IK2PI;
}
else if( j7array[0] < -IKPI )
{    j7array[0]+=IK2PI;
}
j7valid[0] = true;
for(int ij7 = 0; ij7 < 1; ++ij7)
{
if( !j7valid[ij7] )
{
    continue;
}
_ij7[0] = ij7; _ij7[1] = -1;
for(int iij7 = ij7+1; iij7 < 1; ++iij7)
{
if( j7valid[iij7] && IKabs(cj7array[ij7]-cj7array[iij7]) < IKFAST_SOLUTION_THRESH && IKabs(sj7array[ij7]-sj7array[iij7]) < IKFAST_SOLUTION_THRESH )
{
    j7valid[iij7]=false; _ij7[1] = iij7; break; 
}
}
j7 = j7array[ij7]; cj7 = cj7array[ij7]; sj7 = sj7array[ij7];
{
IkReal evalcond[3];
IkReal x649=IKsin(j7);
IkReal x650=IKcos(j7);
IkReal x651=((IkReal(1.00000000000000))*(py));
IkReal x652=((px)*(x650));
evalcond[0]=((IkReal(0.0300000000000000))+(((IkReal(-0.313800000000000))*(sj10)))+(((IkReal(-1.00000000000000))*(x652)))+(((IkReal(-1.00000000000000))*(x649)*(x651)))+(((IkReal(-0.0300000000000000))*(cj10))));
evalcond[1]=((((px)*(x649)))+(((IkReal(-1.00000000000000))*(x650)*(x651))));
evalcond[2]=((IkReal(0.00847044000000000))+(((IkReal(0.0600000000000000))*(py)*(x649)))+(((IkReal(-0.600000000000000))*(pz)))+(((IkReal(0.0600000000000000))*(x652)))+(((IkReal(-1.00000000000000))*(pp))));
if( IKabs(evalcond[0]) > 0.000001  || IKabs(evalcond[1]) > 0.000001  || IKabs(evalcond[2]) > 0.000001  )
{
continue;
}
}

rotationfunction0(solutions);
}
}

}

}

} else
{
{
IkReal j7array[1], cj7array[1], sj7array[1];
bool j7valid[1]={false};
_nj7 = 1;
IkReal x653=((IkReal(0.0300000000000000))*(px));
IkReal x654=((IkReal(0.313800000000000))*(sj10));
IkReal x655=((IkReal(0.0300000000000000))*(py));
if( IKabs(((gconst42)*(((((IkReal(-1.00000000000000))*(cj10)*(x655)))+(x655)+(((IkReal(-1.00000000000000))*(py)*(x654))))))) < IKFAST_ATAN2_MAGTHRESH && IKabs(((gconst42)*(((((IkReal(-1.00000000000000))*(px)*(x654)))+(((IkReal(-1.00000000000000))*(cj10)*(x653)))+(x653))))) < IKFAST_ATAN2_MAGTHRESH )
    continue;
j7array[0]=IKatan2(((gconst42)*(((((IkReal(-1.00000000000000))*(cj10)*(x655)))+(x655)+(((IkReal(-1.00000000000000))*(py)*(x654)))))), ((gconst42)*(((((IkReal(-1.00000000000000))*(px)*(x654)))+(((IkReal(-1.00000000000000))*(cj10)*(x653)))+(x653)))));
sj7array[0]=IKsin(j7array[0]);
cj7array[0]=IKcos(j7array[0]);
if( j7array[0] > IKPI )
{
    j7array[0]-=IK2PI;
}
else if( j7array[0] < -IKPI )
{    j7array[0]+=IK2PI;
}
j7valid[0] = true;
for(int ij7 = 0; ij7 < 1; ++ij7)
{
if( !j7valid[ij7] )
{
    continue;
}
_ij7[0] = ij7; _ij7[1] = -1;
for(int iij7 = ij7+1; iij7 < 1; ++iij7)
{
if( j7valid[iij7] && IKabs(cj7array[ij7]-cj7array[iij7]) < IKFAST_SOLUTION_THRESH && IKabs(sj7array[ij7]-sj7array[iij7]) < IKFAST_SOLUTION_THRESH )
{
    j7valid[iij7]=false; _ij7[1] = iij7; break; 
}
}
j7 = j7array[ij7]; cj7 = cj7array[ij7]; sj7 = sj7array[ij7];
{
IkReal evalcond[3];
IkReal x656=IKsin(j7);
IkReal x657=IKcos(j7);
IkReal x658=((IkReal(1.00000000000000))*(py));
IkReal x659=((px)*(x657));
evalcond[0]=((IkReal(0.0300000000000000))+(((IkReal(-0.313800000000000))*(sj10)))+(((IkReal(-1.00000000000000))*(x659)))+(((IkReal(-1.00000000000000))*(x656)*(x658)))+(((IkReal(-0.0300000000000000))*(cj10))));
evalcond[1]=((((IkReal(-1.00000000000000))*(x657)*(x658)))+(((px)*(x656))));
evalcond[2]=((IkReal(0.00847044000000000))+(((IkReal(-0.600000000000000))*(pz)))+(((IkReal(0.0600000000000000))*(py)*(x656)))+(((IkReal(0.0600000000000000))*(x659)))+(((IkReal(-1.00000000000000))*(pp))));
if( IKabs(evalcond[0]) > 0.000001  || IKabs(evalcond[1]) > 0.000001  || IKabs(evalcond[2]) > 0.000001  )
{
continue;
}
}

rotationfunction0(solutions);
}
}

}

}

} else
{
IkReal x660=((IkReal(0.0300000000000000))*(sj10));
IkReal x661=((IkReal(0.313800000000000))*(cj10));
evalcond[0]=((IkReal(-3.14159265358979))+(IKfmod(((IkReal(1.11022302462516e-16))+(j9)), IkReal(6.28318530717959))));
evalcond[1]=((IkReal(0.190270440000000))+(((IkReal(-0.0368280000000000))*(sj10)))+(((IkReal(0.186480000000000))*(cj10)))+(((IkReal(-1.00000000000000))*(pp))));
evalcond[2]=((IkReal(0.300000000000000))+(((IkReal(-1.00000000000000))*(x660)))+(pz)+(x661));
evalcond[3]=((IkReal(-0.300000000000000))+(((IkReal(-1.00000000000000))*(pz)))+(((IkReal(-1.00000000000000))*(x661)))+(x660));
if( IKabs(evalcond[0]) < 0.0000010000000000  && IKabs(evalcond[1]) < 0.0000010000000000  && IKabs(evalcond[2]) < 0.0000010000000000  && IKabs(evalcond[3]) < 0.0000010000000000  )
{
{
IkReal dummyeval[1];
IkReal gconst44;
gconst44=IKsign((((px)*(px))+((py)*(py))));
dummyeval[0]=(((px)*(px))+((py)*(py)));
if( IKabs(dummyeval[0]) < 0.0000010000000000  )
{
{
IkReal dummyeval[1];
IkReal gconst45;
gconst45=IKsign(((((IkReal(3.00000000000000))*((py)*(py))))+(((IkReal(3.00000000000000))*((px)*(px))))));
dummyeval[0]=(((px)*(px))+((py)*(py)));
if( IKabs(dummyeval[0]) < 0.0000010000000000  )
{
continue;

} else
{
{
IkReal j7array[1], cj7array[1], sj7array[1];
bool j7valid[1]={false};
_nj7 = 1;
IkReal x662=((IkReal(50.0000000000000))*(pp));
IkReal x663=((IkReal(30.0000000000000))*(pz));
if( IKabs(((gconst45)*(((((IkReal(0.423522000000000))*(py)))+(((IkReal(-1.00000000000000))*(py)*(x662)))+(((IkReal(-1.00000000000000))*(py)*(x663))))))) < IKFAST_ATAN2_MAGTHRESH && IKabs(((gconst45)*(((((IkReal(0.423522000000000))*(px)))+(((IkReal(-1.00000000000000))*(px)*(x663)))+(((IkReal(-1.00000000000000))*(px)*(x662))))))) < IKFAST_ATAN2_MAGTHRESH )
    continue;
j7array[0]=IKatan2(((gconst45)*(((((IkReal(0.423522000000000))*(py)))+(((IkReal(-1.00000000000000))*(py)*(x662)))+(((IkReal(-1.00000000000000))*(py)*(x663)))))), ((gconst45)*(((((IkReal(0.423522000000000))*(px)))+(((IkReal(-1.00000000000000))*(px)*(x663)))+(((IkReal(-1.00000000000000))*(px)*(x662)))))));
sj7array[0]=IKsin(j7array[0]);
cj7array[0]=IKcos(j7array[0]);
if( j7array[0] > IKPI )
{
    j7array[0]-=IK2PI;
}
else if( j7array[0] < -IKPI )
{    j7array[0]+=IK2PI;
}
j7valid[0] = true;
for(int ij7 = 0; ij7 < 1; ++ij7)
{
if( !j7valid[ij7] )
{
    continue;
}
_ij7[0] = ij7; _ij7[1] = -1;
for(int iij7 = ij7+1; iij7 < 1; ++iij7)
{
if( j7valid[iij7] && IKabs(cj7array[ij7]-cj7array[iij7]) < IKFAST_SOLUTION_THRESH && IKabs(sj7array[ij7]-sj7array[iij7]) < IKFAST_SOLUTION_THRESH )
{
    j7valid[iij7]=false; _ij7[1] = iij7; break; 
}
}
j7 = j7array[ij7]; cj7 = cj7array[ij7]; sj7 = sj7array[ij7];
{
IkReal evalcond[3];
IkReal x664=IKcos(j7);
IkReal x665=IKsin(j7);
IkReal x666=((IkReal(1.00000000000000))*(px));
IkReal x667=((py)*(x665));
evalcond[0]=((IkReal(-0.0300000000000000))+(((IkReal(0.313800000000000))*(sj10)))+(((IkReal(-1.00000000000000))*(x667)))+(((IkReal(0.0300000000000000))*(cj10)))+(((IkReal(-1.00000000000000))*(x664)*(x666))));
evalcond[1]=((((IkReal(-1.00000000000000))*(x665)*(x666)))+(((py)*(x664))));
evalcond[2]=((IkReal(0.00847044000000000))+(((IkReal(-0.600000000000000))*(pz)))+(((IkReal(-1.00000000000000))*(pp)))+(((IkReal(-0.0600000000000000))*(px)*(x664)))+(((IkReal(-0.0600000000000000))*(x667))));
if( IKabs(evalcond[0]) > 0.000001  || IKabs(evalcond[1]) > 0.000001  || IKabs(evalcond[2]) > 0.000001  )
{
continue;
}
}

rotationfunction0(solutions);
}
}

}

}

} else
{
{
IkReal j7array[1], cj7array[1], sj7array[1];
bool j7valid[1]={false};
_nj7 = 1;
IkReal x668=((IkReal(0.0300000000000000))*(px));
IkReal x669=((IkReal(0.313800000000000))*(sj10));
IkReal x670=((IkReal(0.0300000000000000))*(py));
if( IKabs(((gconst44)*(((((cj10)*(x670)))+(((py)*(x669)))+(((IkReal(-1.00000000000000))*(x670))))))) < IKFAST_ATAN2_MAGTHRESH && IKabs(((gconst44)*(((((px)*(x669)))+(((IkReal(-1.00000000000000))*(x668)))+(((cj10)*(x668))))))) < IKFAST_ATAN2_MAGTHRESH )
    continue;
j7array[0]=IKatan2(((gconst44)*(((((cj10)*(x670)))+(((py)*(x669)))+(((IkReal(-1.00000000000000))*(x670)))))), ((gconst44)*(((((px)*(x669)))+(((IkReal(-1.00000000000000))*(x668)))+(((cj10)*(x668)))))));
sj7array[0]=IKsin(j7array[0]);
cj7array[0]=IKcos(j7array[0]);
if( j7array[0] > IKPI )
{
    j7array[0]-=IK2PI;
}
else if( j7array[0] < -IKPI )
{    j7array[0]+=IK2PI;
}
j7valid[0] = true;
for(int ij7 = 0; ij7 < 1; ++ij7)
{
if( !j7valid[ij7] )
{
    continue;
}
_ij7[0] = ij7; _ij7[1] = -1;
for(int iij7 = ij7+1; iij7 < 1; ++iij7)
{
if( j7valid[iij7] && IKabs(cj7array[ij7]-cj7array[iij7]) < IKFAST_SOLUTION_THRESH && IKabs(sj7array[ij7]-sj7array[iij7]) < IKFAST_SOLUTION_THRESH )
{
    j7valid[iij7]=false; _ij7[1] = iij7; break; 
}
}
j7 = j7array[ij7]; cj7 = cj7array[ij7]; sj7 = sj7array[ij7];
{
IkReal evalcond[3];
IkReal x671=IKcos(j7);
IkReal x672=IKsin(j7);
IkReal x673=((IkReal(1.00000000000000))*(px));
IkReal x674=((py)*(x672));
evalcond[0]=((IkReal(-0.0300000000000000))+(((IkReal(0.313800000000000))*(sj10)))+(((IkReal(0.0300000000000000))*(cj10)))+(((IkReal(-1.00000000000000))*(x674)))+(((IkReal(-1.00000000000000))*(x671)*(x673))));
evalcond[1]=((((py)*(x671)))+(((IkReal(-1.00000000000000))*(x672)*(x673))));
evalcond[2]=((IkReal(0.00847044000000000))+(((IkReal(-0.0600000000000000))*(px)*(x671)))+(((IkReal(-0.600000000000000))*(pz)))+(((IkReal(-1.00000000000000))*(pp)))+(((IkReal(-0.0600000000000000))*(x674))));
if( IKabs(evalcond[0]) > 0.000001  || IKabs(evalcond[1]) > 0.000001  || IKabs(evalcond[2]) > 0.000001  )
{
continue;
}
}

rotationfunction0(solutions);
}
}

}

}

} else
{
if( 1 )
{
continue;

} else
{
}
}
}
}

} else
{
{
IkReal j7array[1], cj7array[1], sj7array[1];
bool j7valid[1]={false};
_nj7 = 1;
IkReal x675=(sj9)*(sj9);
IkReal x676=((IkReal(0.0300000000000000))*(py));
IkReal x677=((cj9)*(sj9));
IkReal x678=((IkReal(0.0300000000000000))*(px));
IkReal x679=((cj10)*(x675));
IkReal x680=((IkReal(0.313800000000000))*(py)*(sj10));
IkReal x681=((IkReal(0.313800000000000))*(px)*(sj10));
if( IKabs(((gconst41)*(((((IkReal(-1.00000000000000))*(x678)*(x679)))+(((cj10)*(x676)*(x677)))+(((IkReal(-1.00000000000000))*(x675)*(x681)))+(((x677)*(x680)))+(((IkReal(-1.00000000000000))*(x676)*(x677)))+(((x675)*(x678))))))) < IKFAST_ATAN2_MAGTHRESH && IKabs(((gconst41)*(((((IkReal(-1.00000000000000))*(x675)*(x676)))+(((x676)*(x679)))+(((x677)*(x681)))+(((x675)*(x680)))+(((IkReal(-1.00000000000000))*(x677)*(x678)))+(((cj10)*(x677)*(x678))))))) < IKFAST_ATAN2_MAGTHRESH )
    continue;
j7array[0]=IKatan2(((gconst41)*(((((IkReal(-1.00000000000000))*(x678)*(x679)))+(((cj10)*(x676)*(x677)))+(((IkReal(-1.00000000000000))*(x675)*(x681)))+(((x677)*(x680)))+(((IkReal(-1.00000000000000))*(x676)*(x677)))+(((x675)*(x678)))))), ((gconst41)*(((((IkReal(-1.00000000000000))*(x675)*(x676)))+(((x676)*(x679)))+(((x677)*(x681)))+(((x675)*(x680)))+(((IkReal(-1.00000000000000))*(x677)*(x678)))+(((cj10)*(x677)*(x678)))))));
sj7array[0]=IKsin(j7array[0]);
cj7array[0]=IKcos(j7array[0]);
if( j7array[0] > IKPI )
{
    j7array[0]-=IK2PI;
}
else if( j7array[0] < -IKPI )
{    j7array[0]+=IK2PI;
}
j7valid[0] = true;
for(int ij7 = 0; ij7 < 1; ++ij7)
{
if( !j7valid[ij7] )
{
    continue;
}
_ij7[0] = ij7; _ij7[1] = -1;
for(int iij7 = ij7+1; iij7 < 1; ++iij7)
{
if( j7valid[iij7] && IKabs(cj7array[ij7]-cj7array[iij7]) < IKFAST_SOLUTION_THRESH && IKabs(sj7array[ij7]-sj7array[iij7]) < IKFAST_SOLUTION_THRESH )
{
    j7valid[iij7]=false; _ij7[1] = iij7; break; 
}
}
j7 = j7array[ij7]; cj7 = cj7array[ij7]; sj7 = sj7array[ij7];
{
IkReal evalcond[5];
IkReal x682=IKsin(j7);
IkReal x683=IKcos(j7);
IkReal x684=((IkReal(0.0600000000000000))*(sj9));
IkReal x685=((px)*(sj9));
IkReal x686=((IkReal(0.0300000000000000))*(cj10));
IkReal x687=((IkReal(0.313800000000000))*(sj10));
IkReal x688=((IkReal(0.0600000000000000))*(cj9));
IkReal x689=((IkReal(1.00000000000000))*(cj9));
IkReal x690=((py)*(x683));
IkReal x691=((px)*(x683));
IkReal x692=((py)*(x682));
IkReal x693=((px)*(x682));
evalcond[0]=((((IkReal(-1.00000000000000))*(cj9)*(x687)))+(((IkReal(-1.00000000000000))*(cj9)*(x686)))+(((IkReal(0.0300000000000000))*(cj9)))+(((IkReal(-1.00000000000000))*(x691)))+(((IkReal(-1.00000000000000))*(x692))));
evalcond[1]=((((cj9)*(x693)))+(((x683)*(x685)))+(((IkReal(-1.00000000000000))*(x689)*(x690)))+(((sj9)*(x692))));
evalcond[2]=((IkReal(0.0300000000000000))+(((IkReal(-1.00000000000000))*(x686)))+(((IkReal(-1.00000000000000))*(x687)))+(((x682)*(x685)))+(((IkReal(-1.00000000000000))*(x689)*(x692)))+(((IkReal(-1.00000000000000))*(x689)*(x691)))+(((IkReal(-1.00000000000000))*(sj9)*(x690))));
evalcond[3]=((((IkReal(0.0300000000000000))*(sj9)))+(((IkReal(-1.00000000000000))*(sj9)*(x686)))+(((IkReal(-1.00000000000000))*(sj9)*(x687)))+(x693)+(((IkReal(-1.00000000000000))*(x690))));
evalcond[4]=((IkReal(0.00847044000000000))+(((IkReal(-1.00000000000000))*(x684)*(x693)))+(((x688)*(x691)))+(((x688)*(x692)))+(((IkReal(-0.600000000000000))*(pz)))+(((x684)*(x690)))+(((IkReal(-1.00000000000000))*(pp))));
if( IKabs(evalcond[0]) > 0.000001  || IKabs(evalcond[1]) > 0.000001  || IKabs(evalcond[2]) > 0.000001  || IKabs(evalcond[3]) > 0.000001  || IKabs(evalcond[4]) > 0.000001  )
{
continue;
}
}

rotationfunction0(solutions);
}
}

}

}

} else
{
{
IkReal j7array[1], cj7array[1], sj7array[1];
bool j7valid[1]={false};
_nj7 = 1;
IkReal x694=((IkReal(0.0300000000000000))*(sj9));
IkReal x695=((IkReal(0.0300000000000000))*(cj9));
IkReal x696=((cj10)*(x695));
IkReal x697=((IkReal(0.313800000000000))*(px)*(sj10));
IkReal x698=((IkReal(0.313800000000000))*(py)*(sj10));
if( IKabs(((gconst40)*(((((IkReal(-1.00000000000000))*(cj9)*(x698)))+(((py)*(x695)))+(((IkReal(-1.00000000000000))*(px)*(x694)))+(((cj10)*(px)*(x694)))+(((IkReal(-1.00000000000000))*(py)*(x696)))+(((sj9)*(x697))))))) < IKFAST_ATAN2_MAGTHRESH && IKabs(((gconst40)*(((((IkReal(-1.00000000000000))*(cj10)*(py)*(x694)))+(((IkReal(-1.00000000000000))*(cj9)*(x697)))+(((py)*(x694)))+(((IkReal(-1.00000000000000))*(px)*(x696)))+(((px)*(x695)))+(((IkReal(-1.00000000000000))*(sj9)*(x698))))))) < IKFAST_ATAN2_MAGTHRESH )
    continue;
j7array[0]=IKatan2(((gconst40)*(((((IkReal(-1.00000000000000))*(cj9)*(x698)))+(((py)*(x695)))+(((IkReal(-1.00000000000000))*(px)*(x694)))+(((cj10)*(px)*(x694)))+(((IkReal(-1.00000000000000))*(py)*(x696)))+(((sj9)*(x697)))))), ((gconst40)*(((((IkReal(-1.00000000000000))*(cj10)*(py)*(x694)))+(((IkReal(-1.00000000000000))*(cj9)*(x697)))+(((py)*(x694)))+(((IkReal(-1.00000000000000))*(px)*(x696)))+(((px)*(x695)))+(((IkReal(-1.00000000000000))*(sj9)*(x698)))))));
sj7array[0]=IKsin(j7array[0]);
cj7array[0]=IKcos(j7array[0]);
if( j7array[0] > IKPI )
{
    j7array[0]-=IK2PI;
}
else if( j7array[0] < -IKPI )
{    j7array[0]+=IK2PI;
}
j7valid[0] = true;
for(int ij7 = 0; ij7 < 1; ++ij7)
{
if( !j7valid[ij7] )
{
    continue;
}
_ij7[0] = ij7; _ij7[1] = -1;
for(int iij7 = ij7+1; iij7 < 1; ++iij7)
{
if( j7valid[iij7] && IKabs(cj7array[ij7]-cj7array[iij7]) < IKFAST_SOLUTION_THRESH && IKabs(sj7array[ij7]-sj7array[iij7]) < IKFAST_SOLUTION_THRESH )
{
    j7valid[iij7]=false; _ij7[1] = iij7; break; 
}
}
j7 = j7array[ij7]; cj7 = cj7array[ij7]; sj7 = sj7array[ij7];
{
IkReal evalcond[5];
IkReal x699=IKsin(j7);
IkReal x700=IKcos(j7);
IkReal x701=((IkReal(0.0600000000000000))*(sj9));
IkReal x702=((px)*(sj9));
IkReal x703=((IkReal(0.0300000000000000))*(cj10));
IkReal x704=((IkReal(0.313800000000000))*(sj10));
IkReal x705=((IkReal(0.0600000000000000))*(cj9));
IkReal x706=((IkReal(1.00000000000000))*(cj9));
IkReal x707=((py)*(x700));
IkReal x708=((px)*(x700));
IkReal x709=((py)*(x699));
IkReal x710=((px)*(x699));
evalcond[0]=((((IkReal(-1.00000000000000))*(cj9)*(x703)))+(((IkReal(-1.00000000000000))*(cj9)*(x704)))+(((IkReal(0.0300000000000000))*(cj9)))+(((IkReal(-1.00000000000000))*(x709)))+(((IkReal(-1.00000000000000))*(x708))));
evalcond[1]=((((IkReal(-1.00000000000000))*(x706)*(x707)))+(((sj9)*(x709)))+(((x700)*(x702)))+(((cj9)*(x710))));
evalcond[2]=((IkReal(0.0300000000000000))+(((IkReal(-1.00000000000000))*(x706)*(x709)))+(((IkReal(-1.00000000000000))*(x706)*(x708)))+(((IkReal(-1.00000000000000))*(sj9)*(x707)))+(((IkReal(-1.00000000000000))*(x703)))+(((IkReal(-1.00000000000000))*(x704)))+(((x699)*(x702))));
evalcond[3]=((((IkReal(-1.00000000000000))*(sj9)*(x703)))+(((IkReal(-1.00000000000000))*(sj9)*(x704)))+(((IkReal(0.0300000000000000))*(sj9)))+(((IkReal(-1.00000000000000))*(x707)))+(x710));
evalcond[4]=((IkReal(0.00847044000000000))+(((x701)*(x707)))+(((IkReal(-0.600000000000000))*(pz)))+(((IkReal(-1.00000000000000))*(pp)))+(((IkReal(-1.00000000000000))*(x701)*(x710)))+(((x705)*(x709)))+(((x705)*(x708))));
if( IKabs(evalcond[0]) > 0.000001  || IKabs(evalcond[1]) > 0.000001  || IKabs(evalcond[2]) > 0.000001  || IKabs(evalcond[3]) > 0.000001  || IKabs(evalcond[4]) > 0.000001  )
{
continue;
}
}

rotationfunction0(solutions);
}
}

}

}

} else
{
if( 1 )
{
continue;

} else
{
}
}
}
}
}
}
}
}

} else
{
{
IkReal j7array[1], cj7array[1], sj7array[1];
bool j7valid[1]={false};
_nj7 = 1;
IkReal x711=(cj9)*(cj9);
IkReal x712=((IkReal(0.313800000000000))*(sj10));
IkReal x713=((cj10)*(px));
IkReal x714=((cj9)*(sj9));
IkReal x715=((py)*(x714));
IkReal x716=((sj8)*(x711));
IkReal x717=((cj8)*(cj9)*(pz));
IkReal x718=((IkReal(0.0300000000000000))*(x716));
if( IKabs(((gconst1)*(((((IkReal(-1.00000000000000))*(py)*(x712)*(x716)))+(((IkReal(0.0300000000000000))*(px)*(x714)))+(((IkReal(-1.00000000000000))*(px)*(x717)))+(((IkReal(-0.0300000000000000))*(x713)*(x714)))+(((IkReal(-1.00000000000000))*(cj10)*(py)*(x718)))+(((IkReal(-1.00000000000000))*(px)*(x712)*(x714)))+(((py)*(x718))))))) < IKFAST_ATAN2_MAGTHRESH && IKabs(((gconst1)*(((((IkReal(-0.0300000000000000))*(x715)))+(((px)*(x718)))+(((IkReal(-1.00000000000000))*(px)*(x712)*(x716)))+(((IkReal(-1.00000000000000))*(x713)*(x718)))+(((IkReal(0.0300000000000000))*(cj10)*(x715)))+(((py)*(x717)))+(((x712)*(x715))))))) < IKFAST_ATAN2_MAGTHRESH )
    continue;
j7array[0]=IKatan2(((gconst1)*(((((IkReal(-1.00000000000000))*(py)*(x712)*(x716)))+(((IkReal(0.0300000000000000))*(px)*(x714)))+(((IkReal(-1.00000000000000))*(px)*(x717)))+(((IkReal(-0.0300000000000000))*(x713)*(x714)))+(((IkReal(-1.00000000000000))*(cj10)*(py)*(x718)))+(((IkReal(-1.00000000000000))*(px)*(x712)*(x714)))+(((py)*(x718)))))), ((gconst1)*(((((IkReal(-0.0300000000000000))*(x715)))+(((px)*(x718)))+(((IkReal(-1.00000000000000))*(px)*(x712)*(x716)))+(((IkReal(-1.00000000000000))*(x713)*(x718)))+(((IkReal(0.0300000000000000))*(cj10)*(x715)))+(((py)*(x717)))+(((x712)*(x715)))))));
sj7array[0]=IKsin(j7array[0]);
cj7array[0]=IKcos(j7array[0]);
if( j7array[0] > IKPI )
{
    j7array[0]-=IK2PI;
}
else if( j7array[0] < -IKPI )
{    j7array[0]+=IK2PI;
}
j7valid[0] = true;
for(int ij7 = 0; ij7 < 1; ++ij7)
{
if( !j7valid[ij7] )
{
    continue;
}
_ij7[0] = ij7; _ij7[1] = -1;
for(int iij7 = ij7+1; iij7 < 1; ++iij7)
{
if( j7valid[iij7] && IKabs(cj7array[ij7]-cj7array[iij7]) < IKFAST_SOLUTION_THRESH && IKabs(sj7array[ij7]-sj7array[iij7]) < IKFAST_SOLUTION_THRESH )
{
    j7valid[iij7]=false; _ij7[1] = iij7; break; 
}
}
j7 = j7array[ij7]; cj7 = cj7array[ij7]; sj7 = sj7array[ij7];
{
IkReal evalcond[6];
IkReal x719=IKsin(j7);
IkReal x720=IKcos(j7);
IkReal x721=((sj8)*(sj9));
IkReal x722=((IkReal(1.00000000000000))*(cj8));
IkReal x723=((IkReal(0.600000000000000))*(cj8));
IkReal x724=((IkReal(0.0300000000000000))*(cj10));
IkReal x725=((IkReal(0.313800000000000))*(sj10));
IkReal x726=((IkReal(0.0600000000000000))*(cj9));
IkReal x727=((IkReal(0.0300000000000000))*(sj10));
IkReal x728=((IkReal(1.00000000000000))*(cj9));
IkReal x729=((pz)*(sj9));
IkReal x730=((IkReal(0.313800000000000))*(cj10));
IkReal x731=((pz)*(sj8));
IkReal x732=((py)*(x720));
IkReal x733=((px)*(x720));
IkReal x734=((px)*(x719));
IkReal x735=((py)*(x719));
evalcond[0]=((((IkReal(0.0300000000000000))*(cj9)))+(((IkReal(-1.00000000000000))*(x735)))+(((IkReal(-1.00000000000000))*(x733)))+(((IkReal(-1.00000000000000))*(cj9)*(x724)))+(((IkReal(-1.00000000000000))*(cj9)*(x725))));
evalcond[1]=((IkReal(0.300000000000000))+(((IkReal(-1.00000000000000))*(x722)*(x732)))+(((IkReal(-1.00000000000000))*(x731)))+(((IkReal(-1.00000000000000))*(x727)))+(x730)+(((cj8)*(x734))));
evalcond[2]=((((sj9)*(x733)))+(((sj9)*(x735)))+(((cj9)*(sj8)*(x732)))+(((IkReal(-1.00000000000000))*(sj8)*(x728)*(x734)))+(((IkReal(-1.00000000000000))*(cj9)*(pz)*(x722))));
evalcond[3]=((IkReal(0.0300000000000000))+(((x721)*(x732)))+(((IkReal(-1.00000000000000))*(x722)*(x729)))+(((IkReal(-1.00000000000000))*(x725)))+(((IkReal(-1.00000000000000))*(x724)))+(((IkReal(-1.00000000000000))*(x728)*(x735)))+(((IkReal(-1.00000000000000))*(x728)*(x733)))+(((IkReal(-1.00000000000000))*(x721)*(x734))));
evalcond[4]=((((x721)*(x725)))+(((x721)*(x724)))+(((IkReal(-0.0300000000000000))*(x721)))+(((IkReal(-1.00000000000000))*(cj8)*(x727)))+(((IkReal(-1.00000000000000))*(x732)))+(x734)+(((cj8)*(x730)))+(((IkReal(0.300000000000000))*(cj8))));
evalcond[5]=((IkReal(0.00847044000000000))+(((IkReal(-1.00000000000000))*(x723)*(x734)))+(((x723)*(x732)))+(((IkReal(-0.0600000000000000))*(x721)*(x732)))+(((x726)*(x735)))+(((x726)*(x733)))+(((IkReal(0.600000000000000))*(x731)))+(((IkReal(-1.00000000000000))*(pp)))+(((IkReal(0.0600000000000000))*(cj8)*(x729)))+(((IkReal(0.0600000000000000))*(x721)*(x734))));
if( IKabs(evalcond[0]) > 0.000001  || IKabs(evalcond[1]) > 0.000001  || IKabs(evalcond[2]) > 0.000001  || IKabs(evalcond[3]) > 0.000001  || IKabs(evalcond[4]) > 0.000001  || IKabs(evalcond[5]) > 0.000001  )
{
continue;
}
}

rotationfunction0(solutions);
}
}

}

}

} else
{
{
IkReal j7array[1], cj7array[1], sj7array[1];
bool j7valid[1]={false};
_nj7 = 1;
IkReal x736=((pz)*(sj8));
IkReal x737=((IkReal(0.0300000000000000))*(px));
IkReal x738=((cj8)*(cj9));
IkReal x739=((IkReal(0.313800000000000))*(cj10));
IkReal x740=((IkReal(0.0300000000000000))*(py));
IkReal x741=((IkReal(0.313800000000000))*(sj10)*(x738));
if( IKabs(((gconst0)*(((((x738)*(x740)))+(((IkReal(-0.300000000000000))*(px)))+(((IkReal(-1.00000000000000))*(px)*(x739)))+(((IkReal(-1.00000000000000))*(py)*(x741)))+(((px)*(x736)))+(((IkReal(-1.00000000000000))*(cj10)*(x738)*(x740)))+(((sj10)*(x737))))))) < IKFAST_ATAN2_MAGTHRESH && IKabs(((gconst0)*(((((IkReal(-1.00000000000000))*(px)*(x741)))+(((IkReal(-1.00000000000000))*(sj10)*(x740)))+(((IkReal(0.300000000000000))*(py)))+(((py)*(x739)))+(((IkReal(-1.00000000000000))*(cj10)*(x737)*(x738)))+(((IkReal(-1.00000000000000))*(py)*(x736)))+(((x737)*(x738))))))) < IKFAST_ATAN2_MAGTHRESH )
    continue;
j7array[0]=IKatan2(((gconst0)*(((((x738)*(x740)))+(((IkReal(-0.300000000000000))*(px)))+(((IkReal(-1.00000000000000))*(px)*(x739)))+(((IkReal(-1.00000000000000))*(py)*(x741)))+(((px)*(x736)))+(((IkReal(-1.00000000000000))*(cj10)*(x738)*(x740)))+(((sj10)*(x737)))))), ((gconst0)*(((((IkReal(-1.00000000000000))*(px)*(x741)))+(((IkReal(-1.00000000000000))*(sj10)*(x740)))+(((IkReal(0.300000000000000))*(py)))+(((py)*(x739)))+(((IkReal(-1.00000000000000))*(cj10)*(x737)*(x738)))+(((IkReal(-1.00000000000000))*(py)*(x736)))+(((x737)*(x738)))))));
sj7array[0]=IKsin(j7array[0]);
cj7array[0]=IKcos(j7array[0]);
if( j7array[0] > IKPI )
{
    j7array[0]-=IK2PI;
}
else if( j7array[0] < -IKPI )
{    j7array[0]+=IK2PI;
}
j7valid[0] = true;
for(int ij7 = 0; ij7 < 1; ++ij7)
{
if( !j7valid[ij7] )
{
    continue;
}
_ij7[0] = ij7; _ij7[1] = -1;
for(int iij7 = ij7+1; iij7 < 1; ++iij7)
{
if( j7valid[iij7] && IKabs(cj7array[ij7]-cj7array[iij7]) < IKFAST_SOLUTION_THRESH && IKabs(sj7array[ij7]-sj7array[iij7]) < IKFAST_SOLUTION_THRESH )
{
    j7valid[iij7]=false; _ij7[1] = iij7; break; 
}
}
j7 = j7array[ij7]; cj7 = cj7array[ij7]; sj7 = sj7array[ij7];
{
IkReal evalcond[6];
IkReal x742=IKsin(j7);
IkReal x743=IKcos(j7);
IkReal x744=((sj8)*(sj9));
IkReal x745=((IkReal(1.00000000000000))*(cj8));
IkReal x746=((IkReal(0.600000000000000))*(cj8));
IkReal x747=((IkReal(0.0300000000000000))*(cj10));
IkReal x748=((IkReal(0.313800000000000))*(sj10));
IkReal x749=((IkReal(0.0600000000000000))*(cj9));
IkReal x750=((IkReal(0.0300000000000000))*(sj10));
IkReal x751=((IkReal(1.00000000000000))*(cj9));
IkReal x752=((pz)*(sj9));
IkReal x753=((IkReal(0.313800000000000))*(cj10));
IkReal x754=((pz)*(sj8));
IkReal x755=((py)*(x743));
IkReal x756=((px)*(x743));
IkReal x757=((px)*(x742));
IkReal x758=((py)*(x742));
evalcond[0]=((((IkReal(0.0300000000000000))*(cj9)))+(((IkReal(-1.00000000000000))*(x758)))+(((IkReal(-1.00000000000000))*(x756)))+(((IkReal(-1.00000000000000))*(cj9)*(x748)))+(((IkReal(-1.00000000000000))*(cj9)*(x747))));
evalcond[1]=((IkReal(0.300000000000000))+(((IkReal(-1.00000000000000))*(x745)*(x755)))+(((cj8)*(x757)))+(((IkReal(-1.00000000000000))*(x754)))+(x753)+(((IkReal(-1.00000000000000))*(x750))));
evalcond[2]=((((IkReal(-1.00000000000000))*(cj9)*(pz)*(x745)))+(((cj9)*(sj8)*(x755)))+(((IkReal(-1.00000000000000))*(sj8)*(x751)*(x757)))+(((sj9)*(x756)))+(((sj9)*(x758))));
evalcond[3]=((IkReal(0.0300000000000000))+(((IkReal(-1.00000000000000))*(x745)*(x752)))+(((x744)*(x755)))+(((IkReal(-1.00000000000000))*(x751)*(x758)))+(((IkReal(-1.00000000000000))*(x751)*(x756)))+(((IkReal(-1.00000000000000))*(x748)))+(((IkReal(-1.00000000000000))*(x747)))+(((IkReal(-1.00000000000000))*(x744)*(x757))));
evalcond[4]=((((cj8)*(x753)))+(((x744)*(x747)))+(((x744)*(x748)))+(((IkReal(-0.0300000000000000))*(x744)))+(((IkReal(-1.00000000000000))*(x755)))+(x757)+(((IkReal(0.300000000000000))*(cj8)))+(((IkReal(-1.00000000000000))*(cj8)*(x750))));
evalcond[5]=((IkReal(0.00847044000000000))+(((IkReal(0.0600000000000000))*(cj8)*(x752)))+(((IkReal(0.0600000000000000))*(x744)*(x757)))+(((IkReal(-0.0600000000000000))*(x744)*(x755)))+(((IkReal(0.600000000000000))*(x754)))+(((IkReal(-1.00000000000000))*(x746)*(x757)))+(((x746)*(x755)))+(((IkReal(-1.00000000000000))*(pp)))+(((x749)*(x758)))+(((x749)*(x756))));
if( IKabs(evalcond[0]) > 0.000001  || IKabs(evalcond[1]) > 0.000001  || IKabs(evalcond[2]) > 0.000001  || IKabs(evalcond[3]) > 0.000001  || IKabs(evalcond[4]) > 0.000001  || IKabs(evalcond[5]) > 0.000001  )
{
continue;
}
}

rotationfunction0(solutions);
}
}

}

}
}
}

}

}

} else
{
{
IkReal j7array[2], cj7array[2], sj7array[2];
bool j7valid[2]={false};
_nj7 = 2;
IkReal x759=((IkReal(0.0300000000000000))*(cj9));
if( IKabs(((IkReal(-1.00000000000000))*(px))) < IKFAST_ATAN2_MAGTHRESH && IKabs(((IkReal(-1.00000000000000))*(py))) < IKFAST_ATAN2_MAGTHRESH )
    continue;
IkReal x760=((IkReal(1.00000000000000))*(IKatan2(((IkReal(-1.00000000000000))*(px)), ((IkReal(-1.00000000000000))*(py)))));
if( ((((px)*(px))+((py)*(py)))) < (IkReal)-0.00001 )
    continue;
if( (((((IKabs(IKabs(IKsqrt((((px)*(px))+((py)*(py)))))) != 0)?((IkReal)1/(IKabs(IKsqrt((((px)*(px))+((py)*(py))))))):(IkReal)1.0e30))*(((((IkReal(-1.00000000000000))*(cj10)*(x759)))+(((IkReal(-0.313800000000000))*(cj9)*(sj10)))+(x759))))) < -1-IKFAST_SINCOS_THRESH || (((((IKabs(IKabs(IKsqrt((((px)*(px))+((py)*(py)))))) != 0)?((IkReal)1/(IKabs(IKsqrt((((px)*(px))+((py)*(py))))))):(IkReal)1.0e30))*(((((IkReal(-1.00000000000000))*(cj10)*(x759)))+(((IkReal(-0.313800000000000))*(cj9)*(sj10)))+(x759))))) > 1+IKFAST_SINCOS_THRESH )
    continue;
IkReal x761=IKasin(((((IKabs(IKabs(IKsqrt((((px)*(px))+((py)*(py)))))) != 0)?((IkReal)1/(IKabs(IKsqrt((((px)*(px))+((py)*(py))))))):(IkReal)1.0e30))*(((((IkReal(-1.00000000000000))*(cj10)*(x759)))+(((IkReal(-0.313800000000000))*(cj9)*(sj10)))+(x759)))));
j7array[0]=((((IkReal(-1.00000000000000))*(x760)))+(((IkReal(-1.00000000000000))*(x761))));
sj7array[0]=IKsin(j7array[0]);
cj7array[0]=IKcos(j7array[0]);
j7array[1]=((IkReal(3.14159265358979))+(((IkReal(-1.00000000000000))*(x760)))+(x761));
sj7array[1]=IKsin(j7array[1]);
cj7array[1]=IKcos(j7array[1]);
if( j7array[0] > IKPI )
{
    j7array[0]-=IK2PI;
}
else if( j7array[0] < -IKPI )
{    j7array[0]+=IK2PI;
}
j7valid[0] = true;
if( j7array[1] > IKPI )
{
    j7array[1]-=IK2PI;
}
else if( j7array[1] < -IKPI )
{    j7array[1]+=IK2PI;
}
j7valid[1] = true;
for(int ij7 = 0; ij7 < 2; ++ij7)
{
if( !j7valid[ij7] )
{
    continue;
}
_ij7[0] = ij7; _ij7[1] = -1;
for(int iij7 = ij7+1; iij7 < 2; ++iij7)
{
if( j7valid[iij7] && IKabs(cj7array[ij7]-cj7array[iij7]) < IKFAST_SOLUTION_THRESH && IKabs(sj7array[ij7]-sj7array[iij7]) < IKFAST_SOLUTION_THRESH )
{
    j7valid[iij7]=false; _ij7[1] = iij7; break; 
}
}
j7 = j7array[ij7]; cj7 = cj7array[ij7]; sj7 = sj7array[ij7];
{
IkReal evalcond[2];
IkReal x762=(sj9)*(sj9);
IkReal x763=(cj9)*(cj9);
IkReal x764=(px)*(px);
IkReal x765=(py)*(py);
IkReal x766=IKsin(j7);
IkReal x767=IKcos(j7);
IkReal x768=((cj9)*(px));
IkReal x769=((IkReal(0.0300000000000000))*(cj10));
IkReal x770=((px)*(py));
IkReal x771=((IkReal(0.313800000000000))*(sj10));
IkReal x772=((cj9)*(py));
IkReal x773=((IkReal(1.00000000000000))*(x762));
IkReal x774=((IkReal(1.00000000000000))*(x763));
evalcond[0]=((((IkReal(-1.00000000000000))*(x768)*(x771)))+(((IkReal(0.0300000000000000))*(x768)))+(((x766)*(((((IkReal(-1.00000000000000))*(x770)*(x774)))+(((IkReal(-1.00000000000000))*(x770)*(x773)))))))+(((IkReal(-1.00000000000000))*(x768)*(x769)))+(((x767)*(((((IkReal(-1.00000000000000))*(x764)*(x774)))+(((IkReal(-1.00000000000000))*(x764)*(x773))))))));
evalcond[1]=((((x766)*(((((x763)*(x765)))+(((x762)*(x765)))))))+(((x771)*(x772)))+(((x769)*(x772)))+(((IkReal(-0.0300000000000000))*(x772)))+(((x767)*(((((x763)*(x770)))+(((x762)*(x770))))))));
if( IKabs(evalcond[0]) > 0.000001  || IKabs(evalcond[1]) > 0.000001  )
{
continue;
}
}

{
IkReal dummyeval[1];
IkReal gconst47;
IkReal x775=((cj7)*(py));
IkReal x776=((IkReal(0.313800000000000))*(cj10));
IkReal x777=((px)*(sj7));
IkReal x778=((pz)*(sj9));
IkReal x779=((IkReal(0.0300000000000000))*(sj10));
gconst47=IKsign(((((x776)*(x777)))+(((IkReal(0.300000000000000))*(x777)))+(((IkReal(-0.300000000000000))*(x775)))+(((IkReal(-1.00000000000000))*(x775)*(x776)))+(((IkReal(-0.313800000000000))*(sj10)*(x778)))+(((IkReal(-1.00000000000000))*(x777)*(x779)))+(((IkReal(-0.0300000000000000))*(cj10)*(x778)))+(((IkReal(0.0300000000000000))*(x778)))+(((x775)*(x779)))));
IkReal x780=((cj7)*(py));
IkReal x781=((pz)*(sj9));
IkReal x782=((px)*(sj7));
IkReal x783=((IkReal(10.4600000000000))*(cj10));
dummyeval[0]=((((IkReal(-1.00000000000000))*(sj10)*(x782)))+(((x782)*(x783)))+(((IkReal(-10.0000000000000))*(x780)))+(((IkReal(-10.4600000000000))*(sj10)*(x781)))+(((sj10)*(x780)))+(((IkReal(-1.00000000000000))*(cj10)*(x781)))+(x781)+(((IkReal(-1.00000000000000))*(x780)*(x783)))+(((IkReal(10.0000000000000))*(x782))));
if( IKabs(dummyeval[0]) < 0.0000010000000000  )
{
{
IkReal dummyeval[1];
IkReal gconst46;
gconst46=IKsign(((((cj9)*((cj7)*(cj7))*((py)*(py))))+(((cj9)*((pz)*(pz))))+(((cj9)*((px)*(px))*((sj7)*(sj7))))+(((IkReal(-2.00000000000000))*(cj7)*(cj9)*(px)*(py)*(sj7)))));
dummyeval[0]=((((cj9)*((cj7)*(cj7))*((py)*(py))))+(((cj9)*((pz)*(pz))))+(((cj9)*((px)*(px))*((sj7)*(sj7))))+(((IkReal(-2.00000000000000))*(cj7)*(cj9)*(px)*(py)*(sj7))));
if( IKabs(dummyeval[0]) < 0.0000010000000000  )
{
{
IkReal evalcond[4];
IkReal x784=((py)*(sj7));
IkReal x785=((cj7)*(px));
evalcond[0]=((IkReal(-3.14159265358979))+(IKfmod(((IkReal(1.57079632679490))+(j9)), IkReal(6.28318530717959))));
evalcond[1]=((IkReal(0.190270440000000))+(((IkReal(-0.0368280000000000))*(sj10)))+(((IkReal(0.186480000000000))*(cj10)))+(((IkReal(-1.00000000000000))*(pp))));
evalcond[2]=((((IkReal(-1.00000000000000))*(x784)))+(((IkReal(-1.00000000000000))*(x785))));
evalcond[3]=((x784)+(x785));
if( IKabs(evalcond[0]) < 0.0000010000000000  && IKabs(evalcond[1]) < 0.0000010000000000  && IKabs(evalcond[2]) < 0.0000010000000000  && IKabs(evalcond[3]) < 0.0000010000000000  )
{
{
IkReal dummyeval[1];
IkReal gconst49;
IkReal x786=((cj7)*(py));
IkReal x787=((IkReal(0.313800000000000))*(cj10));
IkReal x788=((px)*(sj7));
IkReal x789=((IkReal(0.0300000000000000))*(pz));
IkReal x790=((IkReal(0.0300000000000000))*(sj10));
gconst49=IKsign(((((IkReal(-0.313800000000000))*(pz)*(sj10)))+(((x786)*(x790)))+(((IkReal(-1.00000000000000))*(x788)*(x790)))+(((x787)*(x788)))+(((IkReal(-1.00000000000000))*(x786)*(x787)))+(((IkReal(0.300000000000000))*(x788)))+(((IkReal(-1.00000000000000))*(cj10)*(x789)))+(x789)+(((IkReal(-0.300000000000000))*(x786)))));
IkReal x791=((cj7)*(py));
IkReal x792=((IkReal(10.4600000000000))*(cj10));
IkReal x793=((px)*(sj7));
dummyeval[0]=((((IkReal(10.0000000000000))*(x793)))+(((IkReal(-1.00000000000000))*(sj10)*(x793)))+(((IkReal(-1.00000000000000))*(x791)*(x792)))+(((IkReal(-1.00000000000000))*(cj10)*(pz)))+(pz)+(((x792)*(x793)))+(((IkReal(-10.0000000000000))*(x791)))+(((sj10)*(x791)))+(((IkReal(-10.4600000000000))*(pz)*(sj10))));
if( IKabs(dummyeval[0]) < 0.0000010000000000  )
{
{
IkReal dummyeval[1];
IkReal gconst48;
gconst48=IKsign((((((px)*(px))*((sj7)*(sj7))))+(((IkReal(-2.00000000000000))*(cj7)*(px)*(py)*(sj7)))+((pz)*(pz))+((((cj7)*(cj7))*((py)*(py))))));
dummyeval[0]=(((((px)*(px))*((sj7)*(sj7))))+(((IkReal(-2.00000000000000))*(cj7)*(px)*(py)*(sj7)))+((pz)*(pz))+((((cj7)*(cj7))*((py)*(py)))));
if( IKabs(dummyeval[0]) < 0.0000010000000000  )
{
continue;

} else
{
{
IkReal j8array[1], cj8array[1], sj8array[1];
bool j8valid[1]={false};
_nj8 = 1;
IkReal x794=((px)*(sj7));
IkReal x795=((cj7)*(py));
IkReal x796=((IkReal(0.0300000000000000))*(cj10));
IkReal x797=((IkReal(0.313800000000000))*(sj10));
IkReal x798=((IkReal(0.0300000000000000))*(pz));
IkReal x799=((IkReal(0.313800000000000))*(cj10));
IkReal x800=((IkReal(0.0300000000000000))*(sj10));
if( IKabs(((gconst48)*(((((IkReal(-1.00000000000000))*(x794)*(x796)))+(((IkReal(-1.00000000000000))*(x794)*(x797)))+(((IkReal(-0.0300000000000000))*(x795)))+(((IkReal(0.0300000000000000))*(x794)))+(((IkReal(-1.00000000000000))*(sj10)*(x798)))+(((IkReal(0.300000000000000))*(pz)))+(((pz)*(x799)))+(((x795)*(x797)))+(((x795)*(x796))))))) < IKFAST_ATAN2_MAGTHRESH && IKabs(((gconst48)*(((((IkReal(-1.00000000000000))*(x794)*(x799)))+(((x794)*(x800)))+(((IkReal(-1.00000000000000))*(x795)*(x800)))+(((IkReal(0.300000000000000))*(x795)))+(((IkReal(-1.00000000000000))*(pz)*(x796)))+(((IkReal(-1.00000000000000))*(pz)*(x797)))+(x798)+(((IkReal(-0.300000000000000))*(x794)))+(((x795)*(x799))))))) < IKFAST_ATAN2_MAGTHRESH )
    continue;
j8array[0]=IKatan2(((gconst48)*(((((IkReal(-1.00000000000000))*(x794)*(x796)))+(((IkReal(-1.00000000000000))*(x794)*(x797)))+(((IkReal(-0.0300000000000000))*(x795)))+(((IkReal(0.0300000000000000))*(x794)))+(((IkReal(-1.00000000000000))*(sj10)*(x798)))+(((IkReal(0.300000000000000))*(pz)))+(((pz)*(x799)))+(((x795)*(x797)))+(((x795)*(x796)))))), ((gconst48)*(((((IkReal(-1.00000000000000))*(x794)*(x799)))+(((x794)*(x800)))+(((IkReal(-1.00000000000000))*(x795)*(x800)))+(((IkReal(0.300000000000000))*(x795)))+(((IkReal(-1.00000000000000))*(pz)*(x796)))+(((IkReal(-1.00000000000000))*(pz)*(x797)))+(x798)+(((IkReal(-0.300000000000000))*(x794)))+(((x795)*(x799)))))));
sj8array[0]=IKsin(j8array[0]);
cj8array[0]=IKcos(j8array[0]);
if( j8array[0] > IKPI )
{
    j8array[0]-=IK2PI;
}
else if( j8array[0] < -IKPI )
{    j8array[0]+=IK2PI;
}
j8valid[0] = true;
for(int ij8 = 0; ij8 < 1; ++ij8)
{
if( !j8valid[ij8] )
{
    continue;
}
_ij8[0] = ij8; _ij8[1] = -1;
for(int iij8 = ij8+1; iij8 < 1; ++iij8)
{
if( j8valid[iij8] && IKabs(cj8array[ij8]-cj8array[iij8]) < IKFAST_SOLUTION_THRESH && IKabs(sj8array[ij8]-sj8array[iij8]) < IKFAST_SOLUTION_THRESH )
{
    j8valid[iij8]=false; _ij8[1] = iij8; break; 
}
}
j8 = j8array[ij8]; cj8 = cj8array[ij8]; sj8 = sj8array[ij8];
{
IkReal evalcond[5];
IkReal x801=IKcos(j8);
IkReal x802=IKsin(j8);
IkReal x803=((IkReal(0.313800000000000))*(cj10));
IkReal x804=((cj7)*(py));
IkReal x805=((px)*(sj7));
IkReal x806=((IkReal(0.313800000000000))*(sj10));
IkReal x807=((IkReal(0.0300000000000000))*(cj10));
IkReal x808=((pz)*(x801));
IkReal x809=((IkReal(0.0300000000000000))*(x801));
IkReal x810=((IkReal(0.600000000000000))*(x801));
IkReal x811=((pz)*(x802));
IkReal x812=((IkReal(0.0600000000000000))*(x802));
IkReal x813=((IkReal(0.0300000000000000))*(x802));
evalcond[0]=((IkReal(0.300000000000000))+(((IkReal(-1.00000000000000))*(x801)*(x804)))+(((IkReal(-0.0300000000000000))*(sj10)))+(((IkReal(-1.00000000000000))*(x811)))+(((x801)*(x805)))+(x803));
evalcond[1]=((((IkReal(-1.00000000000000))*(pz)))+(x809)+(((IkReal(-1.00000000000000))*(x801)*(x806)))+(((IkReal(-1.00000000000000))*(x801)*(x807)))+(((x802)*(x803)))+(((IkReal(0.300000000000000))*(x802)))+(((IkReal(-1.00000000000000))*(sj10)*(x813))));
evalcond[2]=((IkReal(0.0300000000000000))+(((IkReal(-1.00000000000000))*(x808)))+(((IkReal(-1.00000000000000))*(x802)*(x805)))+(((IkReal(-1.00000000000000))*(x806)))+(((IkReal(-1.00000000000000))*(x807)))+(((x802)*(x804))));
evalcond[3]=((((IkReal(-1.00000000000000))*(x804)))+(((IkReal(-1.00000000000000))*(x813)))+(((IkReal(-1.00000000000000))*(sj10)*(x809)))+(((x801)*(x803)))+(x805)+(((x802)*(x807)))+(((x802)*(x806)))+(((IkReal(0.300000000000000))*(x801))));
evalcond[4]=((IkReal(0.00847044000000000))+(((IkReal(0.0600000000000000))*(x808)))+(((IkReal(0.600000000000000))*(x811)))+(((IkReal(-1.00000000000000))*(pp)))+(((x804)*(x810)))+(((IkReal(-1.00000000000000))*(x804)*(x812)))+(((IkReal(-1.00000000000000))*(x805)*(x810)))+(((x805)*(x812))));
if( IKabs(evalcond[0]) > 0.000001  || IKabs(evalcond[1]) > 0.000001  || IKabs(evalcond[2]) > 0.000001  || IKabs(evalcond[3]) > 0.000001  || IKabs(evalcond[4]) > 0.000001  )
{
continue;
}
}

rotationfunction0(solutions);
}
}

}

}

} else
{
{
IkReal j8array[1], cj8array[1], sj8array[1];
bool j8valid[1]={false};
_nj8 = 1;
IkReal x814=(sj10)*(sj10);
IkReal x815=(cj10)*(cj10);
IkReal x816=((cj10)*(sj10));
if( IKabs(((gconst49)*(((IkReal(0.00900000000000000))+(((IkReal(-0.0975704400000000))*(x816)))+(((px)*(pz)*(sj7)))+(((IkReal(0.00941400000000000))*(x814)))+(((IkReal(-0.00941400000000000))*(x815)))+(((IkReal(-0.0950400000000000))*(sj10)))+(((IkReal(0.000414000000000000))*(cj10)))+(((IkReal(-1.00000000000000))*(cj7)*(py)*(pz))))))) < IKFAST_ATAN2_MAGTHRESH && IKabs(((gconst49)*(((IkReal(-0.0900000000000000))+(((IkReal(-0.188280000000000))*(cj10)))+(((IkReal(-0.0984704400000000))*(x815)))+(((IkReal(0.0188280000000000))*(x816)))+((pz)*(pz))+(((IkReal(0.0180000000000000))*(sj10)))+(((IkReal(-0.000900000000000000))*(x814))))))) < IKFAST_ATAN2_MAGTHRESH )
    continue;
j8array[0]=IKatan2(((gconst49)*(((IkReal(0.00900000000000000))+(((IkReal(-0.0975704400000000))*(x816)))+(((px)*(pz)*(sj7)))+(((IkReal(0.00941400000000000))*(x814)))+(((IkReal(-0.00941400000000000))*(x815)))+(((IkReal(-0.0950400000000000))*(sj10)))+(((IkReal(0.000414000000000000))*(cj10)))+(((IkReal(-1.00000000000000))*(cj7)*(py)*(pz)))))), ((gconst49)*(((IkReal(-0.0900000000000000))+(((IkReal(-0.188280000000000))*(cj10)))+(((IkReal(-0.0984704400000000))*(x815)))+(((IkReal(0.0188280000000000))*(x816)))+((pz)*(pz))+(((IkReal(0.0180000000000000))*(sj10)))+(((IkReal(-0.000900000000000000))*(x814)))))));
sj8array[0]=IKsin(j8array[0]);
cj8array[0]=IKcos(j8array[0]);
if( j8array[0] > IKPI )
{
    j8array[0]-=IK2PI;
}
else if( j8array[0] < -IKPI )
{    j8array[0]+=IK2PI;
}
j8valid[0] = true;
for(int ij8 = 0; ij8 < 1; ++ij8)
{
if( !j8valid[ij8] )
{
    continue;
}
_ij8[0] = ij8; _ij8[1] = -1;
for(int iij8 = ij8+1; iij8 < 1; ++iij8)
{
if( j8valid[iij8] && IKabs(cj8array[ij8]-cj8array[iij8]) < IKFAST_SOLUTION_THRESH && IKabs(sj8array[ij8]-sj8array[iij8]) < IKFAST_SOLUTION_THRESH )
{
    j8valid[iij8]=false; _ij8[1] = iij8; break; 
}
}
j8 = j8array[ij8]; cj8 = cj8array[ij8]; sj8 = sj8array[ij8];
{
IkReal evalcond[5];
IkReal x817=IKcos(j8);
IkReal x818=IKsin(j8);
IkReal x819=((IkReal(0.313800000000000))*(cj10));
IkReal x820=((cj7)*(py));
IkReal x821=((px)*(sj7));
IkReal x822=((IkReal(0.313800000000000))*(sj10));
IkReal x823=((IkReal(0.0300000000000000))*(cj10));
IkReal x824=((pz)*(x817));
IkReal x825=((IkReal(0.0300000000000000))*(x817));
IkReal x826=((IkReal(0.600000000000000))*(x817));
IkReal x827=((pz)*(x818));
IkReal x828=((IkReal(0.0600000000000000))*(x818));
IkReal x829=((IkReal(0.0300000000000000))*(x818));
evalcond[0]=((IkReal(0.300000000000000))+(((IkReal(-1.00000000000000))*(x817)*(x820)))+(((x817)*(x821)))+(((IkReal(-0.0300000000000000))*(sj10)))+(((IkReal(-1.00000000000000))*(x827)))+(x819));
evalcond[1]=((((IkReal(-1.00000000000000))*(sj10)*(x829)))+(((IkReal(-1.00000000000000))*(x817)*(x822)))+(((IkReal(-1.00000000000000))*(x817)*(x823)))+(((IkReal(0.300000000000000))*(x818)))+(((IkReal(-1.00000000000000))*(pz)))+(((x818)*(x819)))+(x825));
evalcond[2]=((IkReal(0.0300000000000000))+(((IkReal(-1.00000000000000))*(x818)*(x821)))+(((IkReal(-1.00000000000000))*(x822)))+(((IkReal(-1.00000000000000))*(x823)))+(((IkReal(-1.00000000000000))*(x824)))+(((x818)*(x820))));
evalcond[3]=((((IkReal(-1.00000000000000))*(sj10)*(x825)))+(((IkReal(-1.00000000000000))*(x829)))+(((IkReal(0.300000000000000))*(x817)))+(((x817)*(x819)))+(((IkReal(-1.00000000000000))*(x820)))+(((x818)*(x822)))+(((x818)*(x823)))+(x821));
evalcond[4]=((IkReal(0.00847044000000000))+(((IkReal(0.0600000000000000))*(x824)))+(((x820)*(x826)))+(((x821)*(x828)))+(((IkReal(0.600000000000000))*(x827)))+(((IkReal(-1.00000000000000))*(pp)))+(((IkReal(-1.00000000000000))*(x821)*(x826)))+(((IkReal(-1.00000000000000))*(x820)*(x828))));
if( IKabs(evalcond[0]) > 0.000001  || IKabs(evalcond[1]) > 0.000001  || IKabs(evalcond[2]) > 0.000001  || IKabs(evalcond[3]) > 0.000001  || IKabs(evalcond[4]) > 0.000001  )
{
continue;
}
}

rotationfunction0(solutions);
}
}

}

}

} else
{
IkReal x830=((((IkReal(-1.00000000000000))*(cj7)*(px)))+(((IkReal(-1.00000000000000))*(py)*(sj7))));
evalcond[0]=((IkReal(-3.14159265358979))+(IKfmod(((IkReal(4.71238898038469))+(j9)), IkReal(6.28318530717959))));
evalcond[1]=((IkReal(0.190270440000000))+(((IkReal(-0.0368280000000000))*(sj10)))+(((IkReal(0.186480000000000))*(cj10)))+(((IkReal(-1.00000000000000))*(pp))));
evalcond[2]=x830;
evalcond[3]=x830;
if( IKabs(evalcond[0]) < 0.0000010000000000  && IKabs(evalcond[1]) < 0.0000010000000000  && IKabs(evalcond[2]) < 0.0000010000000000  && IKabs(evalcond[3]) < 0.0000010000000000  )
{
{
IkReal dummyeval[1];
IkReal gconst51;
IkReal x831=((cj7)*(py));
IkReal x832=((IkReal(0.313800000000000))*(sj10));
IkReal x833=((IkReal(0.0300000000000000))*(px)*(sj7));
gconst51=IKsign(((((IkReal(-0.300000000000000))*(pz)))+(((IkReal(-0.0300000000000000))*(cj10)*(x831)))+(((px)*(sj7)*(x832)))+(((IkReal(-1.00000000000000))*(x833)))+(((IkReal(0.0300000000000000))*(pz)*(sj10)))+(((cj10)*(x833)))+(((IkReal(-0.313800000000000))*(cj10)*(pz)))+(((IkReal(0.0300000000000000))*(x831)))+(((IkReal(-1.00000000000000))*(x831)*(x832)))));
IkReal x834=((px)*(sj7));
IkReal x835=((IkReal(10.4600000000000))*(sj10));
IkReal x836=((cj7)*(py));
dummyeval[0]=((((IkReal(-1.00000000000000))*(x835)*(x836)))+(((pz)*(sj10)))+(((IkReal(-10.0000000000000))*(pz)))+(((IkReal(-10.4600000000000))*(cj10)*(pz)))+(((x834)*(x835)))+(((IkReal(-1.00000000000000))*(x834)))+(((IkReal(-1.00000000000000))*(cj10)*(x836)))+(((cj10)*(x834)))+(x836));
if( IKabs(dummyeval[0]) < 0.0000010000000000  )
{
{
IkReal dummyeval[1];
IkReal gconst50;
gconst50=IKsign((((((px)*(px))*((sj7)*(sj7))))+(((IkReal(-2.00000000000000))*(cj7)*(px)*(py)*(sj7)))+((pz)*(pz))+((((cj7)*(cj7))*((py)*(py))))));
dummyeval[0]=(((((px)*(px))*((sj7)*(sj7))))+(((IkReal(-2.00000000000000))*(cj7)*(px)*(py)*(sj7)))+((pz)*(pz))+((((cj7)*(cj7))*((py)*(py)))));
if( IKabs(dummyeval[0]) < 0.0000010000000000  )
{
{
IkReal evalcond[4];
IkReal x837=x830;
evalcond[0]=((IKabs(((IkReal(-3.14159265358979))+(IKfmod(((IkReal(3.14159265358979))+(j10)), IkReal(6.28318530717959))))))+(IKabs(pz)));
evalcond[1]=((IkReal(0.376750440000000))+(((IkReal(-1.00000000000000))*(pp))));
evalcond[2]=x837;
evalcond[3]=x837;
if( IKabs(evalcond[0]) < 0.0000010000000000  && IKabs(evalcond[1]) < 0.0000010000000000  && IKabs(evalcond[2]) < 0.0000010000000000  && IKabs(evalcond[3]) < 0.0000010000000000  )
{
{
IkReal dummyeval[1];
dummyeval[0]=((((IkReal(-1.00000000000000))*(px)*(sj7)))+(((cj7)*(py))));
if( IKabs(dummyeval[0]) < 0.0000010000000000  )
{
{
IkReal dummyeval[2];
IkReal x838=((cj7)*(py));
IkReal x839=((px)*(sj7));
dummyeval[0]=((((IkReal(2.00000000000000))*(x838)*(x839)))+(((IkReal(-1.00000000000000))*((x839)*(x839))))+(((IkReal(-1.00000000000000))*((x838)*(x838)))));
dummyeval[1]=((((IkReal(-1.00000000000000))*(x838)))+(x839));
if( IKabs(dummyeval[0]) < 0.0000010000000000  || IKabs(dummyeval[1]) < 0.0000010000000000  )
{
{
IkReal evalcond[7];
IkReal x840=((IkReal(1.00000000000000))*(pp));
IkReal x841=((IkReal(-1.00000000000000))*(py));
evalcond[0]=((IKabs(px))+(IKabs(((IkReal(-3.14159265358979))+(IKfmod(((IkReal(1.57079632679490))+(j7)), IkReal(6.28318530717959)))))));
evalcond[1]=((IkReal(0.376750440000000))+(((IkReal(-1.00000000000000))*(x840))));
evalcond[2]=x841;
evalcond[3]=IkReal(0.613800000000000);
evalcond[4]=x841;
evalcond[5]=IkReal(0);
evalcond[6]=((IkReal(0.00847044000000000))+(((IkReal(-1.00000000000000))*(x840))));
if( IKabs(evalcond[0]) < 0.0000010000000000  && IKabs(evalcond[1]) < 0.0000010000000000  && IKabs(evalcond[2]) < 0.0000010000000000  && IKabs(evalcond[3]) < 0.0000010000000000  && IKabs(evalcond[4]) < 0.0000010000000000  && IKabs(evalcond[5]) < 0.0000010000000000  && IKabs(evalcond[6]) < 0.0000010000000000  )
{
{
IkReal dummyeval[1];
dummyeval[0]=IkReal(-1.00000000000000);
if( IKabs(dummyeval[0]) < 0.0000001000000000  )
{
continue;

} else
{
IkReal op[2+1], zeror[2];
int numroots;
op[0]=IkReal(-1.00000000000000);
op[1]=IkReal(0);
op[2]=IkReal(1.00000000000000);
polyroots2(op,zeror,numroots);
IkReal j8array[2], cj8array[2], sj8array[2], tempj8array[1];
int numsolutions = 0;
for(int ij8 = 0; ij8 < numroots; ++ij8)
{
IkReal htj8 = zeror[ij8];
tempj8array[0]=((IkReal(2.00000000000000))*(atan(htj8)));
for(int kj8 = 0; kj8 < 1; ++kj8)
{
j8array[numsolutions] = tempj8array[kj8];
if( j8array[numsolutions] > IKPI )
{
    j8array[numsolutions]-=IK2PI;
}
else if( j8array[numsolutions] < -IKPI )
{
    j8array[numsolutions]+=IK2PI;
}
sj8array[numsolutions] = IKsin(j8array[numsolutions]);
cj8array[numsolutions] = IKcos(j8array[numsolutions]);
numsolutions++;
}
}
bool j8valid[2]={true,true};
_nj8 = 2;
for(int ij8 = 0; ij8 < numsolutions; ++ij8)
    {
if( !j8valid[ij8] )
{
    continue;
}
    j8 = j8array[ij8]; cj8 = cj8array[ij8]; sj8 = sj8array[ij8];
htj8 = IKtan(j8/2);

_ij8[0] = ij8; _ij8[1] = -1;
for(int iij8 = ij8+1; iij8 < numsolutions; ++iij8)
{
if( j8valid[iij8] && IKabs(cj8array[ij8]-cj8array[iij8]) < IKFAST_SOLUTION_THRESH && IKabs(sj8array[ij8]-sj8array[iij8]) < IKFAST_SOLUTION_THRESH )
{
    j8valid[iij8]=false; _ij8[1] = iij8; break; 
}
}
rotationfunction0(solutions);
    }

}

}

} else
{
IkReal x842=((IkReal(1.00000000000000))*(pp));
evalcond[0]=((IKabs(px))+(IKabs(((IkReal(-3.14159265358979))+(IKfmod(((IkReal(4.71238898038469))+(j7)), IkReal(6.28318530717959)))))));
evalcond[1]=((IkReal(0.376750440000000))+(((IkReal(-1.00000000000000))*(x842))));
evalcond[2]=py;
evalcond[3]=IkReal(0.613800000000000);
evalcond[4]=py;
evalcond[5]=IkReal(0);
evalcond[6]=((IkReal(0.00847044000000000))+(((IkReal(-1.00000000000000))*(x842))));
if( IKabs(evalcond[0]) < 0.0000010000000000  && IKabs(evalcond[1]) < 0.0000010000000000  && IKabs(evalcond[2]) < 0.0000010000000000  && IKabs(evalcond[3]) < 0.0000010000000000  && IKabs(evalcond[4]) < 0.0000010000000000  && IKabs(evalcond[5]) < 0.0000010000000000  && IKabs(evalcond[6]) < 0.0000010000000000  )
{
{
IkReal dummyeval[1];
dummyeval[0]=IkReal(-1.00000000000000);
if( IKabs(dummyeval[0]) < 0.0000001000000000  )
{
continue;

} else
{
IkReal op[2+1], zeror[2];
int numroots;
op[0]=IkReal(-1.00000000000000);
op[1]=IkReal(0);
op[2]=IkReal(1.00000000000000);
polyroots2(op,zeror,numroots);
IkReal j8array[2], cj8array[2], sj8array[2], tempj8array[1];
int numsolutions = 0;
for(int ij8 = 0; ij8 < numroots; ++ij8)
{
IkReal htj8 = zeror[ij8];
tempj8array[0]=((IkReal(2.00000000000000))*(atan(htj8)));
for(int kj8 = 0; kj8 < 1; ++kj8)
{
j8array[numsolutions] = tempj8array[kj8];
if( j8array[numsolutions] > IKPI )
{
    j8array[numsolutions]-=IK2PI;
}
else if( j8array[numsolutions] < -IKPI )
{
    j8array[numsolutions]+=IK2PI;
}
sj8array[numsolutions] = IKsin(j8array[numsolutions]);
cj8array[numsolutions] = IKcos(j8array[numsolutions]);
numsolutions++;
}
}
bool j8valid[2]={true,true};
_nj8 = 2;
for(int ij8 = 0; ij8 < numsolutions; ++ij8)
    {
if( !j8valid[ij8] )
{
    continue;
}
    j8 = j8array[ij8]; cj8 = cj8array[ij8]; sj8 = sj8array[ij8];
htj8 = IKtan(j8/2);

_ij8[0] = ij8; _ij8[1] = -1;
for(int iij8 = ij8+1; iij8 < numsolutions; ++iij8)
{
if( j8valid[iij8] && IKabs(cj8array[ij8]-cj8array[iij8]) < IKFAST_SOLUTION_THRESH && IKabs(sj8array[ij8]-sj8array[iij8]) < IKFAST_SOLUTION_THRESH )
{
    j8valid[iij8]=false; _ij8[1] = iij8; break; 
}
}
rotationfunction0(solutions);
    }

}

}

} else
{
IkReal x843=((IkReal(1.00000000000000))*(pp));
IkReal x844=((IkReal(-1.00000000000000))*(px));
evalcond[0]=((IKabs(((IkReal(-3.14159265358979))+(IKfmod(((IkReal(3.14159265358979))+(j7)), IkReal(6.28318530717959))))))+(IKabs(py)));
evalcond[1]=((IkReal(0.376750440000000))+(((IkReal(-1.00000000000000))*(x843))));
evalcond[2]=x844;
evalcond[3]=IkReal(0.613800000000000);
evalcond[4]=x844;
evalcond[5]=IkReal(0);
evalcond[6]=((IkReal(0.00847044000000000))+(((IkReal(-1.00000000000000))*(x843))));
if( IKabs(evalcond[0]) < 0.0000010000000000  && IKabs(evalcond[1]) < 0.0000010000000000  && IKabs(evalcond[2]) < 0.0000010000000000  && IKabs(evalcond[3]) < 0.0000010000000000  && IKabs(evalcond[4]) < 0.0000010000000000  && IKabs(evalcond[5]) < 0.0000010000000000  && IKabs(evalcond[6]) < 0.0000010000000000  )
{
{
IkReal dummyeval[1];
dummyeval[0]=IkReal(-1.00000000000000);
if( IKabs(dummyeval[0]) < 0.0000001000000000  )
{
continue;

} else
{
IkReal op[2+1], zeror[2];
int numroots;
op[0]=IkReal(-1.00000000000000);
op[1]=IkReal(0);
op[2]=IkReal(1.00000000000000);
polyroots2(op,zeror,numroots);
IkReal j8array[2], cj8array[2], sj8array[2], tempj8array[1];
int numsolutions = 0;
for(int ij8 = 0; ij8 < numroots; ++ij8)
{
IkReal htj8 = zeror[ij8];
tempj8array[0]=((IkReal(2.00000000000000))*(atan(htj8)));
for(int kj8 = 0; kj8 < 1; ++kj8)
{
j8array[numsolutions] = tempj8array[kj8];
if( j8array[numsolutions] > IKPI )
{
    j8array[numsolutions]-=IK2PI;
}
else if( j8array[numsolutions] < -IKPI )
{
    j8array[numsolutions]+=IK2PI;
}
sj8array[numsolutions] = IKsin(j8array[numsolutions]);
cj8array[numsolutions] = IKcos(j8array[numsolutions]);
numsolutions++;
}
}
bool j8valid[2]={true,true};
_nj8 = 2;
for(int ij8 = 0; ij8 < numsolutions; ++ij8)
    {
if( !j8valid[ij8] )
{
    continue;
}
    j8 = j8array[ij8]; cj8 = cj8array[ij8]; sj8 = sj8array[ij8];
htj8 = IKtan(j8/2);

_ij8[0] = ij8; _ij8[1] = -1;
for(int iij8 = ij8+1; iij8 < numsolutions; ++iij8)
{
if( j8valid[iij8] && IKabs(cj8array[ij8]-cj8array[iij8]) < IKFAST_SOLUTION_THRESH && IKabs(sj8array[ij8]-sj8array[iij8]) < IKFAST_SOLUTION_THRESH )
{
    j8valid[iij8]=false; _ij8[1] = iij8; break; 
}
}
rotationfunction0(solutions);
    }

}

}

} else
{
IkReal x845=((IkReal(1.00000000000000))*(pp));
evalcond[0]=((IKabs(py))+(IKabs(((IkReal(-3.14159265358979))+(IKfmod(j7, IkReal(6.28318530717959)))))));
evalcond[1]=((IkReal(0.376750440000000))+(((IkReal(-1.00000000000000))*(x845))));
evalcond[2]=px;
evalcond[3]=IkReal(0.613800000000000);
evalcond[4]=px;
evalcond[5]=IkReal(0);
evalcond[6]=((IkReal(0.00847044000000000))+(((IkReal(-1.00000000000000))*(x845))));
if( IKabs(evalcond[0]) < 0.0000010000000000  && IKabs(evalcond[1]) < 0.0000010000000000  && IKabs(evalcond[2]) < 0.0000010000000000  && IKabs(evalcond[3]) < 0.0000010000000000  && IKabs(evalcond[4]) < 0.0000010000000000  && IKabs(evalcond[5]) < 0.0000010000000000  && IKabs(evalcond[6]) < 0.0000010000000000  )
{
{
IkReal dummyeval[1];
dummyeval[0]=IkReal(-1.00000000000000);
if( IKabs(dummyeval[0]) < 0.0000001000000000  )
{
continue;

} else
{
IkReal op[2+1], zeror[2];
int numroots;
op[0]=IkReal(-1.00000000000000);
op[1]=IkReal(0);
op[2]=IkReal(1.00000000000000);
polyroots2(op,zeror,numroots);
IkReal j8array[2], cj8array[2], sj8array[2], tempj8array[1];
int numsolutions = 0;
for(int ij8 = 0; ij8 < numroots; ++ij8)
{
IkReal htj8 = zeror[ij8];
tempj8array[0]=((IkReal(2.00000000000000))*(atan(htj8)));
for(int kj8 = 0; kj8 < 1; ++kj8)
{
j8array[numsolutions] = tempj8array[kj8];
if( j8array[numsolutions] > IKPI )
{
    j8array[numsolutions]-=IK2PI;
}
else if( j8array[numsolutions] < -IKPI )
{
    j8array[numsolutions]+=IK2PI;
}
sj8array[numsolutions] = IKsin(j8array[numsolutions]);
cj8array[numsolutions] = IKcos(j8array[numsolutions]);
numsolutions++;
}
}
bool j8valid[2]={true,true};
_nj8 = 2;
for(int ij8 = 0; ij8 < numsolutions; ++ij8)
    {
if( !j8valid[ij8] )
{
    continue;
}
    j8 = j8array[ij8]; cj8 = cj8array[ij8]; sj8 = sj8array[ij8];
htj8 = IKtan(j8/2);

_ij8[0] = ij8; _ij8[1] = -1;
for(int iij8 = ij8+1; iij8 < numsolutions; ++iij8)
{
if( j8valid[iij8] && IKabs(cj8array[ij8]-cj8array[iij8]) < IKFAST_SOLUTION_THRESH && IKabs(sj8array[ij8]-sj8array[iij8]) < IKFAST_SOLUTION_THRESH )
{
    j8valid[iij8]=false; _ij8[1] = iij8; break; 
}
}
rotationfunction0(solutions);
    }

}

}

} else
{
if( 1 )
{
continue;

} else
{
}
}
}
}
}
}

} else
{
{
IkReal j8array[1], cj8array[1], sj8array[1];
bool j8valid[1]={false};
_nj8 = 1;
IkReal x846=((cj7)*(py));
IkReal x847=((px)*(sj7));
IkReal x848=((IkReal(5000.00000000000))*(x847));
if( IKabs(((((IKabs(((((IkReal(600.000000000000))*(x846)*(x847)))+(((IkReal(-300.000000000000))*((x847)*(x847))))+(((IkReal(-300.000000000000))*((x846)*(x846)))))) != 0)?((IkReal)1/(((((IkReal(600.000000000000))*(x846)*(x847)))+(((IkReal(-300.000000000000))*((x847)*(x847))))+(((IkReal(-300.000000000000))*((x846)*(x846))))))):(IkReal)1.0e30))*(((((pp)*(x848)))+(((IkReal(-5000.00000000000))*(pp)*(x846)))+(((IkReal(-1883.75220000000))*(x847)))+(((IkReal(1883.75220000000))*(x846))))))) < IKFAST_ATAN2_MAGTHRESH && IKabs(((IkReal(-3069.00000000000))*(((IKabs(((x848)+(((IkReal(-5000.00000000000))*(x846))))) != 0)?((IkReal)1/(((x848)+(((IkReal(-5000.00000000000))*(x846)))))):(IkReal)1.0e30)))) < IKFAST_ATAN2_MAGTHRESH && IKabs(IKsqr(((((IKabs(((((IkReal(600.000000000000))*(x846)*(x847)))+(((IkReal(-300.000000000000))*((x847)*(x847))))+(((IkReal(-300.000000000000))*((x846)*(x846)))))) != 0)?((IkReal)1/(((((IkReal(600.000000000000))*(x846)*(x847)))+(((IkReal(-300.000000000000))*((x847)*(x847))))+(((IkReal(-300.000000000000))*((x846)*(x846))))))):(IkReal)1.0e30))*(((((pp)*(x848)))+(((IkReal(-5000.00000000000))*(pp)*(x846)))+(((IkReal(-1883.75220000000))*(x847)))+(((IkReal(1883.75220000000))*(x846)))))))+IKsqr(((IkReal(-3069.00000000000))*(((IKabs(((x848)+(((IkReal(-5000.00000000000))*(x846))))) != 0)?((IkReal)1/(((x848)+(((IkReal(-5000.00000000000))*(x846)))))):(IkReal)1.0e30))))-1) <= IKFAST_SINCOS_THRESH )
    continue;
j8array[0]=IKatan2(((((IKabs(((((IkReal(600.000000000000))*(x846)*(x847)))+(((IkReal(-300.000000000000))*((x847)*(x847))))+(((IkReal(-300.000000000000))*((x846)*(x846)))))) != 0)?((IkReal)1/(((((IkReal(600.000000000000))*(x846)*(x847)))+(((IkReal(-300.000000000000))*((x847)*(x847))))+(((IkReal(-300.000000000000))*((x846)*(x846))))))):(IkReal)1.0e30))*(((((pp)*(x848)))+(((IkReal(-5000.00000000000))*(pp)*(x846)))+(((IkReal(-1883.75220000000))*(x847)))+(((IkReal(1883.75220000000))*(x846)))))), ((IkReal(-3069.00000000000))*(((IKabs(((x848)+(((IkReal(-5000.00000000000))*(x846))))) != 0)?((IkReal)1/(((x848)+(((IkReal(-5000.00000000000))*(x846)))))):(IkReal)1.0e30))));
sj8array[0]=IKsin(j8array[0]);
cj8array[0]=IKcos(j8array[0]);
if( j8array[0] > IKPI )
{
    j8array[0]-=IK2PI;
}
else if( j8array[0] < -IKPI )
{    j8array[0]+=IK2PI;
}
j8valid[0] = true;
for(int ij8 = 0; ij8 < 1; ++ij8)
{
if( !j8valid[ij8] )
{
    continue;
}
_ij8[0] = ij8; _ij8[1] = -1;
for(int iij8 = ij8+1; iij8 < 1; ++iij8)
{
if( j8valid[iij8] && IKabs(cj8array[ij8]-cj8array[iij8]) < IKFAST_SOLUTION_THRESH && IKabs(sj8array[ij8]-sj8array[iij8]) < IKFAST_SOLUTION_THRESH )
{
    j8valid[iij8]=false; _ij8[1] = iij8; break; 
}
}
j8 = j8array[ij8]; cj8 = cj8array[ij8]; sj8 = sj8array[ij8];
{
IkReal evalcond[5];
IkReal x849=IKcos(j8);
IkReal x850=IKsin(j8);
IkReal x851=((cj7)*(py));
IkReal x852=((px)*(sj7));
IkReal x853=((IkReal(0.0600000000000000))*(x850));
IkReal x854=((x849)*(x852));
evalcond[0]=((IkReal(0.613800000000000))+(((IkReal(-1.00000000000000))*(x849)*(x851)))+(x854));
evalcond[1]=((IkReal(0.613800000000000))*(x850));
evalcond[2]=((((x850)*(x852)))+(((IkReal(-1.00000000000000))*(x850)*(x851))));
evalcond[3]=((((IkReal(-1.00000000000000))*(x851)))+(((IkReal(0.613800000000000))*(x849)))+(x852));
evalcond[4]=((IkReal(0.00847044000000000))+(((IkReal(-1.00000000000000))*(x852)*(x853)))+(((IkReal(-1.00000000000000))*(pp)))+(((x851)*(x853)))+(((IkReal(0.600000000000000))*(x849)*(x851)))+(((IkReal(-0.600000000000000))*(x854))));
if( IKabs(evalcond[0]) > 0.000001  || IKabs(evalcond[1]) > 0.000001  || IKabs(evalcond[2]) > 0.000001  || IKabs(evalcond[3]) > 0.000001  || IKabs(evalcond[4]) > 0.000001  )
{
continue;
}
}

rotationfunction0(solutions);
}
}

}

}

} else
{
{
IkReal j8array[1], cj8array[1], sj8array[1];
bool j8valid[1]={false};
_nj8 = 1;
IkReal x855=((cj7)*(py));
IkReal x856=((px)*(sj7));
if( IKabs(((((IKabs(((((IkReal(-184.140000000000))*(x856)))+(((IkReal(184.140000000000))*(x855))))) != 0)?((IkReal)1/(((((IkReal(-184.140000000000))*(x856)))+(((IkReal(184.140000000000))*(x855)))))):(IkReal)1.0e30))*(((IkReal(-25.9957803600000))+(((IkReal(6000.00000000000))*(x855)*(x856)))+(((IkReal(-3000.00000000000))*((x855)*(x855))))+(((IkReal(-3000.00000000000))*((x856)*(x856))))+(((IkReal(3069.00000000000))*(pp))))))) < IKFAST_ATAN2_MAGTHRESH && IKabs(((((IkReal(1.62919517758227))*(x855)))+(((IkReal(-1.62919517758227))*(x856))))) < IKFAST_ATAN2_MAGTHRESH && IKabs(IKsqr(((((IKabs(((((IkReal(-184.140000000000))*(x856)))+(((IkReal(184.140000000000))*(x855))))) != 0)?((IkReal)1/(((((IkReal(-184.140000000000))*(x856)))+(((IkReal(184.140000000000))*(x855)))))):(IkReal)1.0e30))*(((IkReal(-25.9957803600000))+(((IkReal(6000.00000000000))*(x855)*(x856)))+(((IkReal(-3000.00000000000))*((x855)*(x855))))+(((IkReal(-3000.00000000000))*((x856)*(x856))))+(((IkReal(3069.00000000000))*(pp)))))))+IKsqr(((((IkReal(1.62919517758227))*(x855)))+(((IkReal(-1.62919517758227))*(x856)))))-1) <= IKFAST_SINCOS_THRESH )
    continue;
j8array[0]=IKatan2(((((IKabs(((((IkReal(-184.140000000000))*(x856)))+(((IkReal(184.140000000000))*(x855))))) != 0)?((IkReal)1/(((((IkReal(-184.140000000000))*(x856)))+(((IkReal(184.140000000000))*(x855)))))):(IkReal)1.0e30))*(((IkReal(-25.9957803600000))+(((IkReal(6000.00000000000))*(x855)*(x856)))+(((IkReal(-3000.00000000000))*((x855)*(x855))))+(((IkReal(-3000.00000000000))*((x856)*(x856))))+(((IkReal(3069.00000000000))*(pp)))))), ((((IkReal(1.62919517758227))*(x855)))+(((IkReal(-1.62919517758227))*(x856)))));
sj8array[0]=IKsin(j8array[0]);
cj8array[0]=IKcos(j8array[0]);
if( j8array[0] > IKPI )
{
    j8array[0]-=IK2PI;
}
else if( j8array[0] < -IKPI )
{    j8array[0]+=IK2PI;
}
j8valid[0] = true;
for(int ij8 = 0; ij8 < 1; ++ij8)
{
if( !j8valid[ij8] )
{
    continue;
}
_ij8[0] = ij8; _ij8[1] = -1;
for(int iij8 = ij8+1; iij8 < 1; ++iij8)
{
if( j8valid[iij8] && IKabs(cj8array[ij8]-cj8array[iij8]) < IKFAST_SOLUTION_THRESH && IKabs(sj8array[ij8]-sj8array[iij8]) < IKFAST_SOLUTION_THRESH )
{
    j8valid[iij8]=false; _ij8[1] = iij8; break; 
}
}
j8 = j8array[ij8]; cj8 = cj8array[ij8]; sj8 = sj8array[ij8];
{
IkReal evalcond[5];
IkReal x857=IKcos(j8);
IkReal x858=IKsin(j8);
IkReal x859=((cj7)*(py));
IkReal x860=((px)*(sj7));
IkReal x861=((IkReal(0.0600000000000000))*(x858));
IkReal x862=((x857)*(x860));
evalcond[0]=((IkReal(0.613800000000000))+(((IkReal(-1.00000000000000))*(x857)*(x859)))+(x862));
evalcond[1]=((IkReal(0.613800000000000))*(x858));
evalcond[2]=((((x858)*(x860)))+(((IkReal(-1.00000000000000))*(x858)*(x859))));
evalcond[3]=((((IkReal(0.613800000000000))*(x857)))+(((IkReal(-1.00000000000000))*(x859)))+(x860));
evalcond[4]=((IkReal(0.00847044000000000))+(((IkReal(-0.600000000000000))*(x862)))+(((IkReal(-1.00000000000000))*(x860)*(x861)))+(((IkReal(-1.00000000000000))*(pp)))+(((x859)*(x861)))+(((IkReal(0.600000000000000))*(x857)*(x859))));
if( IKabs(evalcond[0]) > 0.000001  || IKabs(evalcond[1]) > 0.000001  || IKabs(evalcond[2]) > 0.000001  || IKabs(evalcond[3]) > 0.000001  || IKabs(evalcond[4]) > 0.000001  )
{
continue;
}
}

rotationfunction0(solutions);
}
}

}

}

} else
{
if( 1 )
{
continue;

} else
{
}
}
}

} else
{
{
IkReal j8array[1], cj8array[1], sj8array[1];
bool j8valid[1]={false};
_nj8 = 1;
IkReal x863=((px)*(sj7));
IkReal x864=((IkReal(0.0300000000000000))*(cj10));
IkReal x865=((IkReal(0.313800000000000))*(sj10));
IkReal x866=((IkReal(0.0300000000000000))*(pz));
IkReal x867=((IkReal(0.313800000000000))*(cj10));
IkReal x868=((cj7)*(py));
IkReal x869=((IkReal(0.0300000000000000))*(x868));
if( IKabs(((gconst50)*(((((IkReal(-0.0300000000000000))*(x863)))+(((IkReal(-1.00000000000000))*(x865)*(x868)))+(((x863)*(x864)))+(((x863)*(x865)))+(((IkReal(0.300000000000000))*(pz)))+(((IkReal(-1.00000000000000))*(x864)*(x868)))+(((pz)*(x867)))+(x869)+(((IkReal(-1.00000000000000))*(sj10)*(x866))))))) < IKFAST_ATAN2_MAGTHRESH && IKabs(((gconst50)*(((((IkReal(-1.00000000000000))*(x866)))+(((IkReal(-0.300000000000000))*(x863)))+(((IkReal(0.300000000000000))*(x868)))+(((x867)*(x868)))+(((pz)*(x864)))+(((pz)*(x865)))+(((IkReal(0.0300000000000000))*(sj10)*(x863)))+(((IkReal(-1.00000000000000))*(sj10)*(x869)))+(((IkReal(-1.00000000000000))*(x863)*(x867))))))) < IKFAST_ATAN2_MAGTHRESH )
    continue;
j8array[0]=IKatan2(((gconst50)*(((((IkReal(-0.0300000000000000))*(x863)))+(((IkReal(-1.00000000000000))*(x865)*(x868)))+(((x863)*(x864)))+(((x863)*(x865)))+(((IkReal(0.300000000000000))*(pz)))+(((IkReal(-1.00000000000000))*(x864)*(x868)))+(((pz)*(x867)))+(x869)+(((IkReal(-1.00000000000000))*(sj10)*(x866)))))), ((gconst50)*(((((IkReal(-1.00000000000000))*(x866)))+(((IkReal(-0.300000000000000))*(x863)))+(((IkReal(0.300000000000000))*(x868)))+(((x867)*(x868)))+(((pz)*(x864)))+(((pz)*(x865)))+(((IkReal(0.0300000000000000))*(sj10)*(x863)))+(((IkReal(-1.00000000000000))*(sj10)*(x869)))+(((IkReal(-1.00000000000000))*(x863)*(x867)))))));
sj8array[0]=IKsin(j8array[0]);
cj8array[0]=IKcos(j8array[0]);
if( j8array[0] > IKPI )
{
    j8array[0]-=IK2PI;
}
else if( j8array[0] < -IKPI )
{    j8array[0]+=IK2PI;
}
j8valid[0] = true;
for(int ij8 = 0; ij8 < 1; ++ij8)
{
if( !j8valid[ij8] )
{
    continue;
}
_ij8[0] = ij8; _ij8[1] = -1;
for(int iij8 = ij8+1; iij8 < 1; ++iij8)
{
if( j8valid[iij8] && IKabs(cj8array[ij8]-cj8array[iij8]) < IKFAST_SOLUTION_THRESH && IKabs(sj8array[ij8]-sj8array[iij8]) < IKFAST_SOLUTION_THRESH )
{
    j8valid[iij8]=false; _ij8[1] = iij8; break; 
}
}
j8 = j8array[ij8]; cj8 = cj8array[ij8]; sj8 = sj8array[ij8];
{
IkReal evalcond[5];
IkReal x870=IKcos(j8);
IkReal x871=IKsin(j8);
IkReal x872=((IkReal(0.313800000000000))*(cj10));
IkReal x873=((px)*(sj7));
IkReal x874=((IkReal(0.313800000000000))*(sj10));
IkReal x875=((IkReal(0.0300000000000000))*(cj10));
IkReal x876=((cj7)*(py));
IkReal x877=((pz)*(x870));
IkReal x878=((IkReal(0.0300000000000000))*(x870));
IkReal x879=((pz)*(x871));
IkReal x880=((IkReal(0.0600000000000000))*(x871));
IkReal x881=((IkReal(0.0300000000000000))*(x871));
IkReal x882=((x870)*(x876));
evalcond[0]=((IkReal(0.300000000000000))+(((x870)*(x873)))+(((IkReal(-1.00000000000000))*(x879)))+(((IkReal(-1.00000000000000))*(x882)))+(((IkReal(-0.0300000000000000))*(sj10)))+(x872));
evalcond[1]=((((IkReal(0.300000000000000))*(x871)))+(((IkReal(-1.00000000000000))*(sj10)*(x881)))+(((x871)*(x872)))+(((x870)*(x875)))+(((x870)*(x874)))+(((IkReal(-1.00000000000000))*(pz)))+(((IkReal(-1.00000000000000))*(x878))));
evalcond[2]=((IkReal(0.0300000000000000))+(((x871)*(x873)))+(((IkReal(-1.00000000000000))*(x871)*(x876)))+(x877)+(((IkReal(-1.00000000000000))*(x875)))+(((IkReal(-1.00000000000000))*(x874))));
evalcond[3]=((((IkReal(0.300000000000000))*(x870)))+(((x870)*(x872)))+(((IkReal(-1.00000000000000))*(x871)*(x874)))+(((IkReal(-1.00000000000000))*(x871)*(x875)))+(((IkReal(-1.00000000000000))*(x876)))+(x873)+(x881)+(((IkReal(-1.00000000000000))*(sj10)*(x878))));
evalcond[4]=((IkReal(0.00847044000000000))+(((IkReal(-1.00000000000000))*(x873)*(x880)))+(((x876)*(x880)))+(((IkReal(0.600000000000000))*(x882)))+(((IkReal(-0.600000000000000))*(x870)*(x873)))+(((IkReal(-1.00000000000000))*(pp)))+(((IkReal(0.600000000000000))*(x879)))+(((IkReal(-0.0600000000000000))*(x877))));
if( IKabs(evalcond[0]) > 0.000001  || IKabs(evalcond[1]) > 0.000001  || IKabs(evalcond[2]) > 0.000001  || IKabs(evalcond[3]) > 0.000001  || IKabs(evalcond[4]) > 0.000001  )
{
continue;
}
}

rotationfunction0(solutions);
}
}

}

}

} else
{
{
IkReal j8array[1], cj8array[1], sj8array[1];
bool j8valid[1]={false};
_nj8 = 1;
IkReal x883=(sj10)*(sj10);
IkReal x884=(cj10)*(cj10);
IkReal x885=((IkReal(0.0188280000000000))*(sj10));
if( IKabs(((gconst51)*(((IkReal(0.000900000000000000))+(((IkReal(0.0984704400000000))*(x883)))+(((IkReal(0.000900000000000000))*(x884)))+(((IkReal(-0.00180000000000000))*(cj10)))+(((IkReal(-1.00000000000000))*(x885)))+(((cj10)*(x885)))+(((IkReal(-1.00000000000000))*((pz)*(pz)))))))) < IKFAST_ATAN2_MAGTHRESH && IKabs(((gconst51)*(((IkReal(0.00900000000000000))+(((px)*(pz)*(sj7)))+(((IkReal(0.00941400000000000))*(x883)))+(((IkReal(-0.0950400000000000))*(sj10)))+(((IkReal(0.000414000000000000))*(cj10)))+(((IkReal(-0.00941400000000000))*(x884)))+(((IkReal(-0.0975704400000000))*(cj10)*(sj10)))+(((IkReal(-1.00000000000000))*(cj7)*(py)*(pz))))))) < IKFAST_ATAN2_MAGTHRESH )
    continue;
j8array[0]=IKatan2(((gconst51)*(((IkReal(0.000900000000000000))+(((IkReal(0.0984704400000000))*(x883)))+(((IkReal(0.000900000000000000))*(x884)))+(((IkReal(-0.00180000000000000))*(cj10)))+(((IkReal(-1.00000000000000))*(x885)))+(((cj10)*(x885)))+(((IkReal(-1.00000000000000))*((pz)*(pz))))))), ((gconst51)*(((IkReal(0.00900000000000000))+(((px)*(pz)*(sj7)))+(((IkReal(0.00941400000000000))*(x883)))+(((IkReal(-0.0950400000000000))*(sj10)))+(((IkReal(0.000414000000000000))*(cj10)))+(((IkReal(-0.00941400000000000))*(x884)))+(((IkReal(-0.0975704400000000))*(cj10)*(sj10)))+(((IkReal(-1.00000000000000))*(cj7)*(py)*(pz)))))));
sj8array[0]=IKsin(j8array[0]);
cj8array[0]=IKcos(j8array[0]);
if( j8array[0] > IKPI )
{
    j8array[0]-=IK2PI;
}
else if( j8array[0] < -IKPI )
{    j8array[0]+=IK2PI;
}
j8valid[0] = true;
for(int ij8 = 0; ij8 < 1; ++ij8)
{
if( !j8valid[ij8] )
{
    continue;
}
_ij8[0] = ij8; _ij8[1] = -1;
for(int iij8 = ij8+1; iij8 < 1; ++iij8)
{
if( j8valid[iij8] && IKabs(cj8array[ij8]-cj8array[iij8]) < IKFAST_SOLUTION_THRESH && IKabs(sj8array[ij8]-sj8array[iij8]) < IKFAST_SOLUTION_THRESH )
{
    j8valid[iij8]=false; _ij8[1] = iij8; break; 
}
}
j8 = j8array[ij8]; cj8 = cj8array[ij8]; sj8 = sj8array[ij8];
{
IkReal evalcond[5];
IkReal x886=IKcos(j8);
IkReal x887=IKsin(j8);
IkReal x888=((IkReal(0.313800000000000))*(cj10));
IkReal x889=((px)*(sj7));
IkReal x890=((IkReal(0.313800000000000))*(sj10));
IkReal x891=((IkReal(0.0300000000000000))*(cj10));
IkReal x892=((cj7)*(py));
IkReal x893=((pz)*(x886));
IkReal x894=((IkReal(0.0300000000000000))*(x886));
IkReal x895=((pz)*(x887));
IkReal x896=((IkReal(0.0600000000000000))*(x887));
IkReal x897=((IkReal(0.0300000000000000))*(x887));
IkReal x898=((x886)*(x892));
evalcond[0]=((IkReal(0.300000000000000))+(((x886)*(x889)))+(((IkReal(-1.00000000000000))*(x898)))+(((IkReal(-1.00000000000000))*(x895)))+(((IkReal(-0.0300000000000000))*(sj10)))+(x888));
evalcond[1]=((((x886)*(x891)))+(((x886)*(x890)))+(((IkReal(-1.00000000000000))*(sj10)*(x897)))+(((x887)*(x888)))+(((IkReal(-1.00000000000000))*(x894)))+(((IkReal(0.300000000000000))*(x887)))+(((IkReal(-1.00000000000000))*(pz))));
evalcond[2]=((IkReal(0.0300000000000000))+(((x887)*(x889)))+(((IkReal(-1.00000000000000))*(x887)*(x892)))+(((IkReal(-1.00000000000000))*(x891)))+(((IkReal(-1.00000000000000))*(x890)))+(x893));
evalcond[3]=((((IkReal(-1.00000000000000))*(sj10)*(x894)))+(((x886)*(x888)))+(((IkReal(-1.00000000000000))*(x892)))+(((IkReal(0.300000000000000))*(x886)))+(x889)+(x897)+(((IkReal(-1.00000000000000))*(x887)*(x890)))+(((IkReal(-1.00000000000000))*(x887)*(x891))));
evalcond[4]=((IkReal(0.00847044000000000))+(((IkReal(0.600000000000000))*(x898)))+(((IkReal(0.600000000000000))*(x895)))+(((IkReal(-1.00000000000000))*(pp)))+(((IkReal(-1.00000000000000))*(x889)*(x896)))+(((IkReal(-0.0600000000000000))*(x893)))+(((x892)*(x896)))+(((IkReal(-0.600000000000000))*(x886)*(x889))));
if( IKabs(evalcond[0]) > 0.000001  || IKabs(evalcond[1]) > 0.000001  || IKabs(evalcond[2]) > 0.000001  || IKabs(evalcond[3]) > 0.000001  || IKabs(evalcond[4]) > 0.000001  )
{
continue;
}
}

rotationfunction0(solutions);
}
}

}

}

} else
{
if( 1 )
{
continue;

} else
{
}
}
}
}

} else
{
{
IkReal j8array[1], cj8array[1], sj8array[1];
bool j8valid[1]={false};
_nj8 = 1;
IkReal x899=((py)*(sj9));
IkReal x900=((cj7)*(sj9));
IkReal x901=((IkReal(0.300000000000000))*(cj9));
IkReal x902=((cj7)*(py));
IkReal x903=((px)*(sj7));
IkReal x904=((IkReal(0.313800000000000))*(cj10)*(cj9));
IkReal x905=((IkReal(0.0300000000000000))*(cj9)*(sj10));
if( IKabs(((gconst46)*(((((IkReal(-1.00000000000000))*(px)*(x899)*((cj7)*(cj7))))+(((IkReal(-1.00000000000000))*(pz)*(x905)))+(((px)*(x900)*(x903)))+(((IkReal(-1.00000000000000))*(sj7)*(x899)*(x902)))+(((pz)*(x904)))+(((pz)*(x901)))+(((sj7)*(x899)*(x903))))))) < IKFAST_ATAN2_MAGTHRESH && IKabs(((gconst46)*(((((IkReal(-1.00000000000000))*(x903)*(x904)))+(((x903)*(x905)))+(((IkReal(-1.00000000000000))*(x902)*(x905)))+(((x901)*(x902)))+(((x902)*(x904)))+(((pz)*(sj7)*(x899)))+(((IkReal(-1.00000000000000))*(x901)*(x903)))+(((px)*(pz)*(x900))))))) < IKFAST_ATAN2_MAGTHRESH )
    continue;
j8array[0]=IKatan2(((gconst46)*(((((IkReal(-1.00000000000000))*(px)*(x899)*((cj7)*(cj7))))+(((IkReal(-1.00000000000000))*(pz)*(x905)))+(((px)*(x900)*(x903)))+(((IkReal(-1.00000000000000))*(sj7)*(x899)*(x902)))+(((pz)*(x904)))+(((pz)*(x901)))+(((sj7)*(x899)*(x903)))))), ((gconst46)*(((((IkReal(-1.00000000000000))*(x903)*(x904)))+(((x903)*(x905)))+(((IkReal(-1.00000000000000))*(x902)*(x905)))+(((x901)*(x902)))+(((x902)*(x904)))+(((pz)*(sj7)*(x899)))+(((IkReal(-1.00000000000000))*(x901)*(x903)))+(((px)*(pz)*(x900)))))));
sj8array[0]=IKsin(j8array[0]);
cj8array[0]=IKcos(j8array[0]);
if( j8array[0] > IKPI )
{
    j8array[0]-=IK2PI;
}
else if( j8array[0] < -IKPI )
{    j8array[0]+=IK2PI;
}
j8valid[0] = true;
for(int ij8 = 0; ij8 < 1; ++ij8)
{
if( !j8valid[ij8] )
{
    continue;
}
_ij8[0] = ij8; _ij8[1] = -1;
for(int iij8 = ij8+1; iij8 < 1; ++iij8)
{
if( j8valid[iij8] && IKabs(cj8array[ij8]-cj8array[iij8]) < IKFAST_SOLUTION_THRESH && IKabs(sj8array[ij8]-sj8array[iij8]) < IKFAST_SOLUTION_THRESH )
{
    j8valid[iij8]=false; _ij8[1] = iij8; break; 
}
}
j8 = j8array[ij8]; cj8 = cj8array[ij8]; sj8 = sj8array[ij8];
{
IkReal evalcond[6];
IkReal x906=IKcos(j8);
IkReal x907=IKsin(j8);
IkReal x908=((IkReal(1.00000000000000))*(sj9));
IkReal x909=((py)*(sj7));
IkReal x910=((cj7)*(px));
IkReal x911=((cj7)*(py));
IkReal x912=((px)*(sj7));
IkReal x913=((IkReal(0.0600000000000000))*(cj9));
IkReal x914=((IkReal(0.0300000000000000))*(cj10));
IkReal x915=((IkReal(0.313800000000000))*(cj10));
IkReal x916=((IkReal(0.0300000000000000))*(sj10));
IkReal x917=((IkReal(1.00000000000000))*(cj9));
IkReal x918=((IkReal(0.313800000000000))*(x907));
IkReal x919=((pz)*(x906));
IkReal x920=((sj10)*(x906));
IkReal x921=((IkReal(0.600000000000000))*(x906));
IkReal x922=((pz)*(x907));
IkReal x923=((sj9)*(x907));
IkReal x924=((cj9)*(x907));
IkReal x925=((sj9)*(x906));
evalcond[0]=((IkReal(0.300000000000000))+(((IkReal(-1.00000000000000))*(x906)*(x911)))+(((IkReal(-1.00000000000000))*(x916)))+(((IkReal(-1.00000000000000))*(x922)))+(((x906)*(x912)))+(x915));
evalcond[1]=((((x911)*(x924)))+(((sj9)*(x910)))+(((sj9)*(x909)))+(((IkReal(-1.00000000000000))*(x907)*(x912)*(x917)))+(((IkReal(-1.00000000000000))*(x917)*(x919))));
evalcond[2]=((((IkReal(0.0300000000000000))*(x925)))+(((IkReal(-1.00000000000000))*(x914)*(x925)))+(((IkReal(-1.00000000000000))*(pz)))+(((x907)*(x915)))+(((IkReal(0.300000000000000))*(x907)))+(((IkReal(-1.00000000000000))*(x907)*(x916)))+(((IkReal(-0.313800000000000))*(sj9)*(x920))));
evalcond[3]=((IkReal(0.0300000000000000))+(((IkReal(-1.00000000000000))*(x907)*(x908)*(x912)))+(((IkReal(-0.313800000000000))*(sj10)))+(((IkReal(-1.00000000000000))*(x908)*(x919)))+(((x911)*(x923)))+(((IkReal(-1.00000000000000))*(x914)))+(((IkReal(-1.00000000000000))*(x910)*(x917)))+(((IkReal(-1.00000000000000))*(x909)*(x917))));
evalcond[4]=((((IkReal(-1.00000000000000))*(x906)*(x916)))+(((IkReal(-0.0300000000000000))*(x923)))+(((sj10)*(sj9)*(x918)))+(((x914)*(x923)))+(((x906)*(x915)))+(((IkReal(-1.00000000000000))*(x911)))+(((IkReal(0.300000000000000))*(x906)))+(x912));
evalcond[5]=((IkReal(0.00847044000000000))+(((x910)*(x913)))+(((x909)*(x913)))+(((IkReal(0.0600000000000000))*(x912)*(x923)))+(((IkReal(-1.00000000000000))*(x912)*(x921)))+(((IkReal(0.600000000000000))*(x922)))+(((x911)*(x921)))+(((IkReal(0.0600000000000000))*(sj9)*(x919)))+(((IkReal(-1.00000000000000))*(pp)))+(((IkReal(-0.0600000000000000))*(x911)*(x923))));
if( IKabs(evalcond[0]) > 0.000001  || IKabs(evalcond[1]) > 0.000001  || IKabs(evalcond[2]) > 0.000001  || IKabs(evalcond[3]) > 0.000001  || IKabs(evalcond[4]) > 0.000001  || IKabs(evalcond[5]) > 0.000001  )
{
continue;
}
}

rotationfunction0(solutions);
}
}

}

}

} else
{
{
IkReal j8array[1], cj8array[1], sj8array[1];
bool j8valid[1]={false};
_nj8 = 1;
IkReal x926=(sj10)*(sj10);
IkReal x927=(cj10)*(cj10);
IkReal x928=((IkReal(0.00941400000000000))*(sj9));
IkReal x929=((cj10)*(sj10));
if( IKabs(((gconst47)*(((((IkReal(0.000414000000000000))*(cj10)*(sj9)))+(((px)*(pz)*(sj7)))+(((IkReal(-1.00000000000000))*(x927)*(x928)))+(((IkReal(-0.0950400000000000))*(sj10)*(sj9)))+(((IkReal(-0.0975704400000000))*(sj9)*(x929)))+(((x926)*(x928)))+(((IkReal(-1.00000000000000))*(cj7)*(py)*(pz)))+(((IkReal(0.00900000000000000))*(sj9))))))) < IKFAST_ATAN2_MAGTHRESH && IKabs(((gconst47)*(((IkReal(-0.0900000000000000))+(((IkReal(-0.000900000000000000))*(x926)))+(((IkReal(-0.188280000000000))*(cj10)))+(((IkReal(0.0188280000000000))*(x929)))+((pz)*(pz))+(((IkReal(0.0180000000000000))*(sj10)))+(((IkReal(-0.0984704400000000))*(x927))))))) < IKFAST_ATAN2_MAGTHRESH )
    continue;
j8array[0]=IKatan2(((gconst47)*(((((IkReal(0.000414000000000000))*(cj10)*(sj9)))+(((px)*(pz)*(sj7)))+(((IkReal(-1.00000000000000))*(x927)*(x928)))+(((IkReal(-0.0950400000000000))*(sj10)*(sj9)))+(((IkReal(-0.0975704400000000))*(sj9)*(x929)))+(((x926)*(x928)))+(((IkReal(-1.00000000000000))*(cj7)*(py)*(pz)))+(((IkReal(0.00900000000000000))*(sj9)))))), ((gconst47)*(((IkReal(-0.0900000000000000))+(((IkReal(-0.000900000000000000))*(x926)))+(((IkReal(-0.188280000000000))*(cj10)))+(((IkReal(0.0188280000000000))*(x929)))+((pz)*(pz))+(((IkReal(0.0180000000000000))*(sj10)))+(((IkReal(-0.0984704400000000))*(x927)))))));
sj8array[0]=IKsin(j8array[0]);
cj8array[0]=IKcos(j8array[0]);
if( j8array[0] > IKPI )
{
    j8array[0]-=IK2PI;
}
else if( j8array[0] < -IKPI )
{    j8array[0]+=IK2PI;
}
j8valid[0] = true;
for(int ij8 = 0; ij8 < 1; ++ij8)
{
if( !j8valid[ij8] )
{
    continue;
}
_ij8[0] = ij8; _ij8[1] = -1;
for(int iij8 = ij8+1; iij8 < 1; ++iij8)
{
if( j8valid[iij8] && IKabs(cj8array[ij8]-cj8array[iij8]) < IKFAST_SOLUTION_THRESH && IKabs(sj8array[ij8]-sj8array[iij8]) < IKFAST_SOLUTION_THRESH )
{
    j8valid[iij8]=false; _ij8[1] = iij8; break; 
}
}
j8 = j8array[ij8]; cj8 = cj8array[ij8]; sj8 = sj8array[ij8];
{
IkReal evalcond[6];
IkReal x930=IKcos(j8);
IkReal x931=IKsin(j8);
IkReal x932=((IkReal(1.00000000000000))*(sj9));
IkReal x933=((py)*(sj7));
IkReal x934=((cj7)*(px));
IkReal x935=((cj7)*(py));
IkReal x936=((px)*(sj7));
IkReal x937=((IkReal(0.0600000000000000))*(cj9));
IkReal x938=((IkReal(0.0300000000000000))*(cj10));
IkReal x939=((IkReal(0.313800000000000))*(cj10));
IkReal x940=((IkReal(0.0300000000000000))*(sj10));
IkReal x941=((IkReal(1.00000000000000))*(cj9));
IkReal x942=((IkReal(0.313800000000000))*(x931));
IkReal x943=((pz)*(x930));
IkReal x944=((sj10)*(x930));
IkReal x945=((IkReal(0.600000000000000))*(x930));
IkReal x946=((pz)*(x931));
IkReal x947=((sj9)*(x931));
IkReal x948=((cj9)*(x931));
IkReal x949=((sj9)*(x930));
evalcond[0]=((IkReal(0.300000000000000))+(((IkReal(-1.00000000000000))*(x940)))+(((IkReal(-1.00000000000000))*(x946)))+(((x930)*(x936)))+(((IkReal(-1.00000000000000))*(x930)*(x935)))+(x939));
evalcond[1]=((((IkReal(-1.00000000000000))*(x931)*(x936)*(x941)))+(((IkReal(-1.00000000000000))*(x941)*(x943)))+(((x935)*(x948)))+(((sj9)*(x934)))+(((sj9)*(x933))));
evalcond[2]=((((IkReal(-0.313800000000000))*(sj9)*(x944)))+(((IkReal(0.0300000000000000))*(x949)))+(((IkReal(-1.00000000000000))*(x938)*(x949)))+(((IkReal(0.300000000000000))*(x931)))+(((IkReal(-1.00000000000000))*(pz)))+(((x931)*(x939)))+(((IkReal(-1.00000000000000))*(x931)*(x940))));
evalcond[3]=((IkReal(0.0300000000000000))+(((IkReal(-0.313800000000000))*(sj10)))+(((IkReal(-1.00000000000000))*(x931)*(x932)*(x936)))+(((IkReal(-1.00000000000000))*(x933)*(x941)))+(((IkReal(-1.00000000000000))*(x932)*(x943)))+(((x935)*(x947)))+(((IkReal(-1.00000000000000))*(x934)*(x941)))+(((IkReal(-1.00000000000000))*(x938))));
evalcond[4]=((((x938)*(x947)))+(((IkReal(0.300000000000000))*(x930)))+(((sj10)*(sj9)*(x942)))+(((x930)*(x939)))+(((IkReal(-1.00000000000000))*(x935)))+(((IkReal(-0.0300000000000000))*(x947)))+(x936)+(((IkReal(-1.00000000000000))*(x930)*(x940))));
evalcond[5]=((IkReal(0.00847044000000000))+(((IkReal(0.600000000000000))*(x946)))+(((IkReal(-1.00000000000000))*(pp)))+(((IkReal(0.0600000000000000))*(x936)*(x947)))+(((x935)*(x945)))+(((IkReal(-0.0600000000000000))*(x935)*(x947)))+(((IkReal(-1.00000000000000))*(x936)*(x945)))+(((x934)*(x937)))+(((IkReal(0.0600000000000000))*(sj9)*(x943)))+(((x933)*(x937))));
if( IKabs(evalcond[0]) > 0.000001  || IKabs(evalcond[1]) > 0.000001  || IKabs(evalcond[2]) > 0.000001  || IKabs(evalcond[3]) > 0.000001  || IKabs(evalcond[4]) > 0.000001  || IKabs(evalcond[5]) > 0.000001  )
{
continue;
}
}

rotationfunction0(solutions);
}
}

}

}
}
}

}

}

} else
{
{
IkReal j7array[2], cj7array[2], sj7array[2];
bool j7valid[2]={false};
_nj7 = 2;
IkReal x950=((IkReal(0.0300000000000000))*(cj9));
if( IKabs(((IkReal(-1.00000000000000))*(px))) < IKFAST_ATAN2_MAGTHRESH && IKabs(((IkReal(-1.00000000000000))*(py))) < IKFAST_ATAN2_MAGTHRESH )
    continue;
IkReal x951=((IkReal(1.00000000000000))*(IKatan2(((IkReal(-1.00000000000000))*(px)), ((IkReal(-1.00000000000000))*(py)))));
if( ((((px)*(px))+((py)*(py)))) < (IkReal)-0.00001 )
    continue;
if( (((((IKabs(IKabs(IKsqrt((((px)*(px))+((py)*(py)))))) != 0)?((IkReal)1/(IKabs(IKsqrt((((px)*(px))+((py)*(py))))))):(IkReal)1.0e30))*(((((IkReal(-1.00000000000000))*(cj10)*(x950)))+(((IkReal(-0.313800000000000))*(cj9)*(sj10)))+(x950))))) < -1-IKFAST_SINCOS_THRESH || (((((IKabs(IKabs(IKsqrt((((px)*(px))+((py)*(py)))))) != 0)?((IkReal)1/(IKabs(IKsqrt((((px)*(px))+((py)*(py))))))):(IkReal)1.0e30))*(((((IkReal(-1.00000000000000))*(cj10)*(x950)))+(((IkReal(-0.313800000000000))*(cj9)*(sj10)))+(x950))))) > 1+IKFAST_SINCOS_THRESH )
    continue;
IkReal x952=IKasin(((((IKabs(IKabs(IKsqrt((((px)*(px))+((py)*(py)))))) != 0)?((IkReal)1/(IKabs(IKsqrt((((px)*(px))+((py)*(py))))))):(IkReal)1.0e30))*(((((IkReal(-1.00000000000000))*(cj10)*(x950)))+(((IkReal(-0.313800000000000))*(cj9)*(sj10)))+(x950)))));
j7array[0]=((((IkReal(-1.00000000000000))*(x952)))+(((IkReal(-1.00000000000000))*(x951))));
sj7array[0]=IKsin(j7array[0]);
cj7array[0]=IKcos(j7array[0]);
j7array[1]=((IkReal(3.14159265358979))+(((IkReal(-1.00000000000000))*(x951)))+(x952));
sj7array[1]=IKsin(j7array[1]);
cj7array[1]=IKcos(j7array[1]);
if( j7array[0] > IKPI )
{
    j7array[0]-=IK2PI;
}
else if( j7array[0] < -IKPI )
{    j7array[0]+=IK2PI;
}
j7valid[0] = true;
if( j7array[1] > IKPI )
{
    j7array[1]-=IK2PI;
}
else if( j7array[1] < -IKPI )
{    j7array[1]+=IK2PI;
}
j7valid[1] = true;
for(int ij7 = 0; ij7 < 2; ++ij7)
{
if( !j7valid[ij7] )
{
    continue;
}
_ij7[0] = ij7; _ij7[1] = -1;
for(int iij7 = ij7+1; iij7 < 2; ++iij7)
{
if( j7valid[iij7] && IKabs(cj7array[ij7]-cj7array[iij7]) < IKFAST_SOLUTION_THRESH && IKabs(sj7array[ij7]-sj7array[iij7]) < IKFAST_SOLUTION_THRESH )
{
    j7valid[iij7]=false; _ij7[1] = iij7; break; 
}
}
j7 = j7array[ij7]; cj7 = cj7array[ij7]; sj7 = sj7array[ij7];

{
IkReal dummyeval[1];
IkReal gconst47;
IkReal x953=((cj7)*(py));
IkReal x954=((IkReal(0.313800000000000))*(cj10));
IkReal x955=((px)*(sj7));
IkReal x956=((pz)*(sj9));
IkReal x957=((IkReal(0.0300000000000000))*(sj10));
gconst47=IKsign(((((IkReal(0.300000000000000))*(x955)))+(((IkReal(-0.0300000000000000))*(cj10)*(x956)))+(((IkReal(-0.313800000000000))*(sj10)*(x956)))+(((IkReal(-1.00000000000000))*(x953)*(x954)))+(((IkReal(0.0300000000000000))*(x956)))+(((IkReal(-0.300000000000000))*(x953)))+(((IkReal(-1.00000000000000))*(x955)*(x957)))+(((x953)*(x957)))+(((x954)*(x955)))));
IkReal x958=((cj7)*(py));
IkReal x959=((pz)*(sj9));
IkReal x960=((px)*(sj7));
IkReal x961=((IkReal(10.4600000000000))*(cj10));
dummyeval[0]=((((IkReal(-1.00000000000000))*(cj10)*(x959)))+(((sj10)*(x958)))+(((x960)*(x961)))+(((IkReal(-1.00000000000000))*(x958)*(x961)))+(((IkReal(10.0000000000000))*(x960)))+(((IkReal(-1.00000000000000))*(sj10)*(x960)))+(((IkReal(-10.0000000000000))*(x958)))+(x959)+(((IkReal(-10.4600000000000))*(sj10)*(x959))));
if( IKabs(dummyeval[0]) < 0.0000010000000000  )
{
{
IkReal dummyeval[1];
IkReal gconst46;
gconst46=IKsign(((((cj9)*((cj7)*(cj7))*((py)*(py))))+(((cj9)*((pz)*(pz))))+(((cj9)*((px)*(px))*((sj7)*(sj7))))+(((IkReal(-2.00000000000000))*(cj7)*(cj9)*(px)*(py)*(sj7)))));
dummyeval[0]=((((cj9)*((cj7)*(cj7))*((py)*(py))))+(((cj9)*((pz)*(pz))))+(((cj9)*((px)*(px))*((sj7)*(sj7))))+(((IkReal(-2.00000000000000))*(cj7)*(cj9)*(px)*(py)*(sj7))));
if( IKabs(dummyeval[0]) < 0.0000010000000000  )
{
{
IkReal evalcond[4];
IkReal x962=((py)*(sj7));
IkReal x963=((cj7)*(px));
evalcond[0]=((IkReal(-3.14159265358979))+(IKfmod(((IkReal(1.57079632679490))+(j9)), IkReal(6.28318530717959))));
evalcond[1]=((IkReal(0.190270440000000))+(((IkReal(-0.0368280000000000))*(sj10)))+(((IkReal(0.186480000000000))*(cj10)))+(((IkReal(-1.00000000000000))*(pp))));
evalcond[2]=((((IkReal(-1.00000000000000))*(x963)))+(((IkReal(-1.00000000000000))*(x962))));
evalcond[3]=((x962)+(x963));
if( IKabs(evalcond[0]) < 0.0000010000000000  && IKabs(evalcond[1]) < 0.0000010000000000  && IKabs(evalcond[2]) < 0.0000010000000000  && IKabs(evalcond[3]) < 0.0000010000000000  )
{
{
IkReal dummyeval[1];
IkReal gconst49;
IkReal x964=((cj7)*(py));
IkReal x965=((IkReal(0.313800000000000))*(cj10));
IkReal x966=((px)*(sj7));
IkReal x967=((IkReal(0.0300000000000000))*(pz));
IkReal x968=((IkReal(0.0300000000000000))*(sj10));
gconst49=IKsign(((((IkReal(-0.313800000000000))*(pz)*(sj10)))+(((IkReal(0.300000000000000))*(x966)))+(((IkReal(-1.00000000000000))*(cj10)*(x967)))+(((IkReal(-1.00000000000000))*(x964)*(x965)))+(((IkReal(-1.00000000000000))*(x966)*(x968)))+(((x965)*(x966)))+(((x964)*(x968)))+(x967)+(((IkReal(-0.300000000000000))*(x964)))));
IkReal x969=((cj7)*(py));
IkReal x970=((IkReal(10.4600000000000))*(cj10));
IkReal x971=((px)*(sj7));
dummyeval[0]=((((IkReal(-1.00000000000000))*(x969)*(x970)))+(((sj10)*(x969)))+(((IkReal(10.0000000000000))*(x971)))+(((IkReal(-1.00000000000000))*(cj10)*(pz)))+(pz)+(((x970)*(x971)))+(((IkReal(-10.0000000000000))*(x969)))+(((IkReal(-10.4600000000000))*(pz)*(sj10)))+(((IkReal(-1.00000000000000))*(sj10)*(x971))));
if( IKabs(dummyeval[0]) < 0.0000010000000000  )
{
{
IkReal dummyeval[1];
IkReal gconst48;
gconst48=IKsign((((((px)*(px))*((sj7)*(sj7))))+(((IkReal(-2.00000000000000))*(cj7)*(px)*(py)*(sj7)))+((pz)*(pz))+((((cj7)*(cj7))*((py)*(py))))));
dummyeval[0]=(((((px)*(px))*((sj7)*(sj7))))+(((IkReal(-2.00000000000000))*(cj7)*(px)*(py)*(sj7)))+((pz)*(pz))+((((cj7)*(cj7))*((py)*(py)))));
if( IKabs(dummyeval[0]) < 0.0000010000000000  )
{
continue;

} else
{
{
IkReal j8array[1], cj8array[1], sj8array[1];
bool j8valid[1]={false};
_nj8 = 1;
IkReal x972=((px)*(sj7));
IkReal x973=((cj7)*(py));
IkReal x974=((IkReal(0.0300000000000000))*(cj10));
IkReal x975=((IkReal(0.313800000000000))*(sj10));
IkReal x976=((IkReal(0.0300000000000000))*(pz));
IkReal x977=((IkReal(0.313800000000000))*(cj10));
IkReal x978=((IkReal(0.0300000000000000))*(sj10));
if( IKabs(((gconst48)*(((((IkReal(-1.00000000000000))*(sj10)*(x976)))+(((IkReal(0.300000000000000))*(pz)))+(((x973)*(x974)))+(((x973)*(x975)))+(((pz)*(x977)))+(((IkReal(-1.00000000000000))*(x972)*(x974)))+(((IkReal(-1.00000000000000))*(x972)*(x975)))+(((IkReal(0.0300000000000000))*(x972)))+(((IkReal(-0.0300000000000000))*(x973))))))) < IKFAST_ATAN2_MAGTHRESH && IKabs(((gconst48)*(((((IkReal(0.300000000000000))*(x973)))+(((IkReal(-1.00000000000000))*(pz)*(x975)))+(((IkReal(-1.00000000000000))*(pz)*(x974)))+(((x973)*(x977)))+(((IkReal(-1.00000000000000))*(x972)*(x977)))+(((IkReal(-0.300000000000000))*(x972)))+(x976)+(((x972)*(x978)))+(((IkReal(-1.00000000000000))*(x973)*(x978))))))) < IKFAST_ATAN2_MAGTHRESH )
    continue;
j8array[0]=IKatan2(((gconst48)*(((((IkReal(-1.00000000000000))*(sj10)*(x976)))+(((IkReal(0.300000000000000))*(pz)))+(((x973)*(x974)))+(((x973)*(x975)))+(((pz)*(x977)))+(((IkReal(-1.00000000000000))*(x972)*(x974)))+(((IkReal(-1.00000000000000))*(x972)*(x975)))+(((IkReal(0.0300000000000000))*(x972)))+(((IkReal(-0.0300000000000000))*(x973)))))), ((gconst48)*(((((IkReal(0.300000000000000))*(x973)))+(((IkReal(-1.00000000000000))*(pz)*(x975)))+(((IkReal(-1.00000000000000))*(pz)*(x974)))+(((x973)*(x977)))+(((IkReal(-1.00000000000000))*(x972)*(x977)))+(((IkReal(-0.300000000000000))*(x972)))+(x976)+(((x972)*(x978)))+(((IkReal(-1.00000000000000))*(x973)*(x978)))))));
sj8array[0]=IKsin(j8array[0]);
cj8array[0]=IKcos(j8array[0]);
if( j8array[0] > IKPI )
{
    j8array[0]-=IK2PI;
}
else if( j8array[0] < -IKPI )
{    j8array[0]+=IK2PI;
}
j8valid[0] = true;
for(int ij8 = 0; ij8 < 1; ++ij8)
{
if( !j8valid[ij8] )
{
    continue;
}
_ij8[0] = ij8; _ij8[1] = -1;
for(int iij8 = ij8+1; iij8 < 1; ++iij8)
{
if( j8valid[iij8] && IKabs(cj8array[ij8]-cj8array[iij8]) < IKFAST_SOLUTION_THRESH && IKabs(sj8array[ij8]-sj8array[iij8]) < IKFAST_SOLUTION_THRESH )
{
    j8valid[iij8]=false; _ij8[1] = iij8; break; 
}
}
j8 = j8array[ij8]; cj8 = cj8array[ij8]; sj8 = sj8array[ij8];
{
IkReal evalcond[5];
IkReal x979=IKcos(j8);
IkReal x980=IKsin(j8);
IkReal x981=((IkReal(0.313800000000000))*(cj10));
IkReal x982=((cj7)*(py));
IkReal x983=((px)*(sj7));
IkReal x984=((IkReal(0.313800000000000))*(sj10));
IkReal x985=((IkReal(0.0300000000000000))*(cj10));
IkReal x986=((pz)*(x979));
IkReal x987=((IkReal(0.0300000000000000))*(x979));
IkReal x988=((IkReal(0.600000000000000))*(x979));
IkReal x989=((pz)*(x980));
IkReal x990=((IkReal(0.0600000000000000))*(x980));
IkReal x991=((IkReal(0.0300000000000000))*(x980));
evalcond[0]=((IkReal(0.300000000000000))+(((IkReal(-1.00000000000000))*(x989)))+(((IkReal(-1.00000000000000))*(x979)*(x982)))+(((x979)*(x983)))+(((IkReal(-0.0300000000000000))*(sj10)))+(x981));
evalcond[1]=((((IkReal(-1.00000000000000))*(sj10)*(x991)))+(((IkReal(0.300000000000000))*(x980)))+(((IkReal(-1.00000000000000))*(pz)))+(((IkReal(-1.00000000000000))*(x979)*(x985)))+(((IkReal(-1.00000000000000))*(x979)*(x984)))+(((x980)*(x981)))+(x987));
evalcond[2]=((IkReal(0.0300000000000000))+(((IkReal(-1.00000000000000))*(x985)))+(((IkReal(-1.00000000000000))*(x984)))+(((IkReal(-1.00000000000000))*(x986)))+(((IkReal(-1.00000000000000))*(x980)*(x983)))+(((x980)*(x982))));
evalcond[3]=((((IkReal(-1.00000000000000))*(x982)))+(((IkReal(-1.00000000000000))*(sj10)*(x987)))+(((IkReal(0.300000000000000))*(x979)))+(((x979)*(x981)))+(((IkReal(-1.00000000000000))*(x991)))+(((x980)*(x985)))+(((x980)*(x984)))+(x983));
evalcond[4]=((IkReal(0.00847044000000000))+(((IkReal(0.0600000000000000))*(x986)))+(((IkReal(0.600000000000000))*(x989)))+(((x983)*(x990)))+(((IkReal(-1.00000000000000))*(x982)*(x990)))+(((IkReal(-1.00000000000000))*(pp)))+(((x982)*(x988)))+(((IkReal(-1.00000000000000))*(x983)*(x988))));
if( IKabs(evalcond[0]) > 0.000001  || IKabs(evalcond[1]) > 0.000001  || IKabs(evalcond[2]) > 0.000001  || IKabs(evalcond[3]) > 0.000001  || IKabs(evalcond[4]) > 0.000001  )
{
continue;
}
}

rotationfunction0(solutions);
}
}

}

}

} else
{
{
IkReal j8array[1], cj8array[1], sj8array[1];
bool j8valid[1]={false};
_nj8 = 1;
IkReal x992=(sj10)*(sj10);
IkReal x993=(cj10)*(cj10);
IkReal x994=((cj10)*(sj10));
if( IKabs(((gconst49)*(((IkReal(0.00900000000000000))+(((IkReal(-0.0975704400000000))*(x994)))+(((px)*(pz)*(sj7)))+(((IkReal(-0.0950400000000000))*(sj10)))+(((IkReal(0.000414000000000000))*(cj10)))+(((IkReal(-0.00941400000000000))*(x993)))+(((IkReal(0.00941400000000000))*(x992)))+(((IkReal(-1.00000000000000))*(cj7)*(py)*(pz))))))) < IKFAST_ATAN2_MAGTHRESH && IKabs(((gconst49)*(((IkReal(-0.0900000000000000))+(((IkReal(0.0188280000000000))*(x994)))+(((IkReal(-0.0984704400000000))*(x993)))+(((IkReal(-0.000900000000000000))*(x992)))+(((IkReal(-0.188280000000000))*(cj10)))+((pz)*(pz))+(((IkReal(0.0180000000000000))*(sj10))))))) < IKFAST_ATAN2_MAGTHRESH )
    continue;
j8array[0]=IKatan2(((gconst49)*(((IkReal(0.00900000000000000))+(((IkReal(-0.0975704400000000))*(x994)))+(((px)*(pz)*(sj7)))+(((IkReal(-0.0950400000000000))*(sj10)))+(((IkReal(0.000414000000000000))*(cj10)))+(((IkReal(-0.00941400000000000))*(x993)))+(((IkReal(0.00941400000000000))*(x992)))+(((IkReal(-1.00000000000000))*(cj7)*(py)*(pz)))))), ((gconst49)*(((IkReal(-0.0900000000000000))+(((IkReal(0.0188280000000000))*(x994)))+(((IkReal(-0.0984704400000000))*(x993)))+(((IkReal(-0.000900000000000000))*(x992)))+(((IkReal(-0.188280000000000))*(cj10)))+((pz)*(pz))+(((IkReal(0.0180000000000000))*(sj10)))))));
sj8array[0]=IKsin(j8array[0]);
cj8array[0]=IKcos(j8array[0]);
if( j8array[0] > IKPI )
{
    j8array[0]-=IK2PI;
}
else if( j8array[0] < -IKPI )
{    j8array[0]+=IK2PI;
}
j8valid[0] = true;
for(int ij8 = 0; ij8 < 1; ++ij8)
{
if( !j8valid[ij8] )
{
    continue;
}
_ij8[0] = ij8; _ij8[1] = -1;
for(int iij8 = ij8+1; iij8 < 1; ++iij8)
{
if( j8valid[iij8] && IKabs(cj8array[ij8]-cj8array[iij8]) < IKFAST_SOLUTION_THRESH && IKabs(sj8array[ij8]-sj8array[iij8]) < IKFAST_SOLUTION_THRESH )
{
    j8valid[iij8]=false; _ij8[1] = iij8; break; 
}
}
j8 = j8array[ij8]; cj8 = cj8array[ij8]; sj8 = sj8array[ij8];
{
IkReal evalcond[5];
IkReal x995=IKcos(j8);
IkReal x996=IKsin(j8);
IkReal x997=((IkReal(0.313800000000000))*(cj10));
IkReal x998=((cj7)*(py));
IkReal x999=((px)*(sj7));
IkReal x1000=((IkReal(0.313800000000000))*(sj10));
IkReal x1001=((IkReal(0.0300000000000000))*(cj10));
IkReal x1002=((pz)*(x995));
IkReal x1003=((IkReal(0.0300000000000000))*(x995));
IkReal x1004=((IkReal(0.600000000000000))*(x995));
IkReal x1005=((pz)*(x996));
IkReal x1006=((IkReal(0.0600000000000000))*(x996));
IkReal x1007=((IkReal(0.0300000000000000))*(x996));
evalcond[0]=((IkReal(0.300000000000000))+(((IkReal(-1.00000000000000))*(x1005)))+(((IkReal(-0.0300000000000000))*(sj10)))+(((x995)*(x999)))+(x997)+(((IkReal(-1.00000000000000))*(x995)*(x998))));
evalcond[1]=((x1003)+(((IkReal(-1.00000000000000))*(sj10)*(x1007)))+(((IkReal(-1.00000000000000))*(pz)))+(((IkReal(-1.00000000000000))*(x1001)*(x995)))+(((IkReal(-1.00000000000000))*(x1000)*(x995)))+(((x996)*(x997)))+(((IkReal(0.300000000000000))*(x996))));
evalcond[2]=((IkReal(0.0300000000000000))+(((IkReal(-1.00000000000000))*(x1002)))+(((IkReal(-1.00000000000000))*(x1001)))+(((IkReal(-1.00000000000000))*(x1000)))+(((IkReal(-1.00000000000000))*(x996)*(x999)))+(((x996)*(x998))));
evalcond[3]=((((x1000)*(x996)))+(((IkReal(-1.00000000000000))*(x998)))+(((IkReal(-1.00000000000000))*(x1007)))+(((IkReal(-1.00000000000000))*(sj10)*(x1003)))+(((x1001)*(x996)))+(((x995)*(x997)))+(((IkReal(0.300000000000000))*(x995)))+(x999));
evalcond[4]=((IkReal(0.00847044000000000))+(((IkReal(0.600000000000000))*(x1005)))+(((IkReal(-1.00000000000000))*(pp)))+(((IkReal(0.0600000000000000))*(x1002)))+(((IkReal(-1.00000000000000))*(x1004)*(x999)))+(((x1004)*(x998)))+(((IkReal(-1.00000000000000))*(x1006)*(x998)))+(((x1006)*(x999))));
if( IKabs(evalcond[0]) > 0.000001  || IKabs(evalcond[1]) > 0.000001  || IKabs(evalcond[2]) > 0.000001  || IKabs(evalcond[3]) > 0.000001  || IKabs(evalcond[4]) > 0.000001  )
{
continue;
}
}

rotationfunction0(solutions);
}
}

}

}

} else
{
IkReal x1008=((((IkReal(-1.00000000000000))*(cj7)*(px)))+(((IkReal(-1.00000000000000))*(py)*(sj7))));
evalcond[0]=((IkReal(-3.14159265358979))+(IKfmod(((IkReal(4.71238898038469))+(j9)), IkReal(6.28318530717959))));
evalcond[1]=((IkReal(0.190270440000000))+(((IkReal(-0.0368280000000000))*(sj10)))+(((IkReal(0.186480000000000))*(cj10)))+(((IkReal(-1.00000000000000))*(pp))));
evalcond[2]=x1008;
evalcond[3]=x1008;
if( IKabs(evalcond[0]) < 0.0000010000000000  && IKabs(evalcond[1]) < 0.0000010000000000  && IKabs(evalcond[2]) < 0.0000010000000000  && IKabs(evalcond[3]) < 0.0000010000000000  )
{
{
IkReal dummyeval[1];
IkReal gconst51;
IkReal x1009=((cj7)*(py));
IkReal x1010=((IkReal(0.313800000000000))*(sj10));
IkReal x1011=((IkReal(0.0300000000000000))*(px)*(sj7));
gconst51=IKsign(((((cj10)*(x1011)))+(((IkReal(-0.300000000000000))*(pz)))+(((IkReal(-1.00000000000000))*(x1009)*(x1010)))+(((IkReal(-1.00000000000000))*(x1011)))+(((IkReal(0.0300000000000000))*(x1009)))+(((px)*(sj7)*(x1010)))+(((IkReal(-0.0300000000000000))*(cj10)*(x1009)))+(((IkReal(0.0300000000000000))*(pz)*(sj10)))+(((IkReal(-0.313800000000000))*(cj10)*(pz)))));
IkReal x1012=((px)*(sj7));
IkReal x1013=((IkReal(10.4600000000000))*(sj10));
IkReal x1014=((cj7)*(py));
dummyeval[0]=((((cj10)*(x1012)))+(x1014)+(((IkReal(-1.00000000000000))*(cj10)*(x1014)))+(((pz)*(sj10)))+(((IkReal(-10.0000000000000))*(pz)))+(((x1012)*(x1013)))+(((IkReal(-10.4600000000000))*(cj10)*(pz)))+(((IkReal(-1.00000000000000))*(x1013)*(x1014)))+(((IkReal(-1.00000000000000))*(x1012))));
if( IKabs(dummyeval[0]) < 0.0000010000000000  )
{
{
IkReal dummyeval[1];
IkReal gconst50;
gconst50=IKsign((((((px)*(px))*((sj7)*(sj7))))+(((IkReal(-2.00000000000000))*(cj7)*(px)*(py)*(sj7)))+((pz)*(pz))+((((cj7)*(cj7))*((py)*(py))))));
dummyeval[0]=(((((px)*(px))*((sj7)*(sj7))))+(((IkReal(-2.00000000000000))*(cj7)*(px)*(py)*(sj7)))+((pz)*(pz))+((((cj7)*(cj7))*((py)*(py)))));
if( IKabs(dummyeval[0]) < 0.0000010000000000  )
{
{
IkReal evalcond[4];
IkReal x1015=x1008;
evalcond[0]=((IKabs(((IkReal(-3.14159265358979))+(IKfmod(((IkReal(3.14159265358979))+(j10)), IkReal(6.28318530717959))))))+(IKabs(pz)));
evalcond[1]=((IkReal(0.376750440000000))+(((IkReal(-1.00000000000000))*(pp))));
evalcond[2]=x1015;
evalcond[3]=x1015;
if( IKabs(evalcond[0]) < 0.0000010000000000  && IKabs(evalcond[1]) < 0.0000010000000000  && IKabs(evalcond[2]) < 0.0000010000000000  && IKabs(evalcond[3]) < 0.0000010000000000  )
{
{
IkReal dummyeval[1];
dummyeval[0]=((((IkReal(-1.00000000000000))*(px)*(sj7)))+(((cj7)*(py))));
if( IKabs(dummyeval[0]) < 0.0000010000000000  )
{
{
IkReal dummyeval[2];
IkReal x1016=((cj7)*(py));
IkReal x1017=((px)*(sj7));
dummyeval[0]=((((IkReal(-1.00000000000000))*((x1017)*(x1017))))+(((IkReal(2.00000000000000))*(x1016)*(x1017)))+(((IkReal(-1.00000000000000))*((x1016)*(x1016)))));
dummyeval[1]=((x1017)+(((IkReal(-1.00000000000000))*(x1016))));
if( IKabs(dummyeval[0]) < 0.0000010000000000  || IKabs(dummyeval[1]) < 0.0000010000000000  )
{
{
IkReal evalcond[7];
IkReal x1018=((IkReal(1.00000000000000))*(pp));
IkReal x1019=((IkReal(-1.00000000000000))*(py));
evalcond[0]=((IKabs(px))+(IKabs(((IkReal(-3.14159265358979))+(IKfmod(((IkReal(1.57079632679490))+(j7)), IkReal(6.28318530717959)))))));
evalcond[1]=((IkReal(0.376750440000000))+(((IkReal(-1.00000000000000))*(x1018))));
evalcond[2]=x1019;
evalcond[3]=IkReal(0.613800000000000);
evalcond[4]=x1019;
evalcond[5]=IkReal(0);
evalcond[6]=((IkReal(0.00847044000000000))+(((IkReal(-1.00000000000000))*(x1018))));
if( IKabs(evalcond[0]) < 0.0000010000000000  && IKabs(evalcond[1]) < 0.0000010000000000  && IKabs(evalcond[2]) < 0.0000010000000000  && IKabs(evalcond[3]) < 0.0000010000000000  && IKabs(evalcond[4]) < 0.0000010000000000  && IKabs(evalcond[5]) < 0.0000010000000000  && IKabs(evalcond[6]) < 0.0000010000000000  )
{
{
IkReal dummyeval[1];
dummyeval[0]=IkReal(-1.00000000000000);
if( IKabs(dummyeval[0]) < 0.0000001000000000  )
{
continue;

} else
{
IkReal op[2+1], zeror[2];
int numroots;
op[0]=IkReal(-1.00000000000000);
op[1]=IkReal(0);
op[2]=IkReal(1.00000000000000);
polyroots2(op,zeror,numroots);
IkReal j8array[2], cj8array[2], sj8array[2], tempj8array[1];
int numsolutions = 0;
for(int ij8 = 0; ij8 < numroots; ++ij8)
{
IkReal htj8 = zeror[ij8];
tempj8array[0]=((IkReal(2.00000000000000))*(atan(htj8)));
for(int kj8 = 0; kj8 < 1; ++kj8)
{
j8array[numsolutions] = tempj8array[kj8];
if( j8array[numsolutions] > IKPI )
{
    j8array[numsolutions]-=IK2PI;
}
else if( j8array[numsolutions] < -IKPI )
{
    j8array[numsolutions]+=IK2PI;
}
sj8array[numsolutions] = IKsin(j8array[numsolutions]);
cj8array[numsolutions] = IKcos(j8array[numsolutions]);
numsolutions++;
}
}
bool j8valid[2]={true,true};
_nj8 = 2;
for(int ij8 = 0; ij8 < numsolutions; ++ij8)
    {
if( !j8valid[ij8] )
{
    continue;
}
    j8 = j8array[ij8]; cj8 = cj8array[ij8]; sj8 = sj8array[ij8];
htj8 = IKtan(j8/2);

_ij8[0] = ij8; _ij8[1] = -1;
for(int iij8 = ij8+1; iij8 < numsolutions; ++iij8)
{
if( j8valid[iij8] && IKabs(cj8array[ij8]-cj8array[iij8]) < IKFAST_SOLUTION_THRESH && IKabs(sj8array[ij8]-sj8array[iij8]) < IKFAST_SOLUTION_THRESH )
{
    j8valid[iij8]=false; _ij8[1] = iij8; break; 
}
}
rotationfunction0(solutions);
    }

}

}

} else
{
IkReal x1020=((IkReal(1.00000000000000))*(pp));
evalcond[0]=((IKabs(px))+(IKabs(((IkReal(-3.14159265358979))+(IKfmod(((IkReal(4.71238898038469))+(j7)), IkReal(6.28318530717959)))))));
evalcond[1]=((IkReal(0.376750440000000))+(((IkReal(-1.00000000000000))*(x1020))));
evalcond[2]=py;
evalcond[3]=IkReal(0.613800000000000);
evalcond[4]=py;
evalcond[5]=IkReal(0);
evalcond[6]=((IkReal(0.00847044000000000))+(((IkReal(-1.00000000000000))*(x1020))));
if( IKabs(evalcond[0]) < 0.0000010000000000  && IKabs(evalcond[1]) < 0.0000010000000000  && IKabs(evalcond[2]) < 0.0000010000000000  && IKabs(evalcond[3]) < 0.0000010000000000  && IKabs(evalcond[4]) < 0.0000010000000000  && IKabs(evalcond[5]) < 0.0000010000000000  && IKabs(evalcond[6]) < 0.0000010000000000  )
{
{
IkReal dummyeval[1];
dummyeval[0]=IkReal(-1.00000000000000);
if( IKabs(dummyeval[0]) < 0.0000001000000000  )
{
continue;

} else
{
IkReal op[2+1], zeror[2];
int numroots;
op[0]=IkReal(-1.00000000000000);
op[1]=IkReal(0);
op[2]=IkReal(1.00000000000000);
polyroots2(op,zeror,numroots);
IkReal j8array[2], cj8array[2], sj8array[2], tempj8array[1];
int numsolutions = 0;
for(int ij8 = 0; ij8 < numroots; ++ij8)
{
IkReal htj8 = zeror[ij8];
tempj8array[0]=((IkReal(2.00000000000000))*(atan(htj8)));
for(int kj8 = 0; kj8 < 1; ++kj8)
{
j8array[numsolutions] = tempj8array[kj8];
if( j8array[numsolutions] > IKPI )
{
    j8array[numsolutions]-=IK2PI;
}
else if( j8array[numsolutions] < -IKPI )
{
    j8array[numsolutions]+=IK2PI;
}
sj8array[numsolutions] = IKsin(j8array[numsolutions]);
cj8array[numsolutions] = IKcos(j8array[numsolutions]);
numsolutions++;
}
}
bool j8valid[2]={true,true};
_nj8 = 2;
for(int ij8 = 0; ij8 < numsolutions; ++ij8)
    {
if( !j8valid[ij8] )
{
    continue;
}
    j8 = j8array[ij8]; cj8 = cj8array[ij8]; sj8 = sj8array[ij8];
htj8 = IKtan(j8/2);

_ij8[0] = ij8; _ij8[1] = -1;
for(int iij8 = ij8+1; iij8 < numsolutions; ++iij8)
{
if( j8valid[iij8] && IKabs(cj8array[ij8]-cj8array[iij8]) < IKFAST_SOLUTION_THRESH && IKabs(sj8array[ij8]-sj8array[iij8]) < IKFAST_SOLUTION_THRESH )
{
    j8valid[iij8]=false; _ij8[1] = iij8; break; 
}
}
rotationfunction0(solutions);
    }

}

}

} else
{
IkReal x1021=((IkReal(1.00000000000000))*(pp));
IkReal x1022=((IkReal(-1.00000000000000))*(px));
evalcond[0]=((IKabs(((IkReal(-3.14159265358979))+(IKfmod(((IkReal(3.14159265358979))+(j7)), IkReal(6.28318530717959))))))+(IKabs(py)));
evalcond[1]=((IkReal(0.376750440000000))+(((IkReal(-1.00000000000000))*(x1021))));
evalcond[2]=x1022;
evalcond[3]=IkReal(0.613800000000000);
evalcond[4]=x1022;
evalcond[5]=IkReal(0);
evalcond[6]=((IkReal(0.00847044000000000))+(((IkReal(-1.00000000000000))*(x1021))));
if( IKabs(evalcond[0]) < 0.0000010000000000  && IKabs(evalcond[1]) < 0.0000010000000000  && IKabs(evalcond[2]) < 0.0000010000000000  && IKabs(evalcond[3]) < 0.0000010000000000  && IKabs(evalcond[4]) < 0.0000010000000000  && IKabs(evalcond[5]) < 0.0000010000000000  && IKabs(evalcond[6]) < 0.0000010000000000  )
{
{
IkReal dummyeval[1];
dummyeval[0]=IkReal(-1.00000000000000);
if( IKabs(dummyeval[0]) < 0.0000001000000000  )
{
continue;

} else
{
IkReal op[2+1], zeror[2];
int numroots;
op[0]=IkReal(-1.00000000000000);
op[1]=IkReal(0);
op[2]=IkReal(1.00000000000000);
polyroots2(op,zeror,numroots);
IkReal j8array[2], cj8array[2], sj8array[2], tempj8array[1];
int numsolutions = 0;
for(int ij8 = 0; ij8 < numroots; ++ij8)
{
IkReal htj8 = zeror[ij8];
tempj8array[0]=((IkReal(2.00000000000000))*(atan(htj8)));
for(int kj8 = 0; kj8 < 1; ++kj8)
{
j8array[numsolutions] = tempj8array[kj8];
if( j8array[numsolutions] > IKPI )
{
    j8array[numsolutions]-=IK2PI;
}
else if( j8array[numsolutions] < -IKPI )
{
    j8array[numsolutions]+=IK2PI;
}
sj8array[numsolutions] = IKsin(j8array[numsolutions]);
cj8array[numsolutions] = IKcos(j8array[numsolutions]);
numsolutions++;
}
}
bool j8valid[2]={true,true};
_nj8 = 2;
for(int ij8 = 0; ij8 < numsolutions; ++ij8)
    {
if( !j8valid[ij8] )
{
    continue;
}
    j8 = j8array[ij8]; cj8 = cj8array[ij8]; sj8 = sj8array[ij8];
htj8 = IKtan(j8/2);

_ij8[0] = ij8; _ij8[1] = -1;
for(int iij8 = ij8+1; iij8 < numsolutions; ++iij8)
{
if( j8valid[iij8] && IKabs(cj8array[ij8]-cj8array[iij8]) < IKFAST_SOLUTION_THRESH && IKabs(sj8array[ij8]-sj8array[iij8]) < IKFAST_SOLUTION_THRESH )
{
    j8valid[iij8]=false; _ij8[1] = iij8; break; 
}
}
rotationfunction0(solutions);
    }

}

}

} else
{
IkReal x1023=((IkReal(1.00000000000000))*(pp));
evalcond[0]=((IKabs(py))+(IKabs(((IkReal(-3.14159265358979))+(IKfmod(j7, IkReal(6.28318530717959)))))));
evalcond[1]=((IkReal(0.376750440000000))+(((IkReal(-1.00000000000000))*(x1023))));
evalcond[2]=px;
evalcond[3]=IkReal(0.613800000000000);
evalcond[4]=px;
evalcond[5]=IkReal(0);
evalcond[6]=((IkReal(0.00847044000000000))+(((IkReal(-1.00000000000000))*(x1023))));
if( IKabs(evalcond[0]) < 0.0000010000000000  && IKabs(evalcond[1]) < 0.0000010000000000  && IKabs(evalcond[2]) < 0.0000010000000000  && IKabs(evalcond[3]) < 0.0000010000000000  && IKabs(evalcond[4]) < 0.0000010000000000  && IKabs(evalcond[5]) < 0.0000010000000000  && IKabs(evalcond[6]) < 0.0000010000000000  )
{
{
IkReal dummyeval[1];
dummyeval[0]=IkReal(-1.00000000000000);
if( IKabs(dummyeval[0]) < 0.0000001000000000  )
{
continue;

} else
{
IkReal op[2+1], zeror[2];
int numroots;
op[0]=IkReal(-1.00000000000000);
op[1]=IkReal(0);
op[2]=IkReal(1.00000000000000);
polyroots2(op,zeror,numroots);
IkReal j8array[2], cj8array[2], sj8array[2], tempj8array[1];
int numsolutions = 0;
for(int ij8 = 0; ij8 < numroots; ++ij8)
{
IkReal htj8 = zeror[ij8];
tempj8array[0]=((IkReal(2.00000000000000))*(atan(htj8)));
for(int kj8 = 0; kj8 < 1; ++kj8)
{
j8array[numsolutions] = tempj8array[kj8];
if( j8array[numsolutions] > IKPI )
{
    j8array[numsolutions]-=IK2PI;
}
else if( j8array[numsolutions] < -IKPI )
{
    j8array[numsolutions]+=IK2PI;
}
sj8array[numsolutions] = IKsin(j8array[numsolutions]);
cj8array[numsolutions] = IKcos(j8array[numsolutions]);
numsolutions++;
}
}
bool j8valid[2]={true,true};
_nj8 = 2;
for(int ij8 = 0; ij8 < numsolutions; ++ij8)
    {
if( !j8valid[ij8] )
{
    continue;
}
    j8 = j8array[ij8]; cj8 = cj8array[ij8]; sj8 = sj8array[ij8];
htj8 = IKtan(j8/2);

_ij8[0] = ij8; _ij8[1] = -1;
for(int iij8 = ij8+1; iij8 < numsolutions; ++iij8)
{
if( j8valid[iij8] && IKabs(cj8array[ij8]-cj8array[iij8]) < IKFAST_SOLUTION_THRESH && IKabs(sj8array[ij8]-sj8array[iij8]) < IKFAST_SOLUTION_THRESH )
{
    j8valid[iij8]=false; _ij8[1] = iij8; break; 
}
}
rotationfunction0(solutions);
    }

}

}

} else
{
if( 1 )
{
continue;

} else
{
}
}
}
}
}
}

} else
{
{
IkReal j8array[1], cj8array[1], sj8array[1];
bool j8valid[1]={false};
_nj8 = 1;
IkReal x1024=((cj7)*(py));
IkReal x1025=((px)*(sj7));
IkReal x1026=((IkReal(5000.00000000000))*(x1025));
if( IKabs(((((IKabs(((((IkReal(600.000000000000))*(x1024)*(x1025)))+(((IkReal(-300.000000000000))*((x1024)*(x1024))))+(((IkReal(-300.000000000000))*((x1025)*(x1025)))))) != 0)?((IkReal)1/(((((IkReal(600.000000000000))*(x1024)*(x1025)))+(((IkReal(-300.000000000000))*((x1024)*(x1024))))+(((IkReal(-300.000000000000))*((x1025)*(x1025))))))):(IkReal)1.0e30))*(((((pp)*(x1026)))+(((IkReal(-5000.00000000000))*(pp)*(x1024)))+(((IkReal(1883.75220000000))*(x1024)))+(((IkReal(-1883.75220000000))*(x1025))))))) < IKFAST_ATAN2_MAGTHRESH && IKabs(((IkReal(-3069.00000000000))*(((IKabs(((x1026)+(((IkReal(-5000.00000000000))*(x1024))))) != 0)?((IkReal)1/(((x1026)+(((IkReal(-5000.00000000000))*(x1024)))))):(IkReal)1.0e30)))) < IKFAST_ATAN2_MAGTHRESH && IKabs(IKsqr(((((IKabs(((((IkReal(600.000000000000))*(x1024)*(x1025)))+(((IkReal(-300.000000000000))*((x1024)*(x1024))))+(((IkReal(-300.000000000000))*((x1025)*(x1025)))))) != 0)?((IkReal)1/(((((IkReal(600.000000000000))*(x1024)*(x1025)))+(((IkReal(-300.000000000000))*((x1024)*(x1024))))+(((IkReal(-300.000000000000))*((x1025)*(x1025))))))):(IkReal)1.0e30))*(((((pp)*(x1026)))+(((IkReal(-5000.00000000000))*(pp)*(x1024)))+(((IkReal(1883.75220000000))*(x1024)))+(((IkReal(-1883.75220000000))*(x1025)))))))+IKsqr(((IkReal(-3069.00000000000))*(((IKabs(((x1026)+(((IkReal(-5000.00000000000))*(x1024))))) != 0)?((IkReal)1/(((x1026)+(((IkReal(-5000.00000000000))*(x1024)))))):(IkReal)1.0e30))))-1) <= IKFAST_SINCOS_THRESH )
    continue;
j8array[0]=IKatan2(((((IKabs(((((IkReal(600.000000000000))*(x1024)*(x1025)))+(((IkReal(-300.000000000000))*((x1024)*(x1024))))+(((IkReal(-300.000000000000))*((x1025)*(x1025)))))) != 0)?((IkReal)1/(((((IkReal(600.000000000000))*(x1024)*(x1025)))+(((IkReal(-300.000000000000))*((x1024)*(x1024))))+(((IkReal(-300.000000000000))*((x1025)*(x1025))))))):(IkReal)1.0e30))*(((((pp)*(x1026)))+(((IkReal(-5000.00000000000))*(pp)*(x1024)))+(((IkReal(1883.75220000000))*(x1024)))+(((IkReal(-1883.75220000000))*(x1025)))))), ((IkReal(-3069.00000000000))*(((IKabs(((x1026)+(((IkReal(-5000.00000000000))*(x1024))))) != 0)?((IkReal)1/(((x1026)+(((IkReal(-5000.00000000000))*(x1024)))))):(IkReal)1.0e30))));
sj8array[0]=IKsin(j8array[0]);
cj8array[0]=IKcos(j8array[0]);
if( j8array[0] > IKPI )
{
    j8array[0]-=IK2PI;
}
else if( j8array[0] < -IKPI )
{    j8array[0]+=IK2PI;
}
j8valid[0] = true;
for(int ij8 = 0; ij8 < 1; ++ij8)
{
if( !j8valid[ij8] )
{
    continue;
}
_ij8[0] = ij8; _ij8[1] = -1;
for(int iij8 = ij8+1; iij8 < 1; ++iij8)
{
if( j8valid[iij8] && IKabs(cj8array[ij8]-cj8array[iij8]) < IKFAST_SOLUTION_THRESH && IKabs(sj8array[ij8]-sj8array[iij8]) < IKFAST_SOLUTION_THRESH )
{
    j8valid[iij8]=false; _ij8[1] = iij8; break; 
}
}
j8 = j8array[ij8]; cj8 = cj8array[ij8]; sj8 = sj8array[ij8];
{
IkReal evalcond[5];
IkReal x1027=IKcos(j8);
IkReal x1028=IKsin(j8);
IkReal x1029=((cj7)*(py));
IkReal x1030=((px)*(sj7));
IkReal x1031=((IkReal(0.0600000000000000))*(x1028));
IkReal x1032=((x1027)*(x1030));
evalcond[0]=((IkReal(0.613800000000000))+(x1032)+(((IkReal(-1.00000000000000))*(x1027)*(x1029))));
evalcond[1]=((IkReal(0.613800000000000))*(x1028));
evalcond[2]=((((x1028)*(x1030)))+(((IkReal(-1.00000000000000))*(x1028)*(x1029))));
evalcond[3]=((x1030)+(((IkReal(-1.00000000000000))*(x1029)))+(((IkReal(0.613800000000000))*(x1027))));
evalcond[4]=((IkReal(0.00847044000000000))+(((IkReal(0.600000000000000))*(x1027)*(x1029)))+(((IkReal(-1.00000000000000))*(pp)))+(((x1029)*(x1031)))+(((IkReal(-1.00000000000000))*(x1030)*(x1031)))+(((IkReal(-0.600000000000000))*(x1032))));
if( IKabs(evalcond[0]) > 0.000001  || IKabs(evalcond[1]) > 0.000001  || IKabs(evalcond[2]) > 0.000001  || IKabs(evalcond[3]) > 0.000001  || IKabs(evalcond[4]) > 0.000001  )
{
continue;
}
}

rotationfunction0(solutions);
}
}

}

}

} else
{
{
IkReal j8array[1], cj8array[1], sj8array[1];
bool j8valid[1]={false};
_nj8 = 1;
IkReal x1033=((cj7)*(py));
IkReal x1034=((px)*(sj7));
if( IKabs(((((IKabs(((((IkReal(-184.140000000000))*(x1034)))+(((IkReal(184.140000000000))*(x1033))))) != 0)?((IkReal)1/(((((IkReal(-184.140000000000))*(x1034)))+(((IkReal(184.140000000000))*(x1033)))))):(IkReal)1.0e30))*(((IkReal(-25.9957803600000))+(((IkReal(6000.00000000000))*(x1033)*(x1034)))+(((IkReal(-3000.00000000000))*((x1033)*(x1033))))+(((IkReal(-3000.00000000000))*((x1034)*(x1034))))+(((IkReal(3069.00000000000))*(pp))))))) < IKFAST_ATAN2_MAGTHRESH && IKabs(((((IkReal(1.62919517758227))*(x1033)))+(((IkReal(-1.62919517758227))*(x1034))))) < IKFAST_ATAN2_MAGTHRESH && IKabs(IKsqr(((((IKabs(((((IkReal(-184.140000000000))*(x1034)))+(((IkReal(184.140000000000))*(x1033))))) != 0)?((IkReal)1/(((((IkReal(-184.140000000000))*(x1034)))+(((IkReal(184.140000000000))*(x1033)))))):(IkReal)1.0e30))*(((IkReal(-25.9957803600000))+(((IkReal(6000.00000000000))*(x1033)*(x1034)))+(((IkReal(-3000.00000000000))*((x1033)*(x1033))))+(((IkReal(-3000.00000000000))*((x1034)*(x1034))))+(((IkReal(3069.00000000000))*(pp)))))))+IKsqr(((((IkReal(1.62919517758227))*(x1033)))+(((IkReal(-1.62919517758227))*(x1034)))))-1) <= IKFAST_SINCOS_THRESH )
    continue;
j8array[0]=IKatan2(((((IKabs(((((IkReal(-184.140000000000))*(x1034)))+(((IkReal(184.140000000000))*(x1033))))) != 0)?((IkReal)1/(((((IkReal(-184.140000000000))*(x1034)))+(((IkReal(184.140000000000))*(x1033)))))):(IkReal)1.0e30))*(((IkReal(-25.9957803600000))+(((IkReal(6000.00000000000))*(x1033)*(x1034)))+(((IkReal(-3000.00000000000))*((x1033)*(x1033))))+(((IkReal(-3000.00000000000))*((x1034)*(x1034))))+(((IkReal(3069.00000000000))*(pp)))))), ((((IkReal(1.62919517758227))*(x1033)))+(((IkReal(-1.62919517758227))*(x1034)))));
sj8array[0]=IKsin(j8array[0]);
cj8array[0]=IKcos(j8array[0]);
if( j8array[0] > IKPI )
{
    j8array[0]-=IK2PI;
}
else if( j8array[0] < -IKPI )
{    j8array[0]+=IK2PI;
}
j8valid[0] = true;
for(int ij8 = 0; ij8 < 1; ++ij8)
{
if( !j8valid[ij8] )
{
    continue;
}
_ij8[0] = ij8; _ij8[1] = -1;
for(int iij8 = ij8+1; iij8 < 1; ++iij8)
{
if( j8valid[iij8] && IKabs(cj8array[ij8]-cj8array[iij8]) < IKFAST_SOLUTION_THRESH && IKabs(sj8array[ij8]-sj8array[iij8]) < IKFAST_SOLUTION_THRESH )
{
    j8valid[iij8]=false; _ij8[1] = iij8; break; 
}
}
j8 = j8array[ij8]; cj8 = cj8array[ij8]; sj8 = sj8array[ij8];
{
IkReal evalcond[5];
IkReal x1035=IKcos(j8);
IkReal x1036=IKsin(j8);
IkReal x1037=((cj7)*(py));
IkReal x1038=((px)*(sj7));
IkReal x1039=((IkReal(0.0600000000000000))*(x1036));
IkReal x1040=((x1035)*(x1038));
evalcond[0]=((IkReal(0.613800000000000))+(x1040)+(((IkReal(-1.00000000000000))*(x1035)*(x1037))));
evalcond[1]=((IkReal(0.613800000000000))*(x1036));
evalcond[2]=((((x1036)*(x1038)))+(((IkReal(-1.00000000000000))*(x1036)*(x1037))));
evalcond[3]=((x1038)+(((IkReal(-1.00000000000000))*(x1037)))+(((IkReal(0.613800000000000))*(x1035))));
evalcond[4]=((IkReal(0.00847044000000000))+(((IkReal(-1.00000000000000))*(x1038)*(x1039)))+(((IkReal(-0.600000000000000))*(x1040)))+(((IkReal(-1.00000000000000))*(pp)))+(((x1037)*(x1039)))+(((IkReal(0.600000000000000))*(x1035)*(x1037))));
if( IKabs(evalcond[0]) > 0.000001  || IKabs(evalcond[1]) > 0.000001  || IKabs(evalcond[2]) > 0.000001  || IKabs(evalcond[3]) > 0.000001  || IKabs(evalcond[4]) > 0.000001  )
{
continue;
}
}

rotationfunction0(solutions);
}
}

}

}

} else
{
if( 1 )
{
continue;

} else
{
}
}
}

} else
{
{
IkReal j8array[1], cj8array[1], sj8array[1];
bool j8valid[1]={false};
_nj8 = 1;
IkReal x1041=((px)*(sj7));
IkReal x1042=((IkReal(0.0300000000000000))*(cj10));
IkReal x1043=((IkReal(0.313800000000000))*(sj10));
IkReal x1044=((IkReal(0.0300000000000000))*(pz));
IkReal x1045=((IkReal(0.313800000000000))*(cj10));
IkReal x1046=((cj7)*(py));
IkReal x1047=((IkReal(0.0300000000000000))*(x1046));
if( IKabs(((gconst50)*(((x1047)+(((IkReal(-0.0300000000000000))*(x1041)))+(((IkReal(0.300000000000000))*(pz)))+(((x1041)*(x1042)))+(((x1041)*(x1043)))+(((IkReal(-1.00000000000000))*(x1043)*(x1046)))+(((pz)*(x1045)))+(((IkReal(-1.00000000000000))*(x1042)*(x1046)))+(((IkReal(-1.00000000000000))*(sj10)*(x1044))))))) < IKFAST_ATAN2_MAGTHRESH && IKabs(((gconst50)*(((((IkReal(-0.300000000000000))*(x1041)))+(((IkReal(0.300000000000000))*(x1046)))+(((IkReal(-1.00000000000000))*(x1041)*(x1045)))+(((pz)*(x1042)))+(((pz)*(x1043)))+(((IkReal(0.0300000000000000))*(sj10)*(x1041)))+(((x1045)*(x1046)))+(((IkReal(-1.00000000000000))*(sj10)*(x1047)))+(((IkReal(-1.00000000000000))*(x1044))))))) < IKFAST_ATAN2_MAGTHRESH )
    continue;
j8array[0]=IKatan2(((gconst50)*(((x1047)+(((IkReal(-0.0300000000000000))*(x1041)))+(((IkReal(0.300000000000000))*(pz)))+(((x1041)*(x1042)))+(((x1041)*(x1043)))+(((IkReal(-1.00000000000000))*(x1043)*(x1046)))+(((pz)*(x1045)))+(((IkReal(-1.00000000000000))*(x1042)*(x1046)))+(((IkReal(-1.00000000000000))*(sj10)*(x1044)))))), ((gconst50)*(((((IkReal(-0.300000000000000))*(x1041)))+(((IkReal(0.300000000000000))*(x1046)))+(((IkReal(-1.00000000000000))*(x1041)*(x1045)))+(((pz)*(x1042)))+(((pz)*(x1043)))+(((IkReal(0.0300000000000000))*(sj10)*(x1041)))+(((x1045)*(x1046)))+(((IkReal(-1.00000000000000))*(sj10)*(x1047)))+(((IkReal(-1.00000000000000))*(x1044)))))));
sj8array[0]=IKsin(j8array[0]);
cj8array[0]=IKcos(j8array[0]);
if( j8array[0] > IKPI )
{
    j8array[0]-=IK2PI;
}
else if( j8array[0] < -IKPI )
{    j8array[0]+=IK2PI;
}
j8valid[0] = true;
for(int ij8 = 0; ij8 < 1; ++ij8)
{
if( !j8valid[ij8] )
{
    continue;
}
_ij8[0] = ij8; _ij8[1] = -1;
for(int iij8 = ij8+1; iij8 < 1; ++iij8)
{
if( j8valid[iij8] && IKabs(cj8array[ij8]-cj8array[iij8]) < IKFAST_SOLUTION_THRESH && IKabs(sj8array[ij8]-sj8array[iij8]) < IKFAST_SOLUTION_THRESH )
{
    j8valid[iij8]=false; _ij8[1] = iij8; break; 
}
}
j8 = j8array[ij8]; cj8 = cj8array[ij8]; sj8 = sj8array[ij8];
{
IkReal evalcond[5];
IkReal x1048=IKcos(j8);
IkReal x1049=IKsin(j8);
IkReal x1050=((IkReal(0.313800000000000))*(cj10));
IkReal x1051=((px)*(sj7));
IkReal x1052=((IkReal(0.313800000000000))*(sj10));
IkReal x1053=((IkReal(0.0300000000000000))*(cj10));
IkReal x1054=((cj7)*(py));
IkReal x1055=((pz)*(x1048));
IkReal x1056=((IkReal(0.0300000000000000))*(x1048));
IkReal x1057=((pz)*(x1049));
IkReal x1058=((IkReal(0.0600000000000000))*(x1049));
IkReal x1059=((IkReal(0.0300000000000000))*(x1049));
IkReal x1060=((x1048)*(x1054));
evalcond[0]=((IkReal(0.300000000000000))+(x1050)+(((x1048)*(x1051)))+(((IkReal(-0.0300000000000000))*(sj10)))+(((IkReal(-1.00000000000000))*(x1057)))+(((IkReal(-1.00000000000000))*(x1060))));
evalcond[1]=((((IkReal(-1.00000000000000))*(sj10)*(x1059)))+(((IkReal(-1.00000000000000))*(x1056)))+(((IkReal(0.300000000000000))*(x1049)))+(((x1048)*(x1053)))+(((x1048)*(x1052)))+(((IkReal(-1.00000000000000))*(pz)))+(((x1049)*(x1050))));
evalcond[2]=((IkReal(0.0300000000000000))+(((IkReal(-1.00000000000000))*(x1053)))+(((IkReal(-1.00000000000000))*(x1052)))+(x1055)+(((IkReal(-1.00000000000000))*(x1049)*(x1054)))+(((x1049)*(x1051))));
evalcond[3]=((((IkReal(-1.00000000000000))*(sj10)*(x1056)))+(x1051)+(x1059)+(((IkReal(0.300000000000000))*(x1048)))+(((x1048)*(x1050)))+(((IkReal(-1.00000000000000))*(x1054)))+(((IkReal(-1.00000000000000))*(x1049)*(x1053)))+(((IkReal(-1.00000000000000))*(x1049)*(x1052))));
evalcond[4]=((IkReal(0.00847044000000000))+(((IkReal(-0.600000000000000))*(x1048)*(x1051)))+(((x1054)*(x1058)))+(((IkReal(-0.0600000000000000))*(x1055)))+(((IkReal(-1.00000000000000))*(pp)))+(((IkReal(0.600000000000000))*(x1060)))+(((IkReal(0.600000000000000))*(x1057)))+(((IkReal(-1.00000000000000))*(x1051)*(x1058))));
if( IKabs(evalcond[0]) > 0.000001  || IKabs(evalcond[1]) > 0.000001  || IKabs(evalcond[2]) > 0.000001  || IKabs(evalcond[3]) > 0.000001  || IKabs(evalcond[4]) > 0.000001  )
{
continue;
}
}

rotationfunction0(solutions);
}
}

}

}

} else
{
{
IkReal j8array[1], cj8array[1], sj8array[1];
bool j8valid[1]={false};
_nj8 = 1;
IkReal x1061=(sj10)*(sj10);
IkReal x1062=(cj10)*(cj10);
IkReal x1063=((IkReal(0.0188280000000000))*(sj10));
if( IKabs(((gconst51)*(((IkReal(0.000900000000000000))+(((IkReal(-0.00180000000000000))*(cj10)))+(((IkReal(0.0984704400000000))*(x1061)))+(((IkReal(-1.00000000000000))*((pz)*(pz))))+(((IkReal(0.000900000000000000))*(x1062)))+(((IkReal(-1.00000000000000))*(x1063)))+(((cj10)*(x1063))))))) < IKFAST_ATAN2_MAGTHRESH && IKabs(((gconst51)*(((IkReal(0.00900000000000000))+(((IkReal(-0.00941400000000000))*(x1062)))+(((px)*(pz)*(sj7)))+(((IkReal(-0.0950400000000000))*(sj10)))+(((IkReal(0.000414000000000000))*(cj10)))+(((IkReal(0.00941400000000000))*(x1061)))+(((IkReal(-0.0975704400000000))*(cj10)*(sj10)))+(((IkReal(-1.00000000000000))*(cj7)*(py)*(pz))))))) < IKFAST_ATAN2_MAGTHRESH )
    continue;
j8array[0]=IKatan2(((gconst51)*(((IkReal(0.000900000000000000))+(((IkReal(-0.00180000000000000))*(cj10)))+(((IkReal(0.0984704400000000))*(x1061)))+(((IkReal(-1.00000000000000))*((pz)*(pz))))+(((IkReal(0.000900000000000000))*(x1062)))+(((IkReal(-1.00000000000000))*(x1063)))+(((cj10)*(x1063)))))), ((gconst51)*(((IkReal(0.00900000000000000))+(((IkReal(-0.00941400000000000))*(x1062)))+(((px)*(pz)*(sj7)))+(((IkReal(-0.0950400000000000))*(sj10)))+(((IkReal(0.000414000000000000))*(cj10)))+(((IkReal(0.00941400000000000))*(x1061)))+(((IkReal(-0.0975704400000000))*(cj10)*(sj10)))+(((IkReal(-1.00000000000000))*(cj7)*(py)*(pz)))))));
sj8array[0]=IKsin(j8array[0]);
cj8array[0]=IKcos(j8array[0]);
if( j8array[0] > IKPI )
{
    j8array[0]-=IK2PI;
}
else if( j8array[0] < -IKPI )
{    j8array[0]+=IK2PI;
}
j8valid[0] = true;
for(int ij8 = 0; ij8 < 1; ++ij8)
{
if( !j8valid[ij8] )
{
    continue;
}
_ij8[0] = ij8; _ij8[1] = -1;
for(int iij8 = ij8+1; iij8 < 1; ++iij8)
{
if( j8valid[iij8] && IKabs(cj8array[ij8]-cj8array[iij8]) < IKFAST_SOLUTION_THRESH && IKabs(sj8array[ij8]-sj8array[iij8]) < IKFAST_SOLUTION_THRESH )
{
    j8valid[iij8]=false; _ij8[1] = iij8; break; 
}
}
j8 = j8array[ij8]; cj8 = cj8array[ij8]; sj8 = sj8array[ij8];
{
IkReal evalcond[5];
IkReal x1064=IKcos(j8);
IkReal x1065=IKsin(j8);
IkReal x1066=((IkReal(0.313800000000000))*(cj10));
IkReal x1067=((px)*(sj7));
IkReal x1068=((IkReal(0.313800000000000))*(sj10));
IkReal x1069=((IkReal(0.0300000000000000))*(cj10));
IkReal x1070=((cj7)*(py));
IkReal x1071=((pz)*(x1064));
IkReal x1072=((IkReal(0.0300000000000000))*(x1064));
IkReal x1073=((pz)*(x1065));
IkReal x1074=((IkReal(0.0600000000000000))*(x1065));
IkReal x1075=((IkReal(0.0300000000000000))*(x1065));
IkReal x1076=((x1064)*(x1070));
evalcond[0]=((IkReal(0.300000000000000))+(x1066)+(((IkReal(-0.0300000000000000))*(sj10)))+(((IkReal(-1.00000000000000))*(x1073)))+(((IkReal(-1.00000000000000))*(x1076)))+(((x1064)*(x1067))));
evalcond[1]=((((IkReal(0.300000000000000))*(x1065)))+(((IkReal(-1.00000000000000))*(sj10)*(x1075)))+(((IkReal(-1.00000000000000))*(pz)))+(((IkReal(-1.00000000000000))*(x1072)))+(((x1064)*(x1068)))+(((x1064)*(x1069)))+(((x1065)*(x1066))));
evalcond[2]=((IkReal(0.0300000000000000))+(x1071)+(((IkReal(-1.00000000000000))*(x1065)*(x1070)))+(((IkReal(-1.00000000000000))*(x1069)))+(((IkReal(-1.00000000000000))*(x1068)))+(((x1065)*(x1067))));
evalcond[3]=((((IkReal(0.300000000000000))*(x1064)))+(x1075)+(x1067)+(((IkReal(-1.00000000000000))*(sj10)*(x1072)))+(((IkReal(-1.00000000000000))*(x1070)))+(((IkReal(-1.00000000000000))*(x1065)*(x1069)))+(((IkReal(-1.00000000000000))*(x1065)*(x1068)))+(((x1064)*(x1066))));
evalcond[4]=((IkReal(0.00847044000000000))+(((x1070)*(x1074)))+(((IkReal(-0.0600000000000000))*(x1071)))+(((IkReal(0.600000000000000))*(x1073)))+(((IkReal(0.600000000000000))*(x1076)))+(((IkReal(-1.00000000000000))*(pp)))+(((IkReal(-1.00000000000000))*(x1067)*(x1074)))+(((IkReal(-0.600000000000000))*(x1064)*(x1067))));
if( IKabs(evalcond[0]) > 0.000001  || IKabs(evalcond[1]) > 0.000001  || IKabs(evalcond[2]) > 0.000001  || IKabs(evalcond[3]) > 0.000001  || IKabs(evalcond[4]) > 0.000001  )
{
continue;
}
}

rotationfunction0(solutions);
}
}

}

}

} else
{
if( 1 )
{
continue;

} else
{
}
}
}
}

} else
{
{
IkReal j8array[1], cj8array[1], sj8array[1];
bool j8valid[1]={false};
_nj8 = 1;
IkReal x1077=((py)*(sj9));
IkReal x1078=((cj7)*(sj9));
IkReal x1079=((IkReal(0.300000000000000))*(cj9));
IkReal x1080=((cj7)*(py));
IkReal x1081=((px)*(sj7));
IkReal x1082=((IkReal(0.313800000000000))*(cj10)*(cj9));
IkReal x1083=((IkReal(0.0300000000000000))*(cj9)*(sj10));
if( IKabs(((gconst46)*(((((IkReal(-1.00000000000000))*(pz)*(x1083)))+(((pz)*(x1082)))+(((pz)*(x1079)))+(((IkReal(-1.00000000000000))*(px)*(x1077)*((cj7)*(cj7))))+(((px)*(x1078)*(x1081)))+(((sj7)*(x1077)*(x1081)))+(((IkReal(-1.00000000000000))*(sj7)*(x1077)*(x1080))))))) < IKFAST_ATAN2_MAGTHRESH && IKabs(((gconst46)*(((((x1079)*(x1080)))+(((pz)*(sj7)*(x1077)))+(((x1081)*(x1083)))+(((IkReal(-1.00000000000000))*(x1081)*(x1082)))+(((IkReal(-1.00000000000000))*(x1080)*(x1083)))+(((px)*(pz)*(x1078)))+(((IkReal(-1.00000000000000))*(x1079)*(x1081)))+(((x1080)*(x1082))))))) < IKFAST_ATAN2_MAGTHRESH )
    continue;
j8array[0]=IKatan2(((gconst46)*(((((IkReal(-1.00000000000000))*(pz)*(x1083)))+(((pz)*(x1082)))+(((pz)*(x1079)))+(((IkReal(-1.00000000000000))*(px)*(x1077)*((cj7)*(cj7))))+(((px)*(x1078)*(x1081)))+(((sj7)*(x1077)*(x1081)))+(((IkReal(-1.00000000000000))*(sj7)*(x1077)*(x1080)))))), ((gconst46)*(((((x1079)*(x1080)))+(((pz)*(sj7)*(x1077)))+(((x1081)*(x1083)))+(((IkReal(-1.00000000000000))*(x1081)*(x1082)))+(((IkReal(-1.00000000000000))*(x1080)*(x1083)))+(((px)*(pz)*(x1078)))+(((IkReal(-1.00000000000000))*(x1079)*(x1081)))+(((x1080)*(x1082)))))));
sj8array[0]=IKsin(j8array[0]);
cj8array[0]=IKcos(j8array[0]);
if( j8array[0] > IKPI )
{
    j8array[0]-=IK2PI;
}
else if( j8array[0] < -IKPI )
{    j8array[0]+=IK2PI;
}
j8valid[0] = true;
for(int ij8 = 0; ij8 < 1; ++ij8)
{
if( !j8valid[ij8] )
{
    continue;
}
_ij8[0] = ij8; _ij8[1] = -1;
for(int iij8 = ij8+1; iij8 < 1; ++iij8)
{
if( j8valid[iij8] && IKabs(cj8array[ij8]-cj8array[iij8]) < IKFAST_SOLUTION_THRESH && IKabs(sj8array[ij8]-sj8array[iij8]) < IKFAST_SOLUTION_THRESH )
{
    j8valid[iij8]=false; _ij8[1] = iij8; break; 
}
}
j8 = j8array[ij8]; cj8 = cj8array[ij8]; sj8 = sj8array[ij8];
{
IkReal evalcond[6];
IkReal x1084=IKcos(j8);
IkReal x1085=IKsin(j8);
IkReal x1086=((IkReal(1.00000000000000))*(sj9));
IkReal x1087=((py)*(sj7));
IkReal x1088=((cj7)*(px));
IkReal x1089=((cj7)*(py));
IkReal x1090=((px)*(sj7));
IkReal x1091=((IkReal(0.0600000000000000))*(cj9));
IkReal x1092=((IkReal(0.0300000000000000))*(cj10));
IkReal x1093=((IkReal(0.313800000000000))*(cj10));
IkReal x1094=((IkReal(0.0300000000000000))*(sj10));
IkReal x1095=((IkReal(1.00000000000000))*(cj9));
IkReal x1096=((IkReal(0.313800000000000))*(x1085));
IkReal x1097=((pz)*(x1084));
IkReal x1098=((sj10)*(x1084));
IkReal x1099=((IkReal(0.600000000000000))*(x1084));
IkReal x1100=((pz)*(x1085));
IkReal x1101=((sj9)*(x1085));
IkReal x1102=((cj9)*(x1085));
IkReal x1103=((sj9)*(x1084));
evalcond[0]=((IkReal(0.300000000000000))+(x1093)+(((x1084)*(x1090)))+(((IkReal(-1.00000000000000))*(x1094)))+(((IkReal(-1.00000000000000))*(x1100)))+(((IkReal(-1.00000000000000))*(x1084)*(x1089))));
evalcond[1]=((((IkReal(-1.00000000000000))*(x1085)*(x1090)*(x1095)))+(((sj9)*(x1087)))+(((sj9)*(x1088)))+(((x1089)*(x1102)))+(((IkReal(-1.00000000000000))*(x1095)*(x1097))));
evalcond[2]=((((IkReal(0.0300000000000000))*(x1103)))+(((x1085)*(x1093)))+(((IkReal(-0.313800000000000))*(sj9)*(x1098)))+(((IkReal(-1.00000000000000))*(x1092)*(x1103)))+(((IkReal(-1.00000000000000))*(x1085)*(x1094)))+(((IkReal(-1.00000000000000))*(pz)))+(((IkReal(0.300000000000000))*(x1085))));
evalcond[3]=((IkReal(0.0300000000000000))+(((IkReal(-1.00000000000000))*(x1086)*(x1097)))+(((IkReal(-0.313800000000000))*(sj10)))+(((IkReal(-1.00000000000000))*(x1088)*(x1095)))+(((IkReal(-1.00000000000000))*(x1092)))+(((IkReal(-1.00000000000000))*(x1085)*(x1086)*(x1090)))+(((x1089)*(x1101)))+(((IkReal(-1.00000000000000))*(x1087)*(x1095))));
evalcond[4]=((((x1092)*(x1101)))+(x1090)+(((x1084)*(x1093)))+(((IkReal(-0.0300000000000000))*(x1101)))+(((IkReal(-1.00000000000000))*(x1084)*(x1094)))+(((IkReal(-1.00000000000000))*(x1089)))+(((sj10)*(sj9)*(x1096)))+(((IkReal(0.300000000000000))*(x1084))));
evalcond[5]=((IkReal(0.00847044000000000))+(((x1087)*(x1091)))+(((IkReal(0.600000000000000))*(x1100)))+(((x1089)*(x1099)))+(((IkReal(-1.00000000000000))*(x1090)*(x1099)))+(((IkReal(-0.0600000000000000))*(x1089)*(x1101)))+(((x1088)*(x1091)))+(((IkReal(-1.00000000000000))*(pp)))+(((IkReal(0.0600000000000000))*(x1090)*(x1101)))+(((IkReal(0.0600000000000000))*(sj9)*(x1097))));
if( IKabs(evalcond[0]) > 0.000001  || IKabs(evalcond[1]) > 0.000001  || IKabs(evalcond[2]) > 0.000001  || IKabs(evalcond[3]) > 0.000001  || IKabs(evalcond[4]) > 0.000001  || IKabs(evalcond[5]) > 0.000001  )
{
continue;
}
}

rotationfunction0(solutions);
}
}

}

}

} else
{
{
IkReal j8array[1], cj8array[1], sj8array[1];
bool j8valid[1]={false};
_nj8 = 1;
IkReal x1104=(sj10)*(sj10);
IkReal x1105=(cj10)*(cj10);
IkReal x1106=((IkReal(0.00941400000000000))*(sj9));
IkReal x1107=((cj10)*(sj10));
if( IKabs(((gconst47)*(((((IkReal(0.000414000000000000))*(cj10)*(sj9)))+(((px)*(pz)*(sj7)))+(((x1104)*(x1106)))+(((IkReal(-0.0950400000000000))*(sj10)*(sj9)))+(((IkReal(-0.0975704400000000))*(sj9)*(x1107)))+(((IkReal(-1.00000000000000))*(cj7)*(py)*(pz)))+(((IkReal(0.00900000000000000))*(sj9)))+(((IkReal(-1.00000000000000))*(x1105)*(x1106))))))) < IKFAST_ATAN2_MAGTHRESH && IKabs(((gconst47)*(((IkReal(-0.0900000000000000))+(((IkReal(0.0188280000000000))*(x1107)))+(((IkReal(-0.188280000000000))*(cj10)))+((pz)*(pz))+(((IkReal(0.0180000000000000))*(sj10)))+(((IkReal(-0.000900000000000000))*(x1104)))+(((IkReal(-0.0984704400000000))*(x1105))))))) < IKFAST_ATAN2_MAGTHRESH )
    continue;
j8array[0]=IKatan2(((gconst47)*(((((IkReal(0.000414000000000000))*(cj10)*(sj9)))+(((px)*(pz)*(sj7)))+(((x1104)*(x1106)))+(((IkReal(-0.0950400000000000))*(sj10)*(sj9)))+(((IkReal(-0.0975704400000000))*(sj9)*(x1107)))+(((IkReal(-1.00000000000000))*(cj7)*(py)*(pz)))+(((IkReal(0.00900000000000000))*(sj9)))+(((IkReal(-1.00000000000000))*(x1105)*(x1106)))))), ((gconst47)*(((IkReal(-0.0900000000000000))+(((IkReal(0.0188280000000000))*(x1107)))+(((IkReal(-0.188280000000000))*(cj10)))+((pz)*(pz))+(((IkReal(0.0180000000000000))*(sj10)))+(((IkReal(-0.000900000000000000))*(x1104)))+(((IkReal(-0.0984704400000000))*(x1105)))))));
sj8array[0]=IKsin(j8array[0]);
cj8array[0]=IKcos(j8array[0]);
if( j8array[0] > IKPI )
{
    j8array[0]-=IK2PI;
}
else if( j8array[0] < -IKPI )
{    j8array[0]+=IK2PI;
}
j8valid[0] = true;
for(int ij8 = 0; ij8 < 1; ++ij8)
{
if( !j8valid[ij8] )
{
    continue;
}
_ij8[0] = ij8; _ij8[1] = -1;
for(int iij8 = ij8+1; iij8 < 1; ++iij8)
{
if( j8valid[iij8] && IKabs(cj8array[ij8]-cj8array[iij8]) < IKFAST_SOLUTION_THRESH && IKabs(sj8array[ij8]-sj8array[iij8]) < IKFAST_SOLUTION_THRESH )
{
    j8valid[iij8]=false; _ij8[1] = iij8; break; 
}
}
j8 = j8array[ij8]; cj8 = cj8array[ij8]; sj8 = sj8array[ij8];
{
IkReal evalcond[6];
IkReal x1108=IKcos(j8);
IkReal x1109=IKsin(j8);
IkReal x1110=((IkReal(1.00000000000000))*(sj9));
IkReal x1111=((py)*(sj7));
IkReal x1112=((cj7)*(px));
IkReal x1113=((cj7)*(py));
IkReal x1114=((px)*(sj7));
IkReal x1115=((IkReal(0.0600000000000000))*(cj9));
IkReal x1116=((IkReal(0.0300000000000000))*(cj10));
IkReal x1117=((IkReal(0.313800000000000))*(cj10));
IkReal x1118=((IkReal(0.0300000000000000))*(sj10));
IkReal x1119=((IkReal(1.00000000000000))*(cj9));
IkReal x1120=((IkReal(0.313800000000000))*(x1109));
IkReal x1121=((pz)*(x1108));
IkReal x1122=((sj10)*(x1108));
IkReal x1123=((IkReal(0.600000000000000))*(x1108));
IkReal x1124=((pz)*(x1109));
IkReal x1125=((sj9)*(x1109));
IkReal x1126=((cj9)*(x1109));
IkReal x1127=((sj9)*(x1108));
evalcond[0]=((IkReal(0.300000000000000))+(x1117)+(((x1108)*(x1114)))+(((IkReal(-1.00000000000000))*(x1124)))+(((IkReal(-1.00000000000000))*(x1118)))+(((IkReal(-1.00000000000000))*(x1108)*(x1113))));
evalcond[1]=((((IkReal(-1.00000000000000))*(x1109)*(x1114)*(x1119)))+(((sj9)*(x1112)))+(((sj9)*(x1111)))+(((x1113)*(x1126)))+(((IkReal(-1.00000000000000))*(x1119)*(x1121))));
evalcond[2]=((((x1109)*(x1117)))+(((IkReal(-1.00000000000000))*(x1109)*(x1118)))+(((IkReal(-1.00000000000000))*(x1116)*(x1127)))+(((IkReal(-1.00000000000000))*(pz)))+(((IkReal(-0.313800000000000))*(sj9)*(x1122)))+(((IkReal(0.0300000000000000))*(x1127)))+(((IkReal(0.300000000000000))*(x1109))));
evalcond[3]=((IkReal(0.0300000000000000))+(((IkReal(-0.313800000000000))*(sj10)))+(((IkReal(-1.00000000000000))*(x1109)*(x1110)*(x1114)))+(((IkReal(-1.00000000000000))*(x1112)*(x1119)))+(((x1113)*(x1125)))+(((IkReal(-1.00000000000000))*(x1110)*(x1121)))+(((IkReal(-1.00000000000000))*(x1116)))+(((IkReal(-1.00000000000000))*(x1111)*(x1119))));
evalcond[4]=((x1114)+(((x1108)*(x1117)))+(((IkReal(-0.0300000000000000))*(x1125)))+(((IkReal(-1.00000000000000))*(x1113)))+(((IkReal(-1.00000000000000))*(x1108)*(x1118)))+(((sj10)*(sj9)*(x1120)))+(((x1116)*(x1125)))+(((IkReal(0.300000000000000))*(x1108))));
evalcond[5]=((IkReal(0.00847044000000000))+(((IkReal(-0.0600000000000000))*(x1113)*(x1125)))+(((x1111)*(x1115)))+(((IkReal(-1.00000000000000))*(x1114)*(x1123)))+(((x1112)*(x1115)))+(((x1113)*(x1123)))+(((IkReal(0.600000000000000))*(x1124)))+(((IkReal(-1.00000000000000))*(pp)))+(((IkReal(0.0600000000000000))*(x1114)*(x1125)))+(((IkReal(0.0600000000000000))*(sj9)*(x1121))));
if( IKabs(evalcond[0]) > 0.000001  || IKabs(evalcond[1]) > 0.000001  || IKabs(evalcond[2]) > 0.000001  || IKabs(evalcond[3]) > 0.000001  || IKabs(evalcond[4]) > 0.000001  || IKabs(evalcond[5]) > 0.000001  )
{
continue;
}
}

rotationfunction0(solutions);
}
}

}

}
}
}

}

}
}
}
}
return solutions.GetNumSolutions()>0;
}
inline void rotationfunction0(IkSolutionListBase<IkReal>& solutions) {
for(int rotationiter = 0; rotationiter < 1; ++rotationiter) {
IkReal x91=((cj7)*(cj9));
IkReal x92=((IkReal(1.00000000000000))*(sj8));
IkReal x93=((cj10)*(cj8));
IkReal x94=((sj10)*(sj9));
IkReal x95=((IkReal(1.00000000000000))*(sj7));
IkReal x96=((cj9)*(sj7));
IkReal x97=((cj8)*(cj9));
IkReal x98=((cj10)*(x91));
IkReal x99=((sj10)*(x91));
IkReal x100=((IkReal(-1.00000000000000))*(sj7));
IkReal x101=((((cj8)*(sj10)))+(((IkReal(-1.00000000000000))*(cj10)*(sj9)*(x92))));
IkReal x102=((((sj9)*(x93)))+(((sj10)*(sj8))));
IkReal x103=((((IkReal(-1.00000000000000))*(cj7)*(sj9)))+(((sj8)*(x96))));
IkReal x104=((((cj8)*(x94)))+(((IkReal(-1.00000000000000))*(cj10)*(x92))));
IkReal x105=((((IkReal(-1.00000000000000))*(x91)*(x92)))+(((IkReal(-1.00000000000000))*(sj9)*(x95))));
IkReal x106=((((IkReal(-1.00000000000000))*(x92)*(x94)))+(((IkReal(-1.00000000000000))*(x93))));
IkReal x107=((sj7)*(x106));
IkReal x108=((((cj7)*(x101)))+(((cj10)*(x96))));
IkReal x109=((x98)+(((x100)*(x101))));
IkReal x110=((x99)+(((IkReal(-1.00000000000000))*(x106)*(x95))));
IkReal x111=((((cj7)*(x106)))+(((sj10)*(x96))));
new_r00=((((r10)*(x108)))+(((r20)*(x102)))+(((r00)*(x109))));
new_r01=((((r21)*(x102)))+(((r01)*(x109)))+(((r11)*(x108))));
new_r02=((((r02)*(((x98)+(((IkReal(-1.00000000000000))*(x101)*(x95)))))))+(((r22)*(x102)))+(((r12)*(x108))));
new_r10=((((r10)*(x105)))+(((r20)*(x97)))+(((r00)*(x103))));
new_r11=((((r21)*(x97)))+(((r01)*(x103)))+(((r11)*(x105))));
new_r12=((((r02)*(x103)))+(((r12)*(x105)))+(((r22)*(x97))));
new_r20=((((r10)*(x111)))+(((r20)*(x104)))+(((r00)*(x110))));
new_r21=((((r21)*(x104)))+(((r11)*(x111)))+(((r01)*(x110))));
new_r22=((((r02)*(((x99)+(((x100)*(x106)))))))+(((r22)*(x104)))+(((r12)*(x111))));
{
IkReal j12array[2], cj12array[2], sj12array[2];
bool j12valid[2]={false};
_nj12 = 2;
cj12array[0]=new_r22;
if( cj12array[0] >= -1-IKFAST_SINCOS_THRESH && cj12array[0] <= 1+IKFAST_SINCOS_THRESH )
{
    j12valid[0] = j12valid[1] = true;
    j12array[0] = IKacos(cj12array[0]);
    sj12array[0] = IKsin(j12array[0]);
    cj12array[1] = cj12array[0];
    j12array[1] = -j12array[0];
    sj12array[1] = -sj12array[0];
}
else if( isnan(cj12array[0]) )
{
    // probably any value will work
    j12valid[0] = true;
    cj12array[0] = 1; sj12array[0] = 0; j12array[0] = 0;
}
for(int ij12 = 0; ij12 < 2; ++ij12)
{
if( !j12valid[ij12] )
{
    continue;
}
_ij12[0] = ij12; _ij12[1] = -1;
for(int iij12 = ij12+1; iij12 < 2; ++iij12)
{
if( j12valid[iij12] && IKabs(cj12array[ij12]-cj12array[iij12]) < IKFAST_SOLUTION_THRESH && IKabs(sj12array[ij12]-sj12array[iij12]) < IKFAST_SOLUTION_THRESH )
{
    j12valid[iij12]=false; _ij12[1] = iij12; break; 
}
}
j12 = j12array[ij12]; cj12 = cj12array[ij12]; sj12 = sj12array[ij12];

{
IkReal dummyeval[1];
IkReal gconst54;
gconst54=IKsign(sj12);
dummyeval[0]=sj12;
if( IKabs(dummyeval[0]) < 0.0000010000000000  )
{
{
IkReal dummyeval[1];
IkReal gconst52;
gconst52=IKsign((((new_r12)*(new_r12))+((new_r02)*(new_r02))));
dummyeval[0]=(((new_r12)*(new_r12))+((new_r02)*(new_r02)));
if( IKabs(dummyeval[0]) < 0.0000010000000000  )
{
{
IkReal dummyeval[1];
IkReal gconst53;
gconst53=IKsign(((((cj12)*((new_r12)*(new_r12))))+(((cj12)*((new_r02)*(new_r02))))));
dummyeval[0]=((((cj12)*((new_r12)*(new_r12))))+(((cj12)*((new_r02)*(new_r02)))));
if( IKabs(dummyeval[0]) < 0.0000010000000000  )
{
{
IkReal evalcond[7];
evalcond[0]=((IkReal(-3.14159265358979))+(IKfmod(((IkReal(1.57079632679490))+(j12)), IkReal(6.28318530717959))));
evalcond[1]=new_r22;
evalcond[2]=((IkReal(-1.00000000000000))*(new_r22));
if( IKabs(evalcond[0]) < 0.0000010000000000  && IKabs(evalcond[1]) < 0.0000010000000000  && IKabs(evalcond[2]) < 0.0000010000000000  )
{
{
IkReal j13array[1], cj13array[1], sj13array[1];
bool j13valid[1]={false};
_nj13 = 1;
if( IKabs(new_r21) < IKFAST_ATAN2_MAGTHRESH && IKabs(((IkReal(-1.00000000000000))*(new_r20))) < IKFAST_ATAN2_MAGTHRESH && IKabs(IKsqr(new_r21)+IKsqr(((IkReal(-1.00000000000000))*(new_r20)))-1) <= IKFAST_SINCOS_THRESH )
    continue;
j13array[0]=IKatan2(new_r21, ((IkReal(-1.00000000000000))*(new_r20)));
sj13array[0]=IKsin(j13array[0]);
cj13array[0]=IKcos(j13array[0]);
if( j13array[0] > IKPI )
{
    j13array[0]-=IK2PI;
}
else if( j13array[0] < -IKPI )
{    j13array[0]+=IK2PI;
}
j13valid[0] = true;
for(int ij13 = 0; ij13 < 1; ++ij13)
{
if( !j13valid[ij13] )
{
    continue;
}
_ij13[0] = ij13; _ij13[1] = -1;
for(int iij13 = ij13+1; iij13 < 1; ++iij13)
{
if( j13valid[iij13] && IKabs(cj13array[ij13]-cj13array[iij13]) < IKFAST_SOLUTION_THRESH && IKabs(sj13array[ij13]-sj13array[iij13]) < IKFAST_SOLUTION_THRESH )
{
    j13valid[iij13]=false; _ij13[1] = iij13; break; 
}
}
j13 = j13array[ij13]; cj13 = cj13array[ij13]; sj13 = sj13array[ij13];
{
IkReal evalcond[2];
evalcond[0]=((IKcos(j13))+(new_r20));
evalcond[1]=((((IkReal(-1.00000000000000))*(IKsin(j13))))+(new_r21));
if( IKabs(evalcond[0]) > 0.000001  || IKabs(evalcond[1]) > 0.000001  )
{
continue;
}
}

{
IkReal dummyeval[1];
IkReal gconst60;
gconst60=IKsign(((((new_r01)*(new_r12)))+(((IkReal(-1.00000000000000))*(new_r02)*(new_r11)))));
dummyeval[0]=((((new_r01)*(new_r12)))+(((IkReal(-1.00000000000000))*(new_r02)*(new_r11))));
if( IKabs(dummyeval[0]) < 0.0000010000000000  )
{
{
IkReal dummyeval[1];
IkReal gconst61;
gconst61=IKsign(((((new_r00)*(new_r12)))+(((IkReal(-1.00000000000000))*(new_r02)*(new_r10)))));
dummyeval[0]=((((new_r00)*(new_r12)))+(((IkReal(-1.00000000000000))*(new_r02)*(new_r10))));
if( IKabs(dummyeval[0]) < 0.0000010000000000  )
{
continue;

} else
{
{
IkReal j11array[1], cj11array[1], sj11array[1];
bool j11valid[1]={false};
_nj11 = 1;
if( IKabs(((gconst61)*(new_r00))) < IKFAST_ATAN2_MAGTHRESH && IKabs(((IkReal(-1.00000000000000))*(gconst61)*(new_r10))) < IKFAST_ATAN2_MAGTHRESH )
    continue;
j11array[0]=IKatan2(((gconst61)*(new_r00)), ((IkReal(-1.00000000000000))*(gconst61)*(new_r10)));
sj11array[0]=IKsin(j11array[0]);
cj11array[0]=IKcos(j11array[0]);
if( j11array[0] > IKPI )
{
    j11array[0]-=IK2PI;
}
else if( j11array[0] < -IKPI )
{    j11array[0]+=IK2PI;
}
j11valid[0] = true;
for(int ij11 = 0; ij11 < 1; ++ij11)
{
if( !j11valid[ij11] )
{
    continue;
}
_ij11[0] = ij11; _ij11[1] = -1;
for(int iij11 = ij11+1; iij11 < 1; ++iij11)
{
if( j11valid[iij11] && IKabs(cj11array[ij11]-cj11array[iij11]) < IKFAST_SOLUTION_THRESH && IKabs(sj11array[ij11]-sj11array[iij11]) < IKFAST_SOLUTION_THRESH )
{
    j11valid[iij11]=false; _ij11[1] = iij11; break; 
}
}
j11 = j11array[ij11]; cj11 = cj11array[ij11]; sj11 = sj11array[ij11];
{
IkReal evalcond[6];
IkReal x112=IKcos(j11);
IkReal x113=IKsin(j11);
IkReal x114=((IkReal(1.00000000000000))*(x113));
evalcond[0]=((((IkReal(-1.00000000000000))*(new_r02)*(x114)))+(((new_r12)*(x112))));
evalcond[1]=((IkReal(-1.00000000000000))+(((new_r02)*(x112)))+(((new_r12)*(x113))));
evalcond[2]=((((new_r10)*(x112)))+(((IkReal(-1.00000000000000))*(new_r00)*(x114)))+(((IkReal(-1.00000000000000))*(sj13))));
evalcond[3]=((((new_r11)*(x112)))+(((IkReal(-1.00000000000000))*(new_r01)*(x114)))+(((IkReal(-1.00000000000000))*(cj13))));
evalcond[4]=((((new_r11)*(x113)))+(((new_r01)*(x112))));
evalcond[5]=((((new_r10)*(x113)))+(((new_r00)*(x112))));
if( IKabs(evalcond[0]) > 0.000001  || IKabs(evalcond[1]) > 0.000001  || IKabs(evalcond[2]) > 0.000001  || IKabs(evalcond[3]) > 0.000001  || IKabs(evalcond[4]) > 0.000001  || IKabs(evalcond[5]) > 0.000001  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(7);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j7;
vinfos[0].indices[0] = _ij7[0];
vinfos[0].indices[1] = _ij7[1];
vinfos[0].maxsolutions = _nj7;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j8;
vinfos[1].indices[0] = _ij8[0];
vinfos[1].indices[1] = _ij8[1];
vinfos[1].maxsolutions = _nj8;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j9;
vinfos[2].indices[0] = _ij9[0];
vinfos[2].indices[1] = _ij9[1];
vinfos[2].maxsolutions = _nj9;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j10;
vinfos[3].indices[0] = _ij10[0];
vinfos[3].indices[1] = _ij10[1];
vinfos[3].maxsolutions = _nj10;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j11;
vinfos[4].indices[0] = _ij11[0];
vinfos[4].indices[1] = _ij11[1];
vinfos[4].maxsolutions = _nj11;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j12;
vinfos[5].indices[0] = _ij12[0];
vinfos[5].indices[1] = _ij12[1];
vinfos[5].maxsolutions = _nj12;
vinfos[6].jointtype = 1;
vinfos[6].foffset = j13;
vinfos[6].indices[0] = _ij13[0];
vinfos[6].indices[1] = _ij13[1];
vinfos[6].maxsolutions = _nj13;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j11array[1], cj11array[1], sj11array[1];
bool j11valid[1]={false};
_nj11 = 1;
if( IKabs(((gconst60)*(new_r01))) < IKFAST_ATAN2_MAGTHRESH && IKabs(((IkReal(-1.00000000000000))*(gconst60)*(new_r11))) < IKFAST_ATAN2_MAGTHRESH )
    continue;
j11array[0]=IKatan2(((gconst60)*(new_r01)), ((IkReal(-1.00000000000000))*(gconst60)*(new_r11)));
sj11array[0]=IKsin(j11array[0]);
cj11array[0]=IKcos(j11array[0]);
if( j11array[0] > IKPI )
{
    j11array[0]-=IK2PI;
}
else if( j11array[0] < -IKPI )
{    j11array[0]+=IK2PI;
}
j11valid[0] = true;
for(int ij11 = 0; ij11 < 1; ++ij11)
{
if( !j11valid[ij11] )
{
    continue;
}
_ij11[0] = ij11; _ij11[1] = -1;
for(int iij11 = ij11+1; iij11 < 1; ++iij11)
{
if( j11valid[iij11] && IKabs(cj11array[ij11]-cj11array[iij11]) < IKFAST_SOLUTION_THRESH && IKabs(sj11array[ij11]-sj11array[iij11]) < IKFAST_SOLUTION_THRESH )
{
    j11valid[iij11]=false; _ij11[1] = iij11; break; 
}
}
j11 = j11array[ij11]; cj11 = cj11array[ij11]; sj11 = sj11array[ij11];
{
IkReal evalcond[6];
IkReal x115=IKcos(j11);
IkReal x116=IKsin(j11);
IkReal x117=((IkReal(1.00000000000000))*(x116));
evalcond[0]=((((IkReal(-1.00000000000000))*(new_r02)*(x117)))+(((new_r12)*(x115))));
evalcond[1]=((IkReal(-1.00000000000000))+(((new_r02)*(x115)))+(((new_r12)*(x116))));
evalcond[2]=((((new_r10)*(x115)))+(((IkReal(-1.00000000000000))*(new_r00)*(x117)))+(((IkReal(-1.00000000000000))*(sj13))));
evalcond[3]=((((new_r11)*(x115)))+(((IkReal(-1.00000000000000))*(new_r01)*(x117)))+(((IkReal(-1.00000000000000))*(cj13))));
evalcond[4]=((((new_r11)*(x116)))+(((new_r01)*(x115))));
evalcond[5]=((((new_r10)*(x116)))+(((new_r00)*(x115))));
if( IKabs(evalcond[0]) > 0.000001  || IKabs(evalcond[1]) > 0.000001  || IKabs(evalcond[2]) > 0.000001  || IKabs(evalcond[3]) > 0.000001  || IKabs(evalcond[4]) > 0.000001  || IKabs(evalcond[5]) > 0.000001  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(7);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j7;
vinfos[0].indices[0] = _ij7[0];
vinfos[0].indices[1] = _ij7[1];
vinfos[0].maxsolutions = _nj7;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j8;
vinfos[1].indices[0] = _ij8[0];
vinfos[1].indices[1] = _ij8[1];
vinfos[1].maxsolutions = _nj8;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j9;
vinfos[2].indices[0] = _ij9[0];
vinfos[2].indices[1] = _ij9[1];
vinfos[2].maxsolutions = _nj9;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j10;
vinfos[3].indices[0] = _ij10[0];
vinfos[3].indices[1] = _ij10[1];
vinfos[3].maxsolutions = _nj10;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j11;
vinfos[4].indices[0] = _ij11[0];
vinfos[4].indices[1] = _ij11[1];
vinfos[4].maxsolutions = _nj11;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j12;
vinfos[5].indices[0] = _ij12[0];
vinfos[5].indices[1] = _ij12[1];
vinfos[5].maxsolutions = _nj12;
vinfos[6].jointtype = 1;
vinfos[6].foffset = j13;
vinfos[6].indices[0] = _ij13[0];
vinfos[6].indices[1] = _ij13[1];
vinfos[6].maxsolutions = _nj13;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}
}
}

} else
{
evalcond[0]=((IkReal(-3.14159265358979))+(IKfmod(((IkReal(4.71238898038469))+(j12)), IkReal(6.28318530717959))));
evalcond[1]=new_r22;
evalcond[2]=new_r22;
if( IKabs(evalcond[0]) < 0.0000010000000000  && IKabs(evalcond[1]) < 0.0000010000000000  && IKabs(evalcond[2]) < 0.0000010000000000  )
{
{
IkReal j13array[1], cj13array[1], sj13array[1];
bool j13valid[1]={false};
_nj13 = 1;
if( IKabs(((IkReal(-1.00000000000000))*(new_r21))) < IKFAST_ATAN2_MAGTHRESH && IKabs(new_r20) < IKFAST_ATAN2_MAGTHRESH && IKabs(IKsqr(((IkReal(-1.00000000000000))*(new_r21)))+IKsqr(new_r20)-1) <= IKFAST_SINCOS_THRESH )
    continue;
j13array[0]=IKatan2(((IkReal(-1.00000000000000))*(new_r21)), new_r20);
sj13array[0]=IKsin(j13array[0]);
cj13array[0]=IKcos(j13array[0]);
if( j13array[0] > IKPI )
{
    j13array[0]-=IK2PI;
}
else if( j13array[0] < -IKPI )
{    j13array[0]+=IK2PI;
}
j13valid[0] = true;
for(int ij13 = 0; ij13 < 1; ++ij13)
{
if( !j13valid[ij13] )
{
    continue;
}
_ij13[0] = ij13; _ij13[1] = -1;
for(int iij13 = ij13+1; iij13 < 1; ++iij13)
{
if( j13valid[iij13] && IKabs(cj13array[ij13]-cj13array[iij13]) < IKFAST_SOLUTION_THRESH && IKabs(sj13array[ij13]-sj13array[iij13]) < IKFAST_SOLUTION_THRESH )
{
    j13valid[iij13]=false; _ij13[1] = iij13; break; 
}
}
j13 = j13array[ij13]; cj13 = cj13array[ij13]; sj13 = sj13array[ij13];
{
IkReal evalcond[2];
evalcond[0]=((((IkReal(-1.00000000000000))*(IKcos(j13))))+(new_r20));
evalcond[1]=((IKsin(j13))+(new_r21));
if( IKabs(evalcond[0]) > 0.000001  || IKabs(evalcond[1]) > 0.000001  )
{
continue;
}
}

{
IkReal dummyeval[1];
IkReal gconst64;
gconst64=IKsign(((((IkReal(-1.00000000000000))*(new_r01)*(new_r12)))+(((new_r02)*(new_r11)))));
dummyeval[0]=((((IkReal(-1.00000000000000))*(new_r01)*(new_r12)))+(((new_r02)*(new_r11))));
if( IKabs(dummyeval[0]) < 0.0000010000000000  )
{
{
IkReal dummyeval[1];
IkReal gconst65;
gconst65=IKsign(((((IkReal(-1.00000000000000))*(new_r00)*(new_r12)))+(((new_r02)*(new_r10)))));
dummyeval[0]=((((IkReal(-1.00000000000000))*(new_r00)*(new_r12)))+(((new_r02)*(new_r10))));
if( IKabs(dummyeval[0]) < 0.0000010000000000  )
{
continue;

} else
{
{
IkReal j11array[1], cj11array[1], sj11array[1];
bool j11valid[1]={false};
_nj11 = 1;
if( IKabs(((gconst65)*(new_r00))) < IKFAST_ATAN2_MAGTHRESH && IKabs(((IkReal(-1.00000000000000))*(gconst65)*(new_r10))) < IKFAST_ATAN2_MAGTHRESH )
    continue;
j11array[0]=IKatan2(((gconst65)*(new_r00)), ((IkReal(-1.00000000000000))*(gconst65)*(new_r10)));
sj11array[0]=IKsin(j11array[0]);
cj11array[0]=IKcos(j11array[0]);
if( j11array[0] > IKPI )
{
    j11array[0]-=IK2PI;
}
else if( j11array[0] < -IKPI )
{    j11array[0]+=IK2PI;
}
j11valid[0] = true;
for(int ij11 = 0; ij11 < 1; ++ij11)
{
if( !j11valid[ij11] )
{
    continue;
}
_ij11[0] = ij11; _ij11[1] = -1;
for(int iij11 = ij11+1; iij11 < 1; ++iij11)
{
if( j11valid[iij11] && IKabs(cj11array[ij11]-cj11array[iij11]) < IKFAST_SOLUTION_THRESH && IKabs(sj11array[ij11]-sj11array[iij11]) < IKFAST_SOLUTION_THRESH )
{
    j11valid[iij11]=false; _ij11[1] = iij11; break; 
}
}
j11 = j11array[ij11]; cj11 = cj11array[ij11]; sj11 = sj11array[ij11];
{
IkReal evalcond[6];
IkReal x118=IKcos(j11);
IkReal x119=IKsin(j11);
IkReal x120=((IkReal(1.00000000000000))*(x119));
evalcond[0]=((((IkReal(-1.00000000000000))*(new_r02)*(x120)))+(((new_r12)*(x118))));
evalcond[1]=((IkReal(1.00000000000000))+(((new_r02)*(x118)))+(((new_r12)*(x119))));
evalcond[2]=((((new_r10)*(x118)))+(((IkReal(-1.00000000000000))*(new_r00)*(x120)))+(((IkReal(-1.00000000000000))*(sj13))));
evalcond[3]=((((new_r11)*(x118)))+(((IkReal(-1.00000000000000))*(new_r01)*(x120)))+(((IkReal(-1.00000000000000))*(cj13))));
evalcond[4]=((((new_r11)*(x119)))+(((new_r01)*(x118))));
evalcond[5]=((((new_r10)*(x119)))+(((new_r00)*(x118))));
if( IKabs(evalcond[0]) > 0.000001  || IKabs(evalcond[1]) > 0.000001  || IKabs(evalcond[2]) > 0.000001  || IKabs(evalcond[3]) > 0.000001  || IKabs(evalcond[4]) > 0.000001  || IKabs(evalcond[5]) > 0.000001  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(7);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j7;
vinfos[0].indices[0] = _ij7[0];
vinfos[0].indices[1] = _ij7[1];
vinfos[0].maxsolutions = _nj7;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j8;
vinfos[1].indices[0] = _ij8[0];
vinfos[1].indices[1] = _ij8[1];
vinfos[1].maxsolutions = _nj8;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j9;
vinfos[2].indices[0] = _ij9[0];
vinfos[2].indices[1] = _ij9[1];
vinfos[2].maxsolutions = _nj9;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j10;
vinfos[3].indices[0] = _ij10[0];
vinfos[3].indices[1] = _ij10[1];
vinfos[3].maxsolutions = _nj10;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j11;
vinfos[4].indices[0] = _ij11[0];
vinfos[4].indices[1] = _ij11[1];
vinfos[4].maxsolutions = _nj11;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j12;
vinfos[5].indices[0] = _ij12[0];
vinfos[5].indices[1] = _ij12[1];
vinfos[5].maxsolutions = _nj12;
vinfos[6].jointtype = 1;
vinfos[6].foffset = j13;
vinfos[6].indices[0] = _ij13[0];
vinfos[6].indices[1] = _ij13[1];
vinfos[6].maxsolutions = _nj13;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j11array[1], cj11array[1], sj11array[1];
bool j11valid[1]={false};
_nj11 = 1;
if( IKabs(((gconst64)*(new_r01))) < IKFAST_ATAN2_MAGTHRESH && IKabs(((IkReal(-1.00000000000000))*(gconst64)*(new_r11))) < IKFAST_ATAN2_MAGTHRESH )
    continue;
j11array[0]=IKatan2(((gconst64)*(new_r01)), ((IkReal(-1.00000000000000))*(gconst64)*(new_r11)));
sj11array[0]=IKsin(j11array[0]);
cj11array[0]=IKcos(j11array[0]);
if( j11array[0] > IKPI )
{
    j11array[0]-=IK2PI;
}
else if( j11array[0] < -IKPI )
{    j11array[0]+=IK2PI;
}
j11valid[0] = true;
for(int ij11 = 0; ij11 < 1; ++ij11)
{
if( !j11valid[ij11] )
{
    continue;
}
_ij11[0] = ij11; _ij11[1] = -1;
for(int iij11 = ij11+1; iij11 < 1; ++iij11)
{
if( j11valid[iij11] && IKabs(cj11array[ij11]-cj11array[iij11]) < IKFAST_SOLUTION_THRESH && IKabs(sj11array[ij11]-sj11array[iij11]) < IKFAST_SOLUTION_THRESH )
{
    j11valid[iij11]=false; _ij11[1] = iij11; break; 
}
}
j11 = j11array[ij11]; cj11 = cj11array[ij11]; sj11 = sj11array[ij11];
{
IkReal evalcond[6];
IkReal x121=IKcos(j11);
IkReal x122=IKsin(j11);
IkReal x123=((IkReal(1.00000000000000))*(x122));
evalcond[0]=((((IkReal(-1.00000000000000))*(new_r02)*(x123)))+(((new_r12)*(x121))));
evalcond[1]=((IkReal(1.00000000000000))+(((new_r02)*(x121)))+(((new_r12)*(x122))));
evalcond[2]=((((IkReal(-1.00000000000000))*(new_r00)*(x123)))+(((IkReal(-1.00000000000000))*(sj13)))+(((new_r10)*(x121))));
evalcond[3]=((((IkReal(-1.00000000000000))*(new_r01)*(x123)))+(((IkReal(-1.00000000000000))*(cj13)))+(((new_r11)*(x121))));
evalcond[4]=((((new_r01)*(x121)))+(((new_r11)*(x122))));
evalcond[5]=((((new_r00)*(x121)))+(((new_r10)*(x122))));
if( IKabs(evalcond[0]) > 0.000001  || IKabs(evalcond[1]) > 0.000001  || IKabs(evalcond[2]) > 0.000001  || IKabs(evalcond[3]) > 0.000001  || IKabs(evalcond[4]) > 0.000001  || IKabs(evalcond[5]) > 0.000001  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(7);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j7;
vinfos[0].indices[0] = _ij7[0];
vinfos[0].indices[1] = _ij7[1];
vinfos[0].maxsolutions = _nj7;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j8;
vinfos[1].indices[0] = _ij8[0];
vinfos[1].indices[1] = _ij8[1];
vinfos[1].maxsolutions = _nj8;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j9;
vinfos[2].indices[0] = _ij9[0];
vinfos[2].indices[1] = _ij9[1];
vinfos[2].maxsolutions = _nj9;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j10;
vinfos[3].indices[0] = _ij10[0];
vinfos[3].indices[1] = _ij10[1];
vinfos[3].maxsolutions = _nj10;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j11;
vinfos[4].indices[0] = _ij11[0];
vinfos[4].indices[1] = _ij11[1];
vinfos[4].maxsolutions = _nj11;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j12;
vinfos[5].indices[0] = _ij12[0];
vinfos[5].indices[1] = _ij12[1];
vinfos[5].maxsolutions = _nj12;
vinfos[6].jointtype = 1;
vinfos[6].foffset = j13;
vinfos[6].indices[0] = _ij13[0];
vinfos[6].indices[1] = _ij13[1];
vinfos[6].maxsolutions = _nj13;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}
}
}

} else
{
evalcond[0]=((IkReal(-3.14159265358979))+(IKfmod(((IkReal(3.14159265358979))+(j12)), IkReal(6.28318530717959))));
evalcond[1]=((IkReal(-1.00000000000000))+(new_r22));
evalcond[2]=new_r20;
evalcond[3]=new_r21;
evalcond[4]=((IkReal(-1.00000000000000))*(new_r20));
evalcond[5]=((IkReal(-1.00000000000000))*(new_r21));
evalcond[6]=((IkReal(1.00000000000000))+(((IkReal(-1.00000000000000))*(new_r22))));
if( IKabs(evalcond[0]) < 0.0000010000000000  && IKabs(evalcond[1]) < 0.0000010000000000  && IKabs(evalcond[2]) < 0.0000010000000000  && IKabs(evalcond[3]) < 0.0000010000000000  && IKabs(evalcond[4]) < 0.0000010000000000  && IKabs(evalcond[5]) < 0.0000010000000000  && IKabs(evalcond[6]) < 0.0000010000000000  )
{
{
IkReal j11array[2], cj11array[2], sj11array[2];
bool j11valid[2]={false};
_nj11 = 2;
if( IKabs(new_r02) < IKFAST_ATAN2_MAGTHRESH && IKabs(new_r12) < IKFAST_ATAN2_MAGTHRESH )
    continue;
IkReal x124=IKatan2(new_r02, new_r12);
j11array[0]=((IkReal(-1.00000000000000))*(x124));
sj11array[0]=IKsin(j11array[0]);
cj11array[0]=IKcos(j11array[0]);
j11array[1]=((IkReal(3.14159265358979))+(((IkReal(-1.00000000000000))*(x124))));
sj11array[1]=IKsin(j11array[1]);
cj11array[1]=IKcos(j11array[1]);
if( j11array[0] > IKPI )
{
    j11array[0]-=IK2PI;
}
else if( j11array[0] < -IKPI )
{    j11array[0]+=IK2PI;
}
j11valid[0] = true;
if( j11array[1] > IKPI )
{
    j11array[1]-=IK2PI;
}
else if( j11array[1] < -IKPI )
{    j11array[1]+=IK2PI;
}
j11valid[1] = true;
for(int ij11 = 0; ij11 < 2; ++ij11)
{
if( !j11valid[ij11] )
{
    continue;
}
_ij11[0] = ij11; _ij11[1] = -1;
for(int iij11 = ij11+1; iij11 < 2; ++iij11)
{
if( j11valid[iij11] && IKabs(cj11array[ij11]-cj11array[iij11]) < IKFAST_SOLUTION_THRESH && IKabs(sj11array[ij11]-sj11array[iij11]) < IKFAST_SOLUTION_THRESH )
{
    j11valid[iij11]=false; _ij11[1] = iij11; break; 
}
}
j11 = j11array[ij11]; cj11 = cj11array[ij11]; sj11 = sj11array[ij11];
{
IkReal evalcond[1];
evalcond[0]=((((new_r12)*(IKcos(j11))))+(((IkReal(-1.00000000000000))*(new_r02)*(IKsin(j11)))));
if( IKabs(evalcond[0]) > 0.000001  )
{
continue;
}
}

{
IkReal j13array[1], cj13array[1], sj13array[1];
bool j13valid[1]={false};
_nj13 = 1;
if( IKabs(((((IkReal(-1.00000000000000))*(new_r11)*(sj11)))+(((IkReal(-1.00000000000000))*(cj11)*(new_r01))))) < IKFAST_ATAN2_MAGTHRESH && IKabs(((((new_r10)*(sj11)))+(((cj11)*(new_r00))))) < IKFAST_ATAN2_MAGTHRESH && IKabs(IKsqr(((((IkReal(-1.00000000000000))*(new_r11)*(sj11)))+(((IkReal(-1.00000000000000))*(cj11)*(new_r01)))))+IKsqr(((((new_r10)*(sj11)))+(((cj11)*(new_r00)))))-1) <= IKFAST_SINCOS_THRESH )
    continue;
j13array[0]=IKatan2(((((IkReal(-1.00000000000000))*(new_r11)*(sj11)))+(((IkReal(-1.00000000000000))*(cj11)*(new_r01)))), ((((new_r10)*(sj11)))+(((cj11)*(new_r00)))));
sj13array[0]=IKsin(j13array[0]);
cj13array[0]=IKcos(j13array[0]);
if( j13array[0] > IKPI )
{
    j13array[0]-=IK2PI;
}
else if( j13array[0] < -IKPI )
{    j13array[0]+=IK2PI;
}
j13valid[0] = true;
for(int ij13 = 0; ij13 < 1; ++ij13)
{
if( !j13valid[ij13] )
{
    continue;
}
_ij13[0] = ij13; _ij13[1] = -1;
for(int iij13 = ij13+1; iij13 < 1; ++iij13)
{
if( j13valid[iij13] && IKabs(cj13array[ij13]-cj13array[iij13]) < IKFAST_SOLUTION_THRESH && IKabs(sj13array[ij13]-sj13array[iij13]) < IKFAST_SOLUTION_THRESH )
{
    j13valid[iij13]=false; _ij13[1] = iij13; break; 
}
}
j13 = j13array[ij13]; cj13 = cj13array[ij13]; sj13 = sj13array[ij13];
{
IkReal evalcond[4];
IkReal x125=IKsin(j13);
IkReal x126=((IkReal(1.00000000000000))*(sj11));
IkReal x127=((IkReal(1.00000000000000))*(IKcos(j13)));
evalcond[0]=((((cj11)*(new_r10)))+(((IkReal(-1.00000000000000))*(new_r00)*(x126)))+(((IkReal(-1.00000000000000))*(x125))));
evalcond[1]=((((cj11)*(new_r11)))+(((IkReal(-1.00000000000000))*(new_r01)*(x126)))+(((IkReal(-1.00000000000000))*(x127))));
evalcond[2]=((x125)+(((new_r11)*(sj11)))+(((cj11)*(new_r01))));
evalcond[3]=((((IkReal(-1.00000000000000))*(x127)))+(((new_r10)*(sj11)))+(((cj11)*(new_r00))));
if( IKabs(evalcond[0]) > 0.000001  || IKabs(evalcond[1]) > 0.000001  || IKabs(evalcond[2]) > 0.000001  || IKabs(evalcond[3]) > 0.000001  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(7);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j7;
vinfos[0].indices[0] = _ij7[0];
vinfos[0].indices[1] = _ij7[1];
vinfos[0].maxsolutions = _nj7;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j8;
vinfos[1].indices[0] = _ij8[0];
vinfos[1].indices[1] = _ij8[1];
vinfos[1].maxsolutions = _nj8;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j9;
vinfos[2].indices[0] = _ij9[0];
vinfos[2].indices[1] = _ij9[1];
vinfos[2].maxsolutions = _nj9;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j10;
vinfos[3].indices[0] = _ij10[0];
vinfos[3].indices[1] = _ij10[1];
vinfos[3].maxsolutions = _nj10;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j11;
vinfos[4].indices[0] = _ij11[0];
vinfos[4].indices[1] = _ij11[1];
vinfos[4].maxsolutions = _nj11;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j12;
vinfos[5].indices[0] = _ij12[0];
vinfos[5].indices[1] = _ij12[1];
vinfos[5].maxsolutions = _nj12;
vinfos[6].jointtype = 1;
vinfos[6].foffset = j13;
vinfos[6].indices[0] = _ij13[0];
vinfos[6].indices[1] = _ij13[1];
vinfos[6].maxsolutions = _nj13;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}
}
}

} else
{
IkReal x128=((IkReal(1.00000000000000))+(new_r22));
evalcond[0]=((IkReal(-3.14159265358979))+(IKfmod(j12, IkReal(6.28318530717959))));
evalcond[1]=x128;
evalcond[2]=new_r20;
evalcond[3]=new_r21;
evalcond[4]=new_r20;
evalcond[5]=new_r21;
evalcond[6]=x128;
if( IKabs(evalcond[0]) < 0.0000010000000000  && IKabs(evalcond[1]) < 0.0000010000000000  && IKabs(evalcond[2]) < 0.0000010000000000  && IKabs(evalcond[3]) < 0.0000010000000000  && IKabs(evalcond[4]) < 0.0000010000000000  && IKabs(evalcond[5]) < 0.0000010000000000  && IKabs(evalcond[6]) < 0.0000010000000000  )
{
{
IkReal j11array[2], cj11array[2], sj11array[2];
bool j11valid[2]={false};
_nj11 = 2;
if( IKabs(new_r02) < IKFAST_ATAN2_MAGTHRESH && IKabs(new_r12) < IKFAST_ATAN2_MAGTHRESH )
    continue;
IkReal x129=IKatan2(new_r02, new_r12);
j11array[0]=((IkReal(-1.00000000000000))*(x129));
sj11array[0]=IKsin(j11array[0]);
cj11array[0]=IKcos(j11array[0]);
j11array[1]=((IkReal(3.14159265358979))+(((IkReal(-1.00000000000000))*(x129))));
sj11array[1]=IKsin(j11array[1]);
cj11array[1]=IKcos(j11array[1]);
if( j11array[0] > IKPI )
{
    j11array[0]-=IK2PI;
}
else if( j11array[0] < -IKPI )
{    j11array[0]+=IK2PI;
}
j11valid[0] = true;
if( j11array[1] > IKPI )
{
    j11array[1]-=IK2PI;
}
else if( j11array[1] < -IKPI )
{    j11array[1]+=IK2PI;
}
j11valid[1] = true;
for(int ij11 = 0; ij11 < 2; ++ij11)
{
if( !j11valid[ij11] )
{
    continue;
}
_ij11[0] = ij11; _ij11[1] = -1;
for(int iij11 = ij11+1; iij11 < 2; ++iij11)
{
if( j11valid[iij11] && IKabs(cj11array[ij11]-cj11array[iij11]) < IKFAST_SOLUTION_THRESH && IKabs(sj11array[ij11]-sj11array[iij11]) < IKFAST_SOLUTION_THRESH )
{
    j11valid[iij11]=false; _ij11[1] = iij11; break; 
}
}
j11 = j11array[ij11]; cj11 = cj11array[ij11]; sj11 = sj11array[ij11];
{
IkReal evalcond[1];
evalcond[0]=((((new_r12)*(IKcos(j11))))+(((IkReal(-1.00000000000000))*(new_r02)*(IKsin(j11)))));
if( IKabs(evalcond[0]) > 0.000001  )
{
continue;
}
}

{
IkReal j13array[1], cj13array[1], sj13array[1];
bool j13valid[1]={false};
_nj13 = 1;
if( IKabs(((((new_r11)*(sj11)))+(((cj11)*(new_r01))))) < IKFAST_ATAN2_MAGTHRESH && IKabs(((((IkReal(-1.00000000000000))*(new_r10)*(sj11)))+(((IkReal(-1.00000000000000))*(cj11)*(new_r00))))) < IKFAST_ATAN2_MAGTHRESH && IKabs(IKsqr(((((new_r11)*(sj11)))+(((cj11)*(new_r01)))))+IKsqr(((((IkReal(-1.00000000000000))*(new_r10)*(sj11)))+(((IkReal(-1.00000000000000))*(cj11)*(new_r00)))))-1) <= IKFAST_SINCOS_THRESH )
    continue;
j13array[0]=IKatan2(((((new_r11)*(sj11)))+(((cj11)*(new_r01)))), ((((IkReal(-1.00000000000000))*(new_r10)*(sj11)))+(((IkReal(-1.00000000000000))*(cj11)*(new_r00)))));
sj13array[0]=IKsin(j13array[0]);
cj13array[0]=IKcos(j13array[0]);
if( j13array[0] > IKPI )
{
    j13array[0]-=IK2PI;
}
else if( j13array[0] < -IKPI )
{    j13array[0]+=IK2PI;
}
j13valid[0] = true;
for(int ij13 = 0; ij13 < 1; ++ij13)
{
if( !j13valid[ij13] )
{
    continue;
}
_ij13[0] = ij13; _ij13[1] = -1;
for(int iij13 = ij13+1; iij13 < 1; ++iij13)
{
if( j13valid[iij13] && IKabs(cj13array[ij13]-cj13array[iij13]) < IKFAST_SOLUTION_THRESH && IKabs(sj13array[ij13]-sj13array[iij13]) < IKFAST_SOLUTION_THRESH )
{
    j13valid[iij13]=false; _ij13[1] = iij13; break; 
}
}
j13 = j13array[ij13]; cj13 = cj13array[ij13]; sj13 = sj13array[ij13];
{
IkReal evalcond[4];
IkReal x130=IKcos(j13);
IkReal x131=((IkReal(1.00000000000000))*(sj11));
IkReal x132=((IkReal(1.00000000000000))*(IKsin(j13)));
evalcond[0]=((((cj11)*(new_r10)))+(((IkReal(-1.00000000000000))*(new_r00)*(x131)))+(((IkReal(-1.00000000000000))*(x132))));
evalcond[1]=((((cj11)*(new_r11)))+(((IkReal(-1.00000000000000))*(new_r01)*(x131)))+(((IkReal(-1.00000000000000))*(x130))));
evalcond[2]=((((IkReal(-1.00000000000000))*(x132)))+(((new_r11)*(sj11)))+(((cj11)*(new_r01))));
evalcond[3]=((x130)+(((new_r10)*(sj11)))+(((cj11)*(new_r00))));
if( IKabs(evalcond[0]) > 0.000001  || IKabs(evalcond[1]) > 0.000001  || IKabs(evalcond[2]) > 0.000001  || IKabs(evalcond[3]) > 0.000001  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(7);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j7;
vinfos[0].indices[0] = _ij7[0];
vinfos[0].indices[1] = _ij7[1];
vinfos[0].maxsolutions = _nj7;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j8;
vinfos[1].indices[0] = _ij8[0];
vinfos[1].indices[1] = _ij8[1];
vinfos[1].maxsolutions = _nj8;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j9;
vinfos[2].indices[0] = _ij9[0];
vinfos[2].indices[1] = _ij9[1];
vinfos[2].maxsolutions = _nj9;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j10;
vinfos[3].indices[0] = _ij10[0];
vinfos[3].indices[1] = _ij10[1];
vinfos[3].maxsolutions = _nj10;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j11;
vinfos[4].indices[0] = _ij11[0];
vinfos[4].indices[1] = _ij11[1];
vinfos[4].maxsolutions = _nj11;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j12;
vinfos[5].indices[0] = _ij12[0];
vinfos[5].indices[1] = _ij12[1];
vinfos[5].maxsolutions = _nj12;
vinfos[6].jointtype = 1;
vinfos[6].foffset = j13;
vinfos[6].indices[0] = _ij13[0];
vinfos[6].indices[1] = _ij13[1];
vinfos[6].maxsolutions = _nj13;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}
}
}

} else
{
if( 1 )
{
continue;

} else
{
}
}
}
}
}
}

} else
{
{
IkReal j11array[1], cj11array[1], sj11array[1];
bool j11valid[1]={false};
_nj11 = 1;
IkReal x133=((gconst53)*(new_r22)*(sj12));
if( IKabs(((new_r12)*(x133))) < IKFAST_ATAN2_MAGTHRESH && IKabs(((new_r02)*(x133))) < IKFAST_ATAN2_MAGTHRESH )
    continue;
j11array[0]=IKatan2(((new_r12)*(x133)), ((new_r02)*(x133)));
sj11array[0]=IKsin(j11array[0]);
cj11array[0]=IKcos(j11array[0]);
if( j11array[0] > IKPI )
{
    j11array[0]-=IK2PI;
}
else if( j11array[0] < -IKPI )
{    j11array[0]+=IK2PI;
}
j11valid[0] = true;
for(int ij11 = 0; ij11 < 1; ++ij11)
{
if( !j11valid[ij11] )
{
    continue;
}
_ij11[0] = ij11; _ij11[1] = -1;
for(int iij11 = ij11+1; iij11 < 1; ++iij11)
{
if( j11valid[iij11] && IKabs(cj11array[ij11]-cj11array[iij11]) < IKFAST_SOLUTION_THRESH && IKabs(sj11array[ij11]-sj11array[iij11]) < IKFAST_SOLUTION_THRESH )
{
    j11valid[iij11]=false; _ij11[1] = iij11; break; 
}
}
j11 = j11array[ij11]; cj11 = cj11array[ij11]; sj11 = sj11array[ij11];
{
IkReal evalcond[6];
IkReal x134=IKcos(j11);
IkReal x135=IKsin(j11);
IkReal x136=((IkReal(1.00000000000000))*(cj12));
IkReal x137=((IkReal(1.00000000000000))*(sj12));
IkReal x138=((new_r02)*(x134));
IkReal x139=((new_r12)*(x135));
evalcond[0]=((((new_r12)*(x134)))+(((IkReal(-1.00000000000000))*(new_r02)*(x135))));
evalcond[1]=((x139)+(x138)+(((IkReal(-1.00000000000000))*(x137))));
evalcond[2]=((((cj12)*(x139)))+(((cj12)*(x138)))+(((IkReal(-1.00000000000000))*(new_r22)*(x137))));
evalcond[3]=((((IkReal(-1.00000000000000))*(new_r10)*(x135)*(x137)))+(((IkReal(-1.00000000000000))*(new_r00)*(x134)*(x137)))+(((IkReal(-1.00000000000000))*(new_r20)*(x136))));
evalcond[4]=((((IkReal(-1.00000000000000))*(new_r11)*(x135)*(x137)))+(((IkReal(-1.00000000000000))*(new_r21)*(x136)))+(((IkReal(-1.00000000000000))*(new_r01)*(x134)*(x137))));
evalcond[5]=((IkReal(1.00000000000000))+(((IkReal(-1.00000000000000))*(x137)*(x138)))+(((IkReal(-1.00000000000000))*(x137)*(x139)))+(((IkReal(-1.00000000000000))*(new_r22)*(x136))));
if( IKabs(evalcond[0]) > 0.000001  || IKabs(evalcond[1]) > 0.000001  || IKabs(evalcond[2]) > 0.000001  || IKabs(evalcond[3]) > 0.000001  || IKabs(evalcond[4]) > 0.000001  || IKabs(evalcond[5]) > 0.000001  )
{
continue;
}
}

{
IkReal dummyeval[1];
IkReal gconst55;
gconst55=IKsign(sj12);
dummyeval[0]=sj12;
if( IKabs(dummyeval[0]) < 0.0000010000000000  )
{
{
IkReal dummyeval[1];
dummyeval[0]=sj12;
if( IKabs(dummyeval[0]) < 0.0000010000000000  )
{
{
IkReal dummyeval[1];
dummyeval[0]=sj12;
if( IKabs(dummyeval[0]) < 0.0000010000000000  )
{
{
IkReal evalcond[11];
IkReal x140=((((cj11)*(new_r12)))+(((IkReal(-1.00000000000000))*(new_r02)*(sj11))));
IkReal x141=((((cj11)*(new_r02)))+(((new_r12)*(sj11))));
evalcond[0]=((IkReal(-3.14159265358979))+(IKfmod(((IkReal(3.14159265358979))+(j12)), IkReal(6.28318530717959))));
evalcond[1]=((IkReal(-1.00000000000000))+(new_r22));
evalcond[2]=new_r20;
evalcond[3]=new_r21;
evalcond[4]=x140;
evalcond[5]=x140;
evalcond[6]=x141;
evalcond[7]=x141;
evalcond[8]=((IkReal(-1.00000000000000))*(new_r20));
evalcond[9]=((IkReal(-1.00000000000000))*(new_r21));
evalcond[10]=((IkReal(1.00000000000000))+(((IkReal(-1.00000000000000))*(new_r22))));
if( IKabs(evalcond[0]) < 0.0000010000000000  && IKabs(evalcond[1]) < 0.0000010000000000  && IKabs(evalcond[2]) < 0.0000010000000000  && IKabs(evalcond[3]) < 0.0000010000000000  && IKabs(evalcond[4]) < 0.0000010000000000  && IKabs(evalcond[5]) < 0.0000010000000000  && IKabs(evalcond[6]) < 0.0000010000000000  && IKabs(evalcond[7]) < 0.0000010000000000  && IKabs(evalcond[8]) < 0.0000010000000000  && IKabs(evalcond[9]) < 0.0000010000000000  && IKabs(evalcond[10]) < 0.0000010000000000  )
{
{
IkReal j13array[1], cj13array[1], sj13array[1];
bool j13valid[1]={false};
_nj13 = 1;
if( IKabs(((((IkReal(-1.00000000000000))*(new_r11)*(sj11)))+(((IkReal(-1.00000000000000))*(cj11)*(new_r01))))) < IKFAST_ATAN2_MAGTHRESH && IKabs(((((new_r10)*(sj11)))+(((cj11)*(new_r00))))) < IKFAST_ATAN2_MAGTHRESH && IKabs(IKsqr(((((IkReal(-1.00000000000000))*(new_r11)*(sj11)))+(((IkReal(-1.00000000000000))*(cj11)*(new_r01)))))+IKsqr(((((new_r10)*(sj11)))+(((cj11)*(new_r00)))))-1) <= IKFAST_SINCOS_THRESH )
    continue;
j13array[0]=IKatan2(((((IkReal(-1.00000000000000))*(new_r11)*(sj11)))+(((IkReal(-1.00000000000000))*(cj11)*(new_r01)))), ((((new_r10)*(sj11)))+(((cj11)*(new_r00)))));
sj13array[0]=IKsin(j13array[0]);
cj13array[0]=IKcos(j13array[0]);
if( j13array[0] > IKPI )
{
    j13array[0]-=IK2PI;
}
else if( j13array[0] < -IKPI )
{    j13array[0]+=IK2PI;
}
j13valid[0] = true;
for(int ij13 = 0; ij13 < 1; ++ij13)
{
if( !j13valid[ij13] )
{
    continue;
}
_ij13[0] = ij13; _ij13[1] = -1;
for(int iij13 = ij13+1; iij13 < 1; ++iij13)
{
if( j13valid[iij13] && IKabs(cj13array[ij13]-cj13array[iij13]) < IKFAST_SOLUTION_THRESH && IKabs(sj13array[ij13]-sj13array[iij13]) < IKFAST_SOLUTION_THRESH )
{
    j13valid[iij13]=false; _ij13[1] = iij13; break; 
}
}
j13 = j13array[ij13]; cj13 = cj13array[ij13]; sj13 = sj13array[ij13];
{
IkReal evalcond[4];
IkReal x142=IKsin(j13);
IkReal x143=((IkReal(1.00000000000000))*(sj11));
IkReal x144=((IkReal(1.00000000000000))*(IKcos(j13)));
evalcond[0]=((((cj11)*(new_r10)))+(((IkReal(-1.00000000000000))*(x142)))+(((IkReal(-1.00000000000000))*(new_r00)*(x143))));
evalcond[1]=((((IkReal(-1.00000000000000))*(new_r01)*(x143)))+(((IkReal(-1.00000000000000))*(x144)))+(((cj11)*(new_r11))));
evalcond[2]=((x142)+(((new_r11)*(sj11)))+(((cj11)*(new_r01))));
evalcond[3]=((((IkReal(-1.00000000000000))*(x144)))+(((new_r10)*(sj11)))+(((cj11)*(new_r00))));
if( IKabs(evalcond[0]) > 0.000001  || IKabs(evalcond[1]) > 0.000001  || IKabs(evalcond[2]) > 0.000001  || IKabs(evalcond[3]) > 0.000001  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(7);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j7;
vinfos[0].indices[0] = _ij7[0];
vinfos[0].indices[1] = _ij7[1];
vinfos[0].maxsolutions = _nj7;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j8;
vinfos[1].indices[0] = _ij8[0];
vinfos[1].indices[1] = _ij8[1];
vinfos[1].maxsolutions = _nj8;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j9;
vinfos[2].indices[0] = _ij9[0];
vinfos[2].indices[1] = _ij9[1];
vinfos[2].maxsolutions = _nj9;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j10;
vinfos[3].indices[0] = _ij10[0];
vinfos[3].indices[1] = _ij10[1];
vinfos[3].maxsolutions = _nj10;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j11;
vinfos[4].indices[0] = _ij11[0];
vinfos[4].indices[1] = _ij11[1];
vinfos[4].maxsolutions = _nj11;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j12;
vinfos[5].indices[0] = _ij12[0];
vinfos[5].indices[1] = _ij12[1];
vinfos[5].maxsolutions = _nj12;
vinfos[6].jointtype = 1;
vinfos[6].foffset = j13;
vinfos[6].indices[0] = _ij13[0];
vinfos[6].indices[1] = _ij13[1];
vinfos[6].maxsolutions = _nj13;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

} else
{
IkReal x145=((IkReal(1.00000000000000))+(new_r22));
IkReal x146=((cj11)*(new_r02));
IkReal x147=((new_r12)*(sj11));
IkReal x148=((((cj11)*(new_r12)))+(((IkReal(-1.00000000000000))*(new_r02)*(sj11))));
evalcond[0]=((IkReal(-3.14159265358979))+(IKfmod(j12, IkReal(6.28318530717959))));
evalcond[1]=x145;
evalcond[2]=new_r20;
evalcond[3]=new_r21;
evalcond[4]=x148;
evalcond[5]=x148;
evalcond[6]=((x146)+(x147));
evalcond[7]=((((IkReal(-1.00000000000000))*(x146)))+(((IkReal(-1.00000000000000))*(x147))));
evalcond[8]=new_r20;
evalcond[9]=new_r21;
evalcond[10]=x145;
if( IKabs(evalcond[0]) < 0.0000010000000000  && IKabs(evalcond[1]) < 0.0000010000000000  && IKabs(evalcond[2]) < 0.0000010000000000  && IKabs(evalcond[3]) < 0.0000010000000000  && IKabs(evalcond[4]) < 0.0000010000000000  && IKabs(evalcond[5]) < 0.0000010000000000  && IKabs(evalcond[6]) < 0.0000010000000000  && IKabs(evalcond[7]) < 0.0000010000000000  && IKabs(evalcond[8]) < 0.0000010000000000  && IKabs(evalcond[9]) < 0.0000010000000000  && IKabs(evalcond[10]) < 0.0000010000000000  )
{
{
IkReal j13array[1], cj13array[1], sj13array[1];
bool j13valid[1]={false};
_nj13 = 1;
if( IKabs(((((new_r11)*(sj11)))+(((cj11)*(new_r01))))) < IKFAST_ATAN2_MAGTHRESH && IKabs(((((IkReal(-1.00000000000000))*(new_r10)*(sj11)))+(((IkReal(-1.00000000000000))*(cj11)*(new_r00))))) < IKFAST_ATAN2_MAGTHRESH && IKabs(IKsqr(((((new_r11)*(sj11)))+(((cj11)*(new_r01)))))+IKsqr(((((IkReal(-1.00000000000000))*(new_r10)*(sj11)))+(((IkReal(-1.00000000000000))*(cj11)*(new_r00)))))-1) <= IKFAST_SINCOS_THRESH )
    continue;
j13array[0]=IKatan2(((((new_r11)*(sj11)))+(((cj11)*(new_r01)))), ((((IkReal(-1.00000000000000))*(new_r10)*(sj11)))+(((IkReal(-1.00000000000000))*(cj11)*(new_r00)))));
sj13array[0]=IKsin(j13array[0]);
cj13array[0]=IKcos(j13array[0]);
if( j13array[0] > IKPI )
{
    j13array[0]-=IK2PI;
}
else if( j13array[0] < -IKPI )
{    j13array[0]+=IK2PI;
}
j13valid[0] = true;
for(int ij13 = 0; ij13 < 1; ++ij13)
{
if( !j13valid[ij13] )
{
    continue;
}
_ij13[0] = ij13; _ij13[1] = -1;
for(int iij13 = ij13+1; iij13 < 1; ++iij13)
{
if( j13valid[iij13] && IKabs(cj13array[ij13]-cj13array[iij13]) < IKFAST_SOLUTION_THRESH && IKabs(sj13array[ij13]-sj13array[iij13]) < IKFAST_SOLUTION_THRESH )
{
    j13valid[iij13]=false; _ij13[1] = iij13; break; 
}
}
j13 = j13array[ij13]; cj13 = cj13array[ij13]; sj13 = sj13array[ij13];
{
IkReal evalcond[4];
IkReal x149=IKcos(j13);
IkReal x150=((IkReal(1.00000000000000))*(sj11));
IkReal x151=((IkReal(1.00000000000000))*(IKsin(j13)));
evalcond[0]=((((cj11)*(new_r10)))+(((IkReal(-1.00000000000000))*(x151)))+(((IkReal(-1.00000000000000))*(new_r00)*(x150))));
evalcond[1]=((((cj11)*(new_r11)))+(((IkReal(-1.00000000000000))*(x149)))+(((IkReal(-1.00000000000000))*(new_r01)*(x150))));
evalcond[2]=((((IkReal(-1.00000000000000))*(x151)))+(((new_r11)*(sj11)))+(((cj11)*(new_r01))));
evalcond[3]=((x149)+(((new_r10)*(sj11)))+(((cj11)*(new_r00))));
if( IKabs(evalcond[0]) > 0.000001  || IKabs(evalcond[1]) > 0.000001  || IKabs(evalcond[2]) > 0.000001  || IKabs(evalcond[3]) > 0.000001  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(7);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j7;
vinfos[0].indices[0] = _ij7[0];
vinfos[0].indices[1] = _ij7[1];
vinfos[0].maxsolutions = _nj7;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j8;
vinfos[1].indices[0] = _ij8[0];
vinfos[1].indices[1] = _ij8[1];
vinfos[1].maxsolutions = _nj8;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j9;
vinfos[2].indices[0] = _ij9[0];
vinfos[2].indices[1] = _ij9[1];
vinfos[2].maxsolutions = _nj9;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j10;
vinfos[3].indices[0] = _ij10[0];
vinfos[3].indices[1] = _ij10[1];
vinfos[3].maxsolutions = _nj10;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j11;
vinfos[4].indices[0] = _ij11[0];
vinfos[4].indices[1] = _ij11[1];
vinfos[4].maxsolutions = _nj11;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j12;
vinfos[5].indices[0] = _ij12[0];
vinfos[5].indices[1] = _ij12[1];
vinfos[5].maxsolutions = _nj12;
vinfos[6].jointtype = 1;
vinfos[6].foffset = j13;
vinfos[6].indices[0] = _ij13[0];
vinfos[6].indices[1] = _ij13[1];
vinfos[6].maxsolutions = _nj13;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

} else
{
if( 1 )
{
continue;

} else
{
}
}
}
}

} else
{
{
IkReal j13array[1], cj13array[1], sj13array[1];
bool j13valid[1]={false};
_nj13 = 1;
if( IKabs(((((cj11)*(new_r10)))+(((IkReal(-1.00000000000000))*(new_r00)*(sj11))))) < IKFAST_ATAN2_MAGTHRESH && IKabs(((IkReal(-1.00000000000000))*(new_r20)*(((IKabs(sj12) != 0)?((IkReal)1/(sj12)):(IkReal)1.0e30)))) < IKFAST_ATAN2_MAGTHRESH && IKabs(IKsqr(((((cj11)*(new_r10)))+(((IkReal(-1.00000000000000))*(new_r00)*(sj11)))))+IKsqr(((IkReal(-1.00000000000000))*(new_r20)*(((IKabs(sj12) != 0)?((IkReal)1/(sj12)):(IkReal)1.0e30))))-1) <= IKFAST_SINCOS_THRESH )
    continue;
j13array[0]=IKatan2(((((cj11)*(new_r10)))+(((IkReal(-1.00000000000000))*(new_r00)*(sj11)))), ((IkReal(-1.00000000000000))*(new_r20)*(((IKabs(sj12) != 0)?((IkReal)1/(sj12)):(IkReal)1.0e30))));
sj13array[0]=IKsin(j13array[0]);
cj13array[0]=IKcos(j13array[0]);
if( j13array[0] > IKPI )
{
    j13array[0]-=IK2PI;
}
else if( j13array[0] < -IKPI )
{    j13array[0]+=IK2PI;
}
j13valid[0] = true;
for(int ij13 = 0; ij13 < 1; ++ij13)
{
if( !j13valid[ij13] )
{
    continue;
}
_ij13[0] = ij13; _ij13[1] = -1;
for(int iij13 = ij13+1; iij13 < 1; ++iij13)
{
if( j13valid[iij13] && IKabs(cj13array[ij13]-cj13array[iij13]) < IKFAST_SOLUTION_THRESH && IKabs(sj13array[ij13]-sj13array[iij13]) < IKFAST_SOLUTION_THRESH )
{
    j13valid[iij13]=false; _ij13[1] = iij13; break; 
}
}
j13 = j13array[ij13]; cj13 = cj13array[ij13]; sj13 = sj13array[ij13];
{
IkReal evalcond[8];
IkReal x152=IKsin(j13);
IkReal x153=IKcos(j13);
IkReal x154=((new_r10)*(sj11));
IkReal x155=((cj11)*(new_r00));
IkReal x156=((new_r11)*(sj11));
IkReal x157=((IkReal(1.00000000000000))*(sj11));
IkReal x158=((cj11)*(new_r01));
IkReal x159=((IkReal(1.00000000000000))*(sj12));
IkReal x160=((IkReal(1.00000000000000))*(x153));
IkReal x161=((IkReal(1.00000000000000))*(x152));
evalcond[0]=((((sj12)*(x153)))+(new_r20));
evalcond[1]=((((IkReal(-1.00000000000000))*(x152)*(x159)))+(new_r21));
evalcond[2]=((((cj11)*(new_r10)))+(((IkReal(-1.00000000000000))*(x161)))+(((IkReal(-1.00000000000000))*(new_r00)*(x157))));
evalcond[3]=((((cj11)*(new_r11)))+(((IkReal(-1.00000000000000))*(x160)))+(((IkReal(-1.00000000000000))*(new_r01)*(x157))));
evalcond[4]=((((cj12)*(x152)))+(x156)+(x158));
evalcond[5]=((x155)+(x154)+(((IkReal(-1.00000000000000))*(cj12)*(x160))));
evalcond[6]=((((cj12)*(x158)))+(((cj12)*(x156)))+(((IkReal(-1.00000000000000))*(new_r21)*(x159)))+(x152));
evalcond[7]=((((IkReal(-1.00000000000000))*(new_r20)*(x159)))+(((cj12)*(x155)))+(((cj12)*(x154)))+(((IkReal(-1.00000000000000))*(x160))));
if( IKabs(evalcond[0]) > 0.000001  || IKabs(evalcond[1]) > 0.000001  || IKabs(evalcond[2]) > 0.000001  || IKabs(evalcond[3]) > 0.000001  || IKabs(evalcond[4]) > 0.000001  || IKabs(evalcond[5]) > 0.000001  || IKabs(evalcond[6]) > 0.000001  || IKabs(evalcond[7]) > 0.000001  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(7);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j7;
vinfos[0].indices[0] = _ij7[0];
vinfos[0].indices[1] = _ij7[1];
vinfos[0].maxsolutions = _nj7;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j8;
vinfos[1].indices[0] = _ij8[0];
vinfos[1].indices[1] = _ij8[1];
vinfos[1].maxsolutions = _nj8;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j9;
vinfos[2].indices[0] = _ij9[0];
vinfos[2].indices[1] = _ij9[1];
vinfos[2].maxsolutions = _nj9;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j10;
vinfos[3].indices[0] = _ij10[0];
vinfos[3].indices[1] = _ij10[1];
vinfos[3].maxsolutions = _nj10;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j11;
vinfos[4].indices[0] = _ij11[0];
vinfos[4].indices[1] = _ij11[1];
vinfos[4].maxsolutions = _nj11;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j12;
vinfos[5].indices[0] = _ij12[0];
vinfos[5].indices[1] = _ij12[1];
vinfos[5].maxsolutions = _nj12;
vinfos[6].jointtype = 1;
vinfos[6].foffset = j13;
vinfos[6].indices[0] = _ij13[0];
vinfos[6].indices[1] = _ij13[1];
vinfos[6].maxsolutions = _nj13;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j13array[1], cj13array[1], sj13array[1];
bool j13valid[1]={false};
_nj13 = 1;
if( IKabs(((new_r21)*(((IKabs(sj12) != 0)?((IkReal)1/(sj12)):(IkReal)1.0e30)))) < IKFAST_ATAN2_MAGTHRESH && IKabs(((((cj11)*(new_r11)))+(((IkReal(-1.00000000000000))*(new_r01)*(sj11))))) < IKFAST_ATAN2_MAGTHRESH && IKabs(IKsqr(((new_r21)*(((IKabs(sj12) != 0)?((IkReal)1/(sj12)):(IkReal)1.0e30))))+IKsqr(((((cj11)*(new_r11)))+(((IkReal(-1.00000000000000))*(new_r01)*(sj11)))))-1) <= IKFAST_SINCOS_THRESH )
    continue;
j13array[0]=IKatan2(((new_r21)*(((IKabs(sj12) != 0)?((IkReal)1/(sj12)):(IkReal)1.0e30))), ((((cj11)*(new_r11)))+(((IkReal(-1.00000000000000))*(new_r01)*(sj11)))));
sj13array[0]=IKsin(j13array[0]);
cj13array[0]=IKcos(j13array[0]);
if( j13array[0] > IKPI )
{
    j13array[0]-=IK2PI;
}
else if( j13array[0] < -IKPI )
{    j13array[0]+=IK2PI;
}
j13valid[0] = true;
for(int ij13 = 0; ij13 < 1; ++ij13)
{
if( !j13valid[ij13] )
{
    continue;
}
_ij13[0] = ij13; _ij13[1] = -1;
for(int iij13 = ij13+1; iij13 < 1; ++iij13)
{
if( j13valid[iij13] && IKabs(cj13array[ij13]-cj13array[iij13]) < IKFAST_SOLUTION_THRESH && IKabs(sj13array[ij13]-sj13array[iij13]) < IKFAST_SOLUTION_THRESH )
{
    j13valid[iij13]=false; _ij13[1] = iij13; break; 
}
}
j13 = j13array[ij13]; cj13 = cj13array[ij13]; sj13 = sj13array[ij13];
{
IkReal evalcond[8];
IkReal x162=IKsin(j13);
IkReal x163=IKcos(j13);
IkReal x164=((new_r10)*(sj11));
IkReal x165=((cj11)*(new_r00));
IkReal x166=((new_r11)*(sj11));
IkReal x167=((IkReal(1.00000000000000))*(sj11));
IkReal x168=((cj11)*(new_r01));
IkReal x169=((IkReal(1.00000000000000))*(sj12));
IkReal x170=((IkReal(1.00000000000000))*(x163));
IkReal x171=((IkReal(1.00000000000000))*(x162));
evalcond[0]=((((sj12)*(x163)))+(new_r20));
evalcond[1]=((((IkReal(-1.00000000000000))*(x162)*(x169)))+(new_r21));
evalcond[2]=((((cj11)*(new_r10)))+(((IkReal(-1.00000000000000))*(new_r00)*(x167)))+(((IkReal(-1.00000000000000))*(x171))));
evalcond[3]=((((cj11)*(new_r11)))+(((IkReal(-1.00000000000000))*(x170)))+(((IkReal(-1.00000000000000))*(new_r01)*(x167))));
evalcond[4]=((((cj12)*(x162)))+(x168)+(x166));
evalcond[5]=((x164)+(x165)+(((IkReal(-1.00000000000000))*(cj12)*(x170))));
evalcond[6]=((((IkReal(-1.00000000000000))*(new_r21)*(x169)))+(((cj12)*(x166)))+(((cj12)*(x168)))+(x162));
evalcond[7]=((((cj12)*(x165)))+(((cj12)*(x164)))+(((IkReal(-1.00000000000000))*(x170)))+(((IkReal(-1.00000000000000))*(new_r20)*(x169))));
if( IKabs(evalcond[0]) > 0.000001  || IKabs(evalcond[1]) > 0.000001  || IKabs(evalcond[2]) > 0.000001  || IKabs(evalcond[3]) > 0.000001  || IKabs(evalcond[4]) > 0.000001  || IKabs(evalcond[5]) > 0.000001  || IKabs(evalcond[6]) > 0.000001  || IKabs(evalcond[7]) > 0.000001  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(7);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j7;
vinfos[0].indices[0] = _ij7[0];
vinfos[0].indices[1] = _ij7[1];
vinfos[0].maxsolutions = _nj7;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j8;
vinfos[1].indices[0] = _ij8[0];
vinfos[1].indices[1] = _ij8[1];
vinfos[1].maxsolutions = _nj8;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j9;
vinfos[2].indices[0] = _ij9[0];
vinfos[2].indices[1] = _ij9[1];
vinfos[2].maxsolutions = _nj9;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j10;
vinfos[3].indices[0] = _ij10[0];
vinfos[3].indices[1] = _ij10[1];
vinfos[3].maxsolutions = _nj10;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j11;
vinfos[4].indices[0] = _ij11[0];
vinfos[4].indices[1] = _ij11[1];
vinfos[4].maxsolutions = _nj11;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j12;
vinfos[5].indices[0] = _ij12[0];
vinfos[5].indices[1] = _ij12[1];
vinfos[5].maxsolutions = _nj12;
vinfos[6].jointtype = 1;
vinfos[6].foffset = j13;
vinfos[6].indices[0] = _ij13[0];
vinfos[6].indices[1] = _ij13[1];
vinfos[6].maxsolutions = _nj13;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j13array[1], cj13array[1], sj13array[1];
bool j13valid[1]={false};
_nj13 = 1;
if( IKabs(((gconst55)*(new_r21))) < IKFAST_ATAN2_MAGTHRESH && IKabs(((IkReal(-1.00000000000000))*(gconst55)*(new_r20))) < IKFAST_ATAN2_MAGTHRESH )
    continue;
j13array[0]=IKatan2(((gconst55)*(new_r21)), ((IkReal(-1.00000000000000))*(gconst55)*(new_r20)));
sj13array[0]=IKsin(j13array[0]);
cj13array[0]=IKcos(j13array[0]);
if( j13array[0] > IKPI )
{
    j13array[0]-=IK2PI;
}
else if( j13array[0] < -IKPI )
{    j13array[0]+=IK2PI;
}
j13valid[0] = true;
for(int ij13 = 0; ij13 < 1; ++ij13)
{
if( !j13valid[ij13] )
{
    continue;
}
_ij13[0] = ij13; _ij13[1] = -1;
for(int iij13 = ij13+1; iij13 < 1; ++iij13)
{
if( j13valid[iij13] && IKabs(cj13array[ij13]-cj13array[iij13]) < IKFAST_SOLUTION_THRESH && IKabs(sj13array[ij13]-sj13array[iij13]) < IKFAST_SOLUTION_THRESH )
{
    j13valid[iij13]=false; _ij13[1] = iij13; break; 
}
}
j13 = j13array[ij13]; cj13 = cj13array[ij13]; sj13 = sj13array[ij13];
{
IkReal evalcond[8];
IkReal x172=IKsin(j13);
IkReal x173=IKcos(j13);
IkReal x174=((new_r10)*(sj11));
IkReal x175=((cj11)*(new_r00));
IkReal x176=((new_r11)*(sj11));
IkReal x177=((IkReal(1.00000000000000))*(sj11));
IkReal x178=((cj11)*(new_r01));
IkReal x179=((IkReal(1.00000000000000))*(sj12));
IkReal x180=((IkReal(1.00000000000000))*(x173));
IkReal x181=((IkReal(1.00000000000000))*(x172));
evalcond[0]=((((sj12)*(x173)))+(new_r20));
evalcond[1]=((new_r21)+(((IkReal(-1.00000000000000))*(x172)*(x179))));
evalcond[2]=((((cj11)*(new_r10)))+(((IkReal(-1.00000000000000))*(x181)))+(((IkReal(-1.00000000000000))*(new_r00)*(x177))));
evalcond[3]=((((cj11)*(new_r11)))+(((IkReal(-1.00000000000000))*(x180)))+(((IkReal(-1.00000000000000))*(new_r01)*(x177))));
evalcond[4]=((((cj12)*(x172)))+(x178)+(x176));
evalcond[5]=((x175)+(x174)+(((IkReal(-1.00000000000000))*(cj12)*(x180))));
evalcond[6]=((((IkReal(-1.00000000000000))*(new_r21)*(x179)))+(((cj12)*(x178)))+(((cj12)*(x176)))+(x172));
evalcond[7]=((((cj12)*(x174)))+(((cj12)*(x175)))+(((IkReal(-1.00000000000000))*(new_r20)*(x179)))+(((IkReal(-1.00000000000000))*(x180))));
if( IKabs(evalcond[0]) > 0.000001  || IKabs(evalcond[1]) > 0.000001  || IKabs(evalcond[2]) > 0.000001  || IKabs(evalcond[3]) > 0.000001  || IKabs(evalcond[4]) > 0.000001  || IKabs(evalcond[5]) > 0.000001  || IKabs(evalcond[6]) > 0.000001  || IKabs(evalcond[7]) > 0.000001  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(7);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j7;
vinfos[0].indices[0] = _ij7[0];
vinfos[0].indices[1] = _ij7[1];
vinfos[0].maxsolutions = _nj7;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j8;
vinfos[1].indices[0] = _ij8[0];
vinfos[1].indices[1] = _ij8[1];
vinfos[1].maxsolutions = _nj8;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j9;
vinfos[2].indices[0] = _ij9[0];
vinfos[2].indices[1] = _ij9[1];
vinfos[2].maxsolutions = _nj9;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j10;
vinfos[3].indices[0] = _ij10[0];
vinfos[3].indices[1] = _ij10[1];
vinfos[3].maxsolutions = _nj10;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j11;
vinfos[4].indices[0] = _ij11[0];
vinfos[4].indices[1] = _ij11[1];
vinfos[4].maxsolutions = _nj11;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j12;
vinfos[5].indices[0] = _ij12[0];
vinfos[5].indices[1] = _ij12[1];
vinfos[5].maxsolutions = _nj12;
vinfos[6].jointtype = 1;
vinfos[6].foffset = j13;
vinfos[6].indices[0] = _ij13[0];
vinfos[6].indices[1] = _ij13[1];
vinfos[6].maxsolutions = _nj13;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}
}
}

}

}

} else
{
{
IkReal j11array[1], cj11array[1], sj11array[1];
bool j11valid[1]={false};
_nj11 = 1;
IkReal x182=((gconst52)*(sj12));
if( IKabs(((new_r12)*(x182))) < IKFAST_ATAN2_MAGTHRESH && IKabs(((new_r02)*(x182))) < IKFAST_ATAN2_MAGTHRESH )
    continue;
j11array[0]=IKatan2(((new_r12)*(x182)), ((new_r02)*(x182)));
sj11array[0]=IKsin(j11array[0]);
cj11array[0]=IKcos(j11array[0]);
if( j11array[0] > IKPI )
{
    j11array[0]-=IK2PI;
}
else if( j11array[0] < -IKPI )
{    j11array[0]+=IK2PI;
}
j11valid[0] = true;
for(int ij11 = 0; ij11 < 1; ++ij11)
{
if( !j11valid[ij11] )
{
    continue;
}
_ij11[0] = ij11; _ij11[1] = -1;
for(int iij11 = ij11+1; iij11 < 1; ++iij11)
{
if( j11valid[iij11] && IKabs(cj11array[ij11]-cj11array[iij11]) < IKFAST_SOLUTION_THRESH && IKabs(sj11array[ij11]-sj11array[iij11]) < IKFAST_SOLUTION_THRESH )
{
    j11valid[iij11]=false; _ij11[1] = iij11; break; 
}
}
j11 = j11array[ij11]; cj11 = cj11array[ij11]; sj11 = sj11array[ij11];
{
IkReal evalcond[6];
IkReal x183=IKcos(j11);
IkReal x184=IKsin(j11);
IkReal x185=((IkReal(1.00000000000000))*(cj12));
IkReal x186=((IkReal(1.00000000000000))*(sj12));
IkReal x187=((new_r02)*(x183));
IkReal x188=((new_r12)*(x184));
evalcond[0]=((((new_r12)*(x183)))+(((IkReal(-1.00000000000000))*(new_r02)*(x184))));
evalcond[1]=((((IkReal(-1.00000000000000))*(x186)))+(x187)+(x188));
evalcond[2]=((((cj12)*(x188)))+(((cj12)*(x187)))+(((IkReal(-1.00000000000000))*(new_r22)*(x186))));
evalcond[3]=((((IkReal(-1.00000000000000))*(new_r00)*(x183)*(x186)))+(((IkReal(-1.00000000000000))*(new_r20)*(x185)))+(((IkReal(-1.00000000000000))*(new_r10)*(x184)*(x186))));
evalcond[4]=((((IkReal(-1.00000000000000))*(new_r21)*(x185)))+(((IkReal(-1.00000000000000))*(new_r01)*(x183)*(x186)))+(((IkReal(-1.00000000000000))*(new_r11)*(x184)*(x186))));
evalcond[5]=((IkReal(1.00000000000000))+(((IkReal(-1.00000000000000))*(x186)*(x187)))+(((IkReal(-1.00000000000000))*(x186)*(x188)))+(((IkReal(-1.00000000000000))*(new_r22)*(x185))));
if( IKabs(evalcond[0]) > 0.000001  || IKabs(evalcond[1]) > 0.000001  || IKabs(evalcond[2]) > 0.000001  || IKabs(evalcond[3]) > 0.000001  || IKabs(evalcond[4]) > 0.000001  || IKabs(evalcond[5]) > 0.000001  )
{
continue;
}
}

{
IkReal dummyeval[1];
IkReal gconst55;
gconst55=IKsign(sj12);
dummyeval[0]=sj12;
if( IKabs(dummyeval[0]) < 0.0000010000000000  )
{
{
IkReal dummyeval[1];
dummyeval[0]=sj12;
if( IKabs(dummyeval[0]) < 0.0000010000000000  )
{
{
IkReal dummyeval[1];
dummyeval[0]=sj12;
if( IKabs(dummyeval[0]) < 0.0000010000000000  )
{
{
IkReal evalcond[11];
IkReal x189=((((cj11)*(new_r12)))+(((IkReal(-1.00000000000000))*(new_r02)*(sj11))));
IkReal x190=((((cj11)*(new_r02)))+(((new_r12)*(sj11))));
evalcond[0]=((IkReal(-3.14159265358979))+(IKfmod(((IkReal(3.14159265358979))+(j12)), IkReal(6.28318530717959))));
evalcond[1]=((IkReal(-1.00000000000000))+(new_r22));
evalcond[2]=new_r20;
evalcond[3]=new_r21;
evalcond[4]=x189;
evalcond[5]=x189;
evalcond[6]=x190;
evalcond[7]=x190;
evalcond[8]=((IkReal(-1.00000000000000))*(new_r20));
evalcond[9]=((IkReal(-1.00000000000000))*(new_r21));
evalcond[10]=((IkReal(1.00000000000000))+(((IkReal(-1.00000000000000))*(new_r22))));
if( IKabs(evalcond[0]) < 0.0000010000000000  && IKabs(evalcond[1]) < 0.0000010000000000  && IKabs(evalcond[2]) < 0.0000010000000000  && IKabs(evalcond[3]) < 0.0000010000000000  && IKabs(evalcond[4]) < 0.0000010000000000  && IKabs(evalcond[5]) < 0.0000010000000000  && IKabs(evalcond[6]) < 0.0000010000000000  && IKabs(evalcond[7]) < 0.0000010000000000  && IKabs(evalcond[8]) < 0.0000010000000000  && IKabs(evalcond[9]) < 0.0000010000000000  && IKabs(evalcond[10]) < 0.0000010000000000  )
{
{
IkReal j13array[1], cj13array[1], sj13array[1];
bool j13valid[1]={false};
_nj13 = 1;
if( IKabs(((((IkReal(-1.00000000000000))*(new_r11)*(sj11)))+(((IkReal(-1.00000000000000))*(cj11)*(new_r01))))) < IKFAST_ATAN2_MAGTHRESH && IKabs(((((new_r10)*(sj11)))+(((cj11)*(new_r00))))) < IKFAST_ATAN2_MAGTHRESH && IKabs(IKsqr(((((IkReal(-1.00000000000000))*(new_r11)*(sj11)))+(((IkReal(-1.00000000000000))*(cj11)*(new_r01)))))+IKsqr(((((new_r10)*(sj11)))+(((cj11)*(new_r00)))))-1) <= IKFAST_SINCOS_THRESH )
    continue;
j13array[0]=IKatan2(((((IkReal(-1.00000000000000))*(new_r11)*(sj11)))+(((IkReal(-1.00000000000000))*(cj11)*(new_r01)))), ((((new_r10)*(sj11)))+(((cj11)*(new_r00)))));
sj13array[0]=IKsin(j13array[0]);
cj13array[0]=IKcos(j13array[0]);
if( j13array[0] > IKPI )
{
    j13array[0]-=IK2PI;
}
else if( j13array[0] < -IKPI )
{    j13array[0]+=IK2PI;
}
j13valid[0] = true;
for(int ij13 = 0; ij13 < 1; ++ij13)
{
if( !j13valid[ij13] )
{
    continue;
}
_ij13[0] = ij13; _ij13[1] = -1;
for(int iij13 = ij13+1; iij13 < 1; ++iij13)
{
if( j13valid[iij13] && IKabs(cj13array[ij13]-cj13array[iij13]) < IKFAST_SOLUTION_THRESH && IKabs(sj13array[ij13]-sj13array[iij13]) < IKFAST_SOLUTION_THRESH )
{
    j13valid[iij13]=false; _ij13[1] = iij13; break; 
}
}
j13 = j13array[ij13]; cj13 = cj13array[ij13]; sj13 = sj13array[ij13];
{
IkReal evalcond[4];
IkReal x191=IKsin(j13);
IkReal x192=((IkReal(1.00000000000000))*(sj11));
IkReal x193=((IkReal(1.00000000000000))*(IKcos(j13)));
evalcond[0]=((((cj11)*(new_r10)))+(((IkReal(-1.00000000000000))*(x191)))+(((IkReal(-1.00000000000000))*(new_r00)*(x192))));
evalcond[1]=((((cj11)*(new_r11)))+(((IkReal(-1.00000000000000))*(x193)))+(((IkReal(-1.00000000000000))*(new_r01)*(x192))));
evalcond[2]=((x191)+(((new_r11)*(sj11)))+(((cj11)*(new_r01))));
evalcond[3]=((((IkReal(-1.00000000000000))*(x193)))+(((new_r10)*(sj11)))+(((cj11)*(new_r00))));
if( IKabs(evalcond[0]) > 0.000001  || IKabs(evalcond[1]) > 0.000001  || IKabs(evalcond[2]) > 0.000001  || IKabs(evalcond[3]) > 0.000001  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(7);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j7;
vinfos[0].indices[0] = _ij7[0];
vinfos[0].indices[1] = _ij7[1];
vinfos[0].maxsolutions = _nj7;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j8;
vinfos[1].indices[0] = _ij8[0];
vinfos[1].indices[1] = _ij8[1];
vinfos[1].maxsolutions = _nj8;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j9;
vinfos[2].indices[0] = _ij9[0];
vinfos[2].indices[1] = _ij9[1];
vinfos[2].maxsolutions = _nj9;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j10;
vinfos[3].indices[0] = _ij10[0];
vinfos[3].indices[1] = _ij10[1];
vinfos[3].maxsolutions = _nj10;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j11;
vinfos[4].indices[0] = _ij11[0];
vinfos[4].indices[1] = _ij11[1];
vinfos[4].maxsolutions = _nj11;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j12;
vinfos[5].indices[0] = _ij12[0];
vinfos[5].indices[1] = _ij12[1];
vinfos[5].maxsolutions = _nj12;
vinfos[6].jointtype = 1;
vinfos[6].foffset = j13;
vinfos[6].indices[0] = _ij13[0];
vinfos[6].indices[1] = _ij13[1];
vinfos[6].maxsolutions = _nj13;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

} else
{
IkReal x194=((IkReal(1.00000000000000))+(new_r22));
IkReal x195=((cj11)*(new_r02));
IkReal x196=((new_r12)*(sj11));
IkReal x197=((((cj11)*(new_r12)))+(((IkReal(-1.00000000000000))*(new_r02)*(sj11))));
evalcond[0]=((IkReal(-3.14159265358979))+(IKfmod(j12, IkReal(6.28318530717959))));
evalcond[1]=x194;
evalcond[2]=new_r20;
evalcond[3]=new_r21;
evalcond[4]=x197;
evalcond[5]=x197;
evalcond[6]=((x196)+(x195));
evalcond[7]=((((IkReal(-1.00000000000000))*(x196)))+(((IkReal(-1.00000000000000))*(x195))));
evalcond[8]=new_r20;
evalcond[9]=new_r21;
evalcond[10]=x194;
if( IKabs(evalcond[0]) < 0.0000010000000000  && IKabs(evalcond[1]) < 0.0000010000000000  && IKabs(evalcond[2]) < 0.0000010000000000  && IKabs(evalcond[3]) < 0.0000010000000000  && IKabs(evalcond[4]) < 0.0000010000000000  && IKabs(evalcond[5]) < 0.0000010000000000  && IKabs(evalcond[6]) < 0.0000010000000000  && IKabs(evalcond[7]) < 0.0000010000000000  && IKabs(evalcond[8]) < 0.0000010000000000  && IKabs(evalcond[9]) < 0.0000010000000000  && IKabs(evalcond[10]) < 0.0000010000000000  )
{
{
IkReal j13array[1], cj13array[1], sj13array[1];
bool j13valid[1]={false};
_nj13 = 1;
if( IKabs(((((new_r11)*(sj11)))+(((cj11)*(new_r01))))) < IKFAST_ATAN2_MAGTHRESH && IKabs(((((IkReal(-1.00000000000000))*(new_r10)*(sj11)))+(((IkReal(-1.00000000000000))*(cj11)*(new_r00))))) < IKFAST_ATAN2_MAGTHRESH && IKabs(IKsqr(((((new_r11)*(sj11)))+(((cj11)*(new_r01)))))+IKsqr(((((IkReal(-1.00000000000000))*(new_r10)*(sj11)))+(((IkReal(-1.00000000000000))*(cj11)*(new_r00)))))-1) <= IKFAST_SINCOS_THRESH )
    continue;
j13array[0]=IKatan2(((((new_r11)*(sj11)))+(((cj11)*(new_r01)))), ((((IkReal(-1.00000000000000))*(new_r10)*(sj11)))+(((IkReal(-1.00000000000000))*(cj11)*(new_r00)))));
sj13array[0]=IKsin(j13array[0]);
cj13array[0]=IKcos(j13array[0]);
if( j13array[0] > IKPI )
{
    j13array[0]-=IK2PI;
}
else if( j13array[0] < -IKPI )
{    j13array[0]+=IK2PI;
}
j13valid[0] = true;
for(int ij13 = 0; ij13 < 1; ++ij13)
{
if( !j13valid[ij13] )
{
    continue;
}
_ij13[0] = ij13; _ij13[1] = -1;
for(int iij13 = ij13+1; iij13 < 1; ++iij13)
{
if( j13valid[iij13] && IKabs(cj13array[ij13]-cj13array[iij13]) < IKFAST_SOLUTION_THRESH && IKabs(sj13array[ij13]-sj13array[iij13]) < IKFAST_SOLUTION_THRESH )
{
    j13valid[iij13]=false; _ij13[1] = iij13; break; 
}
}
j13 = j13array[ij13]; cj13 = cj13array[ij13]; sj13 = sj13array[ij13];
{
IkReal evalcond[4];
IkReal x198=IKcos(j13);
IkReal x199=((IkReal(1.00000000000000))*(sj11));
IkReal x200=((IkReal(1.00000000000000))*(IKsin(j13)));
evalcond[0]=((((cj11)*(new_r10)))+(((IkReal(-1.00000000000000))*(x200)))+(((IkReal(-1.00000000000000))*(new_r00)*(x199))));
evalcond[1]=((((cj11)*(new_r11)))+(((IkReal(-1.00000000000000))*(x198)))+(((IkReal(-1.00000000000000))*(new_r01)*(x199))));
evalcond[2]=((((IkReal(-1.00000000000000))*(x200)))+(((new_r11)*(sj11)))+(((cj11)*(new_r01))));
evalcond[3]=((x198)+(((new_r10)*(sj11)))+(((cj11)*(new_r00))));
if( IKabs(evalcond[0]) > 0.000001  || IKabs(evalcond[1]) > 0.000001  || IKabs(evalcond[2]) > 0.000001  || IKabs(evalcond[3]) > 0.000001  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(7);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j7;
vinfos[0].indices[0] = _ij7[0];
vinfos[0].indices[1] = _ij7[1];
vinfos[0].maxsolutions = _nj7;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j8;
vinfos[1].indices[0] = _ij8[0];
vinfos[1].indices[1] = _ij8[1];
vinfos[1].maxsolutions = _nj8;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j9;
vinfos[2].indices[0] = _ij9[0];
vinfos[2].indices[1] = _ij9[1];
vinfos[2].maxsolutions = _nj9;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j10;
vinfos[3].indices[0] = _ij10[0];
vinfos[3].indices[1] = _ij10[1];
vinfos[3].maxsolutions = _nj10;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j11;
vinfos[4].indices[0] = _ij11[0];
vinfos[4].indices[1] = _ij11[1];
vinfos[4].maxsolutions = _nj11;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j12;
vinfos[5].indices[0] = _ij12[0];
vinfos[5].indices[1] = _ij12[1];
vinfos[5].maxsolutions = _nj12;
vinfos[6].jointtype = 1;
vinfos[6].foffset = j13;
vinfos[6].indices[0] = _ij13[0];
vinfos[6].indices[1] = _ij13[1];
vinfos[6].maxsolutions = _nj13;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

} else
{
if( 1 )
{
continue;

} else
{
}
}
}
}

} else
{
{
IkReal j13array[1], cj13array[1], sj13array[1];
bool j13valid[1]={false};
_nj13 = 1;
if( IKabs(((((cj11)*(new_r10)))+(((IkReal(-1.00000000000000))*(new_r00)*(sj11))))) < IKFAST_ATAN2_MAGTHRESH && IKabs(((IkReal(-1.00000000000000))*(new_r20)*(((IKabs(sj12) != 0)?((IkReal)1/(sj12)):(IkReal)1.0e30)))) < IKFAST_ATAN2_MAGTHRESH && IKabs(IKsqr(((((cj11)*(new_r10)))+(((IkReal(-1.00000000000000))*(new_r00)*(sj11)))))+IKsqr(((IkReal(-1.00000000000000))*(new_r20)*(((IKabs(sj12) != 0)?((IkReal)1/(sj12)):(IkReal)1.0e30))))-1) <= IKFAST_SINCOS_THRESH )
    continue;
j13array[0]=IKatan2(((((cj11)*(new_r10)))+(((IkReal(-1.00000000000000))*(new_r00)*(sj11)))), ((IkReal(-1.00000000000000))*(new_r20)*(((IKabs(sj12) != 0)?((IkReal)1/(sj12)):(IkReal)1.0e30))));
sj13array[0]=IKsin(j13array[0]);
cj13array[0]=IKcos(j13array[0]);
if( j13array[0] > IKPI )
{
    j13array[0]-=IK2PI;
}
else if( j13array[0] < -IKPI )
{    j13array[0]+=IK2PI;
}
j13valid[0] = true;
for(int ij13 = 0; ij13 < 1; ++ij13)
{
if( !j13valid[ij13] )
{
    continue;
}
_ij13[0] = ij13; _ij13[1] = -1;
for(int iij13 = ij13+1; iij13 < 1; ++iij13)
{
if( j13valid[iij13] && IKabs(cj13array[ij13]-cj13array[iij13]) < IKFAST_SOLUTION_THRESH && IKabs(sj13array[ij13]-sj13array[iij13]) < IKFAST_SOLUTION_THRESH )
{
    j13valid[iij13]=false; _ij13[1] = iij13; break; 
}
}
j13 = j13array[ij13]; cj13 = cj13array[ij13]; sj13 = sj13array[ij13];
{
IkReal evalcond[8];
IkReal x201=IKsin(j13);
IkReal x202=IKcos(j13);
IkReal x203=((new_r10)*(sj11));
IkReal x204=((cj11)*(new_r00));
IkReal x205=((new_r11)*(sj11));
IkReal x206=((IkReal(1.00000000000000))*(sj11));
IkReal x207=((cj11)*(new_r01));
IkReal x208=((IkReal(1.00000000000000))*(sj12));
IkReal x209=((IkReal(1.00000000000000))*(x202));
IkReal x210=((IkReal(1.00000000000000))*(x201));
evalcond[0]=((((sj12)*(x202)))+(new_r20));
evalcond[1]=((((IkReal(-1.00000000000000))*(x201)*(x208)))+(new_r21));
evalcond[2]=((((IkReal(-1.00000000000000))*(new_r00)*(x206)))+(((cj11)*(new_r10)))+(((IkReal(-1.00000000000000))*(x210))));
evalcond[3]=((((cj11)*(new_r11)))+(((IkReal(-1.00000000000000))*(x209)))+(((IkReal(-1.00000000000000))*(new_r01)*(x206))));
evalcond[4]=((x207)+(x205)+(((cj12)*(x201))));
evalcond[5]=((((IkReal(-1.00000000000000))*(cj12)*(x209)))+(x204)+(x203));
evalcond[6]=((((IkReal(-1.00000000000000))*(new_r21)*(x208)))+(x201)+(((cj12)*(x207)))+(((cj12)*(x205))));
evalcond[7]=((((IkReal(-1.00000000000000))*(new_r20)*(x208)))+(((IkReal(-1.00000000000000))*(x209)))+(((cj12)*(x204)))+(((cj12)*(x203))));
if( IKabs(evalcond[0]) > 0.000001  || IKabs(evalcond[1]) > 0.000001  || IKabs(evalcond[2]) > 0.000001  || IKabs(evalcond[3]) > 0.000001  || IKabs(evalcond[4]) > 0.000001  || IKabs(evalcond[5]) > 0.000001  || IKabs(evalcond[6]) > 0.000001  || IKabs(evalcond[7]) > 0.000001  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(7);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j7;
vinfos[0].indices[0] = _ij7[0];
vinfos[0].indices[1] = _ij7[1];
vinfos[0].maxsolutions = _nj7;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j8;
vinfos[1].indices[0] = _ij8[0];
vinfos[1].indices[1] = _ij8[1];
vinfos[1].maxsolutions = _nj8;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j9;
vinfos[2].indices[0] = _ij9[0];
vinfos[2].indices[1] = _ij9[1];
vinfos[2].maxsolutions = _nj9;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j10;
vinfos[3].indices[0] = _ij10[0];
vinfos[3].indices[1] = _ij10[1];
vinfos[3].maxsolutions = _nj10;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j11;
vinfos[4].indices[0] = _ij11[0];
vinfos[4].indices[1] = _ij11[1];
vinfos[4].maxsolutions = _nj11;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j12;
vinfos[5].indices[0] = _ij12[0];
vinfos[5].indices[1] = _ij12[1];
vinfos[5].maxsolutions = _nj12;
vinfos[6].jointtype = 1;
vinfos[6].foffset = j13;
vinfos[6].indices[0] = _ij13[0];
vinfos[6].indices[1] = _ij13[1];
vinfos[6].maxsolutions = _nj13;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j13array[1], cj13array[1], sj13array[1];
bool j13valid[1]={false};
_nj13 = 1;
if( IKabs(((new_r21)*(((IKabs(sj12) != 0)?((IkReal)1/(sj12)):(IkReal)1.0e30)))) < IKFAST_ATAN2_MAGTHRESH && IKabs(((((cj11)*(new_r11)))+(((IkReal(-1.00000000000000))*(new_r01)*(sj11))))) < IKFAST_ATAN2_MAGTHRESH && IKabs(IKsqr(((new_r21)*(((IKabs(sj12) != 0)?((IkReal)1/(sj12)):(IkReal)1.0e30))))+IKsqr(((((cj11)*(new_r11)))+(((IkReal(-1.00000000000000))*(new_r01)*(sj11)))))-1) <= IKFAST_SINCOS_THRESH )
    continue;
j13array[0]=IKatan2(((new_r21)*(((IKabs(sj12) != 0)?((IkReal)1/(sj12)):(IkReal)1.0e30))), ((((cj11)*(new_r11)))+(((IkReal(-1.00000000000000))*(new_r01)*(sj11)))));
sj13array[0]=IKsin(j13array[0]);
cj13array[0]=IKcos(j13array[0]);
if( j13array[0] > IKPI )
{
    j13array[0]-=IK2PI;
}
else if( j13array[0] < -IKPI )
{    j13array[0]+=IK2PI;
}
j13valid[0] = true;
for(int ij13 = 0; ij13 < 1; ++ij13)
{
if( !j13valid[ij13] )
{
    continue;
}
_ij13[0] = ij13; _ij13[1] = -1;
for(int iij13 = ij13+1; iij13 < 1; ++iij13)
{
if( j13valid[iij13] && IKabs(cj13array[ij13]-cj13array[iij13]) < IKFAST_SOLUTION_THRESH && IKabs(sj13array[ij13]-sj13array[iij13]) < IKFAST_SOLUTION_THRESH )
{
    j13valid[iij13]=false; _ij13[1] = iij13; break; 
}
}
j13 = j13array[ij13]; cj13 = cj13array[ij13]; sj13 = sj13array[ij13];
{
IkReal evalcond[8];
IkReal x211=IKsin(j13);
IkReal x212=IKcos(j13);
IkReal x213=((new_r10)*(sj11));
IkReal x214=((cj11)*(new_r00));
IkReal x215=((new_r11)*(sj11));
IkReal x216=((IkReal(1.00000000000000))*(sj11));
IkReal x217=((cj11)*(new_r01));
IkReal x218=((IkReal(1.00000000000000))*(sj12));
IkReal x219=((IkReal(1.00000000000000))*(x212));
IkReal x220=((IkReal(1.00000000000000))*(x211));
evalcond[0]=((new_r20)+(((sj12)*(x212))));
evalcond[1]=((((IkReal(-1.00000000000000))*(x211)*(x218)))+(new_r21));
evalcond[2]=((((cj11)*(new_r10)))+(((IkReal(-1.00000000000000))*(new_r00)*(x216)))+(((IkReal(-1.00000000000000))*(x220))));
evalcond[3]=((((cj11)*(new_r11)))+(((IkReal(-1.00000000000000))*(new_r01)*(x216)))+(((IkReal(-1.00000000000000))*(x219))));
evalcond[4]=((((cj12)*(x211)))+(x215)+(x217));
evalcond[5]=((x213)+(x214)+(((IkReal(-1.00000000000000))*(cj12)*(x219))));
evalcond[6]=((((cj12)*(x217)))+(((cj12)*(x215)))+(x211)+(((IkReal(-1.00000000000000))*(new_r21)*(x218))));
evalcond[7]=((((cj12)*(x214)))+(((cj12)*(x213)))+(((IkReal(-1.00000000000000))*(new_r20)*(x218)))+(((IkReal(-1.00000000000000))*(x219))));
if( IKabs(evalcond[0]) > 0.000001  || IKabs(evalcond[1]) > 0.000001  || IKabs(evalcond[2]) > 0.000001  || IKabs(evalcond[3]) > 0.000001  || IKabs(evalcond[4]) > 0.000001  || IKabs(evalcond[5]) > 0.000001  || IKabs(evalcond[6]) > 0.000001  || IKabs(evalcond[7]) > 0.000001  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(7);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j7;
vinfos[0].indices[0] = _ij7[0];
vinfos[0].indices[1] = _ij7[1];
vinfos[0].maxsolutions = _nj7;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j8;
vinfos[1].indices[0] = _ij8[0];
vinfos[1].indices[1] = _ij8[1];
vinfos[1].maxsolutions = _nj8;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j9;
vinfos[2].indices[0] = _ij9[0];
vinfos[2].indices[1] = _ij9[1];
vinfos[2].maxsolutions = _nj9;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j10;
vinfos[3].indices[0] = _ij10[0];
vinfos[3].indices[1] = _ij10[1];
vinfos[3].maxsolutions = _nj10;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j11;
vinfos[4].indices[0] = _ij11[0];
vinfos[4].indices[1] = _ij11[1];
vinfos[4].maxsolutions = _nj11;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j12;
vinfos[5].indices[0] = _ij12[0];
vinfos[5].indices[1] = _ij12[1];
vinfos[5].maxsolutions = _nj12;
vinfos[6].jointtype = 1;
vinfos[6].foffset = j13;
vinfos[6].indices[0] = _ij13[0];
vinfos[6].indices[1] = _ij13[1];
vinfos[6].maxsolutions = _nj13;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j13array[1], cj13array[1], sj13array[1];
bool j13valid[1]={false};
_nj13 = 1;
if( IKabs(((gconst55)*(new_r21))) < IKFAST_ATAN2_MAGTHRESH && IKabs(((IkReal(-1.00000000000000))*(gconst55)*(new_r20))) < IKFAST_ATAN2_MAGTHRESH )
    continue;
j13array[0]=IKatan2(((gconst55)*(new_r21)), ((IkReal(-1.00000000000000))*(gconst55)*(new_r20)));
sj13array[0]=IKsin(j13array[0]);
cj13array[0]=IKcos(j13array[0]);
if( j13array[0] > IKPI )
{
    j13array[0]-=IK2PI;
}
else if( j13array[0] < -IKPI )
{    j13array[0]+=IK2PI;
}
j13valid[0] = true;
for(int ij13 = 0; ij13 < 1; ++ij13)
{
if( !j13valid[ij13] )
{
    continue;
}
_ij13[0] = ij13; _ij13[1] = -1;
for(int iij13 = ij13+1; iij13 < 1; ++iij13)
{
if( j13valid[iij13] && IKabs(cj13array[ij13]-cj13array[iij13]) < IKFAST_SOLUTION_THRESH && IKabs(sj13array[ij13]-sj13array[iij13]) < IKFAST_SOLUTION_THRESH )
{
    j13valid[iij13]=false; _ij13[1] = iij13; break; 
}
}
j13 = j13array[ij13]; cj13 = cj13array[ij13]; sj13 = sj13array[ij13];
{
IkReal evalcond[8];
IkReal x221=IKsin(j13);
IkReal x222=IKcos(j13);
IkReal x223=((new_r10)*(sj11));
IkReal x224=((cj11)*(new_r00));
IkReal x225=((new_r11)*(sj11));
IkReal x226=((IkReal(1.00000000000000))*(sj11));
IkReal x227=((cj11)*(new_r01));
IkReal x228=((IkReal(1.00000000000000))*(sj12));
IkReal x229=((IkReal(1.00000000000000))*(x222));
IkReal x230=((IkReal(1.00000000000000))*(x221));
evalcond[0]=((((sj12)*(x222)))+(new_r20));
evalcond[1]=((((IkReal(-1.00000000000000))*(x221)*(x228)))+(new_r21));
evalcond[2]=((((cj11)*(new_r10)))+(((IkReal(-1.00000000000000))*(x230)))+(((IkReal(-1.00000000000000))*(new_r00)*(x226))));
evalcond[3]=((((cj11)*(new_r11)))+(((IkReal(-1.00000000000000))*(new_r01)*(x226)))+(((IkReal(-1.00000000000000))*(x229))));
evalcond[4]=((((cj12)*(x221)))+(x225)+(x227));
evalcond[5]=((((IkReal(-1.00000000000000))*(cj12)*(x229)))+(x223)+(x224));
evalcond[6]=((((cj12)*(x225)))+(((cj12)*(x227)))+(x221)+(((IkReal(-1.00000000000000))*(new_r21)*(x228))));
evalcond[7]=((((cj12)*(x223)))+(((cj12)*(x224)))+(((IkReal(-1.00000000000000))*(new_r20)*(x228)))+(((IkReal(-1.00000000000000))*(x229))));
if( IKabs(evalcond[0]) > 0.000001  || IKabs(evalcond[1]) > 0.000001  || IKabs(evalcond[2]) > 0.000001  || IKabs(evalcond[3]) > 0.000001  || IKabs(evalcond[4]) > 0.000001  || IKabs(evalcond[5]) > 0.000001  || IKabs(evalcond[6]) > 0.000001  || IKabs(evalcond[7]) > 0.000001  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(7);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j7;
vinfos[0].indices[0] = _ij7[0];
vinfos[0].indices[1] = _ij7[1];
vinfos[0].maxsolutions = _nj7;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j8;
vinfos[1].indices[0] = _ij8[0];
vinfos[1].indices[1] = _ij8[1];
vinfos[1].maxsolutions = _nj8;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j9;
vinfos[2].indices[0] = _ij9[0];
vinfos[2].indices[1] = _ij9[1];
vinfos[2].maxsolutions = _nj9;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j10;
vinfos[3].indices[0] = _ij10[0];
vinfos[3].indices[1] = _ij10[1];
vinfos[3].maxsolutions = _nj10;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j11;
vinfos[4].indices[0] = _ij11[0];
vinfos[4].indices[1] = _ij11[1];
vinfos[4].maxsolutions = _nj11;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j12;
vinfos[5].indices[0] = _ij12[0];
vinfos[5].indices[1] = _ij12[1];
vinfos[5].maxsolutions = _nj12;
vinfos[6].jointtype = 1;
vinfos[6].foffset = j13;
vinfos[6].indices[0] = _ij13[0];
vinfos[6].indices[1] = _ij13[1];
vinfos[6].maxsolutions = _nj13;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}
}
}

}

}

} else
{
{
IkReal j13array[1], cj13array[1], sj13array[1];
bool j13valid[1]={false};
_nj13 = 1;
if( IKabs(((gconst54)*(new_r21))) < IKFAST_ATAN2_MAGTHRESH && IKabs(((IkReal(-1.00000000000000))*(gconst54)*(new_r20))) < IKFAST_ATAN2_MAGTHRESH )
    continue;
j13array[0]=IKatan2(((gconst54)*(new_r21)), ((IkReal(-1.00000000000000))*(gconst54)*(new_r20)));
sj13array[0]=IKsin(j13array[0]);
cj13array[0]=IKcos(j13array[0]);
if( j13array[0] > IKPI )
{
    j13array[0]-=IK2PI;
}
else if( j13array[0] < -IKPI )
{    j13array[0]+=IK2PI;
}
j13valid[0] = true;
for(int ij13 = 0; ij13 < 1; ++ij13)
{
if( !j13valid[ij13] )
{
    continue;
}
_ij13[0] = ij13; _ij13[1] = -1;
for(int iij13 = ij13+1; iij13 < 1; ++iij13)
{
if( j13valid[iij13] && IKabs(cj13array[ij13]-cj13array[iij13]) < IKFAST_SOLUTION_THRESH && IKabs(sj13array[ij13]-sj13array[iij13]) < IKFAST_SOLUTION_THRESH )
{
    j13valid[iij13]=false; _ij13[1] = iij13; break; 
}
}
j13 = j13array[ij13]; cj13 = cj13array[ij13]; sj13 = sj13array[ij13];
{
IkReal evalcond[2];
evalcond[0]=((((sj12)*(IKcos(j13))))+(new_r20));
evalcond[1]=((((IkReal(-1.00000000000000))*(sj12)*(IKsin(j13))))+(new_r21));
if( IKabs(evalcond[0]) > 0.000001  || IKabs(evalcond[1]) > 0.000001  )
{
continue;
}
}

{
IkReal dummyeval[1];
IkReal gconst56;
gconst56=IKsign((((new_r12)*(new_r12))+((new_r02)*(new_r02))));
dummyeval[0]=(((new_r12)*(new_r12))+((new_r02)*(new_r02)));
if( IKabs(dummyeval[0]) < 0.0000010000000000  )
{
{
IkReal dummyeval[1];
IkReal gconst57;
gconst57=IKsign(((((IkReal(-1.00000000000000))*(new_r00)*(new_r12)))+(((new_r02)*(new_r10)))));
dummyeval[0]=((((IkReal(-1.00000000000000))*(new_r00)*(new_r12)))+(((new_r02)*(new_r10))));
if( IKabs(dummyeval[0]) < 0.0000010000000000  )
{
continue;

} else
{
{
IkReal j11array[1], cj11array[1], sj11array[1];
bool j11valid[1]={false};
_nj11 = 1;
IkReal x231=((gconst57)*(sj13));
if( IKabs(((new_r12)*(x231))) < IKFAST_ATAN2_MAGTHRESH && IKabs(((new_r02)*(x231))) < IKFAST_ATAN2_MAGTHRESH )
    continue;
j11array[0]=IKatan2(((new_r12)*(x231)), ((new_r02)*(x231)));
sj11array[0]=IKsin(j11array[0]);
cj11array[0]=IKcos(j11array[0]);
if( j11array[0] > IKPI )
{
    j11array[0]-=IK2PI;
}
else if( j11array[0] < -IKPI )
{    j11array[0]+=IK2PI;
}
j11valid[0] = true;
for(int ij11 = 0; ij11 < 1; ++ij11)
{
if( !j11valid[ij11] )
{
    continue;
}
_ij11[0] = ij11; _ij11[1] = -1;
for(int iij11 = ij11+1; iij11 < 1; ++iij11)
{
if( j11valid[iij11] && IKabs(cj11array[ij11]-cj11array[iij11]) < IKFAST_SOLUTION_THRESH && IKabs(sj11array[ij11]-sj11array[iij11]) < IKFAST_SOLUTION_THRESH )
{
    j11valid[iij11]=false; _ij11[1] = iij11; break; 
}
}
j11 = j11array[ij11]; cj11 = cj11array[ij11]; sj11 = sj11array[ij11];
{
IkReal evalcond[12];
IkReal x232=IKcos(j11);
IkReal x233=IKsin(j11);
IkReal x234=((IkReal(1.00000000000000))*(cj13));
IkReal x235=((IkReal(1.00000000000000))*(cj12));
IkReal x236=((IkReal(1.00000000000000))*(sj12));
IkReal x237=((new_r10)*(x233));
IkReal x238=((new_r01)*(x232));
IkReal x239=((IkReal(1.00000000000000))*(x233));
IkReal x240=((new_r02)*(x232));
IkReal x241=((new_r11)*(x233));
IkReal x242=((new_r12)*(x233));
IkReal x243=((new_r00)*(x232));
evalcond[0]=((((IkReal(-1.00000000000000))*(new_r02)*(x239)))+(((new_r12)*(x232))));
evalcond[1]=((((IkReal(-1.00000000000000))*(x236)))+(x242)+(x240));
evalcond[2]=((((new_r10)*(x232)))+(((IkReal(-1.00000000000000))*(sj13)))+(((IkReal(-1.00000000000000))*(new_r00)*(x239))));
evalcond[3]=((((new_r11)*(x232)))+(((IkReal(-1.00000000000000))*(x234)))+(((IkReal(-1.00000000000000))*(new_r01)*(x239))));
evalcond[4]=((x238)+(x241)+(((cj12)*(sj13))));
evalcond[5]=((((IkReal(-1.00000000000000))*(cj12)*(x234)))+(x237)+(x243));
evalcond[6]=((((IkReal(-1.00000000000000))*(new_r22)*(x236)))+(((cj12)*(x242)))+(((cj12)*(x240))));
evalcond[7]=((((IkReal(-1.00000000000000))*(new_r20)*(x235)))+(((IkReal(-1.00000000000000))*(x236)*(x243)))+(((IkReal(-1.00000000000000))*(x236)*(x237))));
evalcond[8]=((((IkReal(-1.00000000000000))*(new_r21)*(x235)))+(((IkReal(-1.00000000000000))*(x236)*(x241)))+(((IkReal(-1.00000000000000))*(x236)*(x238))));
evalcond[9]=((((IkReal(-1.00000000000000))*(new_r21)*(x236)))+(sj13)+(((cj12)*(x238)))+(((cj12)*(x241))));
evalcond[10]=((IkReal(1.00000000000000))+(((IkReal(-1.00000000000000))*(new_r22)*(x235)))+(((IkReal(-1.00000000000000))*(x236)*(x242)))+(((IkReal(-1.00000000000000))*(x236)*(x240))));
evalcond[11]=((((IkReal(-1.00000000000000))*(new_r20)*(x236)))+(((IkReal(-1.00000000000000))*(x234)))+(((cj12)*(x237)))+(((cj12)*(x243))));
if( IKabs(evalcond[0]) > 0.000001  || IKabs(evalcond[1]) > 0.000001  || IKabs(evalcond[2]) > 0.000001  || IKabs(evalcond[3]) > 0.000001  || IKabs(evalcond[4]) > 0.000001  || IKabs(evalcond[5]) > 0.000001  || IKabs(evalcond[6]) > 0.000001  || IKabs(evalcond[7]) > 0.000001  || IKabs(evalcond[8]) > 0.000001  || IKabs(evalcond[9]) > 0.000001  || IKabs(evalcond[10]) > 0.000001  || IKabs(evalcond[11]) > 0.000001  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(7);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j7;
vinfos[0].indices[0] = _ij7[0];
vinfos[0].indices[1] = _ij7[1];
vinfos[0].maxsolutions = _nj7;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j8;
vinfos[1].indices[0] = _ij8[0];
vinfos[1].indices[1] = _ij8[1];
vinfos[1].maxsolutions = _nj8;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j9;
vinfos[2].indices[0] = _ij9[0];
vinfos[2].indices[1] = _ij9[1];
vinfos[2].maxsolutions = _nj9;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j10;
vinfos[3].indices[0] = _ij10[0];
vinfos[3].indices[1] = _ij10[1];
vinfos[3].maxsolutions = _nj10;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j11;
vinfos[4].indices[0] = _ij11[0];
vinfos[4].indices[1] = _ij11[1];
vinfos[4].maxsolutions = _nj11;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j12;
vinfos[5].indices[0] = _ij12[0];
vinfos[5].indices[1] = _ij12[1];
vinfos[5].maxsolutions = _nj12;
vinfos[6].jointtype = 1;
vinfos[6].foffset = j13;
vinfos[6].indices[0] = _ij13[0];
vinfos[6].indices[1] = _ij13[1];
vinfos[6].maxsolutions = _nj13;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j11array[1], cj11array[1], sj11array[1];
bool j11valid[1]={false};
_nj11 = 1;
IkReal x244=((gconst56)*(sj12));
if( IKabs(((new_r12)*(x244))) < IKFAST_ATAN2_MAGTHRESH && IKabs(((new_r02)*(x244))) < IKFAST_ATAN2_MAGTHRESH )
    continue;
j11array[0]=IKatan2(((new_r12)*(x244)), ((new_r02)*(x244)));
sj11array[0]=IKsin(j11array[0]);
cj11array[0]=IKcos(j11array[0]);
if( j11array[0] > IKPI )
{
    j11array[0]-=IK2PI;
}
else if( j11array[0] < -IKPI )
{    j11array[0]+=IK2PI;
}
j11valid[0] = true;
for(int ij11 = 0; ij11 < 1; ++ij11)
{
if( !j11valid[ij11] )
{
    continue;
}
_ij11[0] = ij11; _ij11[1] = -1;
for(int iij11 = ij11+1; iij11 < 1; ++iij11)
{
if( j11valid[iij11] && IKabs(cj11array[ij11]-cj11array[iij11]) < IKFAST_SOLUTION_THRESH && IKabs(sj11array[ij11]-sj11array[iij11]) < IKFAST_SOLUTION_THRESH )
{
    j11valid[iij11]=false; _ij11[1] = iij11; break; 
}
}
j11 = j11array[ij11]; cj11 = cj11array[ij11]; sj11 = sj11array[ij11];
{
IkReal evalcond[12];
IkReal x245=IKcos(j11);
IkReal x246=IKsin(j11);
IkReal x247=((IkReal(1.00000000000000))*(cj13));
IkReal x248=((IkReal(1.00000000000000))*(cj12));
IkReal x249=((IkReal(1.00000000000000))*(sj12));
IkReal x250=((new_r10)*(x246));
IkReal x251=((new_r01)*(x245));
IkReal x252=((IkReal(1.00000000000000))*(x246));
IkReal x253=((new_r02)*(x245));
IkReal x254=((new_r11)*(x246));
IkReal x255=((new_r12)*(x246));
IkReal x256=((new_r00)*(x245));
evalcond[0]=((((new_r12)*(x245)))+(((IkReal(-1.00000000000000))*(new_r02)*(x252))));
evalcond[1]=((x255)+(x253)+(((IkReal(-1.00000000000000))*(x249))));
evalcond[2]=((((IkReal(-1.00000000000000))*(sj13)))+(((IkReal(-1.00000000000000))*(new_r00)*(x252)))+(((new_r10)*(x245))));
evalcond[3]=((((IkReal(-1.00000000000000))*(new_r01)*(x252)))+(((IkReal(-1.00000000000000))*(x247)))+(((new_r11)*(x245))));
evalcond[4]=((x254)+(x251)+(((cj12)*(sj13))));
evalcond[5]=((x256)+(x250)+(((IkReal(-1.00000000000000))*(cj12)*(x247))));
evalcond[6]=((((IkReal(-1.00000000000000))*(new_r22)*(x249)))+(((cj12)*(x253)))+(((cj12)*(x255))));
evalcond[7]=((((IkReal(-1.00000000000000))*(new_r20)*(x248)))+(((IkReal(-1.00000000000000))*(x249)*(x250)))+(((IkReal(-1.00000000000000))*(x249)*(x256))));
evalcond[8]=((((IkReal(-1.00000000000000))*(new_r21)*(x248)))+(((IkReal(-1.00000000000000))*(x249)*(x254)))+(((IkReal(-1.00000000000000))*(x249)*(x251))));
evalcond[9]=((((IkReal(-1.00000000000000))*(new_r21)*(x249)))+(((cj12)*(x251)))+(((cj12)*(x254)))+(sj13));
evalcond[10]=((IkReal(1.00000000000000))+(((IkReal(-1.00000000000000))*(new_r22)*(x248)))+(((IkReal(-1.00000000000000))*(x249)*(x253)))+(((IkReal(-1.00000000000000))*(x249)*(x255))));
evalcond[11]=((((cj12)*(x256)))+(((cj12)*(x250)))+(((IkReal(-1.00000000000000))*(new_r20)*(x249)))+(((IkReal(-1.00000000000000))*(x247))));
if( IKabs(evalcond[0]) > 0.000001  || IKabs(evalcond[1]) > 0.000001  || IKabs(evalcond[2]) > 0.000001  || IKabs(evalcond[3]) > 0.000001  || IKabs(evalcond[4]) > 0.000001  || IKabs(evalcond[5]) > 0.000001  || IKabs(evalcond[6]) > 0.000001  || IKabs(evalcond[7]) > 0.000001  || IKabs(evalcond[8]) > 0.000001  || IKabs(evalcond[9]) > 0.000001  || IKabs(evalcond[10]) > 0.000001  || IKabs(evalcond[11]) > 0.000001  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(7);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j7;
vinfos[0].indices[0] = _ij7[0];
vinfos[0].indices[1] = _ij7[1];
vinfos[0].maxsolutions = _nj7;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j8;
vinfos[1].indices[0] = _ij8[0];
vinfos[1].indices[1] = _ij8[1];
vinfos[1].maxsolutions = _nj8;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j9;
vinfos[2].indices[0] = _ij9[0];
vinfos[2].indices[1] = _ij9[1];
vinfos[2].maxsolutions = _nj9;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j10;
vinfos[3].indices[0] = _ij10[0];
vinfos[3].indices[1] = _ij10[1];
vinfos[3].maxsolutions = _nj10;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j11;
vinfos[4].indices[0] = _ij11[0];
vinfos[4].indices[1] = _ij11[1];
vinfos[4].maxsolutions = _nj11;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j12;
vinfos[5].indices[0] = _ij12[0];
vinfos[5].indices[1] = _ij12[1];
vinfos[5].maxsolutions = _nj12;
vinfos[6].jointtype = 1;
vinfos[6].foffset = j13;
vinfos[6].indices[0] = _ij13[0];
vinfos[6].indices[1] = _ij13[1];
vinfos[6].maxsolutions = _nj13;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}
}
}

}

}
}
}
}
}static inline void polyroots2(IkReal rawcoeffs[2+1], IkReal rawroots[2], int& numroots) {
    IkReal det = rawcoeffs[1]*rawcoeffs[1]-4*rawcoeffs[0]*rawcoeffs[2];
    if( det < 0 ) {
        numroots=0;
    }
    else if( det == 0 ) {
        rawroots[0] = -0.5*rawcoeffs[1]/rawcoeffs[0];
        numroots = 1;
    }
    else {
        det = IKsqrt(det);
        rawroots[0] = (-rawcoeffs[1]+det)/(2*rawcoeffs[0]);
        rawroots[1] = (-rawcoeffs[1]-det)/(2*rawcoeffs[0]);//rawcoeffs[2]/(rawcoeffs[0]*rawroots[0]);
        numroots = 2;
    }
}
};


/// solves the inverse kinematics equations.
/// \param pfree is an array specifying the free joints of the chain.
IKFAST_API bool ComputeIk(const IkReal* eetrans, const IkReal* eerot, const IkReal* pfree, IkSolutionListBase<IkReal>& solutions) {
IKSolver solver;
return solver.ComputeIk(eetrans,eerot,pfree,solutions);
}

IKFAST_API const char* GetKinematicsHash() { return "702b0e21dd8c959bdb0bed936d2f7ede"; }

IKFAST_API const char* GetIkFastVersion() { return IKFAST_STRINGIZE(IKFAST_VERSION); }

#ifdef IKFAST_NAMESPACE
} // end namespace
#endif

#ifndef IKFAST_NO_MAIN
#include <stdio.h>
#include <stdlib.h>
#ifdef IKFAST_NAMESPACE
using namespace IKFAST_NAMESPACE;
#endif
int main(int argc, char** argv)
{
    if( argc != 12+GetNumFreeParameters()+1 ) {
        printf("\nUsage: ./ik r00 r01 r02 t0 r10 r11 r12 t1 r20 r21 r22 t2 free0 ...\n\n"
               "Returns the ik solutions given the transformation of the end effector specified by\n"
               "a 3x3 rotation R (rXX), and a 3x1 translation (tX).\n"
               "There are %d free parameters that have to be specified.\n\n",GetNumFreeParameters());
        return 1;
    }

    IkSolutionList<IkReal> solutions;
    std::vector<IkReal> vfree(GetNumFreeParameters());
    IkReal eerot[9],eetrans[3];
    eerot[0] = atof(argv[1]); eerot[1] = atof(argv[2]); eerot[2] = atof(argv[3]); eetrans[0] = atof(argv[4]);
    eerot[3] = atof(argv[5]); eerot[4] = atof(argv[6]); eerot[5] = atof(argv[7]); eetrans[1] = atof(argv[8]);
    eerot[6] = atof(argv[9]); eerot[7] = atof(argv[10]); eerot[8] = atof(argv[11]); eetrans[2] = atof(argv[12]);
    for(std::size_t i = 0; i < vfree.size(); ++i)
        vfree[i] = atof(argv[13+i]);
    bool bSuccess = ComputeIk(eetrans, eerot, vfree.size() > 0 ? &vfree[0] : NULL, solutions);

    if( !bSuccess ) {
        fprintf(stderr,"Failed to get ik solution\n");
        return -1;
    }

    printf("Found %d ik solutions:\n", (int)solutions.GetNumSolutions());
    std::vector<IkReal> solvalues(GetNumJoints());
    for(std::size_t i = 0; i < solutions.GetNumSolutions(); ++i) {
        const IkSolutionBase<IkReal>& sol = solutions.GetSolution(i);
        printf("sol%d (free=%d): ", (int)i, (int)sol.GetFree().size());
        std::vector<IkReal> vsolfree(sol.GetFree().size());
        sol.GetSolution(&solvalues[0],vsolfree.size()>0?&vsolfree[0]:NULL);
        for( std::size_t j = 0; j < solvalues.size(); ++j)
            printf("%.15f, ", solvalues[j]);
        printf("\n");
    }
    return 0;
}

#endif

#include "plugindefs.h"
namespace IKFAST_NAMESPACE {
IkSolverBasePtr CreateIkSolver(EnvironmentBasePtr penv, std::istream& sinput, const std::vector<dReal>& vfreeinc) {
    boost::shared_ptr<ikfast::IkFastFunctions<IkReal> > ikfunctions(new ikfast::IkFastFunctions<IkReal>());
    ikfunctions->_ComputeIk = IKFAST_NAMESPACE::ComputeIk;
    ikfunctions->_ComputeFk = IKFAST_NAMESPACE::ComputeFk;
    ikfunctions->_GetNumFreeParameters = IKFAST_NAMESPACE::GetNumFreeParameters;
    ikfunctions->_GetFreeParameters = IKFAST_NAMESPACE::GetFreeParameters;
    ikfunctions->_GetNumJoints = IKFAST_NAMESPACE::GetNumJoints;
    ikfunctions->_GetIkRealSize = IKFAST_NAMESPACE::GetIkRealSize;
    ikfunctions->_GetIkFastVersion = IKFAST_NAMESPACE::GetIkFastVersion;
    ikfunctions->_GetIkType = IKFAST_NAMESPACE::GetIkType;
    ikfunctions->_GetKinematicsHash = IKFAST_NAMESPACE::GetKinematicsHash;
    return CreateIkFastSolver(penv,sinput,ikfunctions,vfreeinc);
}
} // end namespace
