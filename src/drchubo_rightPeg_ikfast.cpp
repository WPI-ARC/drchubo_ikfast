#define IKFAST_NAMESPACE drchubo_rightpeg_ikfast
#include "plugindefs.h"

/// autogenerated analytical inverse kinematics code from ikfast program part of OpenRAVE
/// \author Rosen Diankov
///
/// Licensed under the Apache License, Version 2.0 (the "License");
/// you may not use this file except in compliance with the License.
/// You may obtain a copy of the License at
///     http://www.apache.org/licenses/LICENSE-2.0
///
/// Unless required by applicable law or agreed to in writing, software
/// distributed under the License is distributed on an "AS IS" BASIS,
/// WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
/// See the License for the specific language governing permissions and
/// limitations under the License.
///
/// ikfast version 61 generated on 2013-11-14 13:59:19.659361
/// To compile with gcc:
///     gcc -lstdc++ ik.cpp
/// To compile without any main function as a shared object (might need -llapack):
///     gcc -fPIC -lstdc++ -DIKFAST_NO_MAIN -DIKFAST_CLIBRARY -shared -Wl,-soname,libik.so -o libik.so ik.cpp
#define IKFAST_HAS_LIBRARY
#include "ikfast.h" // found inside share/openrave-X.Y/python/ikfast.h
using namespace ikfast;

// check if the included ikfast version matches what this file was compiled with
#define IKFAST_COMPILE_ASSERT(x) extern int __dummy[(int)x]
IKFAST_COMPILE_ASSERT(IKFAST_VERSION==61);

#include <cmath>
#include <vector>
#include <limits>
#include <algorithm>
#include <complex>

#define IKFAST_STRINGIZE2(s) #s
#define IKFAST_STRINGIZE(s) IKFAST_STRINGIZE2(s)

#ifndef IKFAST_ASSERT
#include <stdexcept>
#include <sstream>
#include <iostream>

#ifdef _MSC_VER
#ifndef __PRETTY_FUNCTION__
#define __PRETTY_FUNCTION__ __FUNCDNAME__
#endif
#endif

#ifndef __PRETTY_FUNCTION__
#define __PRETTY_FUNCTION__ __func__
#endif

#define IKFAST_ASSERT(b) { if( !(b) ) { std::stringstream ss; ss << "ikfast exception: " << __FILE__ << ":" << __LINE__ << ": " <<__PRETTY_FUNCTION__ << ": Assertion '" << #b << "' failed"; throw std::runtime_error(ss.str()); } }

#endif

#if defined(_MSC_VER)
#define IKFAST_ALIGNED16(x) __declspec(align(16)) x
#else
#define IKFAST_ALIGNED16(x) x __attribute((aligned(16)))
#endif

#define IK2PI  ((IkReal)6.28318530717959)
#define IKPI  ((IkReal)3.14159265358979)
#define IKPI_2  ((IkReal)1.57079632679490)

#ifdef _MSC_VER
#ifndef isnan
#define isnan _isnan
#endif
#endif // _MSC_VER

// lapack routines
extern "C" {
  void dgetrf_ (const int* m, const int* n, double* a, const int* lda, int* ipiv, int* info);
  void zgetrf_ (const int* m, const int* n, std::complex<double>* a, const int* lda, int* ipiv, int* info);
  void dgetri_(const int* n, const double* a, const int* lda, int* ipiv, double* work, const int* lwork, int* info);
  void dgesv_ (const int* n, const int* nrhs, double* a, const int* lda, int* ipiv, double* b, const int* ldb, int* info);
  void dgetrs_(const char *trans, const int *n, const int *nrhs, double *a, const int *lda, int *ipiv, double *b, const int *ldb, int *info);
  void dgeev_(const char *jobvl, const char *jobvr, const int *n, double *a, const int *lda, double *wr, double *wi,double *vl, const int *ldvl, double *vr, const int *ldvr, double *work, const int *lwork, int *info);
}

using namespace std; // necessary to get std math routines

#ifdef IKFAST_NAMESPACE
namespace IKFAST_NAMESPACE {
#endif

inline float IKabs(float f) { return fabsf(f); }
inline double IKabs(double f) { return fabs(f); }

inline float IKsqr(float f) { return f*f; }
inline double IKsqr(double f) { return f*f; }

inline float IKlog(float f) { return logf(f); }
inline double IKlog(double f) { return log(f); }

// allows asin and acos to exceed 1
#ifndef IKFAST_SINCOS_THRESH
#define IKFAST_SINCOS_THRESH ((IkReal)0.000001)
#endif

// used to check input to atan2 for degenerate cases
#ifndef IKFAST_ATAN2_MAGTHRESH
#define IKFAST_ATAN2_MAGTHRESH ((IkReal)2e-6)
#endif

// minimum distance of separate solutions
#ifndef IKFAST_SOLUTION_THRESH
#define IKFAST_SOLUTION_THRESH ((IkReal)1e-6)
#endif

inline float IKasin(float f)
{
IKFAST_ASSERT( f > -1-IKFAST_SINCOS_THRESH && f < 1+IKFAST_SINCOS_THRESH ); // any more error implies something is wrong with the solver
if( f <= -1 ) return float(-IKPI_2);
else if( f >= 1 ) return float(IKPI_2);
return asinf(f);
}
inline double IKasin(double f)
{
IKFAST_ASSERT( f > -1-IKFAST_SINCOS_THRESH && f < 1+IKFAST_SINCOS_THRESH ); // any more error implies something is wrong with the solver
if( f <= -1 ) return -IKPI_2;
else if( f >= 1 ) return IKPI_2;
return asin(f);
}

// return positive value in [0,y)
inline float IKfmod(float x, float y)
{
    while(x < 0) {
        x += y;
    }
    return fmodf(x,y);
}

// return positive value in [0,y)
inline double IKfmod(double x, double y)
{
    while(x < 0) {
        x += y;
    }
    return fmod(x,y);
}

inline float IKacos(float f)
{
IKFAST_ASSERT( f > -1-IKFAST_SINCOS_THRESH && f < 1+IKFAST_SINCOS_THRESH ); // any more error implies something is wrong with the solver
if( f <= -1 ) return float(IKPI);
else if( f >= 1 ) return float(0);
return acosf(f);
}
inline double IKacos(double f)
{
IKFAST_ASSERT( f > -1-IKFAST_SINCOS_THRESH && f < 1+IKFAST_SINCOS_THRESH ); // any more error implies something is wrong with the solver
if( f <= -1 ) return IKPI;
else if( f >= 1 ) return 0;
return acos(f);
}
inline float IKsin(float f) { return sinf(f); }
inline double IKsin(double f) { return sin(f); }
inline float IKcos(float f) { return cosf(f); }
inline double IKcos(double f) { return cos(f); }
inline float IKtan(float f) { return tanf(f); }
inline double IKtan(double f) { return tan(f); }
inline float IKsqrt(float f) { if( f <= 0.0f ) return 0.0f; return sqrtf(f); }
inline double IKsqrt(double f) { if( f <= 0.0 ) return 0.0; return sqrt(f); }
inline float IKatan2(float fy, float fx) {
    if( isnan(fy) ) {
        IKFAST_ASSERT(!isnan(fx)); // if both are nan, probably wrong value will be returned
        return float(IKPI_2);
    }
    else if( isnan(fx) ) {
        return 0;
    }
    return atan2f(fy,fx);
}
inline double IKatan2(double fy, double fx) {
    if( isnan(fy) ) {
        IKFAST_ASSERT(!isnan(fx)); // if both are nan, probably wrong value will be returned
        return IKPI_2;
    }
    else if( isnan(fx) ) {
        return 0;
    }
    return atan2(fy,fx);
}

inline float IKsign(float f) {
    if( f > 0 ) {
        return float(1);
    }
    else if( f < 0 ) {
        return float(-1);
    }
    return 0;
}

inline double IKsign(double f) {
    if( f > 0 ) {
        return 1.0;
    }
    else if( f < 0 ) {
        return -1.0;
    }
    return 0;
}

/// solves the forward kinematics equations.
/// \param pfree is an array specifying the free joints of the chain.
IKFAST_API void ComputeFk(const IkReal* j, IkReal* eetrans, IkReal* eerot) {
IkReal x0,x1,x2,x3,x4,x5,x6,x7,x8,x9,x10,x11,x12,x13,x14,x15,x16,x17,x18,x19,x20,x21,x22,x23,x24,x25,x26,x27,x28,x29,x30,x31,x32,x33,x34,x35,x36,x37,x38,x39,x40,x41,x42,x43,x44,x45,x46,x47,x48,x49,x50,x51,x52,x53,x54,x55,x56,x57,x58,x59,x60,x61,x62,x63,x64,x65,x66,x67,x68,x69,x70,x71,x72,x73,x74;
x0=IKcos(j[0]);
x1=IKcos(j[2]);
x2=IKsin(j[0]);
x3=IKsin(j[1]);
x4=IKsin(j[2]);
x5=IKcos(j[1]);
x6=IKcos(j[3]);
x7=IKsin(j[3]);
x8=IKsin(j[4]);
x9=IKcos(j[4]);
x10=IKcos(j[5]);
x11=IKsin(j[5]);
x12=IKcos(j[6]);
x13=IKsin(j[6]);
x14=((IkReal(0.0300000000000000))*(x1));
x15=((IkReal(1.00000000000000))*(x8));
x16=((IkReal(1.00000000000000))*(x4));
x17=((IkReal(0.0300000000000000))*(x3));
x18=((IkReal(0.100000000000000))*(x6));
x19=((IkReal(1.00000000000000))*(x7));
x20=((IkReal(0.313800000000000))*(x6));
x21=((IkReal(0.100000000000000))*(x9));
x22=((IkReal(1.00000000000000))*(x11));
x23=((IkReal(1.00000000000000))*(x6));
x24=((IkReal(0.100000000000000))*(x8));
x25=((IkReal(0.100000000000000))*(x7));
x26=((IkReal(0.313800000000000))*(x3));
x27=((IkReal(1.00000000000000))*(x9));
x28=((IkReal(1.00000000000000))*(x10));
x29=((IkReal(0.0300000000000000))*(x7));
x30=((IkReal(-1.00000000000000))*(x9));
x31=((x1)*(x2));
x32=((x0)*(x5));
x33=((x3)*(x6));
x34=((x2)*(x4));
x35=((x2)*(x5));
x36=((x1)*(x5));
x37=((x0)*(x1));
x38=((x4)*(x5));
x39=((IkReal(-1.00000000000000))*(x8));
x40=((x0)*(x4));
x41=((x0)*(x14));
x42=((x14)*(x2));
x43=((x38)*(x6));
x44=((x19)*(x35));
x45=((x23)*(x35));
x46=((x17)*(x34));
x47=((x16)*(x5)*(x7));
x48=((x0)*(x16)*(x3));
x49=((x17)*(x40));
x50=((((x3)*(x34)))+(x37));
x51=((((IkReal(-1.00000000000000))*(x0)*(x16)))+(((x3)*(x31))));
x52=((x43)+(((x3)*(x7))));
x53=((((IkReal(-1.00000000000000))*(x48)))+(x31));
x54=((x47)+(((IkReal(-1.00000000000000))*(x23)*(x3))));
x55=((((IkReal(-1.00000000000000))*(x31)))+(x48));
x56=((((IkReal(-1.00000000000000))*(x37)))+(((IkReal(-1.00000000000000))*(x16)*(x2)*(x3))));
x57=((((IkReal(-1.00000000000000))*(x16)*(x2)))+(((IkReal(-1.00000000000000))*(x3)*(x37))));
x58=((x46)+(x41));
x59=((x57)*(x8));
x60=((x56)*(x7));
x61=((((IkReal(-1.00000000000000))*(x44)))+(((x50)*(x6))));
x62=((((x53)*(x6)))+(((x32)*(x7))));
x63=((((IkReal(-1.00000000000000))*(x23)*(x50)))+(x44));
x64=((((IkReal(-1.00000000000000))*(x27)*(x52)))+(((IkReal(-1.00000000000000))*(x15)*(x36))));
x65=((x45)+(((IkReal(-1.00000000000000))*(x19)*(x56))));
x66=((((IkReal(-1.00000000000000))*(x19)*(x55)))+(((IkReal(-1.00000000000000))*(x23)*(x32))));
x67=((((IkReal(-1.00000000000000))*(x27)*(x36)))+(((x15)*(((((x19)*(x3)))+(((x16)*(x5)*(x6))))))));
x68=((x10)*(x64));
x69=((x11)*(x66));
x70=((x11)*(x65));
x71=((((IkReal(-1.00000000000000))*(x27)*(x61)))+(((IkReal(-1.00000000000000))*(x15)*(x51))));
x72=((((x8)*(((((IkReal(-1.00000000000000))*(x19)*(x32)))+(((IkReal(-1.00000000000000))*(x23)*(x53)))))))+(((x57)*(x9))));
x73=((((x39)*(x57)))+(((x30)*(x62))));
x74=((x10)*(x73));
eerot[0]=((((x12)*(((((IkReal(-1.00000000000000))*(x27)*(x51)))+(((IkReal(-1.00000000000000))*(x15)*(x63)))))))+(((x13)*(((((x10)*(((((x39)*(x51)))+(((x30)*(x61)))))))+(x70))))));
eerot[1]=((((x11)*(x71)))+(((x10)*(((((IkReal(-1.00000000000000))*(x45)))+(x60))))));
eerot[2]=((((x12)*(((((IkReal(-1.00000000000000))*(x28)*(x71)))+(((IkReal(-1.00000000000000))*(x22)*(x65)))))))+(((x13)*(((((x39)*(x63)))+(((x30)*(x51))))))));
eetrans[0]=((((x29)*(x35)))+(((IkReal(-1.00000000000000))*(x20)*(x35)))+(((x7)*(((((IkReal(-0.313800000000000))*(x37)))+(((IkReal(-1.00000000000000))*(x26)*(x34)))))))+(((IkReal(-0.300000000000000))*(x35)))+(x58)+(((IkReal(-1.00000000000000))*(x58)*(x6)))+(((x10)*(((((x18)*(x35)))+(((IkReal(-1.00000000000000))*(x25)*(x56)))))))+(((x11)*(((((x24)*(x51)))+(((x21)*(x61))))))));
eerot[3]=((((x12)*(x67)))+(((x13)*(((((x11)*(x54)))+(x68))))));
eerot[4]=((((x10)*(((((IkReal(-1.00000000000000))*(x47)))+(x33)))))+(((x11)*(x64))));
eerot[5]=((((x13)*(x67)))+(((x12)*(((((IkReal(-1.00000000000000))*(x28)*(x64)))+(((IkReal(-1.00000000000000))*(x22)*(x54))))))));
eetrans[1]=((IkReal(-0.229500000000000))+(((IkReal(-0.313800000000000))*(x38)*(x7)))+(((IkReal(0.0300000000000000))*(x38)))+(((x11)*(((((x24)*(x36)))+(((x21)*(x52)))))))+(((IkReal(-0.0300000000000000))*(x43)))+(((IkReal(-1.00000000000000))*(x17)*(x7)))+(((IkReal(0.300000000000000))*(x3)))+(((x10)*(((((IkReal(-1.00000000000000))*(x18)*(x3)))+(((x25)*(x38)))))))+(((x20)*(x3))));
eerot[6]=((((x12)*(x72)))+(((x13)*(((((IkReal(-1.00000000000000))*(x74)))+(((IkReal(-1.00000000000000))*(x69))))))));
eerot[7]=((((x11)*(((x59)+(((x62)*(x9)))))))+(((x10)*(x66))));
eerot[8]=((((x13)*(x72)))+(((x12)*(((x74)+(x69))))));
eetrans[2]=((((IkReal(-1.00000000000000))*(x42)))+(((x29)*(x32)))+(((x11)*(((((IkReal(-1.00000000000000))*(x21)*(x62)))+(((IkReal(-1.00000000000000))*(x24)*(x57)))))))+(((IkReal(-1.00000000000000))*(x20)*(x32)))+(((IkReal(-0.300000000000000))*(x32)))+(((x6)*(((((IkReal(-1.00000000000000))*(x49)))+(x42)))))+(((x10)*(((((x18)*(x32)))+(((x25)*(x55)))))))+(x49)+(((x7)*(((((IkReal(0.313800000000000))*(x31)))+(((IkReal(-1.00000000000000))*(x26)*(x40))))))));
}

IKFAST_API int GetNumFreeParameters() { return 1; }
IKFAST_API int* GetFreeParameters() { static int freeparams[] = {2}; return freeparams; }
IKFAST_API int GetNumJoints() { return 7; }

IKFAST_API int GetIkRealSize() { return sizeof(IkReal); }

IKFAST_API int GetIkType() { return 0x67000001; }

class IKSolver {
public:
IkReal j7,cj7,sj7,htj7,j8,cj8,sj8,htj8,j10,cj10,sj10,htj10,j11,cj11,sj11,htj11,j12,cj12,sj12,htj12,j14,cj14,sj14,htj14,j9,cj9,sj9,htj9,new_r00,r00,rxp0_0,new_r01,r01,rxp0_1,new_r02,r02,rxp0_2,new_r10,r10,rxp1_0,new_r11,r11,rxp1_1,new_r12,r12,rxp1_2,new_r20,r20,rxp2_0,new_r21,r21,rxp2_1,new_r22,r22,rxp2_2,new_px,px,npx,new_py,py,npy,new_pz,pz,npz,pp;
unsigned char _ij7[2], _nj7,_ij8[2], _nj8,_ij10[2], _nj10,_ij11[2], _nj11,_ij12[2], _nj12,_ij14[2], _nj14,_ij9[2], _nj9;

bool ComputeIk(const IkReal* eetrans, const IkReal* eerot, const IkReal* pfree, IkSolutionListBase<IkReal>& solutions) {
j7=numeric_limits<IkReal>::quiet_NaN(); _ij7[0] = -1; _ij7[1] = -1; _nj7 = -1; j8=numeric_limits<IkReal>::quiet_NaN(); _ij8[0] = -1; _ij8[1] = -1; _nj8 = -1; j10=numeric_limits<IkReal>::quiet_NaN(); _ij10[0] = -1; _ij10[1] = -1; _nj10 = -1; j11=numeric_limits<IkReal>::quiet_NaN(); _ij11[0] = -1; _ij11[1] = -1; _nj11 = -1; j12=numeric_limits<IkReal>::quiet_NaN(); _ij12[0] = -1; _ij12[1] = -1; _nj12 = -1; j14=numeric_limits<IkReal>::quiet_NaN(); _ij14[0] = -1; _ij14[1] = -1; _nj14 = -1;  _ij9[0] = -1; _ij9[1] = -1; _nj9 = 0;
for(int dummyiter = 0; dummyiter < 1; ++dummyiter) {
    solutions.Clear();
j9=pfree[0]; cj9=cos(pfree[0]); sj9=sin(pfree[0]);
r00 = eerot[0*3+0];
r01 = eerot[0*3+1];
r02 = eerot[0*3+2];
r10 = eerot[1*3+0];
r11 = eerot[1*3+1];
r12 = eerot[1*3+2];
r20 = eerot[2*3+0];
r21 = eerot[2*3+1];
r22 = eerot[2*3+2];
px = eetrans[0]; py = eetrans[1]; pz = eetrans[2];

new_r00=((IkReal(-1.00000000000000))*(r02));
new_r01=((IkReal(-1.00000000000000))*(r00));
new_r02=r01;
new_px=((((IkReal(0.100000000000000))*(r01)))+(px));
new_r10=r22;
new_r11=r20;
new_r12=((IkReal(-1.00000000000000))*(r21));
new_py=((((IkReal(-0.100000000000000))*(r21)))+(((IkReal(-1.00000000000000))*(pz))));
new_r20=((IkReal(-1.00000000000000))*(r12));
new_r21=((IkReal(-1.00000000000000))*(r10));
new_r22=r11;
new_pz=((IkReal(0.229500000000000))+(((IkReal(0.100000000000000))*(r11)))+(py));
r00 = new_r00; r01 = new_r01; r02 = new_r02; r10 = new_r10; r11 = new_r11; r12 = new_r12; r20 = new_r20; r21 = new_r21; r22 = new_r22; px = new_px; py = new_py; pz = new_pz;
pp=(((px)*(px))+((py)*(py))+((pz)*(pz)));
npx=((((px)*(r00)))+(((py)*(r10)))+(((pz)*(r20))));
npy=((((px)*(r01)))+(((py)*(r11)))+(((pz)*(r21))));
npz=((((px)*(r02)))+(((py)*(r12)))+(((pz)*(r22))));
rxp0_0=((((IkReal(-1.00000000000000))*(py)*(r20)))+(((pz)*(r10))));
rxp0_1=((((px)*(r20)))+(((IkReal(-1.00000000000000))*(pz)*(r00))));
rxp0_2=((((IkReal(-1.00000000000000))*(px)*(r10)))+(((py)*(r00))));
rxp1_0=((((IkReal(-1.00000000000000))*(py)*(r21)))+(((pz)*(r11))));
rxp1_1=((((px)*(r21)))+(((IkReal(-1.00000000000000))*(pz)*(r01))));
rxp1_2=((((IkReal(-1.00000000000000))*(px)*(r11)))+(((py)*(r01))));
rxp2_0=((((IkReal(-1.00000000000000))*(py)*(r22)))+(((pz)*(r12))));
rxp2_1=((((px)*(r22)))+(((IkReal(-1.00000000000000))*(pz)*(r02))));
rxp2_2=((((IkReal(-1.00000000000000))*(px)*(r12)))+(((py)*(r02))));
{
IkReal j10array[2], cj10array[2], sj10array[2];
bool j10valid[2]={false};
_nj10 = 2;
if( (((IkReal(1.00099239693695))+(((IkReal(-5.26089284776420))*(pp))))) < -1-IKFAST_SINCOS_THRESH || (((IkReal(1.00099239693695))+(((IkReal(-5.26089284776420))*(pp))))) > 1+IKFAST_SINCOS_THRESH )
    continue;
IkReal x75=IKasin(((IkReal(1.00099239693695))+(((IkReal(-5.26089284776420))*(pp)))));
j10array[0]=((IkReal(-1.76577759872331))+(((IkReal(-1.00000000000000))*(x75))));
sj10array[0]=IKsin(j10array[0]);
cj10array[0]=IKcos(j10array[0]);
j10array[1]=((IkReal(1.37581505486648))+(x75));
sj10array[1]=IKsin(j10array[1]);
cj10array[1]=IKcos(j10array[1]);
if( j10array[0] > IKPI )
{
    j10array[0]-=IK2PI;
}
else if( j10array[0] < -IKPI )
{    j10array[0]+=IK2PI;
}
j10valid[0] = true;
if( j10array[1] > IKPI )
{
    j10array[1]-=IK2PI;
}
else if( j10array[1] < -IKPI )
{    j10array[1]+=IK2PI;
}
j10valid[1] = true;
for(int ij10 = 0; ij10 < 2; ++ij10)
{
if( !j10valid[ij10] )
{
    continue;
}
_ij10[0] = ij10; _ij10[1] = -1;
for(int iij10 = ij10+1; iij10 < 2; ++iij10)
{
if( j10valid[iij10] && IKabs(cj10array[ij10]-cj10array[iij10]) < IKFAST_SOLUTION_THRESH && IKabs(sj10array[ij10]-sj10array[iij10]) < IKFAST_SOLUTION_THRESH )
{
    j10valid[iij10]=false; _ij10[1] = iij10; break;
}
}
j10 = j10array[ij10]; cj10 = cj10array[ij10]; sj10 = sj10array[ij10];

{
IkReal dummyeval[1];
dummyeval[0]=(((px)*(px))+((py)*(py)));
if( IKabs(dummyeval[0]) < 0.0000010000000000  )
{
{
IkReal dummyeval[1];
dummyeval[0]=(((px)*(px))+((py)*(py)));
if( IKabs(dummyeval[0]) < 0.0000010000000000  )
{
{
IkReal dummyeval[1];
IkReal x76=(sj9)*(sj9);
IkReal x77=(sj10)*(sj10);
IkReal x78=(cj10)*(cj10);
IkReal x79=((IkReal(20.9200000000000))*(cj10)*(sj10));
dummyeval[0]=((IkReal(100.000000000000))+(((IkReal(-2.00000000000000))*(cj10)*(x76)))+(((IkReal(-1.00000000000000))*(x79)))+(((IkReal(209.200000000000))*(cj10)))+(((IkReal(-20.9200000000000))*(sj10)*(x76)))+(x77)+(x76)+(((x76)*(x79)))+(((x76)*(x78)))+(((IkReal(109.411600000000))*(x76)*(x77)))+(((IkReal(109.411600000000))*(x78)))+(((IkReal(-20.0000000000000))*(sj10))));
if( IKabs(dummyeval[0]) < 0.0000010000000000  )
{
continue;

} else
{
{
IkReal j8array[2], cj8array[2], sj8array[2];
bool j8valid[2]={false};
_nj8 = 2;
IkReal x80=((IkReal(0.0300000000000000))*(sj9));
IkReal x81=((IkReal(0.300000000000000))+(((IkReal(-0.0300000000000000))*(sj10)))+(((IkReal(0.313800000000000))*(cj10))));
IkReal x82=((((IkReal(-1.00000000000000))*(cj10)*(x80)))+(((IkReal(-0.313800000000000))*(sj10)*(sj9)))+(x80));
if( IKabs(x82) < IKFAST_ATAN2_MAGTHRESH && IKabs(x81) < IKFAST_ATAN2_MAGTHRESH )
    continue;
IkReal x83=((IkReal(1.00000000000000))*(IKatan2(x82, x81)));
if( ((((x81)*(x81))+((x82)*(x82)))) < (IkReal)-0.00001 )
    continue;
if( (((pz)*(((IKabs(IKabs(IKsqrt((((x81)*(x81))+((x82)*(x82)))))) != 0)?((IkReal)1/(IKabs(IKsqrt((((x81)*(x81))+((x82)*(x82))))))):(IkReal)1.0e30)))) < -1-IKFAST_SINCOS_THRESH || (((pz)*(((IKabs(IKabs(IKsqrt((((x81)*(x81))+((x82)*(x82)))))) != 0)?((IkReal)1/(IKabs(IKsqrt((((x81)*(x81))+((x82)*(x82))))))):(IkReal)1.0e30)))) > 1+IKFAST_SINCOS_THRESH )
    continue;
IkReal x84=IKasin(((pz)*(((IKabs(IKabs(IKsqrt((((x81)*(x81))+((x82)*(x82)))))) != 0)?((IkReal)1/(IKabs(IKsqrt((((x81)*(x81))+((x82)*(x82))))))):(IkReal)1.0e30))));
j8array[0]=((x84)+(((IkReal(-1.00000000000000))*(x83))));
sj8array[0]=IKsin(j8array[0]);
cj8array[0]=IKcos(j8array[0]);
j8array[1]=((IkReal(3.14159265358979))+(((IkReal(-1.00000000000000))*(x84)))+(((IkReal(-1.00000000000000))*(x83))));
sj8array[1]=IKsin(j8array[1]);
cj8array[1]=IKcos(j8array[1]);
if( j8array[0] > IKPI )
{
    j8array[0]-=IK2PI;
}
else if( j8array[0] < -IKPI )
{    j8array[0]+=IK2PI;
}
j8valid[0] = true;
if( j8array[1] > IKPI )
{
    j8array[1]-=IK2PI;
}
else if( j8array[1] < -IKPI )
{    j8array[1]+=IK2PI;
}
j8valid[1] = true;
for(int ij8 = 0; ij8 < 2; ++ij8)
{
if( !j8valid[ij8] )
{
    continue;
}
_ij8[0] = ij8; _ij8[1] = -1;
for(int iij8 = ij8+1; iij8 < 2; ++iij8)
{
if( j8valid[iij8] && IKabs(cj8array[ij8]-cj8array[iij8]) < IKFAST_SOLUTION_THRESH && IKabs(sj8array[ij8]-sj8array[iij8]) < IKFAST_SOLUTION_THRESH )
{
    j8valid[iij8]=false; _ij8[1] = iij8; break;
}
}
j8 = j8array[ij8]; cj8 = cj8array[ij8]; sj8 = sj8array[ij8];

{
IkReal dummyeval[1];
IkReal gconst0;
gconst0=IKsign(((((cj8)*((px)*(px))))+(((cj8)*((py)*(py))))));
dummyeval[0]=((((cj8)*((px)*(px))))+(((cj8)*((py)*(py)))));
if( IKabs(dummyeval[0]) < 0.0000010000000000  )
{
{
IkReal dummyeval[1];
IkReal gconst1;
IkReal x85=((cj9)*(sj8));
gconst1=IKsign(((((x85)*((px)*(px))))+(((x85)*((py)*(py))))));
IkReal x86=((cj9)*(sj8));
dummyeval[0]=((((x86)*((px)*(px))))+(((x86)*((py)*(py)))));
if( IKabs(dummyeval[0]) < 0.0000010000000000  )
{
{
IkReal evalcond[4];
IkReal x87=((IkReal(0.0300000000000000))*(cj8));
evalcond[0]=((IkReal(-3.14159265358979))+(IKfmod(((IkReal(1.57079632679490))+(j9)), IkReal(6.28318530717959))));
evalcond[1]=((IkReal(0.190270440000000))+(((IkReal(-0.0368280000000000))*(sj10)))+(((IkReal(0.186480000000000))*(cj10)))+(((IkReal(-1.00000000000000))*(pp))));
evalcond[2]=((((IkReal(-1.00000000000000))*(cj10)*(x87)))+(((IkReal(0.313800000000000))*(cj10)*(sj8)))+(((IkReal(-0.313800000000000))*(cj8)*(sj10)))+(((IkReal(-1.00000000000000))*(pz)))+(x87)+(((IkReal(0.300000000000000))*(sj8)))+(((IkReal(-0.0300000000000000))*(sj10)*(sj8))));
if( IKabs(evalcond[0]) < 0.0000010000000000  && IKabs(evalcond[1]) < 0.0000010000000000  && IKabs(evalcond[2]) < 0.0000010000000000  )
{
{
IkReal dummyeval[1];
IkReal gconst2;
gconst2=IKsign(((((cj8)*((px)*(px))))+(((cj8)*((py)*(py))))));
dummyeval[0]=((((cj8)*((px)*(px))))+(((cj8)*((py)*(py)))));
if( IKabs(dummyeval[0]) < 0.0000010000000000  )
{
{
IkReal dummyeval[1];
IkReal gconst3;
gconst3=IKsign(((((sj8)*((py)*(py))))+(((sj8)*((px)*(px))))));
dummyeval[0]=((((sj8)*((py)*(py))))+(((sj8)*((px)*(px)))));
if( IKabs(dummyeval[0]) < 0.0000010000000000  )
{
{
IkReal evalcond[4];
IkReal x88=((IkReal(0.0300000000000000))+(((IkReal(-0.313800000000000))*(sj10)))+(((IkReal(-1.00000000000000))*(pz)))+(((IkReal(-0.0300000000000000))*(cj10))));
evalcond[0]=((IkReal(-3.14159265358979))+(IKfmod(((IkReal(3.14159265358979))+(j8)), IkReal(6.28318530717959))));
evalcond[1]=((IkReal(0.190270440000000))+(((IkReal(-0.0368280000000000))*(sj10)))+(((IkReal(0.186480000000000))*(cj10)))+(((IkReal(-1.00000000000000))*(pp))));
evalcond[2]=x88;
evalcond[3]=x88;
if( IKabs(evalcond[0]) < 0.0000010000000000  && IKabs(evalcond[1]) < 0.0000010000000000  && IKabs(evalcond[2]) < 0.0000010000000000  && IKabs(evalcond[3]) < 0.0000010000000000  )
{
{
IkReal dummyeval[1];
IkReal gconst4;
gconst4=IKsign(((((IkReal(-1.00000000000000))*((px)*(px))))+(((IkReal(-1.00000000000000))*((py)*(py))))));
dummyeval[0]=((((IkReal(-1.00000000000000))*((px)*(px))))+(((IkReal(-1.00000000000000))*((py)*(py)))));
if( IKabs(dummyeval[0]) < 0.0000010000000000  )
{
{
IkReal dummyeval[1];
IkReal gconst5;
gconst5=IKsign(((((IkReal(3.00000000000000))*((py)*(py))))+(((IkReal(3.00000000000000))*((px)*(px))))));
dummyeval[0]=(((px)*(px))+((py)*(py)));
if( IKabs(dummyeval[0]) < 0.0000010000000000  )
{
continue;

} else
{
{
IkReal j7array[1], cj7array[1], sj7array[1];
bool j7valid[1]={false};
_nj7 = 1;
IkReal x89=((IkReal(5.00000000000000))*(pp));
IkReal x90=((IkReal(0.300000000000000))*(pz));
if( IKabs(((gconst5)*(((((IkReal(0.0423522000000000))*(px)))+(((px)*(x90)))+(((IkReal(-1.00000000000000))*(px)*(x89))))))) < IKFAST_ATAN2_MAGTHRESH && IKabs(((gconst5)*(((((IkReal(-0.0423522000000000))*(py)))+(((py)*(x89)))+(((IkReal(-1.00000000000000))*(py)*(x90))))))) < IKFAST_ATAN2_MAGTHRESH )
    continue;
j7array[0]=IKatan2(((gconst5)*(((((IkReal(0.0423522000000000))*(px)))+(((px)*(x90)))+(((IkReal(-1.00000000000000))*(px)*(x89)))))), ((gconst5)*(((((IkReal(-0.0423522000000000))*(py)))+(((py)*(x89)))+(((IkReal(-1.00000000000000))*(py)*(x90)))))));
sj7array[0]=IKsin(j7array[0]);
cj7array[0]=IKcos(j7array[0]);
if( j7array[0] > IKPI )
{
    j7array[0]-=IK2PI;
}
else if( j7array[0] < -IKPI )
{    j7array[0]+=IK2PI;
}
j7valid[0] = true;
for(int ij7 = 0; ij7 < 1; ++ij7)
{
if( !j7valid[ij7] )
{
    continue;
}
_ij7[0] = ij7; _ij7[1] = -1;
for(int iij7 = ij7+1; iij7 < 1; ++iij7)
{
if( j7valid[iij7] && IKabs(cj7array[ij7]-cj7array[iij7]) < IKFAST_SOLUTION_THRESH && IKabs(sj7array[ij7]-sj7array[iij7]) < IKFAST_SOLUTION_THRESH )
{
    j7valid[iij7]=false; _ij7[1] = iij7; break;
}
}
j7 = j7array[ij7]; cj7 = cj7array[ij7]; sj7 = sj7array[ij7];
{
IkReal evalcond[3];
IkReal x91=IKsin(j7);
IkReal x92=IKcos(j7);
IkReal x93=((px)*(x91));
IkReal x94=((IkReal(1.00000000000000))*(x92));
evalcond[0]=((((IkReal(-1.00000000000000))*(py)*(x91)))+(((IkReal(-1.00000000000000))*(px)*(x94))));
evalcond[1]=((IkReal(0.300000000000000))+(((IkReal(-0.0300000000000000))*(sj10)))+(x93)+(((IkReal(0.313800000000000))*(cj10)))+(((IkReal(-1.00000000000000))*(py)*(x94))));
evalcond[2]=((IkReal(0.00847044000000000))+(((IkReal(0.600000000000000))*(py)*(x92)))+(((IkReal(-1.00000000000000))*(pp)))+(((IkReal(0.0600000000000000))*(pz)))+(((IkReal(-0.600000000000000))*(x93))));
if( IKabs(evalcond[0]) > 0.000001  || IKabs(evalcond[1]) > 0.000001  || IKabs(evalcond[2]) > 0.000001  )
{
continue;
}
}

rotationfunction0(solutions);
}
}

}

}

} else
{
{
IkReal j7array[1], cj7array[1], sj7array[1];
bool j7valid[1]={false};
_nj7 = 1;
IkReal x255=((IkReal(0.0300000000000000))*(sj10));
IkReal x256=((IkReal(0.313800000000000))*(cj10));
if( IKabs(((gconst4)*(((((IkReal(0.300000000000000))*(px)))+(((px)*(x256)))+(((IkReal(-1.00000000000000))*(px)*(x255))))))) < IKFAST_ATAN2_MAGTHRESH && IKabs(((gconst4)*(((((IkReal(-0.300000000000000))*(py)))+(((py)*(x255)))+(((IkReal(-1.00000000000000))*(py)*(x256))))))) < IKFAST_ATAN2_MAGTHRESH )
    continue;
j7array[0]=IKatan2(((gconst4)*(((((IkReal(0.300000000000000))*(px)))+(((px)*(x256)))+(((IkReal(-1.00000000000000))*(px)*(x255)))))), ((gconst4)*(((((IkReal(-0.300000000000000))*(py)))+(((py)*(x255)))+(((IkReal(-1.00000000000000))*(py)*(x256)))))));
sj7array[0]=IKsin(j7array[0]);
cj7array[0]=IKcos(j7array[0]);
if( j7array[0] > IKPI )
{
    j7array[0]-=IK2PI;
}
else if( j7array[0] < -IKPI )
{    j7array[0]+=IK2PI;
}
j7valid[0] = true;
for(int ij7 = 0; ij7 < 1; ++ij7)
{
if( !j7valid[ij7] )
{
    continue;
}
_ij7[0] = ij7; _ij7[1] = -1;
for(int iij7 = ij7+1; iij7 < 1; ++iij7)
{
if( j7valid[iij7] && IKabs(cj7array[ij7]-cj7array[iij7]) < IKFAST_SOLUTION_THRESH && IKabs(sj7array[ij7]-sj7array[iij7]) < IKFAST_SOLUTION_THRESH )
{
    j7valid[iij7]=false; _ij7[1] = iij7; break;
}
}
j7 = j7array[ij7]; cj7 = cj7array[ij7]; sj7 = sj7array[ij7];
{
IkReal evalcond[3];
IkReal x257=IKsin(j7);
IkReal x258=IKcos(j7);
IkReal x259=((px)*(x257));
IkReal x260=((IkReal(1.00000000000000))*(x258));
evalcond[0]=((((IkReal(-1.00000000000000))*(py)*(x257)))+(((IkReal(-1.00000000000000))*(px)*(x260))));
evalcond[1]=((IkReal(0.300000000000000))+(((IkReal(-0.0300000000000000))*(sj10)))+(x259)+(((IkReal(0.313800000000000))*(cj10)))+(((IkReal(-1.00000000000000))*(py)*(x260))));
evalcond[2]=((IkReal(0.00847044000000000))+(((IkReal(0.600000000000000))*(py)*(x258)))+(((IkReal(-1.00000000000000))*(pp)))+(((IkReal(-0.600000000000000))*(x259)))+(((IkReal(0.0600000000000000))*(pz))));
if( IKabs(evalcond[0]) > 0.000001  || IKabs(evalcond[1]) > 0.000001  || IKabs(evalcond[2]) > 0.000001  )
{
continue;
}
}

rotationfunction0(solutions);
}
}

}

}

} else
{
IkReal x261=((IkReal(0.313800000000000))*(sj10));
IkReal x262=((IkReal(0.0300000000000000))*(cj10));
IkReal x263=((x261)+(x262));
evalcond[0]=((IkReal(-3.14159265358979))+(IKfmod(((IkReal(1.11022302462516e-16))+(j8)), IkReal(6.28318530717959))));
evalcond[1]=((IkReal(0.190270440000000))+(((IkReal(-0.0368280000000000))*(sj10)))+(((IkReal(0.186480000000000))*(cj10)))+(((IkReal(-1.00000000000000))*(pp))));
evalcond[2]=((IkReal(-0.0300000000000000))+(((IkReal(-1.00000000000000))*(pz)))+(x263));
evalcond[3]=((IkReal(0.0300000000000000))+(pz)+(((IkReal(-1.00000000000000))*(x263))));
if( IKabs(evalcond[0]) < 0.0000010000000000  && IKabs(evalcond[1]) < 0.0000010000000000  && IKabs(evalcond[2]) < 0.0000010000000000  && IKabs(evalcond[3]) < 0.0000010000000000  )
{
{
IkReal dummyeval[1];
IkReal gconst6;
gconst6=IKsign((((px)*(px))+((py)*(py))));
dummyeval[0]=(((px)*(px))+((py)*(py)));
if( IKabs(dummyeval[0]) < 0.0000010000000000  )
{
{
IkReal dummyeval[1];
IkReal gconst7;
gconst7=IKsign(((((IkReal(-3.00000000000000))*((px)*(px))))+(((IkReal(-3.00000000000000))*((py)*(py))))));
dummyeval[0]=((((IkReal(-1.00000000000000))*((px)*(px))))+(((IkReal(-1.00000000000000))*((py)*(py)))));
if( IKabs(dummyeval[0]) < 0.0000010000000000  )
{
continue;

} else
{
{
IkReal j7array[1], cj7array[1], sj7array[1];
bool j7valid[1]={false};
_nj7 = 1;
IkReal x264=((IkReal(5.00000000000000))*(pp));
IkReal x265=((IkReal(0.300000000000000))*(pz));
if( IKabs(((gconst7)*(((((IkReal(0.0423522000000000))*(px)))+(((IkReal(-1.00000000000000))*(px)*(x264)))+(((IkReal(-1.00000000000000))*(px)*(x265))))))) < IKFAST_ATAN2_MAGTHRESH && IKabs(((gconst7)*(((((IkReal(-0.0423522000000000))*(py)))+(((py)*(x264)))+(((py)*(x265))))))) < IKFAST_ATAN2_MAGTHRESH )
    continue;
j7array[0]=IKatan2(((gconst7)*(((((IkReal(0.0423522000000000))*(px)))+(((IkReal(-1.00000000000000))*(px)*(x264)))+(((IkReal(-1.00000000000000))*(px)*(x265)))))), ((gconst7)*(((((IkReal(-0.0423522000000000))*(py)))+(((py)*(x264)))+(((py)*(x265)))))));
sj7array[0]=IKsin(j7array[0]);
cj7array[0]=IKcos(j7array[0]);
if( j7array[0] > IKPI )
{
    j7array[0]-=IK2PI;
}
else if( j7array[0] < -IKPI )
{    j7array[0]+=IK2PI;
}
j7valid[0] = true;
for(int ij7 = 0; ij7 < 1; ++ij7)
{
if( !j7valid[ij7] )
{
    continue;
}
_ij7[0] = ij7; _ij7[1] = -1;
for(int iij7 = ij7+1; iij7 < 1; ++iij7)
{
if( j7valid[iij7] && IKabs(cj7array[ij7]-cj7array[iij7]) < IKFAST_SOLUTION_THRESH && IKabs(sj7array[ij7]-sj7array[iij7]) < IKFAST_SOLUTION_THRESH )
{
    j7valid[iij7]=false; _ij7[1] = iij7; break;
}
}
j7 = j7array[ij7]; cj7 = cj7array[ij7]; sj7 = sj7array[ij7];
{
IkReal evalcond[3];
IkReal x266=IKcos(j7);
IkReal x267=IKsin(j7);
IkReal x268=((px)*(x267));
IkReal x269=((py)*(x266));
evalcond[0]=((((IkReal(-1.00000000000000))*(px)*(x266)))+(((IkReal(-1.00000000000000))*(py)*(x267))));
evalcond[1]=((IkReal(0.300000000000000))+(((IkReal(-1.00000000000000))*(x268)))+(((IkReal(-0.0300000000000000))*(sj10)))+(x269)+(((IkReal(0.313800000000000))*(cj10))));
evalcond[2]=((IkReal(0.00847044000000000))+(((IkReal(-1.00000000000000))*(pp)))+(((IkReal(-0.0600000000000000))*(pz)))+(((IkReal(0.600000000000000))*(x268)))+(((IkReal(-0.600000000000000))*(x269))));
if( IKabs(evalcond[0]) > 0.000001  || IKabs(evalcond[1]) > 0.000001  || IKabs(evalcond[2]) > 0.000001  )
{
continue;
}
}

rotationfunction0(solutions);
}
}

}

}

} else
{
{
IkReal j7array[1], cj7array[1], sj7array[1];
bool j7valid[1]={false};
_nj7 = 1;
IkReal x270=((IkReal(0.0300000000000000))*(sj10));
IkReal x271=((IkReal(0.313800000000000))*(cj10));
if( IKabs(((gconst6)*(((((px)*(x271)))+(((IkReal(0.300000000000000))*(px)))+(((IkReal(-1.00000000000000))*(px)*(x270))))))) < IKFAST_ATAN2_MAGTHRESH && IKabs(((gconst6)*(((((IkReal(-0.300000000000000))*(py)))+(((py)*(x270)))+(((IkReal(-1.00000000000000))*(py)*(x271))))))) < IKFAST_ATAN2_MAGTHRESH )
    continue;
j7array[0]=IKatan2(((gconst6)*(((((px)*(x271)))+(((IkReal(0.300000000000000))*(px)))+(((IkReal(-1.00000000000000))*(px)*(x270)))))), ((gconst6)*(((((IkReal(-0.300000000000000))*(py)))+(((py)*(x270)))+(((IkReal(-1.00000000000000))*(py)*(x271)))))));
sj7array[0]=IKsin(j7array[0]);
cj7array[0]=IKcos(j7array[0]);
if( j7array[0] > IKPI )
{
    j7array[0]-=IK2PI;
}
else if( j7array[0] < -IKPI )
{    j7array[0]+=IK2PI;
}
j7valid[0] = true;
for(int ij7 = 0; ij7 < 1; ++ij7)
{
if( !j7valid[ij7] )
{
    continue;
}
_ij7[0] = ij7; _ij7[1] = -1;
for(int iij7 = ij7+1; iij7 < 1; ++iij7)
{
if( j7valid[iij7] && IKabs(cj7array[ij7]-cj7array[iij7]) < IKFAST_SOLUTION_THRESH && IKabs(sj7array[ij7]-sj7array[iij7]) < IKFAST_SOLUTION_THRESH )
{
    j7valid[iij7]=false; _ij7[1] = iij7; break;
}
}
j7 = j7array[ij7]; cj7 = cj7array[ij7]; sj7 = sj7array[ij7];
{
IkReal evalcond[3];
IkReal x272=IKcos(j7);
IkReal x273=IKsin(j7);
IkReal x274=((px)*(x273));
IkReal x275=((py)*(x272));
evalcond[0]=((((IkReal(-1.00000000000000))*(px)*(x272)))+(((IkReal(-1.00000000000000))*(py)*(x273))));
evalcond[1]=((IkReal(0.300000000000000))+(((IkReal(-1.00000000000000))*(x274)))+(((IkReal(-0.0300000000000000))*(sj10)))+(x275)+(((IkReal(0.313800000000000))*(cj10))));
evalcond[2]=((IkReal(0.00847044000000000))+(((IkReal(-1.00000000000000))*(pp)))+(((IkReal(-0.0600000000000000))*(pz)))+(((IkReal(0.600000000000000))*(x274)))+(((IkReal(-0.600000000000000))*(x275))));
if( IKabs(evalcond[0]) > 0.000001  || IKabs(evalcond[1]) > 0.000001  || IKabs(evalcond[2]) > 0.000001  )
{
continue;
}
}

rotationfunction0(solutions);
}
}

}

}

} else
{
IkReal x276=((IkReal(0.300000000000000))+(((IkReal(-0.0300000000000000))*(sj10)))+(((IkReal(-1.00000000000000))*(pz)))+(((IkReal(0.313800000000000))*(cj10))));
evalcond[0]=((IkReal(-3.14159265358979))+(IKfmod(((IkReal(1.57079632679490))+(j8)), IkReal(6.28318530717959))));
evalcond[1]=((IkReal(0.190270440000000))+(((IkReal(-0.0368280000000000))*(sj10)))+(((IkReal(0.186480000000000))*(cj10)))+(((IkReal(-1.00000000000000))*(pp))));
evalcond[2]=x276;
evalcond[3]=x276;
if( IKabs(evalcond[0]) < 0.0000010000000000  && IKabs(evalcond[1]) < 0.0000010000000000  && IKabs(evalcond[2]) < 0.0000010000000000  && IKabs(evalcond[3]) < 0.0000010000000000  )
{
{
IkReal dummyeval[1];
IkReal gconst8;
gconst8=IKsign((((px)*(px))+((py)*(py))));
dummyeval[0]=(((px)*(px))+((py)*(py)));
if( IKabs(dummyeval[0]) < 0.0000010000000000  )
{
{
IkReal dummyeval[1];
IkReal gconst9;
gconst9=IKsign(((((IkReal(-3.00000000000000))*((px)*(px))))+(((IkReal(-3.00000000000000))*((py)*(py))))));
dummyeval[0]=((((IkReal(-1.00000000000000))*((px)*(px))))+(((IkReal(-1.00000000000000))*((py)*(py)))));
if( IKabs(dummyeval[0]) < 0.0000010000000000  )
{
continue;

} else
{
{
IkReal j7array[1], cj7array[1], sj7array[1];
bool j7valid[1]={false};
_nj7 = 1;
IkReal x277=((IkReal(50.0000000000000))*(pp));
IkReal x278=((IkReal(30.0000000000000))*(pz));
if( IKabs(((gconst9)*(((((IkReal(0.423522000000000))*(px)))+(((px)*(x278)))+(((IkReal(-1.00000000000000))*(px)*(x277))))))) < IKFAST_ATAN2_MAGTHRESH && IKabs(((gconst9)*(((((py)*(x277)))+(((IkReal(-0.423522000000000))*(py)))+(((IkReal(-1.00000000000000))*(py)*(x278))))))) < IKFAST_ATAN2_MAGTHRESH )
    continue;
j7array[0]=IKatan2(((gconst9)*(((((IkReal(0.423522000000000))*(px)))+(((px)*(x278)))+(((IkReal(-1.00000000000000))*(px)*(x277)))))), ((gconst9)*(((((py)*(x277)))+(((IkReal(-0.423522000000000))*(py)))+(((IkReal(-1.00000000000000))*(py)*(x278)))))));
sj7array[0]=IKsin(j7array[0]);
cj7array[0]=IKcos(j7array[0]);
if( j7array[0] > IKPI )
{
    j7array[0]-=IK2PI;
}
else if( j7array[0] < -IKPI )
{    j7array[0]+=IK2PI;
}
j7valid[0] = true;
for(int ij7 = 0; ij7 < 1; ++ij7)
{
if( !j7valid[ij7] )
{
    continue;
}
_ij7[0] = ij7; _ij7[1] = -1;
for(int iij7 = ij7+1; iij7 < 1; ++iij7)
{
if( j7valid[iij7] && IKabs(cj7array[ij7]-cj7array[iij7]) < IKFAST_SOLUTION_THRESH && IKabs(sj7array[ij7]-sj7array[iij7]) < IKFAST_SOLUTION_THRESH )
{
    j7valid[iij7]=false; _ij7[1] = iij7; break;
}
}
j7 = j7array[ij7]; cj7 = cj7array[ij7]; sj7 = sj7array[ij7];
{
IkReal evalcond[3];
IkReal x279=IKcos(j7);
IkReal x280=IKsin(j7);
IkReal x281=((IkReal(1.00000000000000))*(x280));
IkReal x282=((py)*(x279));
evalcond[0]=((((IkReal(-1.00000000000000))*(px)*(x279)))+(((IkReal(-1.00000000000000))*(py)*(x281))));
evalcond[1]=((IkReal(0.0300000000000000))+(((IkReal(-0.313800000000000))*(sj10)))+(((IkReal(-1.00000000000000))*(px)*(x281)))+(x282)+(((IkReal(-0.0300000000000000))*(cj10))));
evalcond[2]=((IkReal(0.00847044000000000))+(((IkReal(0.600000000000000))*(pz)))+(((IkReal(-0.0600000000000000))*(x282)))+(((IkReal(-1.00000000000000))*(pp)))+(((IkReal(0.0600000000000000))*(px)*(x280))));
if( IKabs(evalcond[0]) > 0.000001  || IKabs(evalcond[1]) > 0.000001  || IKabs(evalcond[2]) > 0.000001  )
{
continue;
}
}

rotationfunction0(solutions);
}
}

}

}

} else
{
{
IkReal j7array[1], cj7array[1], sj7array[1];
bool j7valid[1]={false};
_nj7 = 1;
IkReal x283=((IkReal(0.0300000000000000))*(px));
IkReal x284=((IkReal(0.313800000000000))*(sj10));
IkReal x285=((IkReal(0.0300000000000000))*(py));
if( IKabs(((gconst8)*(((((IkReal(-1.00000000000000))*(px)*(x284)))+(x283)+(((IkReal(-1.00000000000000))*(cj10)*(x283))))))) < IKFAST_ATAN2_MAGTHRESH && IKabs(((gconst8)*(((((cj10)*(x285)))+(((IkReal(-1.00000000000000))*(x285)))+(((py)*(x284))))))) < IKFAST_ATAN2_MAGTHRESH )
    continue;
j7array[0]=IKatan2(((gconst8)*(((((IkReal(-1.00000000000000))*(px)*(x284)))+(x283)+(((IkReal(-1.00000000000000))*(cj10)*(x283)))))), ((gconst8)*(((((cj10)*(x285)))+(((IkReal(-1.00000000000000))*(x285)))+(((py)*(x284)))))));
sj7array[0]=IKsin(j7array[0]);
cj7array[0]=IKcos(j7array[0]);
if( j7array[0] > IKPI )
{
    j7array[0]-=IK2PI;
}
else if( j7array[0] < -IKPI )
{    j7array[0]+=IK2PI;
}
j7valid[0] = true;
for(int ij7 = 0; ij7 < 1; ++ij7)
{
if( !j7valid[ij7] )
{
    continue;
}
_ij7[0] = ij7; _ij7[1] = -1;
for(int iij7 = ij7+1; iij7 < 1; ++iij7)
{
if( j7valid[iij7] && IKabs(cj7array[ij7]-cj7array[iij7]) < IKFAST_SOLUTION_THRESH && IKabs(sj7array[ij7]-sj7array[iij7]) < IKFAST_SOLUTION_THRESH )
{
    j7valid[iij7]=false; _ij7[1] = iij7; break;
}
}
j7 = j7array[ij7]; cj7 = cj7array[ij7]; sj7 = sj7array[ij7];
{
IkReal evalcond[3];
IkReal x286=IKcos(j7);
IkReal x287=IKsin(j7);
IkReal x288=((IkReal(1.00000000000000))*(x287));
IkReal x289=((py)*(x286));
evalcond[0]=((((IkReal(-1.00000000000000))*(py)*(x288)))+(((IkReal(-1.00000000000000))*(px)*(x286))));
evalcond[1]=((IkReal(0.0300000000000000))+(((IkReal(-0.313800000000000))*(sj10)))+(((IkReal(-1.00000000000000))*(px)*(x288)))+(x289)+(((IkReal(-0.0300000000000000))*(cj10))));
evalcond[2]=((IkReal(0.00847044000000000))+(((IkReal(0.600000000000000))*(pz)))+(((IkReal(-0.0600000000000000))*(x289)))+(((IkReal(-1.00000000000000))*(pp)))+(((IkReal(0.0600000000000000))*(px)*(x287))));
if( IKabs(evalcond[0]) > 0.000001  || IKabs(evalcond[1]) > 0.000001  || IKabs(evalcond[2]) > 0.000001  )
{
continue;
}
}

rotationfunction0(solutions);
}
}

}

}

} else
{
IkReal x290=((IkReal(0.0300000000000000))*(sj10));
IkReal x291=((IkReal(0.313800000000000))*(cj10));
evalcond[0]=((IkReal(-3.14159265358979))+(IKfmod(((IkReal(4.71238898038469))+(j8)), IkReal(6.28318530717959))));
evalcond[1]=((IkReal(0.190270440000000))+(((IkReal(-0.0368280000000000))*(sj10)))+(((IkReal(0.186480000000000))*(cj10)))+(((IkReal(-1.00000000000000))*(pp))));
evalcond[2]=((IkReal(0.300000000000000))+(((IkReal(-1.00000000000000))*(x290)))+(x291)+(pz));
evalcond[3]=((IkReal(-0.300000000000000))+(((IkReal(-1.00000000000000))*(x291)))+(((IkReal(-1.00000000000000))*(pz)))+(x290));
if( IKabs(evalcond[0]) < 0.0000010000000000  && IKabs(evalcond[1]) < 0.0000010000000000  && IKabs(evalcond[2]) < 0.0000010000000000  && IKabs(evalcond[3]) < 0.0000010000000000  )
{
{
IkReal dummyeval[1];
IkReal gconst10;
gconst10=IKsign(((((IkReal(-1.00000000000000))*((px)*(px))))+(((IkReal(-1.00000000000000))*((py)*(py))))));
dummyeval[0]=((((IkReal(-1.00000000000000))*((px)*(px))))+(((IkReal(-1.00000000000000))*((py)*(py)))));
if( IKabs(dummyeval[0]) < 0.0000010000000000  )
{
{
IkReal dummyeval[1];
IkReal gconst11;
gconst11=IKsign(((((IkReal(3.00000000000000))*((py)*(py))))+(((IkReal(3.00000000000000))*((px)*(px))))));
dummyeval[0]=(((px)*(px))+((py)*(py)));
if( IKabs(dummyeval[0]) < 0.0000010000000000  )
{
continue;

} else
{
{
IkReal j7array[1], cj7array[1], sj7array[1];
bool j7valid[1]={false};
_nj7 = 1;
IkReal x292=((IkReal(50.0000000000000))*(pp));
IkReal x293=((IkReal(30.0000000000000))*(pz));
if( IKabs(((gconst11)*(((((IkReal(0.423522000000000))*(px)))+(((IkReal(-1.00000000000000))*(px)*(x293)))+(((IkReal(-1.00000000000000))*(px)*(x292))))))) < IKFAST_ATAN2_MAGTHRESH && IKabs(((gconst11)*(((((py)*(x293)))+(((py)*(x292)))+(((IkReal(-0.423522000000000))*(py))))))) < IKFAST_ATAN2_MAGTHRESH )
    continue;
j7array[0]=IKatan2(((gconst11)*(((((IkReal(0.423522000000000))*(px)))+(((IkReal(-1.00000000000000))*(px)*(x293)))+(((IkReal(-1.00000000000000))*(px)*(x292)))))), ((gconst11)*(((((py)*(x293)))+(((py)*(x292)))+(((IkReal(-0.423522000000000))*(py)))))));
sj7array[0]=IKsin(j7array[0]);
cj7array[0]=IKcos(j7array[0]);
if( j7array[0] > IKPI )
{
    j7array[0]-=IK2PI;
}
else if( j7array[0] < -IKPI )
{    j7array[0]+=IK2PI;
}
j7valid[0] = true;
for(int ij7 = 0; ij7 < 1; ++ij7)
{
if( !j7valid[ij7] )
{
    continue;
}
_ij7[0] = ij7; _ij7[1] = -1;
for(int iij7 = ij7+1; iij7 < 1; ++iij7)
{
if( j7valid[iij7] && IKabs(cj7array[ij7]-cj7array[iij7]) < IKFAST_SOLUTION_THRESH && IKabs(sj7array[ij7]-sj7array[iij7]) < IKFAST_SOLUTION_THRESH )
{
    j7valid[iij7]=false; _ij7[1] = iij7; break;
}
}
j7 = j7array[ij7]; cj7 = cj7array[ij7]; sj7 = sj7array[ij7];
{
IkReal evalcond[3];
IkReal x294=IKsin(j7);
IkReal x295=IKcos(j7);
IkReal x296=((IkReal(1.00000000000000))*(py));
IkReal x297=((px)*(x294));
evalcond[0]=((((IkReal(-1.00000000000000))*(px)*(x295)))+(((IkReal(-1.00000000000000))*(x294)*(x296))));
evalcond[1]=((IkReal(0.0300000000000000))+(((IkReal(-0.313800000000000))*(sj10)))+(x297)+(((IkReal(-1.00000000000000))*(x295)*(x296)))+(((IkReal(-0.0300000000000000))*(cj10))));
evalcond[2]=((IkReal(0.00847044000000000))+(((IkReal(-0.600000000000000))*(pz)))+(((IkReal(-1.00000000000000))*(pp)))+(((IkReal(0.0600000000000000))*(py)*(x295)))+(((IkReal(-0.0600000000000000))*(x297))));
if( IKabs(evalcond[0]) > 0.000001  || IKabs(evalcond[1]) > 0.000001  || IKabs(evalcond[2]) > 0.000001  )
{
continue;
}
}

rotationfunction0(solutions);
}
}

}

}

} else
{
{
IkReal j7array[1], cj7array[1], sj7array[1];
bool j7valid[1]={false};
_nj7 = 1;
IkReal x298=((IkReal(0.0300000000000000))*(px));
IkReal x299=((IkReal(0.313800000000000))*(sj10));
IkReal x300=((IkReal(0.0300000000000000))*(py));
if( IKabs(((gconst10)*(((((IkReal(-1.00000000000000))*(cj10)*(x298)))+(x298)+(((IkReal(-1.00000000000000))*(px)*(x299))))))) < IKFAST_ATAN2_MAGTHRESH && IKabs(((gconst10)*(((((py)*(x299)))+(((IkReal(-1.00000000000000))*(x300)))+(((cj10)*(x300))))))) < IKFAST_ATAN2_MAGTHRESH )
    continue;
j7array[0]=IKatan2(((gconst10)*(((((IkReal(-1.00000000000000))*(cj10)*(x298)))+(x298)+(((IkReal(-1.00000000000000))*(px)*(x299)))))), ((gconst10)*(((((py)*(x299)))+(((IkReal(-1.00000000000000))*(x300)))+(((cj10)*(x300)))))));
sj7array[0]=IKsin(j7array[0]);
cj7array[0]=IKcos(j7array[0]);
if( j7array[0] > IKPI )
{
    j7array[0]-=IK2PI;
}
else if( j7array[0] < -IKPI )
{    j7array[0]+=IK2PI;
}
j7valid[0] = true;
for(int ij7 = 0; ij7 < 1; ++ij7)
{
if( !j7valid[ij7] )
{
    continue;
}
_ij7[0] = ij7; _ij7[1] = -1;
for(int iij7 = ij7+1; iij7 < 1; ++iij7)
{
if( j7valid[iij7] && IKabs(cj7array[ij7]-cj7array[iij7]) < IKFAST_SOLUTION_THRESH && IKabs(sj7array[ij7]-sj7array[iij7]) < IKFAST_SOLUTION_THRESH )
{
    j7valid[iij7]=false; _ij7[1] = iij7; break;
}
}
j7 = j7array[ij7]; cj7 = cj7array[ij7]; sj7 = sj7array[ij7];
{
IkReal evalcond[3];
IkReal x301=IKsin(j7);
IkReal x302=IKcos(j7);
IkReal x303=((IkReal(1.00000000000000))*(py));
IkReal x304=((px)*(x301));
evalcond[0]=((((IkReal(-1.00000000000000))*(x301)*(x303)))+(((IkReal(-1.00000000000000))*(px)*(x302))));
evalcond[1]=((IkReal(0.0300000000000000))+(((IkReal(-0.313800000000000))*(sj10)))+(((IkReal(-1.00000000000000))*(x302)*(x303)))+(x304)+(((IkReal(-0.0300000000000000))*(cj10))));
evalcond[2]=((IkReal(0.00847044000000000))+(((IkReal(-0.600000000000000))*(pz)))+(((IkReal(0.0600000000000000))*(py)*(x302)))+(((IkReal(-0.0600000000000000))*(x304)))+(((IkReal(-1.00000000000000))*(pp))));
if( IKabs(evalcond[0]) > 0.000001  || IKabs(evalcond[1]) > 0.000001  || IKabs(evalcond[2]) > 0.000001  )
{
continue;
}
}

rotationfunction0(solutions);
}
}

}

}

} else
{
if( 1 )
{
continue;

} else
{
}
}
}
}
}
}

} else
{
{
IkReal j7array[1], cj7array[1], sj7array[1];
bool j7valid[1]={false};
_nj7 = 1;
IkReal x305=((IkReal(0.0300000000000000))*(px));
IkReal x306=((cj8)*(pz));
IkReal x307=((IkReal(0.313800000000000))*(sj10));
IkReal x308=((IkReal(0.0300000000000000))*(py));
if( IKabs(((gconst3)*(((((IkReal(-1.00000000000000))*(px)*(x307)))+(((IkReal(-1.00000000000000))*(px)*(x306)))+(((IkReal(-1.00000000000000))*(cj10)*(x305)))+(x305))))) < IKFAST_ATAN2_MAGTHRESH && IKabs(((gconst3)*(((((py)*(x307)))+(((py)*(x306)))+(((IkReal(-1.00000000000000))*(x308)))+(((cj10)*(x308))))))) < IKFAST_ATAN2_MAGTHRESH )
    continue;
j7array[0]=IKatan2(((gconst3)*(((((IkReal(-1.00000000000000))*(px)*(x307)))+(((IkReal(-1.00000000000000))*(px)*(x306)))+(((IkReal(-1.00000000000000))*(cj10)*(x305)))+(x305)))), ((gconst3)*(((((py)*(x307)))+(((py)*(x306)))+(((IkReal(-1.00000000000000))*(x308)))+(((cj10)*(x308)))))));
sj7array[0]=IKsin(j7array[0]);
cj7array[0]=IKcos(j7array[0]);
if( j7array[0] > IKPI )
{
    j7array[0]-=IK2PI;
}
else if( j7array[0] < -IKPI )
{    j7array[0]+=IK2PI;
}
j7valid[0] = true;
for(int ij7 = 0; ij7 < 1; ++ij7)
{
if( !j7valid[ij7] )
{
    continue;
}
_ij7[0] = ij7; _ij7[1] = -1;
for(int iij7 = ij7+1; iij7 < 1; ++iij7)
{
if( j7valid[iij7] && IKabs(cj7array[ij7]-cj7array[iij7]) < IKFAST_SOLUTION_THRESH && IKabs(sj7array[ij7]-sj7array[iij7]) < IKFAST_SOLUTION_THRESH )
{
    j7valid[iij7]=false; _ij7[1] = iij7; break;
}
}
j7 = j7array[ij7]; cj7 = cj7array[ij7]; sj7 = sj7array[ij7];
{
IkReal evalcond[5];
IkReal x309=IKsin(j7);
IkReal x310=IKcos(j7);
IkReal x311=((IkReal(0.0300000000000000))*(sj8));
IkReal x312=((IkReal(0.0600000000000000))*(sj8));
IkReal x313=((IkReal(0.600000000000000))*(cj8));
IkReal x314=((cj8)*(pz));
IkReal x315=((IkReal(1.00000000000000))*(sj8));
IkReal x316=((IkReal(0.313800000000000))*(sj10));
IkReal x317=((IkReal(0.0300000000000000))*(sj10));
IkReal x318=((IkReal(0.313800000000000))*(cj10));
IkReal x319=((py)*(x310));
IkReal x320=((px)*(x309));
evalcond[0]=((((IkReal(-1.00000000000000))*(px)*(x310)))+(((IkReal(-1.00000000000000))*(py)*(x309))));
evalcond[1]=((IkReal(0.300000000000000))+(((cj8)*(x320)))+(x318)+(((IkReal(-1.00000000000000))*(x317)))+(((IkReal(-1.00000000000000))*(cj8)*(x319)))+(((IkReal(-1.00000000000000))*(pz)*(x315))));
evalcond[2]=((IkReal(0.0300000000000000))+(((IkReal(-1.00000000000000))*(x315)*(x320)))+(((sj8)*(x319)))+(((IkReal(-1.00000000000000))*(x316)))+(((IkReal(-1.00000000000000))*(x314)))+(((IkReal(-0.0300000000000000))*(cj10))));
evalcond[3]=((x320)+(((cj8)*(x318)))+(((sj8)*(x316)))+(((IkReal(-1.00000000000000))*(x311)))+(((cj10)*(x311)))+(((IkReal(-1.00000000000000))*(x319)))+(((IkReal(0.300000000000000))*(cj8)))+(((IkReal(-1.00000000000000))*(cj8)*(x317))));
evalcond[4]=((IkReal(0.00847044000000000))+(((IkReal(-1.00000000000000))*(x312)*(x319)))+(((IkReal(0.600000000000000))*(pz)*(sj8)))+(((x312)*(x320)))+(((IkReal(-1.00000000000000))*(pp)))+(((IkReal(-1.00000000000000))*(x313)*(x320)))+(((IkReal(0.0600000000000000))*(x314)))+(((x313)*(x319))));
if( IKabs(evalcond[0]) > 0.000001  || IKabs(evalcond[1]) > 0.000001  || IKabs(evalcond[2]) > 0.000001  || IKabs(evalcond[3]) > 0.000001  || IKabs(evalcond[4]) > 0.000001  )
{
continue;
}
}

rotationfunction0(solutions);
}
}

}

}

} else
{
{
IkReal j7array[1], cj7array[1], sj7array[1];
bool j7valid[1]={false};
_nj7 = 1;
IkReal x321=((pz)*(sj8));
IkReal x322=((IkReal(0.0300000000000000))*(sj10));
IkReal x323=((IkReal(0.313800000000000))*(cj10));
if( IKabs(((gconst2)*(((((IkReal(-0.300000000000000))*(px)))+(((IkReal(-1.00000000000000))*(px)*(x323)))+(((px)*(x322)))+(((px)*(x321))))))) < IKFAST_ATAN2_MAGTHRESH && IKabs(((gconst2)*(((((IkReal(-1.00000000000000))*(py)*(x321)))+(((IkReal(0.300000000000000))*(py)))+(((py)*(x323)))+(((IkReal(-1.00000000000000))*(py)*(x322))))))) < IKFAST_ATAN2_MAGTHRESH )
    continue;
j7array[0]=IKatan2(((gconst2)*(((((IkReal(-0.300000000000000))*(px)))+(((IkReal(-1.00000000000000))*(px)*(x323)))+(((px)*(x322)))+(((px)*(x321)))))), ((gconst2)*(((((IkReal(-1.00000000000000))*(py)*(x321)))+(((IkReal(0.300000000000000))*(py)))+(((py)*(x323)))+(((IkReal(-1.00000000000000))*(py)*(x322)))))));
sj7array[0]=IKsin(j7array[0]);
cj7array[0]=IKcos(j7array[0]);
if( j7array[0] > IKPI )
{
    j7array[0]-=IK2PI;
}
else if( j7array[0] < -IKPI )
{    j7array[0]+=IK2PI;
}
j7valid[0] = true;
for(int ij7 = 0; ij7 < 1; ++ij7)
{
if( !j7valid[ij7] )
{
    continue;
}
_ij7[0] = ij7; _ij7[1] = -1;
for(int iij7 = ij7+1; iij7 < 1; ++iij7)
{
if( j7valid[iij7] && IKabs(cj7array[ij7]-cj7array[iij7]) < IKFAST_SOLUTION_THRESH && IKabs(sj7array[ij7]-sj7array[iij7]) < IKFAST_SOLUTION_THRESH )
{
    j7valid[iij7]=false; _ij7[1] = iij7; break;
}
}
j7 = j7array[ij7]; cj7 = cj7array[ij7]; sj7 = sj7array[ij7];
{
IkReal evalcond[5];
IkReal x324=IKsin(j7);
IkReal x325=IKcos(j7);
IkReal x326=((IkReal(0.0300000000000000))*(sj8));
IkReal x327=((IkReal(0.0600000000000000))*(sj8));
IkReal x328=((IkReal(0.600000000000000))*(cj8));
IkReal x329=((cj8)*(pz));
IkReal x330=((IkReal(1.00000000000000))*(sj8));
IkReal x331=((IkReal(0.313800000000000))*(sj10));
IkReal x332=((IkReal(0.0300000000000000))*(sj10));
IkReal x333=((IkReal(0.313800000000000))*(cj10));
IkReal x334=((py)*(x325));
IkReal x335=((px)*(x324));
evalcond[0]=((((IkReal(-1.00000000000000))*(py)*(x324)))+(((IkReal(-1.00000000000000))*(px)*(x325))));
evalcond[1]=((IkReal(0.300000000000000))+(((cj8)*(x335)))+(((IkReal(-1.00000000000000))*(cj8)*(x334)))+(((IkReal(-1.00000000000000))*(pz)*(x330)))+(x333)+(((IkReal(-1.00000000000000))*(x332))));
evalcond[2]=((IkReal(0.0300000000000000))+(((IkReal(-1.00000000000000))*(x329)))+(((IkReal(-1.00000000000000))*(x330)*(x335)))+(((IkReal(-1.00000000000000))*(x331)))+(((sj8)*(x334)))+(((IkReal(-0.0300000000000000))*(cj10))));
evalcond[3]=((((cj8)*(x333)))+(((IkReal(-1.00000000000000))*(x326)))+(((cj10)*(x326)))+(x335)+(((IkReal(-1.00000000000000))*(x334)))+(((IkReal(-1.00000000000000))*(cj8)*(x332)))+(((IkReal(0.300000000000000))*(cj8)))+(((sj8)*(x331))));
evalcond[4]=((IkReal(0.00847044000000000))+(((IkReal(0.600000000000000))*(pz)*(sj8)))+(((IkReal(-1.00000000000000))*(x328)*(x335)))+(((IkReal(-1.00000000000000))*(pp)))+(((x327)*(x335)))+(((x328)*(x334)))+(((IkReal(0.0600000000000000))*(x329)))+(((IkReal(-1.00000000000000))*(x327)*(x334))));
if( IKabs(evalcond[0]) > 0.000001  || IKabs(evalcond[1]) > 0.000001  || IKabs(evalcond[2]) > 0.000001  || IKabs(evalcond[3]) > 0.000001  || IKabs(evalcond[4]) > 0.000001  )
{
continue;
}
}

rotationfunction0(solutions);
}
}

}

}

} else
{
IkReal x336=((IkReal(0.0300000000000000))*(cj8));
evalcond[0]=((IkReal(-3.14159265358979))+(IKfmod(((IkReal(4.71238898038469))+(j9)), IkReal(6.28318530717959))));
evalcond[1]=((IkReal(0.190270440000000))+(((IkReal(-0.0368280000000000))*(sj10)))+(((IkReal(0.186480000000000))*(cj10)))+(((IkReal(-1.00000000000000))*(pp))));
evalcond[2]=((((IkReal(0.313800000000000))*(cj10)*(sj8)))+(((cj10)*(x336)))+(((IkReal(0.313800000000000))*(cj8)*(sj10)))+(((IkReal(-1.00000000000000))*(pz)))+(((IkReal(-1.00000000000000))*(x336)))+(((IkReal(0.300000000000000))*(sj8)))+(((IkReal(-0.0300000000000000))*(sj10)*(sj8))));
if( IKabs(evalcond[0]) < 0.0000010000000000  && IKabs(evalcond[1]) < 0.0000010000000000  && IKabs(evalcond[2]) < 0.0000010000000000  )
{
{
IkReal dummyeval[1];
IkReal gconst12;
gconst12=IKsign(((((sj8)*((py)*(py))))+(((sj8)*((px)*(px))))));
dummyeval[0]=((((sj8)*((py)*(py))))+(((sj8)*((px)*(px)))));
if( IKabs(dummyeval[0]) < 0.0000010000000000  )
{
{
IkReal dummyeval[1];
IkReal gconst13;
gconst13=IKsign(((((cj8)*((px)*(px))))+(((cj8)*((py)*(py))))));
dummyeval[0]=((((cj8)*((px)*(px))))+(((cj8)*((py)*(py)))));
if( IKabs(dummyeval[0]) < 0.0000010000000000  )
{
{
IkReal evalcond[4];
IkReal x337=((IkReal(0.300000000000000))+(((IkReal(-0.0300000000000000))*(sj10)))+(((IkReal(-1.00000000000000))*(pz)))+(((IkReal(0.313800000000000))*(cj10))));
evalcond[0]=((IkReal(-3.14159265358979))+(IKfmod(((IkReal(1.57079632679490))+(j8)), IkReal(6.28318530717959))));
evalcond[1]=((IkReal(0.190270440000000))+(((IkReal(-0.0368280000000000))*(sj10)))+(((IkReal(0.186480000000000))*(cj10)))+(((IkReal(-1.00000000000000))*(pp))));
evalcond[2]=x337;
evalcond[3]=x337;
if( IKabs(evalcond[0]) < 0.0000010000000000  && IKabs(evalcond[1]) < 0.0000010000000000  && IKabs(evalcond[2]) < 0.0000010000000000  && IKabs(evalcond[3]) < 0.0000010000000000  )
{
{
IkReal dummyeval[1];
IkReal gconst14;
gconst14=IKsign(((((IkReal(-1.00000000000000))*((px)*(px))))+(((IkReal(-1.00000000000000))*((py)*(py))))));
dummyeval[0]=((((IkReal(-1.00000000000000))*((px)*(px))))+(((IkReal(-1.00000000000000))*((py)*(py)))));
if( IKabs(dummyeval[0]) < 0.0000010000000000  )
{
{
IkReal dummyeval[1];
IkReal gconst15;
gconst15=IKsign(((((IkReal(3.00000000000000))*((py)*(py))))+(((IkReal(3.00000000000000))*((px)*(px))))));
dummyeval[0]=(((px)*(px))+((py)*(py)));
if( IKabs(dummyeval[0]) < 0.0000010000000000  )
{
continue;

} else
{
{
IkReal j7array[1], cj7array[1], sj7array[1];
bool j7valid[1]={false};
_nj7 = 1;
IkReal x338=((IkReal(50.0000000000000))*(pp));
IkReal x339=((IkReal(30.0000000000000))*(pz));
if( IKabs(((gconst15)*(((((IkReal(-1.00000000000000))*(px)*(x338)))+(((IkReal(0.423522000000000))*(px)))+(((px)*(x339))))))) < IKFAST_ATAN2_MAGTHRESH && IKabs(((gconst15)*(((((IkReal(-1.00000000000000))*(py)*(x339)))+(((py)*(x338)))+(((IkReal(-0.423522000000000))*(py))))))) < IKFAST_ATAN2_MAGTHRESH )
    continue;
j7array[0]=IKatan2(((gconst15)*(((((IkReal(-1.00000000000000))*(px)*(x338)))+(((IkReal(0.423522000000000))*(px)))+(((px)*(x339)))))), ((gconst15)*(((((IkReal(-1.00000000000000))*(py)*(x339)))+(((py)*(x338)))+(((IkReal(-0.423522000000000))*(py)))))));
sj7array[0]=IKsin(j7array[0]);
cj7array[0]=IKcos(j7array[0]);
if( j7array[0] > IKPI )
{
    j7array[0]-=IK2PI;
}
else if( j7array[0] < -IKPI )
{    j7array[0]+=IK2PI;
}
j7valid[0] = true;
for(int ij7 = 0; ij7 < 1; ++ij7)
{
if( !j7valid[ij7] )
{
    continue;
}
_ij7[0] = ij7; _ij7[1] = -1;
for(int iij7 = ij7+1; iij7 < 1; ++iij7)
{
if( j7valid[iij7] && IKabs(cj7array[ij7]-cj7array[iij7]) < IKFAST_SOLUTION_THRESH && IKabs(sj7array[ij7]-sj7array[iij7]) < IKFAST_SOLUTION_THRESH )
{
    j7valid[iij7]=false; _ij7[1] = iij7; break;
}
}
j7 = j7array[ij7]; cj7 = cj7array[ij7]; sj7 = sj7array[ij7];
{
IkReal evalcond[3];
IkReal x340=IKsin(j7);
IkReal x341=IKcos(j7);
IkReal x342=((IkReal(1.00000000000000))*(py));
IkReal x343=((px)*(x340));
evalcond[0]=((((IkReal(-1.00000000000000))*(px)*(x341)))+(((IkReal(-1.00000000000000))*(x340)*(x342))));
evalcond[1]=((IkReal(0.0300000000000000))+(((IkReal(-0.313800000000000))*(sj10)))+(x343)+(((IkReal(-1.00000000000000))*(x341)*(x342)))+(((IkReal(-0.0300000000000000))*(cj10))));
evalcond[2]=((IkReal(0.00847044000000000))+(((IkReal(0.600000000000000))*(pz)))+(((IkReal(-0.0600000000000000))*(x343)))+(((IkReal(-1.00000000000000))*(pp)))+(((IkReal(0.0600000000000000))*(py)*(x341))));
if( IKabs(evalcond[0]) > 0.000001  || IKabs(evalcond[1]) > 0.000001  || IKabs(evalcond[2]) > 0.000001  )
{
continue;
}
}

rotationfunction0(solutions);
}
}

}

}

} else
{
{
IkReal j7array[1], cj7array[1], sj7array[1];
bool j7valid[1]={false};
_nj7 = 1;
IkReal x344=((IkReal(0.0300000000000000))*(px));
IkReal x345=((IkReal(0.313800000000000))*(sj10));
IkReal x346=((IkReal(0.0300000000000000))*(py));
if( IKabs(((gconst14)*(((((IkReal(-1.00000000000000))*(px)*(x345)))+(x344)+(((IkReal(-1.00000000000000))*(cj10)*(x344))))))) < IKFAST_ATAN2_MAGTHRESH && IKabs(((gconst14)*(((((py)*(x345)))+(((cj10)*(x346)))+(((IkReal(-1.00000000000000))*(x346))))))) < IKFAST_ATAN2_MAGTHRESH )
    continue;
j7array[0]=IKatan2(((gconst14)*(((((IkReal(-1.00000000000000))*(px)*(x345)))+(x344)+(((IkReal(-1.00000000000000))*(cj10)*(x344)))))), ((gconst14)*(((((py)*(x345)))+(((cj10)*(x346)))+(((IkReal(-1.00000000000000))*(x346)))))));
sj7array[0]=IKsin(j7array[0]);
cj7array[0]=IKcos(j7array[0]);
if( j7array[0] > IKPI )
{
    j7array[0]-=IK2PI;
}
else if( j7array[0] < -IKPI )
{    j7array[0]+=IK2PI;
}
j7valid[0] = true;
for(int ij7 = 0; ij7 < 1; ++ij7)
{
if( !j7valid[ij7] )
{
    continue;
}
_ij7[0] = ij7; _ij7[1] = -1;
for(int iij7 = ij7+1; iij7 < 1; ++iij7)
{
if( j7valid[iij7] && IKabs(cj7array[ij7]-cj7array[iij7]) < IKFAST_SOLUTION_THRESH && IKabs(sj7array[ij7]-sj7array[iij7]) < IKFAST_SOLUTION_THRESH )
{
    j7valid[iij7]=false; _ij7[1] = iij7; break;
}
}
j7 = j7array[ij7]; cj7 = cj7array[ij7]; sj7 = sj7array[ij7];
{
IkReal evalcond[3];
IkReal x347=IKsin(j7);
IkReal x348=IKcos(j7);
IkReal x349=((IkReal(1.00000000000000))*(py));
IkReal x350=((px)*(x347));
evalcond[0]=((((IkReal(-1.00000000000000))*(px)*(x348)))+(((IkReal(-1.00000000000000))*(x347)*(x349))));
evalcond[1]=((IkReal(0.0300000000000000))+(((IkReal(-0.313800000000000))*(sj10)))+(((IkReal(-1.00000000000000))*(x348)*(x349)))+(x350)+(((IkReal(-0.0300000000000000))*(cj10))));
evalcond[2]=((IkReal(0.00847044000000000))+(((IkReal(-0.0600000000000000))*(x350)))+(((IkReal(0.600000000000000))*(pz)))+(((IkReal(-1.00000000000000))*(pp)))+(((IkReal(0.0600000000000000))*(py)*(x348))));
if( IKabs(evalcond[0]) > 0.000001  || IKabs(evalcond[1]) > 0.000001  || IKabs(evalcond[2]) > 0.000001  )
{
continue;
}
}

rotationfunction0(solutions);
}
}

}

}

} else
{
IkReal x351=((IkReal(0.0300000000000000))*(sj10));
IkReal x352=((IkReal(0.313800000000000))*(cj10));
evalcond[0]=((IkReal(-3.14159265358979))+(IKfmod(((IkReal(4.71238898038469))+(j8)), IkReal(6.28318530717959))));
evalcond[1]=((IkReal(0.190270440000000))+(((IkReal(-0.0368280000000000))*(sj10)))+(((IkReal(0.186480000000000))*(cj10)))+(((IkReal(-1.00000000000000))*(pp))));
evalcond[2]=((IkReal(0.300000000000000))+(((IkReal(-1.00000000000000))*(x351)))+(x352)+(pz));
evalcond[3]=((IkReal(-0.300000000000000))+(((IkReal(-1.00000000000000))*(x352)))+(x351)+(((IkReal(-1.00000000000000))*(pz))));
if( IKabs(evalcond[0]) < 0.0000010000000000  && IKabs(evalcond[1]) < 0.0000010000000000  && IKabs(evalcond[2]) < 0.0000010000000000  && IKabs(evalcond[3]) < 0.0000010000000000  )
{
{
IkReal dummyeval[1];
IkReal gconst16;
gconst16=IKsign((((px)*(px))+((py)*(py))));
dummyeval[0]=(((px)*(px))+((py)*(py)));
if( IKabs(dummyeval[0]) < 0.0000010000000000  )
{
{
IkReal dummyeval[1];
IkReal gconst17;
gconst17=IKsign(((((IkReal(-3.00000000000000))*((px)*(px))))+(((IkReal(-3.00000000000000))*((py)*(py))))));
dummyeval[0]=((((IkReal(-1.00000000000000))*((px)*(px))))+(((IkReal(-1.00000000000000))*((py)*(py)))));
if( IKabs(dummyeval[0]) < 0.0000010000000000  )
{
continue;

} else
{
{
IkReal j7array[1], cj7array[1], sj7array[1];
bool j7valid[1]={false};
_nj7 = 1;
IkReal x353=((IkReal(50.0000000000000))*(pp));
IkReal x354=((IkReal(30.0000000000000))*(pz));
if( IKabs(((gconst17)*(((((IkReal(0.423522000000000))*(px)))+(((IkReal(-1.00000000000000))*(px)*(x353)))+(((IkReal(-1.00000000000000))*(px)*(x354))))))) < IKFAST_ATAN2_MAGTHRESH && IKabs(((gconst17)*(((((py)*(x353)))+(((py)*(x354)))+(((IkReal(-0.423522000000000))*(py))))))) < IKFAST_ATAN2_MAGTHRESH )
    continue;
j7array[0]=IKatan2(((gconst17)*(((((IkReal(0.423522000000000))*(px)))+(((IkReal(-1.00000000000000))*(px)*(x353)))+(((IkReal(-1.00000000000000))*(px)*(x354)))))), ((gconst17)*(((((py)*(x353)))+(((py)*(x354)))+(((IkReal(-0.423522000000000))*(py)))))));
sj7array[0]=IKsin(j7array[0]);
cj7array[0]=IKcos(j7array[0]);
if( j7array[0] > IKPI )
{
    j7array[0]-=IK2PI;
}
else if( j7array[0] < -IKPI )
{    j7array[0]+=IK2PI;
}
j7valid[0] = true;
for(int ij7 = 0; ij7 < 1; ++ij7)
{
if( !j7valid[ij7] )
{
    continue;
}
_ij7[0] = ij7; _ij7[1] = -1;
for(int iij7 = ij7+1; iij7 < 1; ++iij7)
{
if( j7valid[iij7] && IKabs(cj7array[ij7]-cj7array[iij7]) < IKFAST_SOLUTION_THRESH && IKabs(sj7array[ij7]-sj7array[iij7]) < IKFAST_SOLUTION_THRESH )
{
    j7valid[iij7]=false; _ij7[1] = iij7; break;
}
}
j7 = j7array[ij7]; cj7 = cj7array[ij7]; sj7 = sj7array[ij7];
{
IkReal evalcond[3];
IkReal x355=IKcos(j7);
IkReal x356=IKsin(j7);
IkReal x357=((IkReal(1.00000000000000))*(x356));
IkReal x358=((py)*(x355));
evalcond[0]=((((IkReal(-1.00000000000000))*(px)*(x355)))+(((IkReal(-1.00000000000000))*(py)*(x357))));
evalcond[1]=((IkReal(0.0300000000000000))+(((IkReal(-0.313800000000000))*(sj10)))+(((IkReal(-1.00000000000000))*(px)*(x357)))+(x358)+(((IkReal(-0.0300000000000000))*(cj10))));
evalcond[2]=((IkReal(0.00847044000000000))+(((IkReal(-0.0600000000000000))*(x358)))+(((IkReal(0.0600000000000000))*(px)*(x356)))+(((IkReal(-0.600000000000000))*(pz)))+(((IkReal(-1.00000000000000))*(pp))));
if( IKabs(evalcond[0]) > 0.000001  || IKabs(evalcond[1]) > 0.000001  || IKabs(evalcond[2]) > 0.000001  )
{
continue;
}
}

rotationfunction0(solutions);
}
}

}

}

} else
{
{
IkReal j7array[1], cj7array[1], sj7array[1];
bool j7valid[1]={false};
_nj7 = 1;
IkReal x359=((IkReal(0.0300000000000000))*(px));
IkReal x360=((IkReal(0.313800000000000))*(sj10));
IkReal x361=((IkReal(0.0300000000000000))*(py));
if( IKabs(((gconst16)*(((x359)+(((IkReal(-1.00000000000000))*(cj10)*(x359)))+(((IkReal(-1.00000000000000))*(px)*(x360))))))) < IKFAST_ATAN2_MAGTHRESH && IKabs(((gconst16)*(((((IkReal(-1.00000000000000))*(x361)))+(((cj10)*(x361)))+(((py)*(x360))))))) < IKFAST_ATAN2_MAGTHRESH )
    continue;
j7array[0]=IKatan2(((gconst16)*(((x359)+(((IkReal(-1.00000000000000))*(cj10)*(x359)))+(((IkReal(-1.00000000000000))*(px)*(x360)))))), ((gconst16)*(((((IkReal(-1.00000000000000))*(x361)))+(((cj10)*(x361)))+(((py)*(x360)))))));
sj7array[0]=IKsin(j7array[0]);
cj7array[0]=IKcos(j7array[0]);
if( j7array[0] > IKPI )
{
    j7array[0]-=IK2PI;
}
else if( j7array[0] < -IKPI )
{    j7array[0]+=IK2PI;
}
j7valid[0] = true;
for(int ij7 = 0; ij7 < 1; ++ij7)
{
if( !j7valid[ij7] )
{
    continue;
}
_ij7[0] = ij7; _ij7[1] = -1;
for(int iij7 = ij7+1; iij7 < 1; ++iij7)
{
if( j7valid[iij7] && IKabs(cj7array[ij7]-cj7array[iij7]) < IKFAST_SOLUTION_THRESH && IKabs(sj7array[ij7]-sj7array[iij7]) < IKFAST_SOLUTION_THRESH )
{
    j7valid[iij7]=false; _ij7[1] = iij7; break;
}
}
j7 = j7array[ij7]; cj7 = cj7array[ij7]; sj7 = sj7array[ij7];
{
IkReal evalcond[3];
IkReal x362=IKcos(j7);
IkReal x363=IKsin(j7);
IkReal x364=((IkReal(1.00000000000000))*(x363));
IkReal x365=((py)*(x362));
evalcond[0]=((((IkReal(-1.00000000000000))*(px)*(x362)))+(((IkReal(-1.00000000000000))*(py)*(x364))));
evalcond[1]=((IkReal(0.0300000000000000))+(((IkReal(-0.313800000000000))*(sj10)))+(x365)+(((IkReal(-1.00000000000000))*(px)*(x364)))+(((IkReal(-0.0300000000000000))*(cj10))));
evalcond[2]=((IkReal(0.00847044000000000))+(((IkReal(-0.600000000000000))*(pz)))+(((IkReal(-1.00000000000000))*(pp)))+(((IkReal(0.0600000000000000))*(px)*(x363)))+(((IkReal(-0.0600000000000000))*(x365))));
if( IKabs(evalcond[0]) > 0.000001  || IKabs(evalcond[1]) > 0.000001  || IKabs(evalcond[2]) > 0.000001  )
{
continue;
}
}

rotationfunction0(solutions);
}
}

}

}

} else
{
IkReal x366=((IkReal(0.313800000000000))*(sj10));
IkReal x367=((IkReal(0.0300000000000000))*(cj10));
IkReal x368=((x366)+(x367));
evalcond[0]=((IkReal(-3.14159265358979))+(IKfmod(((IkReal(3.14159265358979))+(j8)), IkReal(6.28318530717959))));
evalcond[1]=((IkReal(0.190270440000000))+(((IkReal(-0.0368280000000000))*(sj10)))+(((IkReal(0.186480000000000))*(cj10)))+(((IkReal(-1.00000000000000))*(pp))));
evalcond[2]=((IkReal(-0.0300000000000000))+(x368)+(((IkReal(-1.00000000000000))*(pz))));
evalcond[3]=((IkReal(0.0300000000000000))+(((IkReal(-1.00000000000000))*(x368)))+(pz));
if( IKabs(evalcond[0]) < 0.0000010000000000  && IKabs(evalcond[1]) < 0.0000010000000000  && IKabs(evalcond[2]) < 0.0000010000000000  && IKabs(evalcond[3]) < 0.0000010000000000  )
{
{
IkReal dummyeval[1];
IkReal gconst18;
gconst18=IKsign(((((IkReal(-1.00000000000000))*((px)*(px))))+(((IkReal(-1.00000000000000))*((py)*(py))))));
dummyeval[0]=((((IkReal(-1.00000000000000))*((px)*(px))))+(((IkReal(-1.00000000000000))*((py)*(py)))));
if( IKabs(dummyeval[0]) < 0.0000010000000000  )
{
{
IkReal dummyeval[1];
IkReal gconst19;
gconst19=IKsign(((((IkReal(3.00000000000000))*((py)*(py))))+(((IkReal(3.00000000000000))*((px)*(px))))));
dummyeval[0]=(((px)*(px))+((py)*(py)));
if( IKabs(dummyeval[0]) < 0.0000010000000000  )
{
continue;

} else
{
{
IkReal j7array[1], cj7array[1], sj7array[1];
bool j7valid[1]={false};
_nj7 = 1;
IkReal x369=((IkReal(5.00000000000000))*(pp));
IkReal x370=((IkReal(0.300000000000000))*(pz));
if( IKabs(((gconst19)*(((((IkReal(0.0423522000000000))*(px)))+(((IkReal(-1.00000000000000))*(px)*(x369)))+(((IkReal(-1.00000000000000))*(px)*(x370))))))) < IKFAST_ATAN2_MAGTHRESH && IKabs(((gconst19)*(((((IkReal(-0.0423522000000000))*(py)))+(((py)*(x369)))+(((py)*(x370))))))) < IKFAST_ATAN2_MAGTHRESH )
    continue;
j7array[0]=IKatan2(((gconst19)*(((((IkReal(0.0423522000000000))*(px)))+(((IkReal(-1.00000000000000))*(px)*(x369)))+(((IkReal(-1.00000000000000))*(px)*(x370)))))), ((gconst19)*(((((IkReal(-0.0423522000000000))*(py)))+(((py)*(x369)))+(((py)*(x370)))))));
sj7array[0]=IKsin(j7array[0]);
cj7array[0]=IKcos(j7array[0]);
if( j7array[0] > IKPI )
{
    j7array[0]-=IK2PI;
}
else if( j7array[0] < -IKPI )
{    j7array[0]+=IK2PI;
}
j7valid[0] = true;
for(int ij7 = 0; ij7 < 1; ++ij7)
{
if( !j7valid[ij7] )
{
    continue;
}
_ij7[0] = ij7; _ij7[1] = -1;
for(int iij7 = ij7+1; iij7 < 1; ++iij7)
{
if( j7valid[iij7] && IKabs(cj7array[ij7]-cj7array[iij7]) < IKFAST_SOLUTION_THRESH && IKabs(sj7array[ij7]-sj7array[iij7]) < IKFAST_SOLUTION_THRESH )
{
    j7valid[iij7]=false; _ij7[1] = iij7; break;
}
}
j7 = j7array[ij7]; cj7 = cj7array[ij7]; sj7 = sj7array[ij7];
{
IkReal evalcond[3];
IkReal x371=IKsin(j7);
IkReal x372=IKcos(j7);
IkReal x373=((px)*(x371));
IkReal x374=((IkReal(1.00000000000000))*(x372));
evalcond[0]=((((IkReal(-1.00000000000000))*(py)*(x371)))+(((IkReal(-1.00000000000000))*(px)*(x374))));
evalcond[1]=((IkReal(0.300000000000000))+(((IkReal(-0.0300000000000000))*(sj10)))+(x373)+(((IkReal(-1.00000000000000))*(py)*(x374)))+(((IkReal(0.313800000000000))*(cj10))));
evalcond[2]=((IkReal(0.00847044000000000))+(((IkReal(-0.600000000000000))*(x373)))+(((IkReal(-1.00000000000000))*(pp)))+(((IkReal(-0.0600000000000000))*(pz)))+(((IkReal(0.600000000000000))*(py)*(x372))));
if( IKabs(evalcond[0]) > 0.000001  || IKabs(evalcond[1]) > 0.000001  || IKabs(evalcond[2]) > 0.000001  )
{
continue;
}
}

rotationfunction0(solutions);
}
}

}

}

} else
{
{
IkReal j7array[1], cj7array[1], sj7array[1];
bool j7valid[1]={false};
_nj7 = 1;
IkReal x375=((IkReal(0.0300000000000000))*(sj10));
IkReal x376=((IkReal(0.313800000000000))*(cj10));
if( IKabs(((gconst18)*(((((IkReal(0.300000000000000))*(px)))+(((px)*(x376)))+(((IkReal(-1.00000000000000))*(px)*(x375))))))) < IKFAST_ATAN2_MAGTHRESH && IKabs(((gconst18)*(((((IkReal(-0.300000000000000))*(py)))+(((py)*(x375)))+(((IkReal(-1.00000000000000))*(py)*(x376))))))) < IKFAST_ATAN2_MAGTHRESH )
    continue;
j7array[0]=IKatan2(((gconst18)*(((((IkReal(0.300000000000000))*(px)))+(((px)*(x376)))+(((IkReal(-1.00000000000000))*(px)*(x375)))))), ((gconst18)*(((((IkReal(-0.300000000000000))*(py)))+(((py)*(x375)))+(((IkReal(-1.00000000000000))*(py)*(x376)))))));
sj7array[0]=IKsin(j7array[0]);
cj7array[0]=IKcos(j7array[0]);
if( j7array[0] > IKPI )
{
    j7array[0]-=IK2PI;
}
else if( j7array[0] < -IKPI )
{    j7array[0]+=IK2PI;
}
j7valid[0] = true;
for(int ij7 = 0; ij7 < 1; ++ij7)
{
if( !j7valid[ij7] )
{
    continue;
}
_ij7[0] = ij7; _ij7[1] = -1;
for(int iij7 = ij7+1; iij7 < 1; ++iij7)
{
if( j7valid[iij7] && IKabs(cj7array[ij7]-cj7array[iij7]) < IKFAST_SOLUTION_THRESH && IKabs(sj7array[ij7]-sj7array[iij7]) < IKFAST_SOLUTION_THRESH )
{
    j7valid[iij7]=false; _ij7[1] = iij7; break;
}
}
j7 = j7array[ij7]; cj7 = cj7array[ij7]; sj7 = sj7array[ij7];
{
IkReal evalcond[3];
IkReal x377=IKsin(j7);
IkReal x378=IKcos(j7);
IkReal x379=((px)*(x377));
IkReal x380=((IkReal(1.00000000000000))*(x378));
evalcond[0]=((((IkReal(-1.00000000000000))*(py)*(x377)))+(((IkReal(-1.00000000000000))*(px)*(x380))));
evalcond[1]=((IkReal(0.300000000000000))+(((IkReal(-1.00000000000000))*(py)*(x380)))+(((IkReal(-0.0300000000000000))*(sj10)))+(x379)+(((IkReal(0.313800000000000))*(cj10))));
evalcond[2]=((IkReal(0.00847044000000000))+(((IkReal(-0.600000000000000))*(x379)))+(((IkReal(-1.00000000000000))*(pp)))+(((IkReal(-0.0600000000000000))*(pz)))+(((IkReal(0.600000000000000))*(py)*(x378))));
if( IKabs(evalcond[0]) > 0.000001  || IKabs(evalcond[1]) > 0.000001  || IKabs(evalcond[2]) > 0.000001  )
{
continue;
}
}

rotationfunction0(solutions);
}
}

}

}

} else
{
IkReal x381=((IkReal(0.0300000000000000))+(((IkReal(-0.313800000000000))*(sj10)))+(((IkReal(-1.00000000000000))*(pz)))+(((IkReal(-0.0300000000000000))*(cj10))));
evalcond[0]=((IkReal(-3.14159265358979))+(IKfmod(((IkReal(1.11022302462516e-16))+(j8)), IkReal(6.28318530717959))));
evalcond[1]=((IkReal(0.190270440000000))+(((IkReal(-0.0368280000000000))*(sj10)))+(((IkReal(0.186480000000000))*(cj10)))+(((IkReal(-1.00000000000000))*(pp))));
evalcond[2]=x381;
evalcond[3]=x381;
if( IKabs(evalcond[0]) < 0.0000010000000000  && IKabs(evalcond[1]) < 0.0000010000000000  && IKabs(evalcond[2]) < 0.0000010000000000  && IKabs(evalcond[3]) < 0.0000010000000000  )
{
{
IkReal dummyeval[1];
IkReal gconst20;
gconst20=IKsign((((px)*(px))+((py)*(py))));
dummyeval[0]=(((px)*(px))+((py)*(py)));
if( IKabs(dummyeval[0]) < 0.0000010000000000  )
{
{
IkReal dummyeval[1];
IkReal gconst21;
gconst21=IKsign(((((IkReal(-3.00000000000000))*((px)*(px))))+(((IkReal(-3.00000000000000))*((py)*(py))))));
dummyeval[0]=((((IkReal(-1.00000000000000))*((px)*(px))))+(((IkReal(-1.00000000000000))*((py)*(py)))));
if( IKabs(dummyeval[0]) < 0.0000010000000000  )
{
continue;

} else
{
{
IkReal j7array[1], cj7array[1], sj7array[1];
bool j7valid[1]={false};
_nj7 = 1;
IkReal x382=((IkReal(5.00000000000000))*(pp));
IkReal x383=((IkReal(0.300000000000000))*(pz));
if( IKabs(((gconst21)*(((((px)*(x383)))+(((IkReal(0.0423522000000000))*(px)))+(((IkReal(-1.00000000000000))*(px)*(x382))))))) < IKFAST_ATAN2_MAGTHRESH && IKabs(((gconst21)*(((((IkReal(-1.00000000000000))*(py)*(x383)))+(((IkReal(-0.0423522000000000))*(py)))+(((py)*(x382))))))) < IKFAST_ATAN2_MAGTHRESH )
    continue;
j7array[0]=IKatan2(((gconst21)*(((((px)*(x383)))+(((IkReal(0.0423522000000000))*(px)))+(((IkReal(-1.00000000000000))*(px)*(x382)))))), ((gconst21)*(((((IkReal(-1.00000000000000))*(py)*(x383)))+(((IkReal(-0.0423522000000000))*(py)))+(((py)*(x382)))))));
sj7array[0]=IKsin(j7array[0]);
cj7array[0]=IKcos(j7array[0]);
if( j7array[0] > IKPI )
{
    j7array[0]-=IK2PI;
}
else if( j7array[0] < -IKPI )
{    j7array[0]+=IK2PI;
}
j7valid[0] = true;
for(int ij7 = 0; ij7 < 1; ++ij7)
{
if( !j7valid[ij7] )
{
    continue;
}
_ij7[0] = ij7; _ij7[1] = -1;
for(int iij7 = ij7+1; iij7 < 1; ++iij7)
{
if( j7valid[iij7] && IKabs(cj7array[ij7]-cj7array[iij7]) < IKFAST_SOLUTION_THRESH && IKabs(sj7array[ij7]-sj7array[iij7]) < IKFAST_SOLUTION_THRESH )
{
    j7valid[iij7]=false; _ij7[1] = iij7; break;
}
}
j7 = j7array[ij7]; cj7 = cj7array[ij7]; sj7 = sj7array[ij7];
{
IkReal evalcond[3];
IkReal x384=IKcos(j7);
IkReal x385=IKsin(j7);
IkReal x386=((px)*(x385));
IkReal x387=((py)*(x384));
evalcond[0]=((((IkReal(-1.00000000000000))*(px)*(x384)))+(((IkReal(-1.00000000000000))*(py)*(x385))));
evalcond[1]=((IkReal(0.300000000000000))+(((IkReal(-0.0300000000000000))*(sj10)))+(x387)+(((IkReal(-1.00000000000000))*(x386)))+(((IkReal(0.313800000000000))*(cj10))));
evalcond[2]=((IkReal(0.00847044000000000))+(((IkReal(-1.00000000000000))*(pp)))+(((IkReal(0.600000000000000))*(x386)))+(((IkReal(-0.600000000000000))*(x387)))+(((IkReal(0.0600000000000000))*(pz))));
if( IKabs(evalcond[0]) > 0.000001  || IKabs(evalcond[1]) > 0.000001  || IKabs(evalcond[2]) > 0.000001  )
{
continue;
}
}

rotationfunction0(solutions);
}
}

}

}

} else
{
{
IkReal j7array[1], cj7array[1], sj7array[1];
bool j7valid[1]={false};
_nj7 = 1;
IkReal x388=((IkReal(0.0300000000000000))*(sj10));
IkReal x389=((IkReal(0.313800000000000))*(cj10));
if( IKabs(((gconst20)*(((((px)*(x389)))+(((IkReal(0.300000000000000))*(px)))+(((IkReal(-1.00000000000000))*(px)*(x388))))))) < IKFAST_ATAN2_MAGTHRESH && IKabs(((gconst20)*(((((IkReal(-1.00000000000000))*(py)*(x389)))+(((IkReal(-0.300000000000000))*(py)))+(((py)*(x388))))))) < IKFAST_ATAN2_MAGTHRESH )
    continue;
j7array[0]=IKatan2(((gconst20)*(((((px)*(x389)))+(((IkReal(0.300000000000000))*(px)))+(((IkReal(-1.00000000000000))*(px)*(x388)))))), ((gconst20)*(((((IkReal(-1.00000000000000))*(py)*(x389)))+(((IkReal(-0.300000000000000))*(py)))+(((py)*(x388)))))));
sj7array[0]=IKsin(j7array[0]);
cj7array[0]=IKcos(j7array[0]);
if( j7array[0] > IKPI )
{
    j7array[0]-=IK2PI;
}
else if( j7array[0] < -IKPI )
{    j7array[0]+=IK2PI;
}
j7valid[0] = true;
for(int ij7 = 0; ij7 < 1; ++ij7)
{
if( !j7valid[ij7] )
{
    continue;
}
_ij7[0] = ij7; _ij7[1] = -1;
for(int iij7 = ij7+1; iij7 < 1; ++iij7)
{
if( j7valid[iij7] && IKabs(cj7array[ij7]-cj7array[iij7]) < IKFAST_SOLUTION_THRESH && IKabs(sj7array[ij7]-sj7array[iij7]) < IKFAST_SOLUTION_THRESH )
{
    j7valid[iij7]=false; _ij7[1] = iij7; break;
}
}
j7 = j7array[ij7]; cj7 = cj7array[ij7]; sj7 = sj7array[ij7];
{
IkReal evalcond[3];
IkReal x390=IKcos(j7);
IkReal x391=IKsin(j7);
IkReal x392=((px)*(x391));
IkReal x393=((py)*(x390));
evalcond[0]=((((IkReal(-1.00000000000000))*(py)*(x391)))+(((IkReal(-1.00000000000000))*(px)*(x390))));
evalcond[1]=((IkReal(0.300000000000000))+(((IkReal(-1.00000000000000))*(x392)))+(((IkReal(-0.0300000000000000))*(sj10)))+(x393)+(((IkReal(0.313800000000000))*(cj10))));
evalcond[2]=((IkReal(0.00847044000000000))+(((IkReal(0.600000000000000))*(x392)))+(((IkReal(-0.600000000000000))*(x393)))+(((IkReal(-1.00000000000000))*(pp)))+(((IkReal(0.0600000000000000))*(pz))));
if( IKabs(evalcond[0]) > 0.000001  || IKabs(evalcond[1]) > 0.000001  || IKabs(evalcond[2]) > 0.000001  )
{
continue;
}
}

rotationfunction0(solutions);
}
}

}

}

} else
{
if( 1 )
{
continue;

} else
{
}
}
}
}
}
}

} else
{
{
IkReal j7array[1], cj7array[1], sj7array[1];
bool j7valid[1]={false};
_nj7 = 1;
IkReal x394=((pz)*(sj8));
IkReal x395=((IkReal(0.0300000000000000))*(sj10));
IkReal x396=((IkReal(0.313800000000000))*(cj10));
if( IKabs(((gconst13)*(((((IkReal(-0.300000000000000))*(px)))+(((px)*(x394)))+(((px)*(x395)))+(((IkReal(-1.00000000000000))*(px)*(x396))))))) < IKFAST_ATAN2_MAGTHRESH && IKabs(((gconst13)*(((((IkReal(-1.00000000000000))*(py)*(x394)))+(((IkReal(0.300000000000000))*(py)))+(((py)*(x396)))+(((IkReal(-1.00000000000000))*(py)*(x395))))))) < IKFAST_ATAN2_MAGTHRESH )
    continue;
j7array[0]=IKatan2(((gconst13)*(((((IkReal(-0.300000000000000))*(px)))+(((px)*(x394)))+(((px)*(x395)))+(((IkReal(-1.00000000000000))*(px)*(x396)))))), ((gconst13)*(((((IkReal(-1.00000000000000))*(py)*(x394)))+(((IkReal(0.300000000000000))*(py)))+(((py)*(x396)))+(((IkReal(-1.00000000000000))*(py)*(x395)))))));
sj7array[0]=IKsin(j7array[0]);
cj7array[0]=IKcos(j7array[0]);
if( j7array[0] > IKPI )
{
    j7array[0]-=IK2PI;
}
else if( j7array[0] < -IKPI )
{    j7array[0]+=IK2PI;
}
j7valid[0] = true;
for(int ij7 = 0; ij7 < 1; ++ij7)
{
if( !j7valid[ij7] )
{
    continue;
}
_ij7[0] = ij7; _ij7[1] = -1;
for(int iij7 = ij7+1; iij7 < 1; ++iij7)
{
if( j7valid[iij7] && IKabs(cj7array[ij7]-cj7array[iij7]) < IKFAST_SOLUTION_THRESH && IKabs(sj7array[ij7]-sj7array[iij7]) < IKFAST_SOLUTION_THRESH )
{
    j7valid[iij7]=false; _ij7[1] = iij7; break;
}
}
j7 = j7array[ij7]; cj7 = cj7array[ij7]; sj7 = sj7array[ij7];
{
IkReal evalcond[5];
IkReal x397=IKsin(j7);
IkReal x398=IKcos(j7);
IkReal x399=((IkReal(0.0300000000000000))*(sj8));
IkReal x400=((IkReal(0.0600000000000000))*(sj8));
IkReal x401=((IkReal(0.600000000000000))*(cj8));
IkReal x402=((cj8)*(pz));
IkReal x403=((IkReal(0.313800000000000))*(sj10));
IkReal x404=((IkReal(0.0300000000000000))*(sj10));
IkReal x405=((IkReal(0.313800000000000))*(cj10));
IkReal x406=((pz)*(sj8));
IkReal x407=((py)*(x398));
IkReal x408=((px)*(x397));
IkReal x409=((IkReal(1.00000000000000))*(x407));
evalcond[0]=((((IkReal(-1.00000000000000))*(py)*(x397)))+(((IkReal(-1.00000000000000))*(px)*(x398))));
evalcond[1]=((IkReal(0.300000000000000))+(((IkReal(-1.00000000000000))*(cj8)*(x409)))+(x405)+(((cj8)*(x408)))+(((IkReal(-1.00000000000000))*(x406)))+(((IkReal(-1.00000000000000))*(x404))));
evalcond[2]=((IkReal(0.0300000000000000))+(((sj8)*(x408)))+(x402)+(((IkReal(-1.00000000000000))*(sj8)*(x409)))+(((IkReal(-1.00000000000000))*(x403)))+(((IkReal(-0.0300000000000000))*(cj10))));
evalcond[3]=((((IkReal(-1.00000000000000))*(cj8)*(x404)))+(((IkReal(-1.00000000000000))*(cj10)*(x399)))+(x399)+(x408)+(((IkReal(-1.00000000000000))*(sj8)*(x403)))+(((cj8)*(x405)))+(((IkReal(0.300000000000000))*(cj8)))+(((IkReal(-1.00000000000000))*(x409))));
evalcond[4]=((IkReal(0.00847044000000000))+(((IkReal(-0.0600000000000000))*(x402)))+(((IkReal(-1.00000000000000))*(x401)*(x408)))+(((IkReal(-1.00000000000000))*(pp)))+(((IkReal(-1.00000000000000))*(x400)*(x408)))+(((IkReal(0.600000000000000))*(x406)))+(((x400)*(x407)))+(((x401)*(x407))));
if( IKabs(evalcond[0]) > 0.000001  || IKabs(evalcond[1]) > 0.000001  || IKabs(evalcond[2]) > 0.000001  || IKabs(evalcond[3]) > 0.000001  || IKabs(evalcond[4]) > 0.000001  )
{
continue;
}
}

rotationfunction0(solutions);
}
}

}

}

} else
{
{
IkReal j7array[1], cj7array[1], sj7array[1];
bool j7valid[1]={false};
_nj7 = 1;
IkReal x410=((IkReal(0.0300000000000000))*(px));
IkReal x411=((cj8)*(pz));
IkReal x412=((IkReal(0.313800000000000))*(sj10));
IkReal x413=((IkReal(0.0300000000000000))*(py));
if( IKabs(((gconst12)*(((((px)*(x412)))+(((IkReal(-1.00000000000000))*(px)*(x411)))+(((IkReal(-1.00000000000000))*(x410)))+(((cj10)*(x410))))))) < IKFAST_ATAN2_MAGTHRESH && IKabs(((gconst12)*(((((py)*(x411)))+(((IkReal(-1.00000000000000))*(cj10)*(x413)))+(x413)+(((IkReal(-1.00000000000000))*(py)*(x412))))))) < IKFAST_ATAN2_MAGTHRESH )
    continue;
j7array[0]=IKatan2(((gconst12)*(((((px)*(x412)))+(((IkReal(-1.00000000000000))*(px)*(x411)))+(((IkReal(-1.00000000000000))*(x410)))+(((cj10)*(x410)))))), ((gconst12)*(((((py)*(x411)))+(((IkReal(-1.00000000000000))*(cj10)*(x413)))+(x413)+(((IkReal(-1.00000000000000))*(py)*(x412)))))));
sj7array[0]=IKsin(j7array[0]);
cj7array[0]=IKcos(j7array[0]);
if( j7array[0] > IKPI )
{
    j7array[0]-=IK2PI;
}
else if( j7array[0] < -IKPI )
{    j7array[0]+=IK2PI;
}
j7valid[0] = true;
for(int ij7 = 0; ij7 < 1; ++ij7)
{
if( !j7valid[ij7] )
{
    continue;
}
_ij7[0] = ij7; _ij7[1] = -1;
for(int iij7 = ij7+1; iij7 < 1; ++iij7)
{
if( j7valid[iij7] && IKabs(cj7array[ij7]-cj7array[iij7]) < IKFAST_SOLUTION_THRESH && IKabs(sj7array[ij7]-sj7array[iij7]) < IKFAST_SOLUTION_THRESH )
{
    j7valid[iij7]=false; _ij7[1] = iij7; break;
}
}
j7 = j7array[ij7]; cj7 = cj7array[ij7]; sj7 = sj7array[ij7];
{
IkReal evalcond[5];
IkReal x414=IKsin(j7);
IkReal x415=IKcos(j7);
IkReal x416=((IkReal(0.0300000000000000))*(sj8));
IkReal x417=((IkReal(0.0600000000000000))*(sj8));
IkReal x418=((IkReal(0.600000000000000))*(cj8));
IkReal x419=((cj8)*(pz));
IkReal x420=((IkReal(0.313800000000000))*(sj10));
IkReal x421=((IkReal(0.0300000000000000))*(sj10));
IkReal x422=((IkReal(0.313800000000000))*(cj10));
IkReal x423=((pz)*(sj8));
IkReal x424=((py)*(x415));
IkReal x425=((px)*(x414));
IkReal x426=((IkReal(1.00000000000000))*(x424));
evalcond[0]=((((IkReal(-1.00000000000000))*(py)*(x414)))+(((IkReal(-1.00000000000000))*(px)*(x415))));
evalcond[1]=((IkReal(0.300000000000000))+(((IkReal(-1.00000000000000))*(x423)))+(((cj8)*(x425)))+(((IkReal(-1.00000000000000))*(x421)))+(((IkReal(-1.00000000000000))*(cj8)*(x426)))+(x422));
evalcond[2]=((IkReal(0.0300000000000000))+(((sj8)*(x425)))+(((IkReal(-1.00000000000000))*(x420)))+(((IkReal(-1.00000000000000))*(sj8)*(x426)))+(x419)+(((IkReal(-0.0300000000000000))*(cj10))));
evalcond[3]=((((cj8)*(x422)))+(((IkReal(-1.00000000000000))*(x426)))+(((IkReal(-1.00000000000000))*(cj8)*(x421)))+(((IkReal(-1.00000000000000))*(sj8)*(x420)))+(((IkReal(-1.00000000000000))*(cj10)*(x416)))+(x416)+(x425)+(((IkReal(0.300000000000000))*(cj8))));
evalcond[4]=((IkReal(0.00847044000000000))+(((IkReal(-0.0600000000000000))*(x419)))+(((x418)*(x424)))+(((IkReal(-1.00000000000000))*(pp)))+(((IkReal(-1.00000000000000))*(x417)*(x425)))+(((IkReal(0.600000000000000))*(x423)))+(((IkReal(-1.00000000000000))*(x418)*(x425)))+(((x417)*(x424))));
if( IKabs(evalcond[0]) > 0.000001  || IKabs(evalcond[1]) > 0.000001  || IKabs(evalcond[2]) > 0.000001  || IKabs(evalcond[3]) > 0.000001  || IKabs(evalcond[4]) > 0.000001  )
{
continue;
}
}

rotationfunction0(solutions);
}
}

}

}

} else
{
IkReal x427=((IkReal(0.0300000000000000))*(sj9));
evalcond[0]=((IkReal(-3.14159265358979))+(IKfmod(((IkReal(3.14159265358979))+(j8)), IkReal(6.28318530717959))));
evalcond[1]=((IkReal(0.190270440000000))+(((IkReal(-0.0368280000000000))*(sj10)))+(((IkReal(0.186480000000000))*(cj10)))+(((IkReal(-1.00000000000000))*(pp))));
evalcond[2]=((((IkReal(-0.313800000000000))*(sj10)*(sj9)))+(((IkReal(-1.00000000000000))*(pz)))+(x427)+(((IkReal(-1.00000000000000))*(cj10)*(x427))));
if( IKabs(evalcond[0]) < 0.0000010000000000  && IKabs(evalcond[1]) < 0.0000010000000000  && IKabs(evalcond[2]) < 0.0000010000000000  )
{
{
IkReal dummyeval[1];
IkReal gconst22;
gconst22=IKsign(((((sj9)*((px)*(px))))+(((sj9)*((py)*(py))))));
dummyeval[0]=((((sj9)*((px)*(px))))+(((sj9)*((py)*(py)))));
if( IKabs(dummyeval[0]) < 0.0000010000000000  )
{
{
IkReal dummyeval[1];
IkReal gconst23;
gconst23=IKsign((((px)*(px))+((py)*(py))));
dummyeval[0]=(((px)*(px))+((py)*(py)));
if( IKabs(dummyeval[0]) < 0.0000010000000000  )
{
{
IkReal evalcond[4];
IkReal x428=((IkReal(-1.00000000000000))*(pz));
evalcond[0]=((IkReal(-3.14159265358979))+(IKfmod(((IkReal(3.14159265358979))+(j9)), IkReal(6.28318530717959))));
evalcond[1]=((IkReal(0.190270440000000))+(((IkReal(-0.0368280000000000))*(sj10)))+(((IkReal(0.186480000000000))*(cj10)))+(((IkReal(-1.00000000000000))*(pp))));
evalcond[2]=x428;
evalcond[3]=x428;
if( IKabs(evalcond[0]) < 0.0000010000000000  && IKabs(evalcond[1]) < 0.0000010000000000  && IKabs(evalcond[2]) < 0.0000010000000000  && IKabs(evalcond[3]) < 0.0000010000000000  )
{
{
IkReal dummyeval[1];
IkReal gconst24;
gconst24=IKsign((((px)*(px))+((py)*(py))));
dummyeval[0]=(((px)*(px))+((py)*(py)));
if( IKabs(dummyeval[0]) < 0.0000010000000000  )
{
{
IkReal dummyeval[1];
IkReal gconst25;
gconst25=IKsign(((((IkReal(-0.0600000000000000))*((px)*(px))))+(((IkReal(-0.0600000000000000))*((py)*(py))))));
dummyeval[0]=((((IkReal(-1.00000000000000))*((px)*(px))))+(((IkReal(-1.00000000000000))*((py)*(py)))));
if( IKabs(dummyeval[0]) < 0.0000010000000000  )
{
continue;

} else
{
{
IkReal j7array[1], cj7array[1], sj7array[1];
bool j7valid[1]={false};
_nj7 = 1;
IkReal x429=((cj10)*(py));
IkReal x430=((IkReal(1.00000000000000))*(pp));
IkReal x431=((px)*(sj10));
IkReal x432=((cj10)*(px));
IkReal x433=((IkReal(0.0180000000000000))*(py));
if( IKabs(((gconst25)*(((((IkReal(0.188280000000000))*(x429)))+(((IkReal(0.0180000000000000))*(px)))+(((IkReal(-1.00000000000000))*(sj10)*(x433)))+(((IkReal(-0.00180000000000000))*(x431)))+(((IkReal(-1.00000000000000))*(py)*(x430)))+(((IkReal(0.188470440000000))*(py)))+(((IkReal(0.0188280000000000))*(x432))))))) < IKFAST_ATAN2_MAGTHRESH && IKabs(((gconst25)*(((((IkReal(0.00180000000000000))*(py)*(sj10)))+(((IkReal(-1.00000000000000))*(x433)))+(((IkReal(0.188280000000000))*(x432)))+(((IkReal(-0.0188280000000000))*(x429)))+(((IkReal(-0.0180000000000000))*(x431)))+(((IkReal(0.188470440000000))*(px)))+(((IkReal(-1.00000000000000))*(px)*(x430))))))) < IKFAST_ATAN2_MAGTHRESH )
    continue;
j7array[0]=IKatan2(((gconst25)*(((((IkReal(0.188280000000000))*(x429)))+(((IkReal(0.0180000000000000))*(px)))+(((IkReal(-1.00000000000000))*(sj10)*(x433)))+(((IkReal(-0.00180000000000000))*(x431)))+(((IkReal(-1.00000000000000))*(py)*(x430)))+(((IkReal(0.188470440000000))*(py)))+(((IkReal(0.0188280000000000))*(x432)))))), ((gconst25)*(((((IkReal(0.00180000000000000))*(py)*(sj10)))+(((IkReal(-1.00000000000000))*(x433)))+(((IkReal(0.188280000000000))*(x432)))+(((IkReal(-0.0188280000000000))*(x429)))+(((IkReal(-0.0180000000000000))*(x431)))+(((IkReal(0.188470440000000))*(px)))+(((IkReal(-1.00000000000000))*(px)*(x430)))))));
sj7array[0]=IKsin(j7array[0]);
cj7array[0]=IKcos(j7array[0]);
if( j7array[0] > IKPI )
{
    j7array[0]-=IK2PI;
}
else if( j7array[0] < -IKPI )
{    j7array[0]+=IK2PI;
}
j7valid[0] = true;
for(int ij7 = 0; ij7 < 1; ++ij7)
{
if( !j7valid[ij7] )
{
    continue;
}
_ij7[0] = ij7; _ij7[1] = -1;
for(int iij7 = ij7+1; iij7 < 1; ++iij7)
{
if( j7valid[iij7] && IKabs(cj7array[ij7]-cj7array[iij7]) < IKFAST_SOLUTION_THRESH && IKabs(sj7array[ij7]-sj7array[iij7]) < IKFAST_SOLUTION_THRESH )
{
    j7valid[iij7]=false; _ij7[1] = iij7; break;
}
}
j7 = j7array[ij7]; cj7 = cj7array[ij7]; sj7 = sj7array[ij7];
{
IkReal evalcond[3];
IkReal x434=IKsin(j7);
IkReal x435=IKcos(j7);
IkReal x436=((px)*(x434));
IkReal x437=((IkReal(1.00000000000000))*(x435));
IkReal x438=((py)*(x434));
evalcond[0]=((IkReal(0.0300000000000000))+(((IkReal(-0.313800000000000))*(sj10)))+(((IkReal(-1.00000000000000))*(x438)))+(((IkReal(-0.0300000000000000))*(cj10)))+(((IkReal(-1.00000000000000))*(px)*(x437))));
evalcond[1]=((IkReal(0.300000000000000))+(((IkReal(-0.0300000000000000))*(sj10)))+(x436)+(((IkReal(-1.00000000000000))*(py)*(x437)))+(((IkReal(0.313800000000000))*(cj10))));
evalcond[2]=((IkReal(0.00847044000000000))+(((IkReal(-0.600000000000000))*(x436)))+(((IkReal(-1.00000000000000))*(pp)))+(((IkReal(0.0600000000000000))*(x438)))+(((IkReal(0.600000000000000))*(py)*(x435)))+(((IkReal(0.0600000000000000))*(px)*(x435))));
if( IKabs(evalcond[0]) > 0.000001  || IKabs(evalcond[1]) > 0.000001  || IKabs(evalcond[2]) > 0.000001  )
{
continue;
}
}

rotationfunction0(solutions);
}
}

}

}

} else
{
{
IkReal j7array[1], cj7array[1], sj7array[1];
bool j7valid[1]={false};
_nj7 = 1;
IkReal x439=((IkReal(0.0300000000000000))*(px));
IkReal x440=((IkReal(0.313800000000000))*(px));
IkReal x441=((IkReal(0.0300000000000000))*(py));
IkReal x442=((IkReal(0.313800000000000))*(py));
if( IKabs(((gconst24)*(((((IkReal(-0.300000000000000))*(px)))+(((IkReal(-1.00000000000000))*(sj10)*(x442)))+(((sj10)*(x439)))+(((IkReal(-1.00000000000000))*(cj10)*(x440)))+(((IkReal(-1.00000000000000))*(cj10)*(x441)))+(x441))))) < IKFAST_ATAN2_MAGTHRESH && IKabs(((gconst24)*(((((cj10)*(x442)))+(((IkReal(-1.00000000000000))*(sj10)*(x440)))+(((IkReal(-1.00000000000000))*(sj10)*(x441)))+(((IkReal(0.300000000000000))*(py)))+(((IkReal(-1.00000000000000))*(cj10)*(x439)))+(x439))))) < IKFAST_ATAN2_MAGTHRESH )
    continue;
j7array[0]=IKatan2(((gconst24)*(((((IkReal(-0.300000000000000))*(px)))+(((IkReal(-1.00000000000000))*(sj10)*(x442)))+(((sj10)*(x439)))+(((IkReal(-1.00000000000000))*(cj10)*(x440)))+(((IkReal(-1.00000000000000))*(cj10)*(x441)))+(x441)))), ((gconst24)*(((((cj10)*(x442)))+(((IkReal(-1.00000000000000))*(sj10)*(x440)))+(((IkReal(-1.00000000000000))*(sj10)*(x441)))+(((IkReal(0.300000000000000))*(py)))+(((IkReal(-1.00000000000000))*(cj10)*(x439)))+(x439)))));
sj7array[0]=IKsin(j7array[0]);
cj7array[0]=IKcos(j7array[0]);
if( j7array[0] > IKPI )
{
    j7array[0]-=IK2PI;
}
else if( j7array[0] < -IKPI )
{    j7array[0]+=IK2PI;
}
j7valid[0] = true;
for(int ij7 = 0; ij7 < 1; ++ij7)
{
if( !j7valid[ij7] )
{
    continue;
}
_ij7[0] = ij7; _ij7[1] = -1;
for(int iij7 = ij7+1; iij7 < 1; ++iij7)
{
if( j7valid[iij7] && IKabs(cj7array[ij7]-cj7array[iij7]) < IKFAST_SOLUTION_THRESH && IKabs(sj7array[ij7]-sj7array[iij7]) < IKFAST_SOLUTION_THRESH )
{
    j7valid[iij7]=false; _ij7[1] = iij7; break;
}
}
j7 = j7array[ij7]; cj7 = cj7array[ij7]; sj7 = sj7array[ij7];
{
IkReal evalcond[3];
IkReal x443=IKsin(j7);
IkReal x444=IKcos(j7);
IkReal x445=((px)*(x443));
IkReal x446=((IkReal(1.00000000000000))*(x444));
IkReal x447=((py)*(x443));
evalcond[0]=((IkReal(0.0300000000000000))+(((IkReal(-0.313800000000000))*(sj10)))+(((IkReal(-1.00000000000000))*(x447)))+(((IkReal(-1.00000000000000))*(px)*(x446)))+(((IkReal(-0.0300000000000000))*(cj10))));
evalcond[1]=((IkReal(0.300000000000000))+(((IkReal(-0.0300000000000000))*(sj10)))+(x445)+(((IkReal(-1.00000000000000))*(py)*(x446)))+(((IkReal(0.313800000000000))*(cj10))));
evalcond[2]=((IkReal(0.00847044000000000))+(((IkReal(-0.600000000000000))*(x445)))+(((IkReal(-1.00000000000000))*(pp)))+(((IkReal(0.0600000000000000))*(x447)))+(((IkReal(0.600000000000000))*(py)*(x444)))+(((IkReal(0.0600000000000000))*(px)*(x444))));
if( IKabs(evalcond[0]) > 0.000001  || IKabs(evalcond[1]) > 0.000001  || IKabs(evalcond[2]) > 0.000001  )
{
continue;
}
}

rotationfunction0(solutions);
}
}

}

}

} else
{
evalcond[0]=((IkReal(-3.14159265358979))+(IKfmod(((IkReal(1.11022302462516e-16))+(j9)), IkReal(6.28318530717959))));
evalcond[1]=((IkReal(0.190270440000000))+(((IkReal(-0.0368280000000000))*(sj10)))+(((IkReal(0.186480000000000))*(cj10)))+(((IkReal(-1.00000000000000))*(pp))));
evalcond[2]=pz;
evalcond[3]=((IkReal(-1.00000000000000))*(pz));
if( IKabs(evalcond[0]) < 0.0000010000000000  && IKabs(evalcond[1]) < 0.0000010000000000  && IKabs(evalcond[2]) < 0.0000010000000000  && IKabs(evalcond[3]) < 0.0000010000000000  )
{
{
IkReal dummyeval[1];
IkReal gconst26;
gconst26=IKsign((((px)*(px))+((py)*(py))));
dummyeval[0]=(((px)*(px))+((py)*(py)));
if( IKabs(dummyeval[0]) < 0.0000010000000000  )
{
{
IkReal dummyeval[1];
IkReal gconst27;
gconst27=IKsign(((((IkReal(0.0600000000000000))*((py)*(py))))+(((IkReal(0.0600000000000000))*((px)*(px))))));
dummyeval[0]=(((px)*(px))+((py)*(py)));
if( IKabs(dummyeval[0]) < 0.0000010000000000  )
{
continue;

} else
{
{
IkReal j7array[1], cj7array[1], sj7array[1];
bool j7valid[1]={false};
_nj7 = 1;
IkReal x448=((cj10)*(py));
IkReal x449=((IkReal(1.00000000000000))*(pp));
IkReal x450=((px)*(sj10));
IkReal x451=((cj10)*(px));
IkReal x452=((IkReal(0.0180000000000000))*(py));
if( IKabs(((gconst27)*(((((IkReal(0.188280000000000))*(x448)))+(((IkReal(-1.00000000000000))*(sj10)*(x452)))+(((IkReal(-0.0188280000000000))*(x451)))+(((IkReal(-0.0180000000000000))*(px)))+(((IkReal(-1.00000000000000))*(py)*(x449)))+(((IkReal(0.00180000000000000))*(x450)))+(((IkReal(0.188470440000000))*(py))))))) < IKFAST_ATAN2_MAGTHRESH && IKabs(((gconst27)*(((((IkReal(-0.00180000000000000))*(py)*(sj10)))+(((IkReal(-0.0180000000000000))*(x450)))+(x452)+(((IkReal(0.188280000000000))*(x451)))+(((IkReal(0.0188280000000000))*(x448)))+(((IkReal(0.188470440000000))*(px)))+(((IkReal(-1.00000000000000))*(px)*(x449))))))) < IKFAST_ATAN2_MAGTHRESH )
    continue;
j7array[0]=IKatan2(((gconst27)*(((((IkReal(0.188280000000000))*(x448)))+(((IkReal(-1.00000000000000))*(sj10)*(x452)))+(((IkReal(-0.0188280000000000))*(x451)))+(((IkReal(-0.0180000000000000))*(px)))+(((IkReal(-1.00000000000000))*(py)*(x449)))+(((IkReal(0.00180000000000000))*(x450)))+(((IkReal(0.188470440000000))*(py)))))), ((gconst27)*(((((IkReal(-0.00180000000000000))*(py)*(sj10)))+(((IkReal(-0.0180000000000000))*(x450)))+(x452)+(((IkReal(0.188280000000000))*(x451)))+(((IkReal(0.0188280000000000))*(x448)))+(((IkReal(0.188470440000000))*(px)))+(((IkReal(-1.00000000000000))*(px)*(x449)))))));
sj7array[0]=IKsin(j7array[0]);
cj7array[0]=IKcos(j7array[0]);
if( j7array[0] > IKPI )
{
    j7array[0]-=IK2PI;
}
else if( j7array[0] < -IKPI )
{    j7array[0]+=IK2PI;
}
j7valid[0] = true;
for(int ij7 = 0; ij7 < 1; ++ij7)
{
if( !j7valid[ij7] )
{
    continue;
}
_ij7[0] = ij7; _ij7[1] = -1;
for(int iij7 = ij7+1; iij7 < 1; ++iij7)
{
if( j7valid[iij7] && IKabs(cj7array[ij7]-cj7array[iij7]) < IKFAST_SOLUTION_THRESH && IKabs(sj7array[ij7]-sj7array[iij7]) < IKFAST_SOLUTION_THRESH )
{
    j7valid[iij7]=false; _ij7[1] = iij7; break;
}
}
j7 = j7array[ij7]; cj7 = cj7array[ij7]; sj7 = sj7array[ij7];
{
IkReal evalcond[3];
IkReal x453=IKsin(j7);
IkReal x454=IKcos(j7);
IkReal x455=((IkReal(1.00000000000000))*(py));
IkReal x456=((px)*(x453));
IkReal x457=((px)*(x454));
evalcond[0]=((IkReal(-0.0300000000000000))+(((IkReal(-1.00000000000000))*(x457)))+(((IkReal(0.313800000000000))*(sj10)))+(((IkReal(0.0300000000000000))*(cj10)))+(((IkReal(-1.00000000000000))*(x453)*(x455))));
evalcond[1]=((IkReal(0.300000000000000))+(((IkReal(-1.00000000000000))*(x454)*(x455)))+(((IkReal(-0.0300000000000000))*(sj10)))+(x456)+(((IkReal(0.313800000000000))*(cj10))));
evalcond[2]=((IkReal(0.00847044000000000))+(((IkReal(-0.600000000000000))*(x456)))+(((IkReal(-1.00000000000000))*(pp)))+(((IkReal(-0.0600000000000000))*(x457)))+(((IkReal(-0.0600000000000000))*(py)*(x453)))+(((IkReal(0.600000000000000))*(py)*(x454))));
if( IKabs(evalcond[0]) > 0.000001  || IKabs(evalcond[1]) > 0.000001  || IKabs(evalcond[2]) > 0.000001  )
{
continue;
}
}

rotationfunction0(solutions);
}
}

}

}

} else
{
{
IkReal j7array[1], cj7array[1], sj7array[1];
bool j7valid[1]={false};
_nj7 = 1;
IkReal x458=((IkReal(0.0300000000000000))*(px));
IkReal x459=((IkReal(0.313800000000000))*(px));
IkReal x460=((IkReal(0.0300000000000000))*(py));
IkReal x461=((IkReal(0.313800000000000))*(py));
if( IKabs(((gconst26)*(((((IkReal(-0.300000000000000))*(px)))+(((IkReal(-1.00000000000000))*(cj10)*(x459)))+(((cj10)*(x460)))+(((IkReal(-1.00000000000000))*(x460)))+(((sj10)*(x458)))+(((sj10)*(x461))))))) < IKFAST_ATAN2_MAGTHRESH && IKabs(((gconst26)*(((((cj10)*(x458)))+(((IkReal(0.300000000000000))*(py)))+(((cj10)*(x461)))+(((IkReal(-1.00000000000000))*(sj10)*(x460)))+(((IkReal(-1.00000000000000))*(x458)))+(((sj10)*(x459))))))) < IKFAST_ATAN2_MAGTHRESH )
    continue;
j7array[0]=IKatan2(((gconst26)*(((((IkReal(-0.300000000000000))*(px)))+(((IkReal(-1.00000000000000))*(cj10)*(x459)))+(((cj10)*(x460)))+(((IkReal(-1.00000000000000))*(x460)))+(((sj10)*(x458)))+(((sj10)*(x461)))))), ((gconst26)*(((((cj10)*(x458)))+(((IkReal(0.300000000000000))*(py)))+(((cj10)*(x461)))+(((IkReal(-1.00000000000000))*(sj10)*(x460)))+(((IkReal(-1.00000000000000))*(x458)))+(((sj10)*(x459)))))));
sj7array[0]=IKsin(j7array[0]);
cj7array[0]=IKcos(j7array[0]);
if( j7array[0] > IKPI )
{
    j7array[0]-=IK2PI;
}
else if( j7array[0] < -IKPI )
{    j7array[0]+=IK2PI;
}
j7valid[0] = true;
for(int ij7 = 0; ij7 < 1; ++ij7)
{
if( !j7valid[ij7] )
{
    continue;
}
_ij7[0] = ij7; _ij7[1] = -1;
for(int iij7 = ij7+1; iij7 < 1; ++iij7)
{
if( j7valid[iij7] && IKabs(cj7array[ij7]-cj7array[iij7]) < IKFAST_SOLUTION_THRESH && IKabs(sj7array[ij7]-sj7array[iij7]) < IKFAST_SOLUTION_THRESH )
{
    j7valid[iij7]=false; _ij7[1] = iij7; break;
}
}
j7 = j7array[ij7]; cj7 = cj7array[ij7]; sj7 = sj7array[ij7];
{
IkReal evalcond[3];
IkReal x462=IKsin(j7);
IkReal x463=IKcos(j7);
IkReal x464=((IkReal(1.00000000000000))*(py));
IkReal x465=((px)*(x462));
IkReal x466=((px)*(x463));
evalcond[0]=((IkReal(-0.0300000000000000))+(((IkReal(-1.00000000000000))*(x462)*(x464)))+(((IkReal(-1.00000000000000))*(x466)))+(((IkReal(0.313800000000000))*(sj10)))+(((IkReal(0.0300000000000000))*(cj10))));
evalcond[1]=((IkReal(0.300000000000000))+(((IkReal(-1.00000000000000))*(x463)*(x464)))+(((IkReal(-0.0300000000000000))*(sj10)))+(x465)+(((IkReal(0.313800000000000))*(cj10))));
evalcond[2]=((IkReal(0.00847044000000000))+(((IkReal(-0.600000000000000))*(x465)))+(((IkReal(-1.00000000000000))*(pp)))+(((IkReal(-0.0600000000000000))*(x466)))+(((IkReal(-0.0600000000000000))*(py)*(x462)))+(((IkReal(0.600000000000000))*(py)*(x463))));
if( IKabs(evalcond[0]) > 0.000001  || IKabs(evalcond[1]) > 0.000001  || IKabs(evalcond[2]) > 0.000001  )
{
continue;
}
}

rotationfunction0(solutions);
}
}

}

}

} else
{
if( 1 )
{
continue;

} else
{
}
}
}
}

} else
{
{
IkReal j7array[1], cj7array[1], sj7array[1];
bool j7valid[1]={false};
_nj7 = 1;
IkReal x467=((cj10)*(py));
IkReal x468=((IkReal(0.0300000000000000))*(cj9));
IkReal x469=((px)*(sj10));
IkReal x470=((IkReal(0.313800000000000))*(cj9));
IkReal x471=((py)*(sj10));
IkReal x472=((cj10)*(px));
if( IKabs(((gconst23)*(((((IkReal(-0.300000000000000))*(px)))+(((IkReal(-0.313800000000000))*(x472)))+(((IkReal(0.0300000000000000))*(x469)))+(((IkReal(-1.00000000000000))*(x470)*(x471)))+(((py)*(x468)))+(((IkReal(-1.00000000000000))*(x467)*(x468))))))) < IKFAST_ATAN2_MAGTHRESH && IKabs(((gconst23)*(((((IkReal(-1.00000000000000))*(x468)*(x472)))+(((IkReal(0.300000000000000))*(py)))+(((IkReal(-1.00000000000000))*(x469)*(x470)))+(((IkReal(0.313800000000000))*(x467)))+(((IkReal(-0.0300000000000000))*(x471)))+(((px)*(x468))))))) < IKFAST_ATAN2_MAGTHRESH )
    continue;
j7array[0]=IKatan2(((gconst23)*(((((IkReal(-0.300000000000000))*(px)))+(((IkReal(-0.313800000000000))*(x472)))+(((IkReal(0.0300000000000000))*(x469)))+(((IkReal(-1.00000000000000))*(x470)*(x471)))+(((py)*(x468)))+(((IkReal(-1.00000000000000))*(x467)*(x468)))))), ((gconst23)*(((((IkReal(-1.00000000000000))*(x468)*(x472)))+(((IkReal(0.300000000000000))*(py)))+(((IkReal(-1.00000000000000))*(x469)*(x470)))+(((IkReal(0.313800000000000))*(x467)))+(((IkReal(-0.0300000000000000))*(x471)))+(((px)*(x468)))))));
sj7array[0]=IKsin(j7array[0]);
cj7array[0]=IKcos(j7array[0]);
if( j7array[0] > IKPI )
{
    j7array[0]-=IK2PI;
}
else if( j7array[0] < -IKPI )
{    j7array[0]+=IK2PI;
}
j7valid[0] = true;
for(int ij7 = 0; ij7 < 1; ++ij7)
{
if( !j7valid[ij7] )
{
    continue;
}
_ij7[0] = ij7; _ij7[1] = -1;
for(int iij7 = ij7+1; iij7 < 1; ++iij7)
{
if( j7valid[iij7] && IKabs(cj7array[ij7]-cj7array[iij7]) < IKFAST_SOLUTION_THRESH && IKabs(sj7array[ij7]-sj7array[iij7]) < IKFAST_SOLUTION_THRESH )
{
    j7valid[iij7]=false; _ij7[1] = iij7; break;
}
}
j7 = j7array[ij7]; cj7 = cj7array[ij7]; sj7 = sj7array[ij7];
{
IkReal evalcond[5];
IkReal x473=IKsin(j7);
IkReal x474=IKcos(j7);
IkReal x475=((IkReal(1.00000000000000))*(py));
IkReal x476=((IkReal(0.0300000000000000))*(cj10));
IkReal x477=((pz)*(sj9));
IkReal x478=((IkReal(0.313800000000000))*(sj10));
IkReal x479=((IkReal(0.0600000000000000))*(cj9));
IkReal x480=((IkReal(1.00000000000000))*(cj9));
IkReal x481=((px)*(x474));
IkReal x482=((py)*(x473));
IkReal x483=((px)*(x473));
evalcond[0]=((((IkReal(0.0300000000000000))*(cj9)))+(((IkReal(-1.00000000000000))*(x473)*(x475)))+(((IkReal(-1.00000000000000))*(x481)))+(((IkReal(-1.00000000000000))*(cj9)*(x478)))+(((IkReal(-1.00000000000000))*(cj9)*(x476))));
evalcond[1]=((IkReal(0.300000000000000))+(((IkReal(-0.0300000000000000))*(sj10)))+(x483)+(((IkReal(-1.00000000000000))*(x474)*(x475)))+(((IkReal(0.313800000000000))*(cj10))));
evalcond[2]=((((IkReal(-1.00000000000000))*(pz)*(x480)))+(((sj9)*(x481)))+(((sj9)*(x482))));
evalcond[3]=((IkReal(0.0300000000000000))+(((IkReal(-1.00000000000000))*(x476)))+(((IkReal(-1.00000000000000))*(x478)))+(((IkReal(-1.00000000000000))*(x477)))+(((IkReal(-1.00000000000000))*(x480)*(x481)))+(((IkReal(-1.00000000000000))*(cj9)*(x473)*(x475))));
evalcond[4]=((IkReal(0.00847044000000000))+(((IkReal(0.600000000000000))*(py)*(x474)))+(((IkReal(-1.00000000000000))*(pp)))+(((x479)*(x481)))+(((x479)*(x482)))+(((IkReal(0.0600000000000000))*(x477)))+(((IkReal(-0.600000000000000))*(x483))));
if( IKabs(evalcond[0]) > 0.000001  || IKabs(evalcond[1]) > 0.000001  || IKabs(evalcond[2]) > 0.000001  || IKabs(evalcond[3]) > 0.000001  || IKabs(evalcond[4]) > 0.000001  )
{
continue;
}
}

rotationfunction0(solutions);
}
}

}

}

} else
{
{
IkReal j7array[1], cj7array[1], sj7array[1];
bool j7valid[1]={false};
_nj7 = 1;
IkReal x484=((py)*(sj9));
IkReal x485=((IkReal(0.313800000000000))*(cj10));
IkReal x486=((cj9)*(pz));
IkReal x487=((IkReal(0.0300000000000000))*(sj10));
IkReal x488=((px)*(sj9));
if( IKabs(((gconst22)*(((((py)*(x486)))+(((IkReal(-0.300000000000000))*(x488)))+(((x487)*(x488)))+(((IkReal(-1.00000000000000))*(x485)*(x488))))))) < IKFAST_ATAN2_MAGTHRESH && IKabs(((gconst22)*(((((IkReal(-1.00000000000000))*(x484)*(x487)))+(((x484)*(x485)))+(((px)*(x486)))+(((IkReal(0.300000000000000))*(x484))))))) < IKFAST_ATAN2_MAGTHRESH )
    continue;
j7array[0]=IKatan2(((gconst22)*(((((py)*(x486)))+(((IkReal(-0.300000000000000))*(x488)))+(((x487)*(x488)))+(((IkReal(-1.00000000000000))*(x485)*(x488)))))), ((gconst22)*(((((IkReal(-1.00000000000000))*(x484)*(x487)))+(((x484)*(x485)))+(((px)*(x486)))+(((IkReal(0.300000000000000))*(x484)))))));
sj7array[0]=IKsin(j7array[0]);
cj7array[0]=IKcos(j7array[0]);
if( j7array[0] > IKPI )
{
    j7array[0]-=IK2PI;
}
else if( j7array[0] < -IKPI )
{    j7array[0]+=IK2PI;
}
j7valid[0] = true;
for(int ij7 = 0; ij7 < 1; ++ij7)
{
if( !j7valid[ij7] )
{
    continue;
}
_ij7[0] = ij7; _ij7[1] = -1;
for(int iij7 = ij7+1; iij7 < 1; ++iij7)
{
if( j7valid[iij7] && IKabs(cj7array[ij7]-cj7array[iij7]) < IKFAST_SOLUTION_THRESH && IKabs(sj7array[ij7]-sj7array[iij7]) < IKFAST_SOLUTION_THRESH )
{
    j7valid[iij7]=false; _ij7[1] = iij7; break;
}
}
j7 = j7array[ij7]; cj7 = cj7array[ij7]; sj7 = sj7array[ij7];
{
IkReal evalcond[5];
IkReal x489=IKsin(j7);
IkReal x490=IKcos(j7);
IkReal x491=((IkReal(1.00000000000000))*(py));
IkReal x492=((IkReal(0.0300000000000000))*(cj10));
IkReal x493=((pz)*(sj9));
IkReal x494=((IkReal(0.313800000000000))*(sj10));
IkReal x495=((IkReal(0.0600000000000000))*(cj9));
IkReal x496=((IkReal(1.00000000000000))*(cj9));
IkReal x497=((px)*(x490));
IkReal x498=((py)*(x489));
IkReal x499=((px)*(x489));
evalcond[0]=((((IkReal(-1.00000000000000))*(x489)*(x491)))+(((IkReal(-1.00000000000000))*(cj9)*(x494)))+(((IkReal(-1.00000000000000))*(cj9)*(x492)))+(((IkReal(0.0300000000000000))*(cj9)))+(((IkReal(-1.00000000000000))*(x497))));
evalcond[1]=((IkReal(0.300000000000000))+(((IkReal(-1.00000000000000))*(x490)*(x491)))+(((IkReal(-0.0300000000000000))*(sj10)))+(x499)+(((IkReal(0.313800000000000))*(cj10))));
evalcond[2]=((((IkReal(-1.00000000000000))*(pz)*(x496)))+(((sj9)*(x498)))+(((sj9)*(x497))));
evalcond[3]=((IkReal(0.0300000000000000))+(((IkReal(-1.00000000000000))*(x492)))+(((IkReal(-1.00000000000000))*(x494)))+(((IkReal(-1.00000000000000))*(x496)*(x497)))+(((IkReal(-1.00000000000000))*(x493)))+(((IkReal(-1.00000000000000))*(cj9)*(x489)*(x491))));
evalcond[4]=((IkReal(0.00847044000000000))+(((IkReal(-0.600000000000000))*(x499)))+(((IkReal(0.600000000000000))*(py)*(x490)))+(((x495)*(x497)))+(((x495)*(x498)))+(((IkReal(0.0600000000000000))*(x493)))+(((IkReal(-1.00000000000000))*(pp))));
if( IKabs(evalcond[0]) > 0.000001  || IKabs(evalcond[1]) > 0.000001  || IKabs(evalcond[2]) > 0.000001  || IKabs(evalcond[3]) > 0.000001  || IKabs(evalcond[4]) > 0.000001  )
{
continue;
}
}

rotationfunction0(solutions);
}
}

}

}

} else
{
IkReal x500=((IkReal(0.0300000000000000))*(sj9));
evalcond[0]=((IkReal(-3.14159265358979))+(IKfmod(((IkReal(1.11022302462516e-16))+(j8)), IkReal(6.28318530717959))));
evalcond[1]=((IkReal(0.190270440000000))+(((IkReal(-0.0368280000000000))*(sj10)))+(((IkReal(0.186480000000000))*(cj10)))+(((IkReal(-1.00000000000000))*(pp))));
evalcond[2]=((((IkReal(0.313800000000000))*(sj10)*(sj9)))+(((IkReal(-1.00000000000000))*(x500)))+(((IkReal(-1.00000000000000))*(pz)))+(((cj10)*(x500))));
if( IKabs(evalcond[0]) < 0.0000010000000000  && IKabs(evalcond[1]) < 0.0000010000000000  && IKabs(evalcond[2]) < 0.0000010000000000  )
{
{
IkReal dummyeval[1];
IkReal gconst28;
gconst28=IKsign(((((sj9)*((px)*(px))))+(((sj9)*((py)*(py))))));
dummyeval[0]=((((sj9)*((px)*(px))))+(((sj9)*((py)*(py)))));
if( IKabs(dummyeval[0]) < 0.0000010000000000  )
{
{
IkReal dummyeval[1];
IkReal gconst29;
gconst29=IKsign((((px)*(px))+((py)*(py))));
dummyeval[0]=(((px)*(px))+((py)*(py)));
if( IKabs(dummyeval[0]) < 0.0000010000000000  )
{
{
IkReal evalcond[4];
evalcond[0]=((IkReal(-3.14159265358979))+(IKfmod(((IkReal(3.14159265358979))+(j9)), IkReal(6.28318530717959))));
evalcond[1]=((IkReal(0.190270440000000))+(((IkReal(-0.0368280000000000))*(sj10)))+(((IkReal(0.186480000000000))*(cj10)))+(((IkReal(-1.00000000000000))*(pp))));
evalcond[2]=pz;
evalcond[3]=((IkReal(-1.00000000000000))*(pz));
if( IKabs(evalcond[0]) < 0.0000010000000000  && IKabs(evalcond[1]) < 0.0000010000000000  && IKabs(evalcond[2]) < 0.0000010000000000  && IKabs(evalcond[3]) < 0.0000010000000000  )
{
{
IkReal dummyeval[1];
IkReal gconst30;
gconst30=IKsign((((px)*(px))+((py)*(py))));
dummyeval[0]=(((px)*(px))+((py)*(py)));
if( IKabs(dummyeval[0]) < 0.0000010000000000  )
{
{
IkReal dummyeval[1];
IkReal gconst31;
gconst31=IKsign(((((IkReal(0.0600000000000000))*((py)*(py))))+(((IkReal(0.0600000000000000))*((px)*(px))))));
dummyeval[0]=(((px)*(px))+((py)*(py)));
if( IKabs(dummyeval[0]) < 0.0000010000000000  )
{
continue;

} else
{
{
IkReal j7array[1], cj7array[1], sj7array[1];
bool j7valid[1]={false};
_nj7 = 1;
IkReal x501=((cj10)*(py));
IkReal x502=((px)*(sj10));
IkReal x503=((cj10)*(px));
IkReal x504=((IkReal(0.0180000000000000))*(py));
if( IKabs(((gconst31)*(((((IkReal(0.0180000000000000))*(px)))+(((IkReal(-0.00180000000000000))*(x502)))+(((IkReal(0.0188280000000000))*(x503)))+(((sj10)*(x504)))+(((IkReal(-0.188280000000000))*(x501)))+(((pp)*(py)))+(((IkReal(-0.188470440000000))*(py))))))) < IKFAST_ATAN2_MAGTHRESH && IKabs(((gconst31)*(((((IkReal(0.00180000000000000))*(py)*(sj10)))+(((IkReal(-1.00000000000000))*(x504)))+(((IkReal(0.0180000000000000))*(x502)))+(((IkReal(-0.188280000000000))*(x503)))+(((IkReal(-0.0188280000000000))*(x501)))+(((pp)*(px)))+(((IkReal(-0.188470440000000))*(px))))))) < IKFAST_ATAN2_MAGTHRESH )
    continue;
j7array[0]=IKatan2(((gconst31)*(((((IkReal(0.0180000000000000))*(px)))+(((IkReal(-0.00180000000000000))*(x502)))+(((IkReal(0.0188280000000000))*(x503)))+(((sj10)*(x504)))+(((IkReal(-0.188280000000000))*(x501)))+(((pp)*(py)))+(((IkReal(-0.188470440000000))*(py)))))), ((gconst31)*(((((IkReal(0.00180000000000000))*(py)*(sj10)))+(((IkReal(-1.00000000000000))*(x504)))+(((IkReal(0.0180000000000000))*(x502)))+(((IkReal(-0.188280000000000))*(x503)))+(((IkReal(-0.0188280000000000))*(x501)))+(((pp)*(px)))+(((IkReal(-0.188470440000000))*(px)))))));
sj7array[0]=IKsin(j7array[0]);
cj7array[0]=IKcos(j7array[0]);
if( j7array[0] > IKPI )
{
    j7array[0]-=IK2PI;
}
else if( j7array[0] < -IKPI )
{    j7array[0]+=IK2PI;
}
j7valid[0] = true;
for(int ij7 = 0; ij7 < 1; ++ij7)
{
if( !j7valid[ij7] )
{
    continue;
}
_ij7[0] = ij7; _ij7[1] = -1;
for(int iij7 = ij7+1; iij7 < 1; ++iij7)
{
if( j7valid[iij7] && IKabs(cj7array[ij7]-cj7array[iij7]) < IKFAST_SOLUTION_THRESH && IKabs(sj7array[ij7]-sj7array[iij7]) < IKFAST_SOLUTION_THRESH )
{
    j7valid[iij7]=false; _ij7[1] = iij7; break;
}
}
j7 = j7array[ij7]; cj7 = cj7array[ij7]; sj7 = sj7array[ij7];
{
IkReal evalcond[3];
IkReal x505=IKcos(j7);
IkReal x506=IKsin(j7);
IkReal x507=((px)*(x506));
IkReal x508=((py)*(x506));
IkReal x509=((px)*(x505));
IkReal x510=((py)*(x505));
evalcond[0]=((IkReal(0.0300000000000000))+(((IkReal(-0.313800000000000))*(sj10)))+(((IkReal(-1.00000000000000))*(x508)))+(((IkReal(-1.00000000000000))*(x509)))+(((IkReal(-0.0300000000000000))*(cj10))));
evalcond[1]=((IkReal(0.300000000000000))+(((IkReal(-0.0300000000000000))*(sj10)))+(x510)+(((IkReal(-1.00000000000000))*(x507)))+(((IkReal(0.313800000000000))*(cj10))));
evalcond[2]=((IkReal(0.00847044000000000))+(((IkReal(-1.00000000000000))*(pp)))+(((IkReal(0.600000000000000))*(x507)))+(((IkReal(0.0600000000000000))*(x508)))+(((IkReal(0.0600000000000000))*(x509)))+(((IkReal(-0.600000000000000))*(x510))));
if( IKabs(evalcond[0]) > 0.000001  || IKabs(evalcond[1]) > 0.000001  || IKabs(evalcond[2]) > 0.000001  )
{
continue;
}
}

rotationfunction0(solutions);
}
}

}

}

} else
{
{
IkReal j7array[1], cj7array[1], sj7array[1];
bool j7valid[1]={false};
_nj7 = 1;
IkReal x511=((IkReal(0.0300000000000000))*(px));
IkReal x512=((IkReal(0.313800000000000))*(px));
IkReal x513=((IkReal(0.0300000000000000))*(py));
IkReal x514=((IkReal(0.313800000000000))*(py));
if( IKabs(((gconst30)*(((((IkReal(0.300000000000000))*(px)))+(((IkReal(-1.00000000000000))*(cj10)*(x513)))+(((cj10)*(x512)))+(x513)+(((IkReal(-1.00000000000000))*(sj10)*(x514)))+(((IkReal(-1.00000000000000))*(sj10)*(x511))))))) < IKFAST_ATAN2_MAGTHRESH && IKabs(((gconst30)*(((((sj10)*(x513)))+(((IkReal(-0.300000000000000))*(py)))+(((IkReal(-1.00000000000000))*(cj10)*(x511)))+(((IkReal(-1.00000000000000))*(cj10)*(x514)))+(x511)+(((IkReal(-1.00000000000000))*(sj10)*(x512))))))) < IKFAST_ATAN2_MAGTHRESH )
    continue;
j7array[0]=IKatan2(((gconst30)*(((((IkReal(0.300000000000000))*(px)))+(((IkReal(-1.00000000000000))*(cj10)*(x513)))+(((cj10)*(x512)))+(x513)+(((IkReal(-1.00000000000000))*(sj10)*(x514)))+(((IkReal(-1.00000000000000))*(sj10)*(x511)))))), ((gconst30)*(((((sj10)*(x513)))+(((IkReal(-0.300000000000000))*(py)))+(((IkReal(-1.00000000000000))*(cj10)*(x511)))+(((IkReal(-1.00000000000000))*(cj10)*(x514)))+(x511)+(((IkReal(-1.00000000000000))*(sj10)*(x512)))))));
sj7array[0]=IKsin(j7array[0]);
cj7array[0]=IKcos(j7array[0]);
if( j7array[0] > IKPI )
{
    j7array[0]-=IK2PI;
}
else if( j7array[0] < -IKPI )
{    j7array[0]+=IK2PI;
}
j7valid[0] = true;
for(int ij7 = 0; ij7 < 1; ++ij7)
{
if( !j7valid[ij7] )
{
    continue;
}
_ij7[0] = ij7; _ij7[1] = -1;
for(int iij7 = ij7+1; iij7 < 1; ++iij7)
{
if( j7valid[iij7] && IKabs(cj7array[ij7]-cj7array[iij7]) < IKFAST_SOLUTION_THRESH && IKabs(sj7array[ij7]-sj7array[iij7]) < IKFAST_SOLUTION_THRESH )
{
    j7valid[iij7]=false; _ij7[1] = iij7; break;
}
}
j7 = j7array[ij7]; cj7 = cj7array[ij7]; sj7 = sj7array[ij7];
{
IkReal evalcond[3];
IkReal x515=IKcos(j7);
IkReal x516=IKsin(j7);
IkReal x517=((px)*(x516));
IkReal x518=((py)*(x516));
IkReal x519=((px)*(x515));
IkReal x520=((py)*(x515));
evalcond[0]=((IkReal(0.0300000000000000))+(((IkReal(-0.313800000000000))*(sj10)))+(((IkReal(-1.00000000000000))*(x519)))+(((IkReal(-1.00000000000000))*(x518)))+(((IkReal(-0.0300000000000000))*(cj10))));
evalcond[1]=((IkReal(0.300000000000000))+(((IkReal(-1.00000000000000))*(x517)))+(((IkReal(-0.0300000000000000))*(sj10)))+(x520)+(((IkReal(0.313800000000000))*(cj10))));
evalcond[2]=((IkReal(0.00847044000000000))+(((IkReal(0.600000000000000))*(x517)))+(((IkReal(0.0600000000000000))*(x519)))+(((IkReal(0.0600000000000000))*(x518)))+(((IkReal(-1.00000000000000))*(pp)))+(((IkReal(-0.600000000000000))*(x520))));
if( IKabs(evalcond[0]) > 0.000001  || IKabs(evalcond[1]) > 0.000001  || IKabs(evalcond[2]) > 0.000001  )
{
continue;
}
}

rotationfunction0(solutions);
}
}

}

}

} else
{
IkReal x521=((IkReal(-1.00000000000000))*(pz));
evalcond[0]=((IkReal(-3.14159265358979))+(IKfmod(((IkReal(1.11022302462516e-16))+(j9)), IkReal(6.28318530717959))));
evalcond[1]=((IkReal(0.190270440000000))+(((IkReal(-0.0368280000000000))*(sj10)))+(((IkReal(0.186480000000000))*(cj10)))+(((IkReal(-1.00000000000000))*(pp))));
evalcond[2]=x521;
evalcond[3]=x521;
if( IKabs(evalcond[0]) < 0.0000010000000000  && IKabs(evalcond[1]) < 0.0000010000000000  && IKabs(evalcond[2]) < 0.0000010000000000  && IKabs(evalcond[3]) < 0.0000010000000000  )
{
{
IkReal dummyeval[1];
IkReal gconst32;
gconst32=IKsign((((px)*(px))+((py)*(py))));
dummyeval[0]=(((px)*(px))+((py)*(py)));
if( IKabs(dummyeval[0]) < 0.0000010000000000  )
{
{
IkReal dummyeval[1];
IkReal gconst33;
gconst33=IKsign(((((IkReal(-0.0600000000000000))*((px)*(px))))+(((IkReal(-0.0600000000000000))*((py)*(py))))));
dummyeval[0]=((((IkReal(-1.00000000000000))*((px)*(px))))+(((IkReal(-1.00000000000000))*((py)*(py)))));
if( IKabs(dummyeval[0]) < 0.0000010000000000  )
{
continue;

} else
{
{
IkReal j7array[1], cj7array[1], sj7array[1];
bool j7valid[1]={false};
_nj7 = 1;
IkReal x522=((cj10)*(py));
IkReal x523=((px)*(sj10));
IkReal x524=((cj10)*(px));
IkReal x525=((IkReal(0.0180000000000000))*(py));
if( IKabs(((gconst33)*(((((sj10)*(x525)))+(((IkReal(-0.0188280000000000))*(x524)))+(((IkReal(0.00180000000000000))*(x523)))+(((IkReal(-0.188280000000000))*(x522)))+(((IkReal(-0.0180000000000000))*(px)))+(((pp)*(py)))+(((IkReal(-0.188470440000000))*(py))))))) < IKFAST_ATAN2_MAGTHRESH && IKabs(((gconst33)*(((((IkReal(-0.00180000000000000))*(py)*(sj10)))+(((IkReal(0.0188280000000000))*(x522)))+(((IkReal(-0.188280000000000))*(x524)))+(x525)+(((IkReal(0.0180000000000000))*(x523)))+(((pp)*(px)))+(((IkReal(-0.188470440000000))*(px))))))) < IKFAST_ATAN2_MAGTHRESH )
    continue;
j7array[0]=IKatan2(((gconst33)*(((((sj10)*(x525)))+(((IkReal(-0.0188280000000000))*(x524)))+(((IkReal(0.00180000000000000))*(x523)))+(((IkReal(-0.188280000000000))*(x522)))+(((IkReal(-0.0180000000000000))*(px)))+(((pp)*(py)))+(((IkReal(-0.188470440000000))*(py)))))), ((gconst33)*(((((IkReal(-0.00180000000000000))*(py)*(sj10)))+(((IkReal(0.0188280000000000))*(x522)))+(((IkReal(-0.188280000000000))*(x524)))+(x525)+(((IkReal(0.0180000000000000))*(x523)))+(((pp)*(px)))+(((IkReal(-0.188470440000000))*(px)))))));
sj7array[0]=IKsin(j7array[0]);
cj7array[0]=IKcos(j7array[0]);
if( j7array[0] > IKPI )
{
    j7array[0]-=IK2PI;
}
else if( j7array[0] < -IKPI )
{    j7array[0]+=IK2PI;
}
j7valid[0] = true;
for(int ij7 = 0; ij7 < 1; ++ij7)
{
if( !j7valid[ij7] )
{
    continue;
}
_ij7[0] = ij7; _ij7[1] = -1;
for(int iij7 = ij7+1; iij7 < 1; ++iij7)
{
if( j7valid[iij7] && IKabs(cj7array[ij7]-cj7array[iij7]) < IKFAST_SOLUTION_THRESH && IKabs(sj7array[ij7]-sj7array[iij7]) < IKFAST_SOLUTION_THRESH )
{
    j7valid[iij7]=false; _ij7[1] = iij7; break;
}
}
j7 = j7array[ij7]; cj7 = cj7array[ij7]; sj7 = sj7array[ij7];
{
IkReal evalcond[3];
IkReal x526=IKcos(j7);
IkReal x527=IKsin(j7);
IkReal x528=((px)*(x527));
IkReal x529=((py)*(x527));
IkReal x530=((px)*(x526));
IkReal x531=((py)*(x526));
evalcond[0]=((IkReal(-0.0300000000000000))+(((IkReal(-1.00000000000000))*(x530)))+(((IkReal(-1.00000000000000))*(x529)))+(((IkReal(0.313800000000000))*(sj10)))+(((IkReal(0.0300000000000000))*(cj10))));
evalcond[1]=((IkReal(0.300000000000000))+(((IkReal(-1.00000000000000))*(x528)))+(((IkReal(-0.0300000000000000))*(sj10)))+(x531)+(((IkReal(0.313800000000000))*(cj10))));
evalcond[2]=((IkReal(0.00847044000000000))+(((IkReal(0.600000000000000))*(x528)))+(((IkReal(-1.00000000000000))*(pp)))+(((IkReal(-0.0600000000000000))*(x530)))+(((IkReal(-0.0600000000000000))*(x529)))+(((IkReal(-0.600000000000000))*(x531))));
if( IKabs(evalcond[0]) > 0.000001  || IKabs(evalcond[1]) > 0.000001  || IKabs(evalcond[2]) > 0.000001  )
{
continue;
}
}

rotationfunction0(solutions);
}
}

}

}

} else
{
{
IkReal j7array[1], cj7array[1], sj7array[1];
bool j7valid[1]={false};
_nj7 = 1;
IkReal x532=((IkReal(0.0300000000000000))*(px));
IkReal x533=((IkReal(0.313800000000000))*(px));
IkReal x534=((IkReal(0.0300000000000000))*(py));
IkReal x535=((IkReal(0.313800000000000))*(py));
if( IKabs(((gconst32)*(((((sj10)*(x535)))+(((IkReal(0.300000000000000))*(px)))+(((cj10)*(x533)))+(((cj10)*(x534)))+(((IkReal(-1.00000000000000))*(x534)))+(((IkReal(-1.00000000000000))*(sj10)*(x532))))))) < IKFAST_ATAN2_MAGTHRESH && IKabs(((gconst32)*(((((sj10)*(x533)))+(((sj10)*(x534)))+(((IkReal(-0.300000000000000))*(py)))+(((IkReal(-1.00000000000000))*(cj10)*(x535)))+(((cj10)*(x532)))+(((IkReal(-1.00000000000000))*(x532))))))) < IKFAST_ATAN2_MAGTHRESH )
    continue;
j7array[0]=IKatan2(((gconst32)*(((((sj10)*(x535)))+(((IkReal(0.300000000000000))*(px)))+(((cj10)*(x533)))+(((cj10)*(x534)))+(((IkReal(-1.00000000000000))*(x534)))+(((IkReal(-1.00000000000000))*(sj10)*(x532)))))), ((gconst32)*(((((sj10)*(x533)))+(((sj10)*(x534)))+(((IkReal(-0.300000000000000))*(py)))+(((IkReal(-1.00000000000000))*(cj10)*(x535)))+(((cj10)*(x532)))+(((IkReal(-1.00000000000000))*(x532)))))));
sj7array[0]=IKsin(j7array[0]);
cj7array[0]=IKcos(j7array[0]);
if( j7array[0] > IKPI )
{
    j7array[0]-=IK2PI;
}
else if( j7array[0] < -IKPI )
{    j7array[0]+=IK2PI;
}
j7valid[0] = true;
for(int ij7 = 0; ij7 < 1; ++ij7)
{
if( !j7valid[ij7] )
{
    continue;
}
_ij7[0] = ij7; _ij7[1] = -1;
for(int iij7 = ij7+1; iij7 < 1; ++iij7)
{
if( j7valid[iij7] && IKabs(cj7array[ij7]-cj7array[iij7]) < IKFAST_SOLUTION_THRESH && IKabs(sj7array[ij7]-sj7array[iij7]) < IKFAST_SOLUTION_THRESH )
{
    j7valid[iij7]=false; _ij7[1] = iij7; break;
}
}
j7 = j7array[ij7]; cj7 = cj7array[ij7]; sj7 = sj7array[ij7];
{
IkReal evalcond[3];
IkReal x536=IKcos(j7);
IkReal x537=IKsin(j7);
IkReal x538=((px)*(x537));
IkReal x539=((py)*(x537));
IkReal x540=((px)*(x536));
IkReal x541=((py)*(x536));
evalcond[0]=((IkReal(-0.0300000000000000))+(((IkReal(-1.00000000000000))*(x540)))+(((IkReal(-1.00000000000000))*(x539)))+(((IkReal(0.313800000000000))*(sj10)))+(((IkReal(0.0300000000000000))*(cj10))));
evalcond[1]=((IkReal(0.300000000000000))+(((IkReal(-1.00000000000000))*(x538)))+(((IkReal(-0.0300000000000000))*(sj10)))+(x541)+(((IkReal(0.313800000000000))*(cj10))));
evalcond[2]=((IkReal(0.00847044000000000))+(((IkReal(0.600000000000000))*(x538)))+(((IkReal(-1.00000000000000))*(pp)))+(((IkReal(-0.0600000000000000))*(x540)))+(((IkReal(-0.0600000000000000))*(x539)))+(((IkReal(-0.600000000000000))*(x541))));
if( IKabs(evalcond[0]) > 0.000001  || IKabs(evalcond[1]) > 0.000001  || IKabs(evalcond[2]) > 0.000001  )
{
continue;
}
}

rotationfunction0(solutions);
}
}

}

}

} else
{
if( 1 )
{
continue;

} else
{
}
}
}
}

} else
{
{
IkReal j7array[1], cj7array[1], sj7array[1];
bool j7valid[1]={false};
_nj7 = 1;
IkReal x542=((px)*(sj10));
IkReal x543=((IkReal(0.313800000000000))*(cj9));
IkReal x544=((py)*(sj10));
IkReal x545=((IkReal(0.313800000000000))*(cj10));
IkReal x546=((IkReal(0.0300000000000000))*(cj9));
IkReal x547=((cj10)*(x546));
if( IKabs(((gconst29)*(((((py)*(x546)))+(((IkReal(0.300000000000000))*(px)))+(((px)*(x545)))+(((IkReal(-1.00000000000000))*(py)*(x547)))+(((IkReal(-0.0300000000000000))*(x542)))+(((IkReal(-1.00000000000000))*(x543)*(x544))))))) < IKFAST_ATAN2_MAGTHRESH && IKabs(((gconst29)*(((((IkReal(-1.00000000000000))*(x542)*(x543)))+(((IkReal(-0.300000000000000))*(py)))+(((IkReal(0.0300000000000000))*(x544)))+(((px)*(x546)))+(((IkReal(-1.00000000000000))*(px)*(x547)))+(((IkReal(-1.00000000000000))*(py)*(x545))))))) < IKFAST_ATAN2_MAGTHRESH )
    continue;
j7array[0]=IKatan2(((gconst29)*(((((py)*(x546)))+(((IkReal(0.300000000000000))*(px)))+(((px)*(x545)))+(((IkReal(-1.00000000000000))*(py)*(x547)))+(((IkReal(-0.0300000000000000))*(x542)))+(((IkReal(-1.00000000000000))*(x543)*(x544)))))), ((gconst29)*(((((IkReal(-1.00000000000000))*(x542)*(x543)))+(((IkReal(-0.300000000000000))*(py)))+(((IkReal(0.0300000000000000))*(x544)))+(((px)*(x546)))+(((IkReal(-1.00000000000000))*(px)*(x547)))+(((IkReal(-1.00000000000000))*(py)*(x545)))))));
sj7array[0]=IKsin(j7array[0]);
cj7array[0]=IKcos(j7array[0]);
if( j7array[0] > IKPI )
{
    j7array[0]-=IK2PI;
}
else if( j7array[0] < -IKPI )
{    j7array[0]+=IK2PI;
}
j7valid[0] = true;
for(int ij7 = 0; ij7 < 1; ++ij7)
{
if( !j7valid[ij7] )
{
    continue;
}
_ij7[0] = ij7; _ij7[1] = -1;
for(int iij7 = ij7+1; iij7 < 1; ++iij7)
{
if( j7valid[iij7] && IKabs(cj7array[ij7]-cj7array[iij7]) < IKFAST_SOLUTION_THRESH && IKabs(sj7array[ij7]-sj7array[iij7]) < IKFAST_SOLUTION_THRESH )
{
    j7valid[iij7]=false; _ij7[1] = iij7; break;
}
}
j7 = j7array[ij7]; cj7 = cj7array[ij7]; sj7 = sj7array[ij7];
{
IkReal evalcond[5];
IkReal x548=IKcos(j7);
IkReal x549=IKsin(j7);
IkReal x550=((pz)*(sj9));
IkReal x551=((IkReal(0.0300000000000000))*(cj10));
IkReal x552=((IkReal(0.313800000000000))*(sj10));
IkReal x553=((IkReal(0.0600000000000000))*(cj9));
IkReal x554=((IkReal(1.00000000000000))*(cj9));
IkReal x555=((py)*(x548));
IkReal x556=((px)*(x548));
IkReal x557=((py)*(x549));
IkReal x558=((px)*(x549));
evalcond[0]=((((IkReal(-1.00000000000000))*(x556)))+(((IkReal(-1.00000000000000))*(x557)))+(((IkReal(-1.00000000000000))*(cj9)*(x552)))+(((IkReal(-1.00000000000000))*(cj9)*(x551)))+(((IkReal(0.0300000000000000))*(cj9))));
evalcond[1]=((IkReal(0.300000000000000))+(((IkReal(-1.00000000000000))*(x558)))+(((IkReal(-0.0300000000000000))*(sj10)))+(x555)+(((IkReal(0.313800000000000))*(cj10))));
evalcond[2]=((((cj9)*(pz)))+(((sj9)*(x557)))+(((sj9)*(x556))));
evalcond[3]=((IkReal(0.0300000000000000))+(((IkReal(-1.00000000000000))*(x554)*(x556)))+(((IkReal(-1.00000000000000))*(x554)*(x557)))+(((IkReal(-1.00000000000000))*(x551)))+(((IkReal(-1.00000000000000))*(x552)))+(x550));
evalcond[4]=((IkReal(0.00847044000000000))+(((IkReal(0.600000000000000))*(x558)))+(((IkReal(-1.00000000000000))*(pp)))+(((IkReal(-0.600000000000000))*(x555)))+(((IkReal(-0.0600000000000000))*(x550)))+(((x553)*(x556)))+(((x553)*(x557))));
if( IKabs(evalcond[0]) > 0.000001  || IKabs(evalcond[1]) > 0.000001  || IKabs(evalcond[2]) > 0.000001  || IKabs(evalcond[3]) > 0.000001  || IKabs(evalcond[4]) > 0.000001  )
{
continue;
}
}

rotationfunction0(solutions);
}
}

}

}

} else
{
{
IkReal j7array[1], cj7array[1], sj7array[1];
bool j7valid[1]={false};
_nj7 = 1;
IkReal x559=((py)*(sj9));
IkReal x560=((IkReal(0.313800000000000))*(cj10));
IkReal x561=((px)*(sj9));
IkReal x562=((IkReal(0.0300000000000000))*(sj10));
IkReal x563=((IkReal(1.00000000000000))*(cj9)*(pz));
if( IKabs(((gconst28)*(((((IkReal(-1.00000000000000))*(py)*(x563)))+(((x560)*(x561)))+(((IkReal(0.300000000000000))*(x561)))+(((IkReal(-1.00000000000000))*(x561)*(x562))))))) < IKFAST_ATAN2_MAGTHRESH && IKabs(((gconst28)*(((((IkReal(-0.300000000000000))*(x559)))+(((IkReal(-1.00000000000000))*(x559)*(x560)))+(((x559)*(x562)))+(((IkReal(-1.00000000000000))*(px)*(x563))))))) < IKFAST_ATAN2_MAGTHRESH )
    continue;
j7array[0]=IKatan2(((gconst28)*(((((IkReal(-1.00000000000000))*(py)*(x563)))+(((x560)*(x561)))+(((IkReal(0.300000000000000))*(x561)))+(((IkReal(-1.00000000000000))*(x561)*(x562)))))), ((gconst28)*(((((IkReal(-0.300000000000000))*(x559)))+(((IkReal(-1.00000000000000))*(x559)*(x560)))+(((x559)*(x562)))+(((IkReal(-1.00000000000000))*(px)*(x563)))))));
sj7array[0]=IKsin(j7array[0]);
cj7array[0]=IKcos(j7array[0]);
if( j7array[0] > IKPI )
{
    j7array[0]-=IK2PI;
}
else if( j7array[0] < -IKPI )
{    j7array[0]+=IK2PI;
}
j7valid[0] = true;
for(int ij7 = 0; ij7 < 1; ++ij7)
{
if( !j7valid[ij7] )
{
    continue;
}
_ij7[0] = ij7; _ij7[1] = -1;
for(int iij7 = ij7+1; iij7 < 1; ++iij7)
{
if( j7valid[iij7] && IKabs(cj7array[ij7]-cj7array[iij7]) < IKFAST_SOLUTION_THRESH && IKabs(sj7array[ij7]-sj7array[iij7]) < IKFAST_SOLUTION_THRESH )
{
    j7valid[iij7]=false; _ij7[1] = iij7; break;
}
}
j7 = j7array[ij7]; cj7 = cj7array[ij7]; sj7 = sj7array[ij7];
{
IkReal evalcond[5];
IkReal x564=IKcos(j7);
IkReal x565=IKsin(j7);
IkReal x566=((pz)*(sj9));
IkReal x567=((IkReal(0.0300000000000000))*(cj10));
IkReal x568=((IkReal(0.313800000000000))*(sj10));
IkReal x569=((IkReal(0.0600000000000000))*(cj9));
IkReal x570=((IkReal(1.00000000000000))*(cj9));
IkReal x571=((py)*(x564));
IkReal x572=((px)*(x564));
IkReal x573=((py)*(x565));
IkReal x574=((px)*(x565));
evalcond[0]=((((IkReal(0.0300000000000000))*(cj9)))+(((IkReal(-1.00000000000000))*(cj9)*(x568)))+(((IkReal(-1.00000000000000))*(cj9)*(x567)))+(((IkReal(-1.00000000000000))*(x572)))+(((IkReal(-1.00000000000000))*(x573))));
evalcond[1]=((IkReal(0.300000000000000))+(((IkReal(-0.0300000000000000))*(sj10)))+(((IkReal(-1.00000000000000))*(x574)))+(x571)+(((IkReal(0.313800000000000))*(cj10))));
evalcond[2]=((((cj9)*(pz)))+(((sj9)*(x573)))+(((sj9)*(x572))));
evalcond[3]=((IkReal(0.0300000000000000))+(((IkReal(-1.00000000000000))*(x570)*(x573)))+(((IkReal(-1.00000000000000))*(x570)*(x572)))+(x566)+(((IkReal(-1.00000000000000))*(x567)))+(((IkReal(-1.00000000000000))*(x568))));
evalcond[4]=((IkReal(0.00847044000000000))+(((IkReal(-0.600000000000000))*(x571)))+(((IkReal(0.600000000000000))*(x574)))+(((IkReal(-0.0600000000000000))*(x566)))+(((IkReal(-1.00000000000000))*(pp)))+(((x569)*(x573)))+(((x569)*(x572))));
if( IKabs(evalcond[0]) > 0.000001  || IKabs(evalcond[1]) > 0.000001  || IKabs(evalcond[2]) > 0.000001  || IKabs(evalcond[3]) > 0.000001  || IKabs(evalcond[4]) > 0.000001  )
{
continue;
}
}

rotationfunction0(solutions);
}
}

}

}

} else
{
IkReal x575=((IkReal(0.300000000000000))+(((IkReal(-0.0300000000000000))*(sj10)))+(((IkReal(-1.00000000000000))*(pz)))+(((IkReal(0.313800000000000))*(cj10))));
evalcond[0]=((IkReal(-3.14159265358979))+(IKfmod(((IkReal(1.57079632679490))+(j8)), IkReal(6.28318530717959))));
evalcond[1]=((IkReal(0.190270440000000))+(((IkReal(-0.0368280000000000))*(sj10)))+(((IkReal(0.186480000000000))*(cj10)))+(((IkReal(-1.00000000000000))*(pp))));
evalcond[2]=x575;
evalcond[3]=x575;
if( IKabs(evalcond[0]) < 0.0000010000000000  && IKabs(evalcond[1]) < 0.0000010000000000  && IKabs(evalcond[2]) < 0.0000010000000000  && IKabs(evalcond[3]) < 0.0000010000000000  )
{
{
IkReal dummyeval[1];
IkReal gconst34;
gconst34=IKsign((((px)*(px))+((py)*(py))));
dummyeval[0]=(((px)*(px))+((py)*(py)));
if( IKabs(dummyeval[0]) < 0.0000010000000000  )
{
{
IkReal dummyeval[1];
IkReal gconst35;
IkReal x576=((IkReal(1.00000000000000))*(sj9));
gconst35=IKsign(((((IkReal(-1.00000000000000))*(x576)*((px)*(px))))+(((IkReal(-1.00000000000000))*(x576)*((py)*(py))))));
IkReal x577=((IkReal(1.00000000000000))*(sj9));
dummyeval[0]=((((IkReal(-1.00000000000000))*(x577)*((px)*(px))))+(((IkReal(-1.00000000000000))*(x577)*((py)*(py)))));
if( IKabs(dummyeval[0]) < 0.0000010000000000  )
{
{
IkReal evalcond[4];
IkReal x578=x575;
evalcond[0]=((IkReal(-3.14159265358979))+(IKfmod(((IkReal(3.14159265358979))+(j9)), IkReal(6.28318530717959))));
evalcond[1]=((IkReal(0.190270440000000))+(((IkReal(-0.0368280000000000))*(sj10)))+(((IkReal(0.186480000000000))*(cj10)))+(((IkReal(-1.00000000000000))*(pp))));
evalcond[2]=x578;
evalcond[3]=x578;
if( IKabs(evalcond[0]) < 0.0000010000000000  && IKabs(evalcond[1]) < 0.0000010000000000  && IKabs(evalcond[2]) < 0.0000010000000000  && IKabs(evalcond[3]) < 0.0000010000000000  )
{
{
IkReal dummyeval[1];
IkReal gconst36;
gconst36=IKsign((((px)*(px))+((py)*(py))));
dummyeval[0]=(((px)*(px))+((py)*(py)));
if( IKabs(dummyeval[0]) < 0.0000010000000000  )
{
{
IkReal dummyeval[1];
IkReal gconst37;
gconst37=IKsign(((((IkReal(-3.00000000000000))*((px)*(px))))+(((IkReal(-3.00000000000000))*((py)*(py))))));
dummyeval[0]=((((IkReal(-1.00000000000000))*((px)*(px))))+(((IkReal(-1.00000000000000))*((py)*(py)))));
if( IKabs(dummyeval[0]) < 0.0000010000000000  )
{
continue;

} else
{
{
IkReal j7array[1], cj7array[1], sj7array[1];
bool j7valid[1]={false};
_nj7 = 1;
IkReal x579=((IkReal(50.0000000000000))*(pp));
IkReal x580=((IkReal(30.0000000000000))*(pz));
if( IKabs(((gconst37)*(((((IkReal(0.423522000000000))*(py)))+(((IkReal(-1.00000000000000))*(py)*(x579)))+(((py)*(x580))))))) < IKFAST_ATAN2_MAGTHRESH && IKabs(((gconst37)*(((((IkReal(0.423522000000000))*(px)))+(((IkReal(-1.00000000000000))*(px)*(x579)))+(((px)*(x580))))))) < IKFAST_ATAN2_MAGTHRESH )
    continue;
j7array[0]=IKatan2(((gconst37)*(((((IkReal(0.423522000000000))*(py)))+(((IkReal(-1.00000000000000))*(py)*(x579)))+(((py)*(x580)))))), ((gconst37)*(((((IkReal(0.423522000000000))*(px)))+(((IkReal(-1.00000000000000))*(px)*(x579)))+(((px)*(x580)))))));
sj7array[0]=IKsin(j7array[0]);
cj7array[0]=IKcos(j7array[0]);
if( j7array[0] > IKPI )
{
    j7array[0]-=IK2PI;
}
else if( j7array[0] < -IKPI )
{    j7array[0]+=IK2PI;
}
j7valid[0] = true;
for(int ij7 = 0; ij7 < 1; ++ij7)
{
if( !j7valid[ij7] )
{
    continue;
}
_ij7[0] = ij7; _ij7[1] = -1;
for(int iij7 = ij7+1; iij7 < 1; ++iij7)
{
if( j7valid[iij7] && IKabs(cj7array[ij7]-cj7array[iij7]) < IKFAST_SOLUTION_THRESH && IKabs(sj7array[ij7]-sj7array[iij7]) < IKFAST_SOLUTION_THRESH )
{
    j7valid[iij7]=false; _ij7[1] = iij7; break;
}
}
j7 = j7array[ij7]; cj7 = cj7array[ij7]; sj7 = sj7array[ij7];
{
IkReal evalcond[3];
IkReal x581=IKcos(j7);
IkReal x582=IKsin(j7);
IkReal x583=((IkReal(1.00000000000000))*(x582));
IkReal x584=((px)*(x581));
evalcond[0]=((IkReal(0.0300000000000000))+(((IkReal(-0.313800000000000))*(sj10)))+(((IkReal(-1.00000000000000))*(x584)))+(((IkReal(-1.00000000000000))*(py)*(x583)))+(((IkReal(-0.0300000000000000))*(cj10))));
evalcond[1]=((((IkReal(-1.00000000000000))*(px)*(x583)))+(((py)*(x581))));
evalcond[2]=((IkReal(0.00847044000000000))+(((IkReal(0.600000000000000))*(pz)))+(((IkReal(0.0600000000000000))*(py)*(x582)))+(((IkReal(0.0600000000000000))*(x584)))+(((IkReal(-1.00000000000000))*(pp))));
if( IKabs(evalcond[0]) > 0.000001  || IKabs(evalcond[1]) > 0.000001  || IKabs(evalcond[2]) > 0.000001  )
{
continue;
}
}

rotationfunction0(solutions);
}
}

}

}

} else
{
{
IkReal j7array[1], cj7array[1], sj7array[1];
bool j7valid[1]={false};
_nj7 = 1;
IkReal x585=((IkReal(0.0300000000000000))*(px));
IkReal x586=((IkReal(0.313800000000000))*(sj10));
IkReal x587=((IkReal(0.0300000000000000))*(py));
if( IKabs(((gconst36)*(((((IkReal(-1.00000000000000))*(py)*(x586)))+(x587)+(((IkReal(-1.00000000000000))*(cj10)*(x587))))))) < IKFAST_ATAN2_MAGTHRESH && IKabs(((gconst36)*(((((IkReal(-1.00000000000000))*(px)*(x586)))+(x585)+(((IkReal(-1.00000000000000))*(cj10)*(x585))))))) < IKFAST_ATAN2_MAGTHRESH )
    continue;
j7array[0]=IKatan2(((gconst36)*(((((IkReal(-1.00000000000000))*(py)*(x586)))+(x587)+(((IkReal(-1.00000000000000))*(cj10)*(x587)))))), ((gconst36)*(((((IkReal(-1.00000000000000))*(px)*(x586)))+(x585)+(((IkReal(-1.00000000000000))*(cj10)*(x585)))))));
sj7array[0]=IKsin(j7array[0]);
cj7array[0]=IKcos(j7array[0]);
if( j7array[0] > IKPI )
{
    j7array[0]-=IK2PI;
}
else if( j7array[0] < -IKPI )
{    j7array[0]+=IK2PI;
}
j7valid[0] = true;
for(int ij7 = 0; ij7 < 1; ++ij7)
{
if( !j7valid[ij7] )
{
    continue;
}
_ij7[0] = ij7; _ij7[1] = -1;
for(int iij7 = ij7+1; iij7 < 1; ++iij7)
{
if( j7valid[iij7] && IKabs(cj7array[ij7]-cj7array[iij7]) < IKFAST_SOLUTION_THRESH && IKabs(sj7array[ij7]-sj7array[iij7]) < IKFAST_SOLUTION_THRESH )
{
    j7valid[iij7]=false; _ij7[1] = iij7; break;
}
}
j7 = j7array[ij7]; cj7 = cj7array[ij7]; sj7 = sj7array[ij7];
{
IkReal evalcond[3];
IkReal x588=IKcos(j7);
IkReal x589=IKsin(j7);
IkReal x590=((IkReal(1.00000000000000))*(x589));
IkReal x591=((px)*(x588));
evalcond[0]=((IkReal(0.0300000000000000))+(((IkReal(-0.313800000000000))*(sj10)))+(((IkReal(-1.00000000000000))*(x591)))+(((IkReal(-1.00000000000000))*(py)*(x590)))+(((IkReal(-0.0300000000000000))*(cj10))));
evalcond[1]=((((IkReal(-1.00000000000000))*(px)*(x590)))+(((py)*(x588))));
evalcond[2]=((IkReal(0.00847044000000000))+(((IkReal(0.600000000000000))*(pz)))+(((IkReal(0.0600000000000000))*(py)*(x589)))+(((IkReal(-1.00000000000000))*(pp)))+(((IkReal(0.0600000000000000))*(x591))));
if( IKabs(evalcond[0]) > 0.000001  || IKabs(evalcond[1]) > 0.000001  || IKabs(evalcond[2]) > 0.000001  )
{
continue;
}
}

rotationfunction0(solutions);
}
}

}

}

} else
{
IkReal x592=x575;
evalcond[0]=((IkReal(-3.14159265358979))+(IKfmod(((IkReal(1.11022302462516e-16))+(j9)), IkReal(6.28318530717959))));
evalcond[1]=((IkReal(0.190270440000000))+(((IkReal(-0.0368280000000000))*(sj10)))+(((IkReal(0.186480000000000))*(cj10)))+(((IkReal(-1.00000000000000))*(pp))));
evalcond[2]=x592;
evalcond[3]=x592;
if( IKabs(evalcond[0]) < 0.0000010000000000  && IKabs(evalcond[1]) < 0.0000010000000000  && IKabs(evalcond[2]) < 0.0000010000000000  && IKabs(evalcond[3]) < 0.0000010000000000  )
{
{
IkReal dummyeval[1];
IkReal gconst38;
gconst38=IKsign((((px)*(px))+((py)*(py))));
dummyeval[0]=(((px)*(px))+((py)*(py)));
if( IKabs(dummyeval[0]) < 0.0000010000000000  )
{
{
IkReal dummyeval[1];
IkReal gconst39;
gconst39=IKsign(((((IkReal(3.00000000000000))*((py)*(py))))+(((IkReal(3.00000000000000))*((px)*(px))))));
dummyeval[0]=(((px)*(px))+((py)*(py)));
if( IKabs(dummyeval[0]) < 0.0000010000000000  )
{
continue;

} else
{
{
IkReal j7array[1], cj7array[1], sj7array[1];
bool j7valid[1]={false};
_nj7 = 1;
IkReal x593=((IkReal(50.0000000000000))*(pp));
IkReal x594=((IkReal(30.0000000000000))*(pz));
if( IKabs(((gconst39)*(((((IkReal(0.423522000000000))*(py)))+(((py)*(x594)))+(((IkReal(-1.00000000000000))*(py)*(x593))))))) < IKFAST_ATAN2_MAGTHRESH && IKabs(((gconst39)*(((((IkReal(0.423522000000000))*(px)))+(((IkReal(-1.00000000000000))*(px)*(x593)))+(((px)*(x594))))))) < IKFAST_ATAN2_MAGTHRESH )
    continue;
j7array[0]=IKatan2(((gconst39)*(((((IkReal(0.423522000000000))*(py)))+(((py)*(x594)))+(((IkReal(-1.00000000000000))*(py)*(x593)))))), ((gconst39)*(((((IkReal(0.423522000000000))*(px)))+(((IkReal(-1.00000000000000))*(px)*(x593)))+(((px)*(x594)))))));
sj7array[0]=IKsin(j7array[0]);
cj7array[0]=IKcos(j7array[0]);
if( j7array[0] > IKPI )
{
    j7array[0]-=IK2PI;
}
else if( j7array[0] < -IKPI )
{    j7array[0]+=IK2PI;
}
j7valid[0] = true;
for(int ij7 = 0; ij7 < 1; ++ij7)
{
if( !j7valid[ij7] )
{
    continue;
}
_ij7[0] = ij7; _ij7[1] = -1;
for(int iij7 = ij7+1; iij7 < 1; ++iij7)
{
if( j7valid[iij7] && IKabs(cj7array[ij7]-cj7array[iij7]) < IKFAST_SOLUTION_THRESH && IKabs(sj7array[ij7]-sj7array[iij7]) < IKFAST_SOLUTION_THRESH )
{
    j7valid[iij7]=false; _ij7[1] = iij7; break;
}
}
j7 = j7array[ij7]; cj7 = cj7array[ij7]; sj7 = sj7array[ij7];
{
IkReal evalcond[3];
IkReal x595=IKsin(j7);
IkReal x596=IKcos(j7);
IkReal x597=((IkReal(1.00000000000000))*(x596));
IkReal x598=((py)*(x595));
evalcond[0]=((IkReal(-0.0300000000000000))+(((IkReal(-1.00000000000000))*(px)*(x597)))+(((IkReal(-1.00000000000000))*(x598)))+(((IkReal(0.313800000000000))*(sj10)))+(((IkReal(0.0300000000000000))*(cj10))));
evalcond[1]=((((IkReal(-1.00000000000000))*(py)*(x597)))+(((px)*(x595))));
evalcond[2]=((IkReal(0.00847044000000000))+(((IkReal(0.600000000000000))*(pz)))+(((IkReal(-0.0600000000000000))*(px)*(x596)))+(((IkReal(-0.0600000000000000))*(x598)))+(((IkReal(-1.00000000000000))*(pp))));
if( IKabs(evalcond[0]) > 0.000001  || IKabs(evalcond[1]) > 0.000001  || IKabs(evalcond[2]) > 0.000001  )
{
continue;
}
}

rotationfunction0(solutions);
}
}

}

}

} else
{
{
IkReal j7array[1], cj7array[1], sj7array[1];
bool j7valid[1]={false};
_nj7 = 1;
IkReal x599=((IkReal(0.0300000000000000))*(px));
IkReal x600=((IkReal(0.313800000000000))*(sj10));
IkReal x601=((IkReal(0.0300000000000000))*(py));
if( IKabs(((gconst38)*(((((py)*(x600)))+(((IkReal(-1.00000000000000))*(x601)))+(((cj10)*(x601))))))) < IKFAST_ATAN2_MAGTHRESH && IKabs(((gconst38)*(((((px)*(x600)))+(((cj10)*(x599)))+(((IkReal(-1.00000000000000))*(x599))))))) < IKFAST_ATAN2_MAGTHRESH )
    continue;
j7array[0]=IKatan2(((gconst38)*(((((py)*(x600)))+(((IkReal(-1.00000000000000))*(x601)))+(((cj10)*(x601)))))), ((gconst38)*(((((px)*(x600)))+(((cj10)*(x599)))+(((IkReal(-1.00000000000000))*(x599)))))));
sj7array[0]=IKsin(j7array[0]);
cj7array[0]=IKcos(j7array[0]);
if( j7array[0] > IKPI )
{
    j7array[0]-=IK2PI;
}
else if( j7array[0] < -IKPI )
{    j7array[0]+=IK2PI;
}
j7valid[0] = true;
for(int ij7 = 0; ij7 < 1; ++ij7)
{
if( !j7valid[ij7] )
{
    continue;
}
_ij7[0] = ij7; _ij7[1] = -1;
for(int iij7 = ij7+1; iij7 < 1; ++iij7)
{
if( j7valid[iij7] && IKabs(cj7array[ij7]-cj7array[iij7]) < IKFAST_SOLUTION_THRESH && IKabs(sj7array[ij7]-sj7array[iij7]) < IKFAST_SOLUTION_THRESH )
{
    j7valid[iij7]=false; _ij7[1] = iij7; break;
}
}
j7 = j7array[ij7]; cj7 = cj7array[ij7]; sj7 = sj7array[ij7];
{
IkReal evalcond[3];
IkReal x602=IKsin(j7);
IkReal x603=IKcos(j7);
IkReal x604=((IkReal(1.00000000000000))*(x603));
IkReal x605=((py)*(x602));
evalcond[0]=((IkReal(-0.0300000000000000))+(((IkReal(0.313800000000000))*(sj10)))+(((IkReal(-1.00000000000000))*(x605)))+(((IkReal(0.0300000000000000))*(cj10)))+(((IkReal(-1.00000000000000))*(px)*(x604))));
evalcond[1]=((((px)*(x602)))+(((IkReal(-1.00000000000000))*(py)*(x604))));
evalcond[2]=((IkReal(0.00847044000000000))+(((IkReal(-0.0600000000000000))*(x605)))+(((IkReal(0.600000000000000))*(pz)))+(((IkReal(-1.00000000000000))*(pp)))+(((IkReal(-0.0600000000000000))*(px)*(x603))));
if( IKabs(evalcond[0]) > 0.000001  || IKabs(evalcond[1]) > 0.000001  || IKabs(evalcond[2]) > 0.000001  )
{
continue;
}
}

rotationfunction0(solutions);
}
}

}

}

} else
{
if( 1 )
{
continue;

} else
{
}
}
}
}

} else
{
{
IkReal j7array[1], cj7array[1], sj7array[1];
bool j7valid[1]={false};
_nj7 = 1;
IkReal x606=(sj9)*(sj9);
IkReal x607=((IkReal(0.0300000000000000))*(py));
IkReal x608=((cj9)*(sj9));
IkReal x609=((IkReal(0.0300000000000000))*(px));
IkReal x610=((IkReal(0.313800000000000))*(sj10));
IkReal x611=((cj10)*(x606));
if( IKabs(((gconst35)*(((((px)*(x606)*(x610)))+(((cj10)*(x607)*(x608)))+(((x609)*(x611)))+(((py)*(x608)*(x610)))+(((IkReal(-1.00000000000000))*(x606)*(x609)))+(((IkReal(-1.00000000000000))*(x607)*(x608))))))) < IKFAST_ATAN2_MAGTHRESH && IKabs(((gconst35)*(((((IkReal(-1.00000000000000))*(x608)*(x609)))+(((cj10)*(x608)*(x609)))+(((IkReal(-1.00000000000000))*(py)*(x606)*(x610)))+(((x606)*(x607)))+(((px)*(x608)*(x610)))+(((IkReal(-1.00000000000000))*(x607)*(x611))))))) < IKFAST_ATAN2_MAGTHRESH )
    continue;
j7array[0]=IKatan2(((gconst35)*(((((px)*(x606)*(x610)))+(((cj10)*(x607)*(x608)))+(((x609)*(x611)))+(((py)*(x608)*(x610)))+(((IkReal(-1.00000000000000))*(x606)*(x609)))+(((IkReal(-1.00000000000000))*(x607)*(x608)))))), ((gconst35)*(((((IkReal(-1.00000000000000))*(x608)*(x609)))+(((cj10)*(x608)*(x609)))+(((IkReal(-1.00000000000000))*(py)*(x606)*(x610)))+(((x606)*(x607)))+(((px)*(x608)*(x610)))+(((IkReal(-1.00000000000000))*(x607)*(x611)))))));
sj7array[0]=IKsin(j7array[0]);
cj7array[0]=IKcos(j7array[0]);
if( j7array[0] > IKPI )
{
    j7array[0]-=IK2PI;
}
else if( j7array[0] < -IKPI )
{    j7array[0]+=IK2PI;
}
j7valid[0] = true;
for(int ij7 = 0; ij7 < 1; ++ij7)
{
if( !j7valid[ij7] )
{
    continue;
}
_ij7[0] = ij7; _ij7[1] = -1;
for(int iij7 = ij7+1; iij7 < 1; ++iij7)
{
if( j7valid[iij7] && IKabs(cj7array[ij7]-cj7array[iij7]) < IKFAST_SOLUTION_THRESH && IKabs(sj7array[ij7]-sj7array[iij7]) < IKFAST_SOLUTION_THRESH )
{
    j7valid[iij7]=false; _ij7[1] = iij7; break;
}
}
j7 = j7array[ij7]; cj7 = cj7array[ij7]; sj7 = sj7array[ij7];
{
IkReal evalcond[5];
IkReal x612=IKcos(j7);
IkReal x613=IKsin(j7);
IkReal x614=((IkReal(0.0600000000000000))*(sj9));
IkReal x615=((IkReal(0.0300000000000000))*(cj10));
IkReal x616=((IkReal(0.313800000000000))*(sj10));
IkReal x617=((IkReal(0.0600000000000000))*(cj9));
IkReal x618=((IkReal(1.00000000000000))*(cj9));
IkReal x619=((py)*(x612));
IkReal x620=((px)*(x612));
IkReal x621=((py)*(x613));
IkReal x622=((px)*(x613));
evalcond[0]=((((IkReal(0.0300000000000000))*(cj9)))+(((IkReal(-1.00000000000000))*(cj9)*(x615)))+(((IkReal(-1.00000000000000))*(cj9)*(x616)))+(((IkReal(-1.00000000000000))*(x621)))+(((IkReal(-1.00000000000000))*(x620))));
evalcond[1]=((((sj9)*(x620)))+(((sj9)*(x621)))+(((cj9)*(x619)))+(((IkReal(-1.00000000000000))*(x618)*(x622))));
evalcond[2]=((IkReal(0.0300000000000000))+(((IkReal(-1.00000000000000))*(sj9)*(x622)))+(((IkReal(-1.00000000000000))*(x616)))+(((IkReal(-1.00000000000000))*(x615)))+(((sj9)*(x619)))+(((IkReal(-1.00000000000000))*(x618)*(x621)))+(((IkReal(-1.00000000000000))*(x618)*(x620))));
evalcond[3]=((((IkReal(-0.0300000000000000))*(sj9)))+(((IkReal(-1.00000000000000))*(x619)))+(x622)+(((sj9)*(x616)))+(((sj9)*(x615))));
evalcond[4]=((IkReal(0.00847044000000000))+(((IkReal(-1.00000000000000))*(x614)*(x619)))+(((x614)*(x622)))+(((IkReal(0.600000000000000))*(pz)))+(((x617)*(x621)))+(((x617)*(x620)))+(((IkReal(-1.00000000000000))*(pp))));
if( IKabs(evalcond[0]) > 0.000001  || IKabs(evalcond[1]) > 0.000001  || IKabs(evalcond[2]) > 0.000001  || IKabs(evalcond[3]) > 0.000001  || IKabs(evalcond[4]) > 0.000001  )
{
continue;
}
}

rotationfunction0(solutions);
}
}

}

}

} else
{
{
IkReal j7array[1], cj7array[1], sj7array[1];
bool j7valid[1]={false};
_nj7 = 1;
IkReal x623=((IkReal(0.0300000000000000))*(sj9));
IkReal x624=((IkReal(0.0300000000000000))*(cj9));
IkReal x625=((IkReal(0.313800000000000))*(sj10)*(sj9));
IkReal x626=((cj10)*(x624));
IkReal x627=((IkReal(0.313800000000000))*(cj9)*(sj10));
if( IKabs(((gconst34)*(((((IkReal(-1.00000000000000))*(cj10)*(px)*(x623)))+(((py)*(x624)))+(((IkReal(-1.00000000000000))*(px)*(x625)))+(((px)*(x623)))+(((IkReal(-1.00000000000000))*(py)*(x627)))+(((IkReal(-1.00000000000000))*(py)*(x626))))))) < IKFAST_ATAN2_MAGTHRESH && IKabs(((gconst34)*(((((py)*(x625)))+(((IkReal(-1.00000000000000))*(px)*(x626)))+(((IkReal(-1.00000000000000))*(px)*(x627)))+(((cj10)*(py)*(x623)))+(((px)*(x624)))+(((IkReal(-1.00000000000000))*(py)*(x623))))))) < IKFAST_ATAN2_MAGTHRESH )
    continue;
j7array[0]=IKatan2(((gconst34)*(((((IkReal(-1.00000000000000))*(cj10)*(px)*(x623)))+(((py)*(x624)))+(((IkReal(-1.00000000000000))*(px)*(x625)))+(((px)*(x623)))+(((IkReal(-1.00000000000000))*(py)*(x627)))+(((IkReal(-1.00000000000000))*(py)*(x626)))))), ((gconst34)*(((((py)*(x625)))+(((IkReal(-1.00000000000000))*(px)*(x626)))+(((IkReal(-1.00000000000000))*(px)*(x627)))+(((cj10)*(py)*(x623)))+(((px)*(x624)))+(((IkReal(-1.00000000000000))*(py)*(x623)))))));
sj7array[0]=IKsin(j7array[0]);
cj7array[0]=IKcos(j7array[0]);
if( j7array[0] > IKPI )
{
    j7array[0]-=IK2PI;
}
else if( j7array[0] < -IKPI )
{    j7array[0]+=IK2PI;
}
j7valid[0] = true;
for(int ij7 = 0; ij7 < 1; ++ij7)
{
if( !j7valid[ij7] )
{
    continue;
}
_ij7[0] = ij7; _ij7[1] = -1;
for(int iij7 = ij7+1; iij7 < 1; ++iij7)
{
if( j7valid[iij7] && IKabs(cj7array[ij7]-cj7array[iij7]) < IKFAST_SOLUTION_THRESH && IKabs(sj7array[ij7]-sj7array[iij7]) < IKFAST_SOLUTION_THRESH )
{
    j7valid[iij7]=false; _ij7[1] = iij7; break;
}
}
j7 = j7array[ij7]; cj7 = cj7array[ij7]; sj7 = sj7array[ij7];
{
IkReal evalcond[5];
IkReal x628=IKcos(j7);
IkReal x629=IKsin(j7);
IkReal x630=((IkReal(0.0600000000000000))*(sj9));
IkReal x631=((IkReal(0.0300000000000000))*(cj10));
IkReal x632=((IkReal(0.313800000000000))*(sj10));
IkReal x633=((IkReal(0.0600000000000000))*(cj9));
IkReal x634=((IkReal(1.00000000000000))*(cj9));
IkReal x635=((py)*(x628));
IkReal x636=((px)*(x628));
IkReal x637=((py)*(x629));
IkReal x638=((px)*(x629));
evalcond[0]=((((IkReal(0.0300000000000000))*(cj9)))+(((IkReal(-1.00000000000000))*(x637)))+(((IkReal(-1.00000000000000))*(x636)))+(((IkReal(-1.00000000000000))*(cj9)*(x632)))+(((IkReal(-1.00000000000000))*(cj9)*(x631))));
evalcond[1]=((((sj9)*(x636)))+(((sj9)*(x637)))+(((IkReal(-1.00000000000000))*(x634)*(x638)))+(((cj9)*(x635))));
evalcond[2]=((IkReal(0.0300000000000000))+(((sj9)*(x635)))+(((IkReal(-1.00000000000000))*(x631)))+(((IkReal(-1.00000000000000))*(x632)))+(((IkReal(-1.00000000000000))*(x634)*(x637)))+(((IkReal(-1.00000000000000))*(x634)*(x636)))+(((IkReal(-1.00000000000000))*(sj9)*(x638))));
evalcond[3]=((((IkReal(-0.0300000000000000))*(sj9)))+(((sj9)*(x631)))+(((sj9)*(x632)))+(x638)+(((IkReal(-1.00000000000000))*(x635))));
evalcond[4]=((IkReal(0.00847044000000000))+(((IkReal(0.600000000000000))*(pz)))+(((IkReal(-1.00000000000000))*(x630)*(x635)))+(((IkReal(-1.00000000000000))*(pp)))+(((x630)*(x638)))+(((x633)*(x636)))+(((x633)*(x637))));
if( IKabs(evalcond[0]) > 0.000001  || IKabs(evalcond[1]) > 0.000001  || IKabs(evalcond[2]) > 0.000001  || IKabs(evalcond[3]) > 0.000001  || IKabs(evalcond[4]) > 0.000001  )
{
continue;
}
}

rotationfunction0(solutions);
}
}

}

}

} else
{
IkReal x639=((IkReal(0.0300000000000000))*(sj10));
IkReal x640=((IkReal(0.313800000000000))*(cj10));
evalcond[0]=((IkReal(-3.14159265358979))+(IKfmod(((IkReal(4.71238898038469))+(j8)), IkReal(6.28318530717959))));
evalcond[1]=((IkReal(0.190270440000000))+(((IkReal(-0.0368280000000000))*(sj10)))+(((IkReal(0.186480000000000))*(cj10)))+(((IkReal(-1.00000000000000))*(pp))));
evalcond[2]=((IkReal(0.300000000000000))+(((IkReal(-1.00000000000000))*(x639)))+(pz)+(x640));
evalcond[3]=((IkReal(-0.300000000000000))+(((IkReal(-1.00000000000000))*(pz)))+(((IkReal(-1.00000000000000))*(x640)))+(x639));
if( IKabs(evalcond[0]) < 0.0000010000000000  && IKabs(evalcond[1]) < 0.0000010000000000  && IKabs(evalcond[2]) < 0.0000010000000000  && IKabs(evalcond[3]) < 0.0000010000000000  )
{
{
IkReal dummyeval[1];
IkReal gconst40;
gconst40=IKsign((((px)*(px))+((py)*(py))));
dummyeval[0]=(((px)*(px))+((py)*(py)));
if( IKabs(dummyeval[0]) < 0.0000010000000000  )
{
{
IkReal dummyeval[1];
IkReal gconst41;
IkReal x641=((IkReal(1.00000000000000))*(sj9));
gconst41=IKsign(((((IkReal(-1.00000000000000))*(x641)*((py)*(py))))+(((IkReal(-1.00000000000000))*(x641)*((px)*(px))))));
IkReal x642=((IkReal(1.00000000000000))*(sj9));
dummyeval[0]=((((IkReal(-1.00000000000000))*(x642)*((py)*(py))))+(((IkReal(-1.00000000000000))*(x642)*((px)*(px)))));
if( IKabs(dummyeval[0]) < 0.0000010000000000  )
{
{
IkReal evalcond[4];
IkReal x643=((IkReal(0.0300000000000000))*(sj10));
IkReal x644=((IkReal(0.313800000000000))*(cj10));
evalcond[0]=((IkReal(-3.14159265358979))+(IKfmod(((IkReal(3.14159265358979))+(j9)), IkReal(6.28318530717959))));
evalcond[1]=((IkReal(0.190270440000000))+(((IkReal(-0.0368280000000000))*(sj10)))+(((IkReal(0.186480000000000))*(cj10)))+(((IkReal(-1.00000000000000))*(pp))));
evalcond[2]=((IkReal(0.300000000000000))+(((IkReal(-1.00000000000000))*(x643)))+(pz)+(x644));
evalcond[3]=((IkReal(-0.300000000000000))+(((IkReal(-1.00000000000000))*(pz)))+(((IkReal(-1.00000000000000))*(x644)))+(x643));
if( IKabs(evalcond[0]) < 0.0000010000000000  && IKabs(evalcond[1]) < 0.0000010000000000  && IKabs(evalcond[2]) < 0.0000010000000000  && IKabs(evalcond[3]) < 0.0000010000000000  )
{
{
IkReal dummyeval[1];
IkReal gconst42;
gconst42=IKsign((((px)*(px))+((py)*(py))));
dummyeval[0]=(((px)*(px))+((py)*(py)));
if( IKabs(dummyeval[0]) < 0.0000010000000000  )
{
{
IkReal dummyeval[1];
IkReal gconst43;
gconst43=IKsign(((((IkReal(-3.00000000000000))*((px)*(px))))+(((IkReal(-3.00000000000000))*((py)*(py))))));
dummyeval[0]=((((IkReal(-1.00000000000000))*((px)*(px))))+(((IkReal(-1.00000000000000))*((py)*(py)))));
if( IKabs(dummyeval[0]) < 0.0000010000000000  )
{
continue;

} else
{
{
IkReal j7array[1], cj7array[1], sj7array[1];
bool j7valid[1]={false};
_nj7 = 1;
IkReal x645=((IkReal(50.0000000000000))*(pp));
IkReal x646=((IkReal(30.0000000000000))*(pz));
if( IKabs(((gconst43)*(((((IkReal(0.423522000000000))*(py)))+(((IkReal(-1.00000000000000))*(py)*(x646)))+(((IkReal(-1.00000000000000))*(py)*(x645))))))) < IKFAST_ATAN2_MAGTHRESH && IKabs(((gconst43)*(((((IkReal(0.423522000000000))*(px)))+(((IkReal(-1.00000000000000))*(px)*(x645)))+(((IkReal(-1.00000000000000))*(px)*(x646))))))) < IKFAST_ATAN2_MAGTHRESH )
    continue;
j7array[0]=IKatan2(((gconst43)*(((((IkReal(0.423522000000000))*(py)))+(((IkReal(-1.00000000000000))*(py)*(x646)))+(((IkReal(-1.00000000000000))*(py)*(x645)))))), ((gconst43)*(((((IkReal(0.423522000000000))*(px)))+(((IkReal(-1.00000000000000))*(px)*(x645)))+(((IkReal(-1.00000000000000))*(px)*(x646)))))));
sj7array[0]=IKsin(j7array[0]);
cj7array[0]=IKcos(j7array[0]);
if( j7array[0] > IKPI )
{
    j7array[0]-=IK2PI;
}
else if( j7array[0] < -IKPI )
{    j7array[0]+=IK2PI;
}
j7valid[0] = true;
for(int ij7 = 0; ij7 < 1; ++ij7)
{
if( !j7valid[ij7] )
{
    continue;
}
_ij7[0] = ij7; _ij7[1] = -1;
for(int iij7 = ij7+1; iij7 < 1; ++iij7)
{
if( j7valid[iij7] && IKabs(cj7array[ij7]-cj7array[iij7]) < IKFAST_SOLUTION_THRESH && IKabs(sj7array[ij7]-sj7array[iij7]) < IKFAST_SOLUTION_THRESH )
{
    j7valid[iij7]=false; _ij7[1] = iij7; break;
}
}
j7 = j7array[ij7]; cj7 = cj7array[ij7]; sj7 = sj7array[ij7];
{
IkReal evalcond[3];
IkReal x647=IKsin(j7);
IkReal x648=IKcos(j7);
IkReal x649=((IkReal(1.00000000000000))*(py));
IkReal x650=((px)*(x648));
evalcond[0]=((IkReal(0.0300000000000000))+(((IkReal(-0.313800000000000))*(sj10)))+(((IkReal(-1.00000000000000))*(x650)))+(((IkReal(-1.00000000000000))*(x647)*(x649)))+(((IkReal(-0.0300000000000000))*(cj10))));
evalcond[1]=((((px)*(x647)))+(((IkReal(-1.00000000000000))*(x648)*(x649))));
evalcond[2]=((IkReal(0.00847044000000000))+(((IkReal(0.0600000000000000))*(py)*(x647)))+(((IkReal(-0.600000000000000))*(pz)))+(((IkReal(0.0600000000000000))*(x650)))+(((IkReal(-1.00000000000000))*(pp))));
if( IKabs(evalcond[0]) > 0.000001  || IKabs(evalcond[1]) > 0.000001  || IKabs(evalcond[2]) > 0.000001  )
{
continue;
}
}

rotationfunction0(solutions);
}
}

}

}

} else
{
{
IkReal j7array[1], cj7array[1], sj7array[1];
bool j7valid[1]={false};
_nj7 = 1;
IkReal x651=((IkReal(0.0300000000000000))*(px));
IkReal x652=((IkReal(0.313800000000000))*(sj10));
IkReal x653=((IkReal(0.0300000000000000))*(py));
if( IKabs(((gconst42)*(((((IkReal(-1.00000000000000))*(cj10)*(x653)))+(x653)+(((IkReal(-1.00000000000000))*(py)*(x652))))))) < IKFAST_ATAN2_MAGTHRESH && IKabs(((gconst42)*(((((IkReal(-1.00000000000000))*(px)*(x652)))+(((IkReal(-1.00000000000000))*(cj10)*(x651)))+(x651))))) < IKFAST_ATAN2_MAGTHRESH )
    continue;
j7array[0]=IKatan2(((gconst42)*(((((IkReal(-1.00000000000000))*(cj10)*(x653)))+(x653)+(((IkReal(-1.00000000000000))*(py)*(x652)))))), ((gconst42)*(((((IkReal(-1.00000000000000))*(px)*(x652)))+(((IkReal(-1.00000000000000))*(cj10)*(x651)))+(x651)))));
sj7array[0]=IKsin(j7array[0]);
cj7array[0]=IKcos(j7array[0]);
if( j7array[0] > IKPI )
{
    j7array[0]-=IK2PI;
}
else if( j7array[0] < -IKPI )
{    j7array[0]+=IK2PI;
}
j7valid[0] = true;
for(int ij7 = 0; ij7 < 1; ++ij7)
{
if( !j7valid[ij7] )
{
    continue;
}
_ij7[0] = ij7; _ij7[1] = -1;
for(int iij7 = ij7+1; iij7 < 1; ++iij7)
{
if( j7valid[iij7] && IKabs(cj7array[ij7]-cj7array[iij7]) < IKFAST_SOLUTION_THRESH && IKabs(sj7array[ij7]-sj7array[iij7]) < IKFAST_SOLUTION_THRESH )
{
    j7valid[iij7]=false; _ij7[1] = iij7; break;
}
}
j7 = j7array[ij7]; cj7 = cj7array[ij7]; sj7 = sj7array[ij7];
{
IkReal evalcond[3];
IkReal x654=IKsin(j7);
IkReal x655=IKcos(j7);
IkReal x656=((IkReal(1.00000000000000))*(py));
IkReal x657=((px)*(x655));
evalcond[0]=((IkReal(0.0300000000000000))+(((IkReal(-0.313800000000000))*(sj10)))+(((IkReal(-1.00000000000000))*(x657)))+(((IkReal(-1.00000000000000))*(x654)*(x656)))+(((IkReal(-0.0300000000000000))*(cj10))));
evalcond[1]=((((IkReal(-1.00000000000000))*(x655)*(x656)))+(((px)*(x654))));
evalcond[2]=((IkReal(0.00847044000000000))+(((IkReal(-0.600000000000000))*(pz)))+(((IkReal(0.0600000000000000))*(py)*(x654)))+(((IkReal(0.0600000000000000))*(x657)))+(((IkReal(-1.00000000000000))*(pp))));
if( IKabs(evalcond[0]) > 0.000001  || IKabs(evalcond[1]) > 0.000001  || IKabs(evalcond[2]) > 0.000001  )
{
continue;
}
}

rotationfunction0(solutions);
}
}

}

}

} else
{
IkReal x658=((IkReal(0.0300000000000000))*(sj10));
IkReal x659=((IkReal(0.313800000000000))*(cj10));
evalcond[0]=((IkReal(-3.14159265358979))+(IKfmod(((IkReal(1.11022302462516e-16))+(j9)), IkReal(6.28318530717959))));
evalcond[1]=((IkReal(0.190270440000000))+(((IkReal(-0.0368280000000000))*(sj10)))+(((IkReal(0.186480000000000))*(cj10)))+(((IkReal(-1.00000000000000))*(pp))));
evalcond[2]=((IkReal(0.300000000000000))+(((IkReal(-1.00000000000000))*(x658)))+(pz)+(x659));
evalcond[3]=((IkReal(-0.300000000000000))+(((IkReal(-1.00000000000000))*(x659)))+(((IkReal(-1.00000000000000))*(pz)))+(x658));
if( IKabs(evalcond[0]) < 0.0000010000000000  && IKabs(evalcond[1]) < 0.0000010000000000  && IKabs(evalcond[2]) < 0.0000010000000000  && IKabs(evalcond[3]) < 0.0000010000000000  )
{
{
IkReal dummyeval[1];
IkReal gconst44;
gconst44=IKsign((((px)*(px))+((py)*(py))));
dummyeval[0]=(((px)*(px))+((py)*(py)));
if( IKabs(dummyeval[0]) < 0.0000010000000000  )
{
{
IkReal dummyeval[1];
IkReal gconst45;
gconst45=IKsign(((((IkReal(3.00000000000000))*((py)*(py))))+(((IkReal(3.00000000000000))*((px)*(px))))));
dummyeval[0]=(((px)*(px))+((py)*(py)));
if( IKabs(dummyeval[0]) < 0.0000010000000000  )
{
continue;

} else
{
{
IkReal j7array[1], cj7array[1], sj7array[1];
bool j7valid[1]={false};
_nj7 = 1;
IkReal x660=((IkReal(50.0000000000000))*(pp));
IkReal x661=((IkReal(30.0000000000000))*(pz));
if( IKabs(((gconst45)*(((((IkReal(0.423522000000000))*(py)))+(((IkReal(-1.00000000000000))*(py)*(x661)))+(((IkReal(-1.00000000000000))*(py)*(x660))))))) < IKFAST_ATAN2_MAGTHRESH && IKabs(((gconst45)*(((((IkReal(0.423522000000000))*(px)))+(((IkReal(-1.00000000000000))*(px)*(x660)))+(((IkReal(-1.00000000000000))*(px)*(x661))))))) < IKFAST_ATAN2_MAGTHRESH )
    continue;
j7array[0]=IKatan2(((gconst45)*(((((IkReal(0.423522000000000))*(py)))+(((IkReal(-1.00000000000000))*(py)*(x661)))+(((IkReal(-1.00000000000000))*(py)*(x660)))))), ((gconst45)*(((((IkReal(0.423522000000000))*(px)))+(((IkReal(-1.00000000000000))*(px)*(x660)))+(((IkReal(-1.00000000000000))*(px)*(x661)))))));
sj7array[0]=IKsin(j7array[0]);
cj7array[0]=IKcos(j7array[0]);
if( j7array[0] > IKPI )
{
    j7array[0]-=IK2PI;
}
else if( j7array[0] < -IKPI )
{    j7array[0]+=IK2PI;
}
j7valid[0] = true;
for(int ij7 = 0; ij7 < 1; ++ij7)
{
if( !j7valid[ij7] )
{
    continue;
}
_ij7[0] = ij7; _ij7[1] = -1;
for(int iij7 = ij7+1; iij7 < 1; ++iij7)
{
if( j7valid[iij7] && IKabs(cj7array[ij7]-cj7array[iij7]) < IKFAST_SOLUTION_THRESH && IKabs(sj7array[ij7]-sj7array[iij7]) < IKFAST_SOLUTION_THRESH )
{
    j7valid[iij7]=false; _ij7[1] = iij7; break;
}
}
j7 = j7array[ij7]; cj7 = cj7array[ij7]; sj7 = sj7array[ij7];
{
IkReal evalcond[3];
IkReal x662=IKcos(j7);
IkReal x663=IKsin(j7);
IkReal x664=((IkReal(1.00000000000000))*(px));
IkReal x665=((py)*(x663));
evalcond[0]=((IkReal(-0.0300000000000000))+(((IkReal(-1.00000000000000))*(x662)*(x664)))+(((IkReal(0.313800000000000))*(sj10)))+(((IkReal(-1.00000000000000))*(x665)))+(((IkReal(0.0300000000000000))*(cj10))));
evalcond[1]=((((IkReal(-1.00000000000000))*(x663)*(x664)))+(((py)*(x662))));
evalcond[2]=((IkReal(0.00847044000000000))+(((IkReal(-0.600000000000000))*(pz)))+(((IkReal(-1.00000000000000))*(pp)))+(((IkReal(-0.0600000000000000))*(px)*(x662)))+(((IkReal(-0.0600000000000000))*(x665))));
if( IKabs(evalcond[0]) > 0.000001  || IKabs(evalcond[1]) > 0.000001  || IKabs(evalcond[2]) > 0.000001  )
{
continue;
}
}

rotationfunction0(solutions);
}
}

}

}

} else
{
{
IkReal j7array[1], cj7array[1], sj7array[1];
bool j7valid[1]={false};
_nj7 = 1;
IkReal x666=((IkReal(0.0300000000000000))*(px));
IkReal x667=((IkReal(0.313800000000000))*(sj10));
IkReal x668=((IkReal(0.0300000000000000))*(py));
if( IKabs(((gconst44)*(((((py)*(x667)))+(((IkReal(-1.00000000000000))*(x668)))+(((cj10)*(x668))))))) < IKFAST_ATAN2_MAGTHRESH && IKabs(((gconst44)*(((((px)*(x667)))+(((IkReal(-1.00000000000000))*(x666)))+(((cj10)*(x666))))))) < IKFAST_ATAN2_MAGTHRESH )
    continue;
j7array[0]=IKatan2(((gconst44)*(((((py)*(x667)))+(((IkReal(-1.00000000000000))*(x668)))+(((cj10)*(x668)))))), ((gconst44)*(((((px)*(x667)))+(((IkReal(-1.00000000000000))*(x666)))+(((cj10)*(x666)))))));
sj7array[0]=IKsin(j7array[0]);
cj7array[0]=IKcos(j7array[0]);
if( j7array[0] > IKPI )
{
    j7array[0]-=IK2PI;
}
else if( j7array[0] < -IKPI )
{    j7array[0]+=IK2PI;
}
j7valid[0] = true;
for(int ij7 = 0; ij7 < 1; ++ij7)
{
if( !j7valid[ij7] )
{
    continue;
}
_ij7[0] = ij7; _ij7[1] = -1;
for(int iij7 = ij7+1; iij7 < 1; ++iij7)
{
if( j7valid[iij7] && IKabs(cj7array[ij7]-cj7array[iij7]) < IKFAST_SOLUTION_THRESH && IKabs(sj7array[ij7]-sj7array[iij7]) < IKFAST_SOLUTION_THRESH )
{
    j7valid[iij7]=false; _ij7[1] = iij7; break;
}
}
j7 = j7array[ij7]; cj7 = cj7array[ij7]; sj7 = sj7array[ij7];
{
IkReal evalcond[3];
IkReal x669=IKcos(j7);
IkReal x670=IKsin(j7);
IkReal x671=((IkReal(1.00000000000000))*(px));
IkReal x672=((py)*(x670));
evalcond[0]=((IkReal(-0.0300000000000000))+(((IkReal(0.313800000000000))*(sj10)))+(((IkReal(0.0300000000000000))*(cj10)))+(((IkReal(-1.00000000000000))*(x669)*(x671)))+(((IkReal(-1.00000000000000))*(x672))));
evalcond[1]=((((IkReal(-1.00000000000000))*(x670)*(x671)))+(((py)*(x669))));
evalcond[2]=((IkReal(0.00847044000000000))+(((IkReal(-0.600000000000000))*(pz)))+(((IkReal(-1.00000000000000))*(pp)))+(((IkReal(-0.0600000000000000))*(x672)))+(((IkReal(-0.0600000000000000))*(px)*(x669))));
if( IKabs(evalcond[0]) > 0.000001  || IKabs(evalcond[1]) > 0.000001  || IKabs(evalcond[2]) > 0.000001  )
{
continue;
}
}

rotationfunction0(solutions);
}
}

}

}

} else
{
if( 1 )
{
continue;

} else
{
}
}
}
}

} else
{
{
IkReal j7array[1], cj7array[1], sj7array[1];
bool j7valid[1]={false};
_nj7 = 1;
IkReal x673=(sj9)*(sj9);
IkReal x674=((IkReal(0.0300000000000000))*(py));
IkReal x675=((cj9)*(sj9));
IkReal x676=((IkReal(0.0300000000000000))*(px));
IkReal x677=((cj10)*(x673));
IkReal x678=((IkReal(0.313800000000000))*(py)*(sj10));
IkReal x679=((IkReal(0.313800000000000))*(px)*(sj10));
if( IKabs(((gconst41)*(((((x673)*(x676)))+(((IkReal(-1.00000000000000))*(x676)*(x677)))+(((cj10)*(x674)*(x675)))+(((IkReal(-1.00000000000000))*(x674)*(x675)))+(((x675)*(x678)))+(((IkReal(-1.00000000000000))*(x673)*(x679))))))) < IKFAST_ATAN2_MAGTHRESH && IKabs(((gconst41)*(((((cj10)*(x675)*(x676)))+(((x673)*(x678)))+(((IkReal(-1.00000000000000))*(x675)*(x676)))+(((x674)*(x677)))+(((x675)*(x679)))+(((IkReal(-1.00000000000000))*(x673)*(x674))))))) < IKFAST_ATAN2_MAGTHRESH )
    continue;
j7array[0]=IKatan2(((gconst41)*(((((x673)*(x676)))+(((IkReal(-1.00000000000000))*(x676)*(x677)))+(((cj10)*(x674)*(x675)))+(((IkReal(-1.00000000000000))*(x674)*(x675)))+(((x675)*(x678)))+(((IkReal(-1.00000000000000))*(x673)*(x679)))))), ((gconst41)*(((((cj10)*(x675)*(x676)))+(((x673)*(x678)))+(((IkReal(-1.00000000000000))*(x675)*(x676)))+(((x674)*(x677)))+(((x675)*(x679)))+(((IkReal(-1.00000000000000))*(x673)*(x674)))))));
sj7array[0]=IKsin(j7array[0]);
cj7array[0]=IKcos(j7array[0]);
if( j7array[0] > IKPI )
{
    j7array[0]-=IK2PI;
}
else if( j7array[0] < -IKPI )
{    j7array[0]+=IK2PI;
}
j7valid[0] = true;
for(int ij7 = 0; ij7 < 1; ++ij7)
{
if( !j7valid[ij7] )
{
    continue;
}
_ij7[0] = ij7; _ij7[1] = -1;
for(int iij7 = ij7+1; iij7 < 1; ++iij7)
{
if( j7valid[iij7] && IKabs(cj7array[ij7]-cj7array[iij7]) < IKFAST_SOLUTION_THRESH && IKabs(sj7array[ij7]-sj7array[iij7]) < IKFAST_SOLUTION_THRESH )
{
    j7valid[iij7]=false; _ij7[1] = iij7; break;
}
}
j7 = j7array[ij7]; cj7 = cj7array[ij7]; sj7 = sj7array[ij7];
{
IkReal evalcond[5];
IkReal x680=IKsin(j7);
IkReal x681=IKcos(j7);
IkReal x682=((IkReal(0.0600000000000000))*(sj9));
IkReal x683=((px)*(sj9));
IkReal x684=((IkReal(0.0300000000000000))*(cj10));
IkReal x685=((IkReal(0.313800000000000))*(sj10));
IkReal x686=((IkReal(0.0600000000000000))*(cj9));
IkReal x687=((IkReal(1.00000000000000))*(cj9));
IkReal x688=((py)*(x681));
IkReal x689=((px)*(x681));
IkReal x690=((py)*(x680));
IkReal x691=((px)*(x680));
evalcond[0]=((((IkReal(-1.00000000000000))*(cj9)*(x685)))+(((IkReal(-1.00000000000000))*(cj9)*(x684)))+(((IkReal(0.0300000000000000))*(cj9)))+(((IkReal(-1.00000000000000))*(x689)))+(((IkReal(-1.00000000000000))*(x690))));
evalcond[1]=((((IkReal(-1.00000000000000))*(x687)*(x688)))+(((cj9)*(x691)))+(((x681)*(x683)))+(((sj9)*(x690))));
evalcond[2]=((IkReal(0.0300000000000000))+(((IkReal(-1.00000000000000))*(x687)*(x690)))+(((IkReal(-1.00000000000000))*(x687)*(x689)))+(((IkReal(-1.00000000000000))*(sj9)*(x688)))+(((IkReal(-1.00000000000000))*(x684)))+(((IkReal(-1.00000000000000))*(x685)))+(((x680)*(x683))));
evalcond[3]=((((IkReal(0.0300000000000000))*(sj9)))+(((IkReal(-1.00000000000000))*(sj9)*(x684)))+(((IkReal(-1.00000000000000))*(sj9)*(x685)))+(x691)+(((IkReal(-1.00000000000000))*(x688))));
evalcond[4]=((IkReal(0.00847044000000000))+(((x686)*(x689)))+(((x682)*(x688)))+(((x686)*(x690)))+(((IkReal(-0.600000000000000))*(pz)))+(((IkReal(-1.00000000000000))*(x682)*(x691)))+(((IkReal(-1.00000000000000))*(pp))));
if( IKabs(evalcond[0]) > 0.000001  || IKabs(evalcond[1]) > 0.000001  || IKabs(evalcond[2]) > 0.000001  || IKabs(evalcond[3]) > 0.000001  || IKabs(evalcond[4]) > 0.000001  )
{
continue;
}
}

rotationfunction0(solutions);
}
}

}

}

} else
{
{
IkReal j7array[1], cj7array[1], sj7array[1];
bool j7valid[1]={false};
_nj7 = 1;
IkReal x692=((IkReal(0.0300000000000000))*(sj9));
IkReal x693=((IkReal(0.0300000000000000))*(cj9));
IkReal x694=((cj10)*(x693));
IkReal x695=((IkReal(0.313800000000000))*(px)*(sj10));
IkReal x696=((IkReal(0.313800000000000))*(py)*(sj10));
if( IKabs(((gconst40)*(((((IkReal(-1.00000000000000))*(cj9)*(x696)))+(((py)*(x693)))+(((IkReal(-1.00000000000000))*(px)*(x692)))+(((cj10)*(px)*(x692)))+(((IkReal(-1.00000000000000))*(py)*(x694)))+(((sj9)*(x695))))))) < IKFAST_ATAN2_MAGTHRESH && IKabs(((gconst40)*(((((IkReal(-1.00000000000000))*(cj10)*(py)*(x692)))+(((IkReal(-1.00000000000000))*(cj9)*(x695)))+(((py)*(x692)))+(((IkReal(-1.00000000000000))*(px)*(x694)))+(((px)*(x693)))+(((IkReal(-1.00000000000000))*(sj9)*(x696))))))) < IKFAST_ATAN2_MAGTHRESH )
    continue;
j7array[0]=IKatan2(((gconst40)*(((((IkReal(-1.00000000000000))*(cj9)*(x696)))+(((py)*(x693)))+(((IkReal(-1.00000000000000))*(px)*(x692)))+(((cj10)*(px)*(x692)))+(((IkReal(-1.00000000000000))*(py)*(x694)))+(((sj9)*(x695)))))), ((gconst40)*(((((IkReal(-1.00000000000000))*(cj10)*(py)*(x692)))+(((IkReal(-1.00000000000000))*(cj9)*(x695)))+(((py)*(x692)))+(((IkReal(-1.00000000000000))*(px)*(x694)))+(((px)*(x693)))+(((IkReal(-1.00000000000000))*(sj9)*(x696)))))));
sj7array[0]=IKsin(j7array[0]);
cj7array[0]=IKcos(j7array[0]);
if( j7array[0] > IKPI )
{
    j7array[0]-=IK2PI;
}
else if( j7array[0] < -IKPI )
{    j7array[0]+=IK2PI;
}
j7valid[0] = true;
for(int ij7 = 0; ij7 < 1; ++ij7)
{
if( !j7valid[ij7] )
{
    continue;
}
_ij7[0] = ij7; _ij7[1] = -1;
for(int iij7 = ij7+1; iij7 < 1; ++iij7)
{
if( j7valid[iij7] && IKabs(cj7array[ij7]-cj7array[iij7]) < IKFAST_SOLUTION_THRESH && IKabs(sj7array[ij7]-sj7array[iij7]) < IKFAST_SOLUTION_THRESH )
{
    j7valid[iij7]=false; _ij7[1] = iij7; break;
}
}
j7 = j7array[ij7]; cj7 = cj7array[ij7]; sj7 = sj7array[ij7];
{
IkReal evalcond[5];
IkReal x697=IKsin(j7);
IkReal x698=IKcos(j7);
IkReal x699=((IkReal(0.0600000000000000))*(sj9));
IkReal x700=((px)*(sj9));
IkReal x701=((IkReal(0.0300000000000000))*(cj10));
IkReal x702=((IkReal(0.313800000000000))*(sj10));
IkReal x703=((IkReal(0.0600000000000000))*(cj9));
IkReal x704=((IkReal(1.00000000000000))*(cj9));
IkReal x705=((py)*(x698));
IkReal x706=((px)*(x698));
IkReal x707=((py)*(x697));
IkReal x708=((px)*(x697));
evalcond[0]=((((IkReal(-1.00000000000000))*(cj9)*(x702)))+(((IkReal(-1.00000000000000))*(cj9)*(x701)))+(((IkReal(0.0300000000000000))*(cj9)))+(((IkReal(-1.00000000000000))*(x706)))+(((IkReal(-1.00000000000000))*(x707))));
evalcond[1]=((((sj9)*(x707)))+(((IkReal(-1.00000000000000))*(x704)*(x705)))+(((x698)*(x700)))+(((cj9)*(x708))));
evalcond[2]=((IkReal(0.0300000000000000))+(((x697)*(x700)))+(((IkReal(-1.00000000000000))*(sj9)*(x705)))+(((IkReal(-1.00000000000000))*(x702)))+(((IkReal(-1.00000000000000))*(x701)))+(((IkReal(-1.00000000000000))*(x704)*(x706)))+(((IkReal(-1.00000000000000))*(x704)*(x707))));
evalcond[3]=((((IkReal(-1.00000000000000))*(sj9)*(x702)))+(((IkReal(-1.00000000000000))*(sj9)*(x701)))+(((IkReal(0.0300000000000000))*(sj9)))+(((IkReal(-1.00000000000000))*(x705)))+(x708));
evalcond[4]=((IkReal(0.00847044000000000))+(((IkReal(-0.600000000000000))*(pz)))+(((x703)*(x706)))+(((x703)*(x707)))+(((IkReal(-1.00000000000000))*(pp)))+(((IkReal(-1.00000000000000))*(x699)*(x708)))+(((x699)*(x705))));
if( IKabs(evalcond[0]) > 0.000001  || IKabs(evalcond[1]) > 0.000001  || IKabs(evalcond[2]) > 0.000001  || IKabs(evalcond[3]) > 0.000001  || IKabs(evalcond[4]) > 0.000001  )
{
continue;
}
}

rotationfunction0(solutions);
}
}

}

}

} else
{
if( 1 )
{
continue;

} else
{
}
}
}
}
}
}
}
}

} else
{
{
IkReal j7array[1], cj7array[1], sj7array[1];
bool j7valid[1]={false};
_nj7 = 1;
IkReal x709=(cj9)*(cj9);
IkReal x710=((IkReal(0.313800000000000))*(sj10));
IkReal x711=((cj10)*(px));
IkReal x712=((cj9)*(sj9));
IkReal x713=((py)*(x712));
IkReal x714=((sj8)*(x709));
IkReal x715=((cj8)*(cj9)*(pz));
IkReal x716=((IkReal(0.0300000000000000))*(x714));
if( IKabs(((gconst1)*(((((IkReal(-1.00000000000000))*(py)*(x710)*(x714)))+(((IkReal(0.0300000000000000))*(px)*(x712)))+(((IkReal(-1.00000000000000))*(px)*(x715)))+(((IkReal(-1.00000000000000))*(px)*(x710)*(x712)))+(((IkReal(-0.0300000000000000))*(x711)*(x712)))+(((IkReal(-1.00000000000000))*(cj10)*(py)*(x716)))+(((py)*(x716))))))) < IKFAST_ATAN2_MAGTHRESH && IKabs(((gconst1)*(((((IkReal(-1.00000000000000))*(x711)*(x716)))+(((IkReal(-0.0300000000000000))*(x713)))+(((IkReal(-1.00000000000000))*(px)*(x710)*(x714)))+(((x710)*(x713)))+(((px)*(x716)))+(((IkReal(0.0300000000000000))*(cj10)*(x713)))+(((py)*(x715))))))) < IKFAST_ATAN2_MAGTHRESH )
    continue;
j7array[0]=IKatan2(((gconst1)*(((((IkReal(-1.00000000000000))*(py)*(x710)*(x714)))+(((IkReal(0.0300000000000000))*(px)*(x712)))+(((IkReal(-1.00000000000000))*(px)*(x715)))+(((IkReal(-1.00000000000000))*(px)*(x710)*(x712)))+(((IkReal(-0.0300000000000000))*(x711)*(x712)))+(((IkReal(-1.00000000000000))*(cj10)*(py)*(x716)))+(((py)*(x716)))))), ((gconst1)*(((((IkReal(-1.00000000000000))*(x711)*(x716)))+(((IkReal(-0.0300000000000000))*(x713)))+(((IkReal(-1.00000000000000))*(px)*(x710)*(x714)))+(((x710)*(x713)))+(((px)*(x716)))+(((IkReal(0.0300000000000000))*(cj10)*(x713)))+(((py)*(x715)))))));
sj7array[0]=IKsin(j7array[0]);
cj7array[0]=IKcos(j7array[0]);
if( j7array[0] > IKPI )
{
    j7array[0]-=IK2PI;
}
else if( j7array[0] < -IKPI )
{    j7array[0]+=IK2PI;
}
j7valid[0] = true;
for(int ij7 = 0; ij7 < 1; ++ij7)
{
if( !j7valid[ij7] )
{
    continue;
}
_ij7[0] = ij7; _ij7[1] = -1;
for(int iij7 = ij7+1; iij7 < 1; ++iij7)
{
if( j7valid[iij7] && IKabs(cj7array[ij7]-cj7array[iij7]) < IKFAST_SOLUTION_THRESH && IKabs(sj7array[ij7]-sj7array[iij7]) < IKFAST_SOLUTION_THRESH )
{
    j7valid[iij7]=false; _ij7[1] = iij7; break;
}
}
j7 = j7array[ij7]; cj7 = cj7array[ij7]; sj7 = sj7array[ij7];
{
IkReal evalcond[6];
IkReal x717=IKsin(j7);
IkReal x718=IKcos(j7);
IkReal x719=((sj8)*(sj9));
IkReal x720=((IkReal(1.00000000000000))*(cj8));
IkReal x721=((IkReal(0.600000000000000))*(cj8));
IkReal x722=((IkReal(0.0300000000000000))*(cj10));
IkReal x723=((IkReal(0.313800000000000))*(sj10));
IkReal x724=((IkReal(0.0600000000000000))*(cj9));
IkReal x725=((IkReal(0.0300000000000000))*(sj10));
IkReal x726=((IkReal(1.00000000000000))*(cj9));
IkReal x727=((pz)*(sj9));
IkReal x728=((IkReal(0.313800000000000))*(cj10));
IkReal x729=((pz)*(sj8));
IkReal x730=((py)*(x718));
IkReal x731=((px)*(x718));
IkReal x732=((px)*(x717));
IkReal x733=((py)*(x717));
evalcond[0]=((((IkReal(0.0300000000000000))*(cj9)))+(((IkReal(-1.00000000000000))*(x733)))+(((IkReal(-1.00000000000000))*(x731)))+(((IkReal(-1.00000000000000))*(cj9)*(x722)))+(((IkReal(-1.00000000000000))*(cj9)*(x723))));
evalcond[1]=((IkReal(0.300000000000000))+(((IkReal(-1.00000000000000))*(x725)))+(((IkReal(-1.00000000000000))*(x729)))+(((IkReal(-1.00000000000000))*(x720)*(x730)))+(x728)+(((cj8)*(x732))));
evalcond[2]=((((sj9)*(x731)))+(((sj9)*(x733)))+(((cj9)*(sj8)*(x730)))+(((IkReal(-1.00000000000000))*(sj8)*(x726)*(x732)))+(((IkReal(-1.00000000000000))*(cj9)*(pz)*(x720))));
evalcond[3]=((IkReal(0.0300000000000000))+(((IkReal(-1.00000000000000))*(x723)))+(((IkReal(-1.00000000000000))*(x722)))+(((IkReal(-1.00000000000000))*(x720)*(x727)))+(((IkReal(-1.00000000000000))*(x719)*(x732)))+(((x719)*(x730)))+(((IkReal(-1.00000000000000))*(x726)*(x731)))+(((IkReal(-1.00000000000000))*(x726)*(x733))));
evalcond[4]=((((IkReal(-0.0300000000000000))*(x719)))+(((IkReal(-1.00000000000000))*(cj8)*(x725)))+(((IkReal(-1.00000000000000))*(x730)))+(((x719)*(x722)))+(((x719)*(x723)))+(x732)+(((IkReal(0.300000000000000))*(cj8)))+(((cj8)*(x728))));
evalcond[5]=((IkReal(0.00847044000000000))+(((x721)*(x730)))+(((IkReal(-0.0600000000000000))*(x719)*(x730)))+(((IkReal(0.0600000000000000))*(x719)*(x732)))+(((IkReal(-1.00000000000000))*(pp)))+(((IkReal(0.600000000000000))*(x729)))+(((IkReal(0.0600000000000000))*(cj8)*(x727)))+(((IkReal(-1.00000000000000))*(x721)*(x732)))+(((x724)*(x733)))+(((x724)*(x731))));
if( IKabs(evalcond[0]) > 0.000001  || IKabs(evalcond[1]) > 0.000001  || IKabs(evalcond[2]) > 0.000001  || IKabs(evalcond[3]) > 0.000001  || IKabs(evalcond[4]) > 0.000001  || IKabs(evalcond[5]) > 0.000001  )
{
continue;
}
}

rotationfunction0(solutions);
}
}

}

}

} else
{
{
IkReal j7array[1], cj7array[1], sj7array[1];
bool j7valid[1]={false};
_nj7 = 1;
IkReal x734=((pz)*(sj8));
IkReal x735=((IkReal(0.0300000000000000))*(px));
IkReal x736=((cj8)*(cj9));
IkReal x737=((IkReal(0.313800000000000))*(cj10));
IkReal x738=((IkReal(0.0300000000000000))*(py));
IkReal x739=((IkReal(0.313800000000000))*(sj10)*(x736));
if( IKabs(((gconst0)*(((((IkReal(-0.300000000000000))*(px)))+(((x736)*(x738)))+(((IkReal(-1.00000000000000))*(px)*(x737)))+(((px)*(x734)))+(((sj10)*(x735)))+(((IkReal(-1.00000000000000))*(cj10)*(x736)*(x738)))+(((IkReal(-1.00000000000000))*(py)*(x739))))))) < IKFAST_ATAN2_MAGTHRESH && IKabs(((gconst0)*(((((x735)*(x736)))+(((IkReal(0.300000000000000))*(py)))+(((IkReal(-1.00000000000000))*(px)*(x739)))+(((py)*(x737)))+(((IkReal(-1.00000000000000))*(py)*(x734)))+(((IkReal(-1.00000000000000))*(cj10)*(x735)*(x736)))+(((IkReal(-1.00000000000000))*(sj10)*(x738))))))) < IKFAST_ATAN2_MAGTHRESH )
    continue;
j7array[0]=IKatan2(((gconst0)*(((((IkReal(-0.300000000000000))*(px)))+(((x736)*(x738)))+(((IkReal(-1.00000000000000))*(px)*(x737)))+(((px)*(x734)))+(((sj10)*(x735)))+(((IkReal(-1.00000000000000))*(cj10)*(x736)*(x738)))+(((IkReal(-1.00000000000000))*(py)*(x739)))))), ((gconst0)*(((((x735)*(x736)))+(((IkReal(0.300000000000000))*(py)))+(((IkReal(-1.00000000000000))*(px)*(x739)))+(((py)*(x737)))+(((IkReal(-1.00000000000000))*(py)*(x734)))+(((IkReal(-1.00000000000000))*(cj10)*(x735)*(x736)))+(((IkReal(-1.00000000000000))*(sj10)*(x738)))))));
sj7array[0]=IKsin(j7array[0]);
cj7array[0]=IKcos(j7array[0]);
if( j7array[0] > IKPI )
{
    j7array[0]-=IK2PI;
}
else if( j7array[0] < -IKPI )
{    j7array[0]+=IK2PI;
}
j7valid[0] = true;
for(int ij7 = 0; ij7 < 1; ++ij7)
{
if( !j7valid[ij7] )
{
    continue;
}
_ij7[0] = ij7; _ij7[1] = -1;
for(int iij7 = ij7+1; iij7 < 1; ++iij7)
{
if( j7valid[iij7] && IKabs(cj7array[ij7]-cj7array[iij7]) < IKFAST_SOLUTION_THRESH && IKabs(sj7array[ij7]-sj7array[iij7]) < IKFAST_SOLUTION_THRESH )
{
    j7valid[iij7]=false; _ij7[1] = iij7; break;
}
}
j7 = j7array[ij7]; cj7 = cj7array[ij7]; sj7 = sj7array[ij7];
{
IkReal evalcond[6];
IkReal x740=IKsin(j7);
IkReal x741=IKcos(j7);
IkReal x742=((sj8)*(sj9));
IkReal x743=((IkReal(1.00000000000000))*(cj8));
IkReal x744=((IkReal(0.600000000000000))*(cj8));
IkReal x745=((IkReal(0.0300000000000000))*(cj10));
IkReal x746=((IkReal(0.313800000000000))*(sj10));
IkReal x747=((IkReal(0.0600000000000000))*(cj9));
IkReal x748=((IkReal(0.0300000000000000))*(sj10));
IkReal x749=((IkReal(1.00000000000000))*(cj9));
IkReal x750=((pz)*(sj9));
IkReal x751=((IkReal(0.313800000000000))*(cj10));
IkReal x752=((pz)*(sj8));
IkReal x753=((py)*(x741));
IkReal x754=((px)*(x741));
IkReal x755=((px)*(x740));
IkReal x756=((py)*(x740));
evalcond[0]=((((IkReal(0.0300000000000000))*(cj9)))+(((IkReal(-1.00000000000000))*(x756)))+(((IkReal(-1.00000000000000))*(x754)))+(((IkReal(-1.00000000000000))*(cj9)*(x745)))+(((IkReal(-1.00000000000000))*(cj9)*(x746))));
evalcond[1]=((IkReal(0.300000000000000))+(((cj8)*(x755)))+(((IkReal(-1.00000000000000))*(x752)))+(((IkReal(-1.00000000000000))*(x743)*(x753)))+(x751)+(((IkReal(-1.00000000000000))*(x748))));
evalcond[2]=((((IkReal(-1.00000000000000))*(cj9)*(pz)*(x743)))+(((cj9)*(sj8)*(x753)))+(((IkReal(-1.00000000000000))*(sj8)*(x749)*(x755)))+(((sj9)*(x754)))+(((sj9)*(x756))));
evalcond[3]=((IkReal(0.0300000000000000))+(((IkReal(-1.00000000000000))*(x742)*(x755)))+(((IkReal(-1.00000000000000))*(x743)*(x750)))+(((IkReal(-1.00000000000000))*(x749)*(x756)))+(((IkReal(-1.00000000000000))*(x749)*(x754)))+(((IkReal(-1.00000000000000))*(x746)))+(((IkReal(-1.00000000000000))*(x745)))+(((x742)*(x753))));
evalcond[4]=((((x742)*(x746)))+(((x742)*(x745)))+(((cj8)*(x751)))+(((IkReal(-0.0300000000000000))*(x742)))+(((IkReal(-1.00000000000000))*(cj8)*(x748)))+(((IkReal(-1.00000000000000))*(x753)))+(x755)+(((IkReal(0.300000000000000))*(cj8))));
evalcond[5]=((IkReal(0.00847044000000000))+(((IkReal(0.0600000000000000))*(cj8)*(x750)))+(((x747)*(x754)))+(((x747)*(x756)))+(((x744)*(x753)))+(((IkReal(0.0600000000000000))*(x742)*(x755)))+(((IkReal(0.600000000000000))*(x752)))+(((IkReal(-0.0600000000000000))*(x742)*(x753)))+(((IkReal(-1.00000000000000))*(pp)))+(((IkReal(-1.00000000000000))*(x744)*(x755))));
if( IKabs(evalcond[0]) > 0.000001  || IKabs(evalcond[1]) > 0.000001  || IKabs(evalcond[2]) > 0.000001  || IKabs(evalcond[3]) > 0.000001  || IKabs(evalcond[4]) > 0.000001  || IKabs(evalcond[5]) > 0.000001  )
{
continue;
}
}

rotationfunction0(solutions);
}
}

}

}
}
}

}

}

} else
{
{
IkReal j7array[2], cj7array[2], sj7array[2];
bool j7valid[2]={false};
_nj7 = 2;
IkReal x757=((IkReal(0.0300000000000000))*(cj9));
if( IKabs(((IkReal(-1.00000000000000))*(px))) < IKFAST_ATAN2_MAGTHRESH && IKabs(((IkReal(-1.00000000000000))*(py))) < IKFAST_ATAN2_MAGTHRESH )
    continue;
IkReal x758=((IkReal(1.00000000000000))*(IKatan2(((IkReal(-1.00000000000000))*(px)), ((IkReal(-1.00000000000000))*(py)))));
if( ((((px)*(px))+((py)*(py)))) < (IkReal)-0.00001 )
    continue;
if( (((((IKabs(IKabs(IKsqrt((((px)*(px))+((py)*(py)))))) != 0)?((IkReal)1/(IKabs(IKsqrt((((px)*(px))+((py)*(py))))))):(IkReal)1.0e30))*(((((IkReal(-1.00000000000000))*(cj10)*(x757)))+(((IkReal(-0.313800000000000))*(cj9)*(sj10)))+(x757))))) < -1-IKFAST_SINCOS_THRESH || (((((IKabs(IKabs(IKsqrt((((px)*(px))+((py)*(py)))))) != 0)?((IkReal)1/(IKabs(IKsqrt((((px)*(px))+((py)*(py))))))):(IkReal)1.0e30))*(((((IkReal(-1.00000000000000))*(cj10)*(x757)))+(((IkReal(-0.313800000000000))*(cj9)*(sj10)))+(x757))))) > 1+IKFAST_SINCOS_THRESH )
    continue;
IkReal x759=IKasin(((((IKabs(IKabs(IKsqrt((((px)*(px))+((py)*(py)))))) != 0)?((IkReal)1/(IKabs(IKsqrt((((px)*(px))+((py)*(py))))))):(IkReal)1.0e30))*(((((IkReal(-1.00000000000000))*(cj10)*(x757)))+(((IkReal(-0.313800000000000))*(cj9)*(sj10)))+(x757)))));
j7array[0]=((((IkReal(-1.00000000000000))*(x759)))+(((IkReal(-1.00000000000000))*(x758))));
sj7array[0]=IKsin(j7array[0]);
cj7array[0]=IKcos(j7array[0]);
j7array[1]=((IkReal(3.14159265358979))+(x759)+(((IkReal(-1.00000000000000))*(x758))));
sj7array[1]=IKsin(j7array[1]);
cj7array[1]=IKcos(j7array[1]);
if( j7array[0] > IKPI )
{
    j7array[0]-=IK2PI;
}
else if( j7array[0] < -IKPI )
{    j7array[0]+=IK2PI;
}
j7valid[0] = true;
if( j7array[1] > IKPI )
{
    j7array[1]-=IK2PI;
}
else if( j7array[1] < -IKPI )
{    j7array[1]+=IK2PI;
}
j7valid[1] = true;
for(int ij7 = 0; ij7 < 2; ++ij7)
{
if( !j7valid[ij7] )
{
    continue;
}
_ij7[0] = ij7; _ij7[1] = -1;
for(int iij7 = ij7+1; iij7 < 2; ++iij7)
{
if( j7valid[iij7] && IKabs(cj7array[ij7]-cj7array[iij7]) < IKFAST_SOLUTION_THRESH && IKabs(sj7array[ij7]-sj7array[iij7]) < IKFAST_SOLUTION_THRESH )
{
    j7valid[iij7]=false; _ij7[1] = iij7; break;
}
}
j7 = j7array[ij7]; cj7 = cj7array[ij7]; sj7 = sj7array[ij7];
{
IkReal evalcond[2];
IkReal x760=(sj9)*(sj9);
IkReal x761=(cj9)*(cj9);
IkReal x762=(px)*(px);
IkReal x763=(py)*(py);
IkReal x764=IKsin(j7);
IkReal x765=IKcos(j7);
IkReal x766=((cj9)*(px));
IkReal x767=((IkReal(0.0300000000000000))*(cj10));
IkReal x768=((px)*(py));
IkReal x769=((IkReal(0.313800000000000))*(sj10));
IkReal x770=((cj9)*(py));
IkReal x771=((IkReal(1.00000000000000))*(x760));
IkReal x772=((IkReal(1.00000000000000))*(x761));
evalcond[0]=((((x765)*(((((IkReal(-1.00000000000000))*(x762)*(x772)))+(((IkReal(-1.00000000000000))*(x762)*(x771)))))))+(((IkReal(0.0300000000000000))*(x766)))+(((IkReal(-1.00000000000000))*(x766)*(x767)))+(((IkReal(-1.00000000000000))*(x766)*(x769)))+(((x764)*(((((IkReal(-1.00000000000000))*(x768)*(x772)))+(((IkReal(-1.00000000000000))*(x768)*(x771))))))));
evalcond[1]=((((x764)*(((((x760)*(x763)))+(((x761)*(x763)))))))+(((x767)*(x770)))+(((x769)*(x770)))+(((IkReal(-0.0300000000000000))*(x770)))+(((x765)*(((((x760)*(x768)))+(((x761)*(x768))))))));
if( IKabs(evalcond[0]) > 0.000001  || IKabs(evalcond[1]) > 0.000001  )
{
continue;
}
}

{
IkReal dummyeval[1];
IkReal gconst47;
IkReal x773=((cj7)*(py));
IkReal x774=((IkReal(0.313800000000000))*(cj10));
IkReal x775=((px)*(sj7));
IkReal x776=((pz)*(sj9));
IkReal x777=((IkReal(0.0300000000000000))*(sj10));
gconst47=IKsign(((((x774)*(x775)))+(((x773)*(x777)))+(((IkReal(0.300000000000000))*(x775)))+(((IkReal(-0.300000000000000))*(x773)))+(((IkReal(-1.00000000000000))*(x775)*(x777)))+(((IkReal(-1.00000000000000))*(x773)*(x774)))+(((IkReal(-0.313800000000000))*(sj10)*(x776)))+(((IkReal(-0.0300000000000000))*(cj10)*(x776)))+(((IkReal(0.0300000000000000))*(x776)))));
IkReal x778=((cj7)*(py));
IkReal x779=((pz)*(sj9));
IkReal x780=((px)*(sj7));
IkReal x781=((IkReal(10.4600000000000))*(cj10));
dummyeval[0]=((((IkReal(-1.00000000000000))*(sj10)*(x780)))+(((sj10)*(x778)))+(((IkReal(-10.4600000000000))*(sj10)*(x779)))+(((IkReal(-10.0000000000000))*(x778)))+(((x780)*(x781)))+(((IkReal(-1.00000000000000))*(cj10)*(x779)))+(x779)+(((IkReal(-1.00000000000000))*(x778)*(x781)))+(((IkReal(10.0000000000000))*(x780))));
if( IKabs(dummyeval[0]) < 0.0000010000000000  )
{
{
IkReal dummyeval[1];
IkReal gconst46;
gconst46=IKsign(((((cj9)*((cj7)*(cj7))*((py)*(py))))+(((cj9)*((pz)*(pz))))+(((cj9)*((px)*(px))*((sj7)*(sj7))))+(((IkReal(-2.00000000000000))*(cj7)*(cj9)*(px)*(py)*(sj7)))));
dummyeval[0]=((((cj9)*((cj7)*(cj7))*((py)*(py))))+(((cj9)*((pz)*(pz))))+(((cj9)*((px)*(px))*((sj7)*(sj7))))+(((IkReal(-2.00000000000000))*(cj7)*(cj9)*(px)*(py)*(sj7))));
if( IKabs(dummyeval[0]) < 0.0000010000000000  )
{
{
IkReal evalcond[4];
IkReal x782=((py)*(sj7));
IkReal x783=((cj7)*(px));
evalcond[0]=((IkReal(-3.14159265358979))+(IKfmod(((IkReal(1.57079632679490))+(j9)), IkReal(6.28318530717959))));
evalcond[1]=((IkReal(0.190270440000000))+(((IkReal(-0.0368280000000000))*(sj10)))+(((IkReal(0.186480000000000))*(cj10)))+(((IkReal(-1.00000000000000))*(pp))));
evalcond[2]=((((IkReal(-1.00000000000000))*(x782)))+(((IkReal(-1.00000000000000))*(x783))));
evalcond[3]=((x782)+(x783));
if( IKabs(evalcond[0]) < 0.0000010000000000  && IKabs(evalcond[1]) < 0.0000010000000000  && IKabs(evalcond[2]) < 0.0000010000000000  && IKabs(evalcond[3]) < 0.0000010000000000  )
{
{
IkReal dummyeval[1];
IkReal gconst49;
IkReal x784=((cj7)*(py));
IkReal x785=((IkReal(0.313800000000000))*(cj10));
IkReal x786=((px)*(sj7));
IkReal x787=((IkReal(0.0300000000000000))*(pz));
IkReal x788=((IkReal(0.0300000000000000))*(sj10));
gconst49=IKsign(((((IkReal(-0.313800000000000))*(pz)*(sj10)))+(((x785)*(x786)))+(((x784)*(x788)))+(((IkReal(-1.00000000000000))*(x784)*(x785)))+(((IkReal(-1.00000000000000))*(x786)*(x788)))+(((IkReal(0.300000000000000))*(x786)))+(((IkReal(-1.00000000000000))*(cj10)*(x787)))+(x787)+(((IkReal(-0.300000000000000))*(x784)))));
IkReal x789=((cj7)*(py));
IkReal x790=((IkReal(10.4600000000000))*(cj10));
IkReal x791=((px)*(sj7));
dummyeval[0]=((((IkReal(10.0000000000000))*(x791)))+(((IkReal(-1.00000000000000))*(sj10)*(x791)))+(((x790)*(x791)))+(((IkReal(-1.00000000000000))*(cj10)*(pz)))+(pz)+(((IkReal(-10.0000000000000))*(x789)))+(((sj10)*(x789)))+(((IkReal(-1.00000000000000))*(x789)*(x790)))+(((IkReal(-10.4600000000000))*(pz)*(sj10))));
if( IKabs(dummyeval[0]) < 0.0000010000000000  )
{
{
IkReal dummyeval[1];
IkReal gconst48;
gconst48=IKsign((((((px)*(px))*((sj7)*(sj7))))+(((IkReal(-2.00000000000000))*(cj7)*(px)*(py)*(sj7)))+((pz)*(pz))+((((cj7)*(cj7))*((py)*(py))))));
dummyeval[0]=(((((px)*(px))*((sj7)*(sj7))))+(((IkReal(-2.00000000000000))*(cj7)*(px)*(py)*(sj7)))+((pz)*(pz))+((((cj7)*(cj7))*((py)*(py)))));
if( IKabs(dummyeval[0]) < 0.0000010000000000  )
{
continue;

} else
{
{
IkReal j8array[1], cj8array[1], sj8array[1];
bool j8valid[1]={false};
_nj8 = 1;
IkReal x792=((px)*(sj7));
IkReal x793=((cj7)*(py));
IkReal x794=((IkReal(0.0300000000000000))*(cj10));
IkReal x795=((IkReal(0.313800000000000))*(sj10));
IkReal x796=((IkReal(0.0300000000000000))*(pz));
IkReal x797=((IkReal(0.313800000000000))*(cj10));
IkReal x798=((IkReal(0.0300000000000000))*(sj10));
if( IKabs(((gconst48)*(((((IkReal(-0.0300000000000000))*(x793)))+(((IkReal(0.0300000000000000))*(x792)))+(((IkReal(-1.00000000000000))*(x792)*(x794)))+(((IkReal(-1.00000000000000))*(x792)*(x795)))+(((IkReal(-1.00000000000000))*(sj10)*(x796)))+(((IkReal(0.300000000000000))*(pz)))+(((x793)*(x794)))+(((x793)*(x795)))+(((pz)*(x797))))))) < IKFAST_ATAN2_MAGTHRESH && IKabs(((gconst48)*(((((IkReal(-1.00000000000000))*(x792)*(x797)))+(((x793)*(x797)))+(((IkReal(-1.00000000000000))*(x793)*(x798)))+(((x792)*(x798)))+(((IkReal(0.300000000000000))*(x793)))+(((IkReal(-1.00000000000000))*(pz)*(x794)))+(((IkReal(-1.00000000000000))*(pz)*(x795)))+(x796)+(((IkReal(-0.300000000000000))*(x792))))))) < IKFAST_ATAN2_MAGTHRESH )
    continue;
j8array[0]=IKatan2(((gconst48)*(((((IkReal(-0.0300000000000000))*(x793)))+(((IkReal(0.0300000000000000))*(x792)))+(((IkReal(-1.00000000000000))*(x792)*(x794)))+(((IkReal(-1.00000000000000))*(x792)*(x795)))+(((IkReal(-1.00000000000000))*(sj10)*(x796)))+(((IkReal(0.300000000000000))*(pz)))+(((x793)*(x794)))+(((x793)*(x795)))+(((pz)*(x797)))))), ((gconst48)*(((((IkReal(-1.00000000000000))*(x792)*(x797)))+(((x793)*(x797)))+(((IkReal(-1.00000000000000))*(x793)*(x798)))+(((x792)*(x798)))+(((IkReal(0.300000000000000))*(x793)))+(((IkReal(-1.00000000000000))*(pz)*(x794)))+(((IkReal(-1.00000000000000))*(pz)*(x795)))+(x796)+(((IkReal(-0.300000000000000))*(x792)))))));
sj8array[0]=IKsin(j8array[0]);
cj8array[0]=IKcos(j8array[0]);
if( j8array[0] > IKPI )
{
    j8array[0]-=IK2PI;
}
else if( j8array[0] < -IKPI )
{    j8array[0]+=IK2PI;
}
j8valid[0] = true;
for(int ij8 = 0; ij8 < 1; ++ij8)
{
if( !j8valid[ij8] )
{
    continue;
}
_ij8[0] = ij8; _ij8[1] = -1;
for(int iij8 = ij8+1; iij8 < 1; ++iij8)
{
if( j8valid[iij8] && IKabs(cj8array[ij8]-cj8array[iij8]) < IKFAST_SOLUTION_THRESH && IKabs(sj8array[ij8]-sj8array[iij8]) < IKFAST_SOLUTION_THRESH )
{
    j8valid[iij8]=false; _ij8[1] = iij8; break;
}
}
j8 = j8array[ij8]; cj8 = cj8array[ij8]; sj8 = sj8array[ij8];
{
IkReal evalcond[5];
IkReal x799=IKcos(j8);
IkReal x800=IKsin(j8);
IkReal x801=((IkReal(0.313800000000000))*(cj10));
IkReal x802=((cj7)*(py));
IkReal x803=((px)*(sj7));
IkReal x804=((IkReal(0.313800000000000))*(sj10));
IkReal x805=((IkReal(0.0300000000000000))*(cj10));
IkReal x806=((pz)*(x799));
IkReal x807=((IkReal(0.0300000000000000))*(x799));
IkReal x808=((IkReal(0.600000000000000))*(x799));
IkReal x809=((pz)*(x800));
IkReal x810=((IkReal(0.0600000000000000))*(x800));
IkReal x811=((IkReal(0.0300000000000000))*(x800));
evalcond[0]=((IkReal(0.300000000000000))+(((IkReal(-1.00000000000000))*(x809)))+(((IkReal(-1.00000000000000))*(x799)*(x802)))+(((IkReal(-0.0300000000000000))*(sj10)))+(((x799)*(x803)))+(x801));
evalcond[1]=((((IkReal(-1.00000000000000))*(x799)*(x805)))+(((IkReal(-1.00000000000000))*(x799)*(x804)))+(((x800)*(x801)))+(((IkReal(-1.00000000000000))*(pz)))+(x807)+(((IkReal(0.300000000000000))*(x800)))+(((IkReal(-1.00000000000000))*(sj10)*(x811))));
evalcond[2]=((IkReal(0.0300000000000000))+(((IkReal(-1.00000000000000))*(x806)))+(((x800)*(x802)))+(((IkReal(-1.00000000000000))*(x800)*(x803)))+(((IkReal(-1.00000000000000))*(x804)))+(((IkReal(-1.00000000000000))*(x805))));
evalcond[3]=((((IkReal(-1.00000000000000))*(x802)))+(((x800)*(x804)))+(((x800)*(x805)))+(((IkReal(-1.00000000000000))*(x811)))+(((x799)*(x801)))+(((IkReal(-1.00000000000000))*(sj10)*(x807)))+(((IkReal(0.300000000000000))*(x799)))+(x803));
evalcond[4]=((IkReal(0.00847044000000000))+(((IkReal(-1.00000000000000))*(x802)*(x810)))+(((IkReal(0.0600000000000000))*(x806)))+(((IkReal(-1.00000000000000))*(pp)))+(((IkReal(-1.00000000000000))*(x803)*(x808)))+(((x802)*(x808)))+(((IkReal(0.600000000000000))*(x809)))+(((x803)*(x810))));
if( IKabs(evalcond[0]) > 0.000001  || IKabs(evalcond[1]) > 0.000001  || IKabs(evalcond[2]) > 0.000001  || IKabs(evalcond[3]) > 0.000001  || IKabs(evalcond[4]) > 0.000001  )
{
continue;
}
}

rotationfunction0(solutions);
}
}

}

}

} else
{
{
IkReal j8array[1], cj8array[1], sj8array[1];
bool j8valid[1]={false};
_nj8 = 1;
IkReal x812=(sj10)*(sj10);
IkReal x813=(cj10)*(cj10);
IkReal x814=((cj10)*(sj10));
if( IKabs(((gconst49)*(((IkReal(0.00900000000000000))+(((IkReal(-0.0975704400000000))*(x814)))+(((px)*(pz)*(sj7)))+(((IkReal(0.00941400000000000))*(x812)))+(((IkReal(-0.00941400000000000))*(x813)))+(((IkReal(-0.0950400000000000))*(sj10)))+(((IkReal(0.000414000000000000))*(cj10)))+(((IkReal(-1.00000000000000))*(cj7)*(py)*(pz))))))) < IKFAST_ATAN2_MAGTHRESH && IKabs(((gconst49)*(((IkReal(-0.0900000000000000))+(((IkReal(-0.188280000000000))*(cj10)))+(((IkReal(-0.0984704400000000))*(x813)))+(((IkReal(0.0188280000000000))*(x814)))+((pz)*(pz))+(((IkReal(0.0180000000000000))*(sj10)))+(((IkReal(-0.000900000000000000))*(x812))))))) < IKFAST_ATAN2_MAGTHRESH )
    continue;
j8array[0]=IKatan2(((gconst49)*(((IkReal(0.00900000000000000))+(((IkReal(-0.0975704400000000))*(x814)))+(((px)*(pz)*(sj7)))+(((IkReal(0.00941400000000000))*(x812)))+(((IkReal(-0.00941400000000000))*(x813)))+(((IkReal(-0.0950400000000000))*(sj10)))+(((IkReal(0.000414000000000000))*(cj10)))+(((IkReal(-1.00000000000000))*(cj7)*(py)*(pz)))))), ((gconst49)*(((IkReal(-0.0900000000000000))+(((IkReal(-0.188280000000000))*(cj10)))+(((IkReal(-0.0984704400000000))*(x813)))+(((IkReal(0.0188280000000000))*(x814)))+((pz)*(pz))+(((IkReal(0.0180000000000000))*(sj10)))+(((IkReal(-0.000900000000000000))*(x812)))))));
sj8array[0]=IKsin(j8array[0]);
cj8array[0]=IKcos(j8array[0]);
if( j8array[0] > IKPI )
{
    j8array[0]-=IK2PI;
}
else if( j8array[0] < -IKPI )
{    j8array[0]+=IK2PI;
}
j8valid[0] = true;
for(int ij8 = 0; ij8 < 1; ++ij8)
{
if( !j8valid[ij8] )
{
    continue;
}
_ij8[0] = ij8; _ij8[1] = -1;
for(int iij8 = ij8+1; iij8 < 1; ++iij8)
{
if( j8valid[iij8] && IKabs(cj8array[ij8]-cj8array[iij8]) < IKFAST_SOLUTION_THRESH && IKabs(sj8array[ij8]-sj8array[iij8]) < IKFAST_SOLUTION_THRESH )
{
    j8valid[iij8]=false; _ij8[1] = iij8; break;
}
}
j8 = j8array[ij8]; cj8 = cj8array[ij8]; sj8 = sj8array[ij8];
{
IkReal evalcond[5];
IkReal x815=IKcos(j8);
IkReal x816=IKsin(j8);
IkReal x817=((IkReal(0.313800000000000))*(cj10));
IkReal x818=((cj7)*(py));
IkReal x819=((px)*(sj7));
IkReal x820=((IkReal(0.313800000000000))*(sj10));
IkReal x821=((IkReal(0.0300000000000000))*(cj10));
IkReal x822=((pz)*(x815));
IkReal x823=((IkReal(0.0300000000000000))*(x815));
IkReal x824=((IkReal(0.600000000000000))*(x815));
IkReal x825=((pz)*(x816));
IkReal x826=((IkReal(0.0600000000000000))*(x816));
IkReal x827=((IkReal(0.0300000000000000))*(x816));
evalcond[0]=((IkReal(0.300000000000000))+(((x815)*(x819)))+(((IkReal(-1.00000000000000))*(x815)*(x818)))+(((IkReal(-0.0300000000000000))*(sj10)))+(((IkReal(-1.00000000000000))*(x825)))+(x817));
evalcond[1]=((((IkReal(-1.00000000000000))*(sj10)*(x827)))+(((x816)*(x817)))+(((IkReal(-1.00000000000000))*(x815)*(x821)))+(((IkReal(-1.00000000000000))*(x815)*(x820)))+(((IkReal(0.300000000000000))*(x816)))+(((IkReal(-1.00000000000000))*(pz)))+(x823));
evalcond[2]=((IkReal(0.0300000000000000))+(((x816)*(x818)))+(((IkReal(-1.00000000000000))*(x820)))+(((IkReal(-1.00000000000000))*(x821)))+(((IkReal(-1.00000000000000))*(x816)*(x819)))+(((IkReal(-1.00000000000000))*(x822))));
evalcond[3]=((((x815)*(x817)))+(((IkReal(-1.00000000000000))*(sj10)*(x823)))+(((IkReal(-1.00000000000000))*(x827)))+(((IkReal(0.300000000000000))*(x815)))+(((x816)*(x821)))+(((x816)*(x820)))+(((IkReal(-1.00000000000000))*(x818)))+(x819));
evalcond[4]=((IkReal(0.00847044000000000))+(((IkReal(0.0600000000000000))*(x822)))+(((IkReal(0.600000000000000))*(x825)))+(((IkReal(-1.00000000000000))*(x818)*(x826)))+(((IkReal(-1.00000000000000))*(x819)*(x824)))+(((x819)*(x826)))+(((IkReal(-1.00000000000000))*(pp)))+(((x818)*(x824))));
if( IKabs(evalcond[0]) > 0.000001  || IKabs(evalcond[1]) > 0.000001  || IKabs(evalcond[2]) > 0.000001  || IKabs(evalcond[3]) > 0.000001  || IKabs(evalcond[4]) > 0.000001  )
{
continue;
}
}

rotationfunction0(solutions);
}
}

}

}

} else
{
IkReal x828=((((IkReal(-1.00000000000000))*(cj7)*(px)))+(((IkReal(-1.00000000000000))*(py)*(sj7))));
evalcond[0]=((IkReal(-3.14159265358979))+(IKfmod(((IkReal(4.71238898038469))+(j9)), IkReal(6.28318530717959))));
evalcond[1]=((IkReal(0.190270440000000))+(((IkReal(-0.0368280000000000))*(sj10)))+(((IkReal(0.186480000000000))*(cj10)))+(((IkReal(-1.00000000000000))*(pp))));
evalcond[2]=x828;
evalcond[3]=x828;
if( IKabs(evalcond[0]) < 0.0000010000000000  && IKabs(evalcond[1]) < 0.0000010000000000  && IKabs(evalcond[2]) < 0.0000010000000000  && IKabs(evalcond[3]) < 0.0000010000000000  )
{
{
IkReal dummyeval[1];
IkReal gconst51;
IkReal x829=((cj7)*(py));
IkReal x830=((IkReal(0.313800000000000))*(sj10));
IkReal x831=((IkReal(0.0300000000000000))*(px)*(sj7));
gconst51=IKsign(((((IkReal(-0.300000000000000))*(pz)))+(((IkReal(-0.0300000000000000))*(cj10)*(x829)))+(((IkReal(0.0300000000000000))*(x829)))+(((px)*(sj7)*(x830)))+(((IkReal(-1.00000000000000))*(x831)))+(((IkReal(0.0300000000000000))*(pz)*(sj10)))+(((cj10)*(x831)))+(((IkReal(-0.313800000000000))*(cj10)*(pz)))+(((IkReal(-1.00000000000000))*(x829)*(x830)))));
IkReal x832=((px)*(sj7));
IkReal x833=((IkReal(10.4600000000000))*(sj10));
IkReal x834=((cj7)*(py));
dummyeval[0]=((((x832)*(x833)))+(((IkReal(-1.00000000000000))*(x833)*(x834)))+(((pz)*(sj10)))+(((IkReal(-10.0000000000000))*(pz)))+(((IkReal(-10.4600000000000))*(cj10)*(pz)))+(((IkReal(-1.00000000000000))*(x832)))+(((IkReal(-1.00000000000000))*(cj10)*(x834)))+(((cj10)*(x832)))+(x834));
if( IKabs(dummyeval[0]) < 0.0000010000000000  )
{
{
IkReal dummyeval[1];
IkReal gconst50;
gconst50=IKsign((((((px)*(px))*((sj7)*(sj7))))+(((IkReal(-2.00000000000000))*(cj7)*(px)*(py)*(sj7)))+((pz)*(pz))+((((cj7)*(cj7))*((py)*(py))))));
dummyeval[0]=(((((px)*(px))*((sj7)*(sj7))))+(((IkReal(-2.00000000000000))*(cj7)*(px)*(py)*(sj7)))+((pz)*(pz))+((((cj7)*(cj7))*((py)*(py)))));
if( IKabs(dummyeval[0]) < 0.0000010000000000  )
{
{
IkReal evalcond[4];
IkReal x835=x828;
evalcond[0]=((IKabs(((IkReal(-3.14159265358979))+(IKfmod(((IkReal(3.14159265358979))+(j10)), IkReal(6.28318530717959))))))+(IKabs(pz)));
evalcond[1]=((IkReal(0.376750440000000))+(((IkReal(-1.00000000000000))*(pp))));
evalcond[2]=x835;
evalcond[3]=x835;
if( IKabs(evalcond[0]) < 0.0000010000000000  && IKabs(evalcond[1]) < 0.0000010000000000  && IKabs(evalcond[2]) < 0.0000010000000000  && IKabs(evalcond[3]) < 0.0000010000000000  )
{
{
IkReal dummyeval[1];
dummyeval[0]=((((IkReal(-1.00000000000000))*(px)*(sj7)))+(((cj7)*(py))));
if( IKabs(dummyeval[0]) < 0.0000010000000000  )
{
{
IkReal dummyeval[2];
IkReal x836=((cj7)*(py));
IkReal x837=((px)*(sj7));
dummyeval[0]=((((IkReal(2.00000000000000))*(x836)*(x837)))+(((IkReal(-1.00000000000000))*((x836)*(x836))))+(((IkReal(-1.00000000000000))*((x837)*(x837)))));
dummyeval[1]=((((IkReal(-1.00000000000000))*(x836)))+(x837));
if( IKabs(dummyeval[0]) < 0.0000010000000000  || IKabs(dummyeval[1]) < 0.0000010000000000  )
{
{
IkReal evalcond[7];
IkReal x838=((IkReal(1.00000000000000))*(pp));
IkReal x839=((IkReal(-1.00000000000000))*(py));
evalcond[0]=((IKabs(px))+(IKabs(((IkReal(-3.14159265358979))+(IKfmod(((IkReal(1.57079632679490))+(j7)), IkReal(6.28318530717959)))))));
evalcond[1]=((IkReal(0.376750440000000))+(((IkReal(-1.00000000000000))*(x838))));
evalcond[2]=x839;
evalcond[3]=IkReal(0.613800000000000);
evalcond[4]=x839;
evalcond[5]=IkReal(0);
evalcond[6]=((IkReal(0.00847044000000000))+(((IkReal(-1.00000000000000))*(x838))));
if( IKabs(evalcond[0]) < 0.0000010000000000  && IKabs(evalcond[1]) < 0.0000010000000000  && IKabs(evalcond[2]) < 0.0000010000000000  && IKabs(evalcond[3]) < 0.0000010000000000  && IKabs(evalcond[4]) < 0.0000010000000000  && IKabs(evalcond[5]) < 0.0000010000000000  && IKabs(evalcond[6]) < 0.0000010000000000  )
{
{
IkReal dummyeval[1];
dummyeval[0]=IkReal(-1.00000000000000);
if( IKabs(dummyeval[0]) < 0.0000001000000000  )
{
continue;

} else
{
IkReal op[2+1], zeror[2];
int numroots;
op[0]=IkReal(-1.00000000000000);
op[1]=IkReal(0);
op[2]=IkReal(1.00000000000000);
polyroots2(op,zeror,numroots);
IkReal j8array[2], cj8array[2], sj8array[2], tempj8array[1];
int numsolutions = 0;
for(int ij8 = 0; ij8 < numroots; ++ij8)
{
IkReal htj8 = zeror[ij8];
tempj8array[0]=((IkReal(2.00000000000000))*(atan(htj8)));
for(int kj8 = 0; kj8 < 1; ++kj8)
{
j8array[numsolutions] = tempj8array[kj8];
if( j8array[numsolutions] > IKPI )
{
    j8array[numsolutions]-=IK2PI;
}
else if( j8array[numsolutions] < -IKPI )
{
    j8array[numsolutions]+=IK2PI;
}
sj8array[numsolutions] = IKsin(j8array[numsolutions]);
cj8array[numsolutions] = IKcos(j8array[numsolutions]);
numsolutions++;
}
}
bool j8valid[2]={true,true};
_nj8 = 2;
for(int ij8 = 0; ij8 < numsolutions; ++ij8)
    {
if( !j8valid[ij8] )
{
    continue;
}
    j8 = j8array[ij8]; cj8 = cj8array[ij8]; sj8 = sj8array[ij8];
htj8 = IKtan(j8/2);

_ij8[0] = ij8; _ij8[1] = -1;
for(int iij8 = ij8+1; iij8 < numsolutions; ++iij8)
{
if( j8valid[iij8] && IKabs(cj8array[ij8]-cj8array[iij8]) < IKFAST_SOLUTION_THRESH && IKabs(sj8array[ij8]-sj8array[iij8]) < IKFAST_SOLUTION_THRESH )
{
    j8valid[iij8]=false; _ij8[1] = iij8; break;
}
}
rotationfunction0(solutions);
    }

}

}

} else
{
IkReal x840=((IkReal(1.00000000000000))*(pp));
evalcond[0]=((IKabs(px))+(IKabs(((IkReal(-3.14159265358979))+(IKfmod(((IkReal(4.71238898038469))+(j7)), IkReal(6.28318530717959)))))));
evalcond[1]=((IkReal(0.376750440000000))+(((IkReal(-1.00000000000000))*(x840))));
evalcond[2]=py;
evalcond[3]=IkReal(0.613800000000000);
evalcond[4]=py;
evalcond[5]=IkReal(0);
evalcond[6]=((IkReal(0.00847044000000000))+(((IkReal(-1.00000000000000))*(x840))));
if( IKabs(evalcond[0]) < 0.0000010000000000  && IKabs(evalcond[1]) < 0.0000010000000000  && IKabs(evalcond[2]) < 0.0000010000000000  && IKabs(evalcond[3]) < 0.0000010000000000  && IKabs(evalcond[4]) < 0.0000010000000000  && IKabs(evalcond[5]) < 0.0000010000000000  && IKabs(evalcond[6]) < 0.0000010000000000  )
{
{
IkReal dummyeval[1];
dummyeval[0]=IkReal(-1.00000000000000);
if( IKabs(dummyeval[0]) < 0.0000001000000000  )
{
continue;

} else
{
IkReal op[2+1], zeror[2];
int numroots;
op[0]=IkReal(-1.00000000000000);
op[1]=IkReal(0);
op[2]=IkReal(1.00000000000000);
polyroots2(op,zeror,numroots);
IkReal j8array[2], cj8array[2], sj8array[2], tempj8array[1];
int numsolutions = 0;
for(int ij8 = 0; ij8 < numroots; ++ij8)
{
IkReal htj8 = zeror[ij8];
tempj8array[0]=((IkReal(2.00000000000000))*(atan(htj8)));
for(int kj8 = 0; kj8 < 1; ++kj8)
{
j8array[numsolutions] = tempj8array[kj8];
if( j8array[numsolutions] > IKPI )
{
    j8array[numsolutions]-=IK2PI;
}
else if( j8array[numsolutions] < -IKPI )
{
    j8array[numsolutions]+=IK2PI;
}
sj8array[numsolutions] = IKsin(j8array[numsolutions]);
cj8array[numsolutions] = IKcos(j8array[numsolutions]);
numsolutions++;
}
}
bool j8valid[2]={true,true};
_nj8 = 2;
for(int ij8 = 0; ij8 < numsolutions; ++ij8)
    {
if( !j8valid[ij8] )
{
    continue;
}
    j8 = j8array[ij8]; cj8 = cj8array[ij8]; sj8 = sj8array[ij8];
htj8 = IKtan(j8/2);

_ij8[0] = ij8; _ij8[1] = -1;
for(int iij8 = ij8+1; iij8 < numsolutions; ++iij8)
{
if( j8valid[iij8] && IKabs(cj8array[ij8]-cj8array[iij8]) < IKFAST_SOLUTION_THRESH && IKabs(sj8array[ij8]-sj8array[iij8]) < IKFAST_SOLUTION_THRESH )
{
    j8valid[iij8]=false; _ij8[1] = iij8; break;
}
}
rotationfunction0(solutions);
    }

}

}

} else
{
IkReal x841=((IkReal(1.00000000000000))*(pp));
IkReal x842=((IkReal(-1.00000000000000))*(px));
evalcond[0]=((IKabs(((IkReal(-3.14159265358979))+(IKfmod(((IkReal(3.14159265358979))+(j7)), IkReal(6.28318530717959))))))+(IKabs(py)));
evalcond[1]=((IkReal(0.376750440000000))+(((IkReal(-1.00000000000000))*(x841))));
evalcond[2]=x842;
evalcond[3]=IkReal(0.613800000000000);
evalcond[4]=x842;
evalcond[5]=IkReal(0);
evalcond[6]=((IkReal(0.00847044000000000))+(((IkReal(-1.00000000000000))*(x841))));
if( IKabs(evalcond[0]) < 0.0000010000000000  && IKabs(evalcond[1]) < 0.0000010000000000  && IKabs(evalcond[2]) < 0.0000010000000000  && IKabs(evalcond[3]) < 0.0000010000000000  && IKabs(evalcond[4]) < 0.0000010000000000  && IKabs(evalcond[5]) < 0.0000010000000000  && IKabs(evalcond[6]) < 0.0000010000000000  )
{
{
IkReal dummyeval[1];
dummyeval[0]=IkReal(-1.00000000000000);
if( IKabs(dummyeval[0]) < 0.0000001000000000  )
{
continue;

} else
{
IkReal op[2+1], zeror[2];
int numroots;
op[0]=IkReal(-1.00000000000000);
op[1]=IkReal(0);
op[2]=IkReal(1.00000000000000);
polyroots2(op,zeror,numroots);
IkReal j8array[2], cj8array[2], sj8array[2], tempj8array[1];
int numsolutions = 0;
for(int ij8 = 0; ij8 < numroots; ++ij8)
{
IkReal htj8 = zeror[ij8];
tempj8array[0]=((IkReal(2.00000000000000))*(atan(htj8)));
for(int kj8 = 0; kj8 < 1; ++kj8)
{
j8array[numsolutions] = tempj8array[kj8];
if( j8array[numsolutions] > IKPI )
{
    j8array[numsolutions]-=IK2PI;
}
else if( j8array[numsolutions] < -IKPI )
{
    j8array[numsolutions]+=IK2PI;
}
sj8array[numsolutions] = IKsin(j8array[numsolutions]);
cj8array[numsolutions] = IKcos(j8array[numsolutions]);
numsolutions++;
}
}
bool j8valid[2]={true,true};
_nj8 = 2;
for(int ij8 = 0; ij8 < numsolutions; ++ij8)
    {
if( !j8valid[ij8] )
{
    continue;
}
    j8 = j8array[ij8]; cj8 = cj8array[ij8]; sj8 = sj8array[ij8];
htj8 = IKtan(j8/2);

_ij8[0] = ij8; _ij8[1] = -1;
for(int iij8 = ij8+1; iij8 < numsolutions; ++iij8)
{
if( j8valid[iij8] && IKabs(cj8array[ij8]-cj8array[iij8]) < IKFAST_SOLUTION_THRESH && IKabs(sj8array[ij8]-sj8array[iij8]) < IKFAST_SOLUTION_THRESH )
{
    j8valid[iij8]=false; _ij8[1] = iij8; break;
}
}
rotationfunction0(solutions);
    }

}

}

} else
{
IkReal x843=((IkReal(1.00000000000000))*(pp));
evalcond[0]=((IKabs(py))+(IKabs(((IkReal(-3.14159265358979))+(IKfmod(j7, IkReal(6.28318530717959)))))));
evalcond[1]=((IkReal(0.376750440000000))+(((IkReal(-1.00000000000000))*(x843))));
evalcond[2]=px;
evalcond[3]=IkReal(0.613800000000000);
evalcond[4]=px;
evalcond[5]=IkReal(0);
evalcond[6]=((IkReal(0.00847044000000000))+(((IkReal(-1.00000000000000))*(x843))));
if( IKabs(evalcond[0]) < 0.0000010000000000  && IKabs(evalcond[1]) < 0.0000010000000000  && IKabs(evalcond[2]) < 0.0000010000000000  && IKabs(evalcond[3]) < 0.0000010000000000  && IKabs(evalcond[4]) < 0.0000010000000000  && IKabs(evalcond[5]) < 0.0000010000000000  && IKabs(evalcond[6]) < 0.0000010000000000  )
{
{
IkReal dummyeval[1];
dummyeval[0]=IkReal(-1.00000000000000);
if( IKabs(dummyeval[0]) < 0.0000001000000000  )
{
continue;

} else
{
IkReal op[2+1], zeror[2];
int numroots;
op[0]=IkReal(-1.00000000000000);
op[1]=IkReal(0);
op[2]=IkReal(1.00000000000000);
polyroots2(op,zeror,numroots);
IkReal j8array[2], cj8array[2], sj8array[2], tempj8array[1];
int numsolutions = 0;
for(int ij8 = 0; ij8 < numroots; ++ij8)
{
IkReal htj8 = zeror[ij8];
tempj8array[0]=((IkReal(2.00000000000000))*(atan(htj8)));
for(int kj8 = 0; kj8 < 1; ++kj8)
{
j8array[numsolutions] = tempj8array[kj8];
if( j8array[numsolutions] > IKPI )
{
    j8array[numsolutions]-=IK2PI;
}
else if( j8array[numsolutions] < -IKPI )
{
    j8array[numsolutions]+=IK2PI;
}
sj8array[numsolutions] = IKsin(j8array[numsolutions]);
cj8array[numsolutions] = IKcos(j8array[numsolutions]);
numsolutions++;
}
}
bool j8valid[2]={true,true};
_nj8 = 2;
for(int ij8 = 0; ij8 < numsolutions; ++ij8)
    {
if( !j8valid[ij8] )
{
    continue;
}
    j8 = j8array[ij8]; cj8 = cj8array[ij8]; sj8 = sj8array[ij8];
htj8 = IKtan(j8/2);

_ij8[0] = ij8; _ij8[1] = -1;
for(int iij8 = ij8+1; iij8 < numsolutions; ++iij8)
{
if( j8valid[iij8] && IKabs(cj8array[ij8]-cj8array[iij8]) < IKFAST_SOLUTION_THRESH && IKabs(sj8array[ij8]-sj8array[iij8]) < IKFAST_SOLUTION_THRESH )
{
    j8valid[iij8]=false; _ij8[1] = iij8; break;
}
}
rotationfunction0(solutions);
    }

}

}

} else
{
if( 1 )
{
continue;

} else
{
}
}
}
}
}
}

} else
{
{
IkReal j8array[1], cj8array[1], sj8array[1];
bool j8valid[1]={false};
_nj8 = 1;
IkReal x844=((cj7)*(py));
IkReal x845=((px)*(sj7));
IkReal x846=((IkReal(5000.00000000000))*(x845));
if( IKabs(((((IKabs(((((IkReal(-300.000000000000))*((x845)*(x845))))+(((IkReal(-300.000000000000))*((x844)*(x844))))+(((IkReal(600.000000000000))*(x844)*(x845))))) != 0)?((IkReal)1/(((((IkReal(-300.000000000000))*((x845)*(x845))))+(((IkReal(-300.000000000000))*((x844)*(x844))))+(((IkReal(600.000000000000))*(x844)*(x845)))))):(IkReal)1.0e30))*(((((pp)*(x846)))+(((IkReal(-5000.00000000000))*(pp)*(x844)))+(((IkReal(-1883.75220000000))*(x845)))+(((IkReal(1883.75220000000))*(x844))))))) < IKFAST_ATAN2_MAGTHRESH && IKabs(((IkReal(-3069.00000000000))*(((IKabs(((x846)+(((IkReal(-5000.00000000000))*(x844))))) != 0)?((IkReal)1/(((x846)+(((IkReal(-5000.00000000000))*(x844)))))):(IkReal)1.0e30)))) < IKFAST_ATAN2_MAGTHRESH && IKabs(IKsqr(((((IKabs(((((IkReal(-300.000000000000))*((x845)*(x845))))+(((IkReal(-300.000000000000))*((x844)*(x844))))+(((IkReal(600.000000000000))*(x844)*(x845))))) != 0)?((IkReal)1/(((((IkReal(-300.000000000000))*((x845)*(x845))))+(((IkReal(-300.000000000000))*((x844)*(x844))))+(((IkReal(600.000000000000))*(x844)*(x845)))))):(IkReal)1.0e30))*(((((pp)*(x846)))+(((IkReal(-5000.00000000000))*(pp)*(x844)))+(((IkReal(-1883.75220000000))*(x845)))+(((IkReal(1883.75220000000))*(x844)))))))+IKsqr(((IkReal(-3069.00000000000))*(((IKabs(((x846)+(((IkReal(-5000.00000000000))*(x844))))) != 0)?((IkReal)1/(((x846)+(((IkReal(-5000.00000000000))*(x844)))))):(IkReal)1.0e30))))-1) <= IKFAST_SINCOS_THRESH )
    continue;
j8array[0]=IKatan2(((((IKabs(((((IkReal(-300.000000000000))*((x845)*(x845))))+(((IkReal(-300.000000000000))*((x844)*(x844))))+(((IkReal(600.000000000000))*(x844)*(x845))))) != 0)?((IkReal)1/(((((IkReal(-300.000000000000))*((x845)*(x845))))+(((IkReal(-300.000000000000))*((x844)*(x844))))+(((IkReal(600.000000000000))*(x844)*(x845)))))):(IkReal)1.0e30))*(((((pp)*(x846)))+(((IkReal(-5000.00000000000))*(pp)*(x844)))+(((IkReal(-1883.75220000000))*(x845)))+(((IkReal(1883.75220000000))*(x844)))))), ((IkReal(-3069.00000000000))*(((IKabs(((x846)+(((IkReal(-5000.00000000000))*(x844))))) != 0)?((IkReal)1/(((x846)+(((IkReal(-5000.00000000000))*(x844)))))):(IkReal)1.0e30))));
sj8array[0]=IKsin(j8array[0]);
cj8array[0]=IKcos(j8array[0]);
if( j8array[0] > IKPI )
{
    j8array[0]-=IK2PI;
}
else if( j8array[0] < -IKPI )
{    j8array[0]+=IK2PI;
}
j8valid[0] = true;
for(int ij8 = 0; ij8 < 1; ++ij8)
{
if( !j8valid[ij8] )
{
    continue;
}
_ij8[0] = ij8; _ij8[1] = -1;
for(int iij8 = ij8+1; iij8 < 1; ++iij8)
{
if( j8valid[iij8] && IKabs(cj8array[ij8]-cj8array[iij8]) < IKFAST_SOLUTION_THRESH && IKabs(sj8array[ij8]-sj8array[iij8]) < IKFAST_SOLUTION_THRESH )
{
    j8valid[iij8]=false; _ij8[1] = iij8; break;
}
}
j8 = j8array[ij8]; cj8 = cj8array[ij8]; sj8 = sj8array[ij8];
{
IkReal evalcond[5];
IkReal x847=IKcos(j8);
IkReal x848=IKsin(j8);
IkReal x849=((cj7)*(py));
IkReal x850=((px)*(sj7));
IkReal x851=((IkReal(0.0600000000000000))*(x848));
IkReal x852=((x847)*(x850));
evalcond[0]=((IkReal(0.613800000000000))+(((IkReal(-1.00000000000000))*(x847)*(x849)))+(x852));
evalcond[1]=((IkReal(0.613800000000000))*(x848));
evalcond[2]=((((x848)*(x850)))+(((IkReal(-1.00000000000000))*(x848)*(x849))));
evalcond[3]=((((IkReal(0.613800000000000))*(x847)))+(((IkReal(-1.00000000000000))*(x849)))+(x850));
evalcond[4]=((IkReal(0.00847044000000000))+(((IkReal(0.600000000000000))*(x847)*(x849)))+(((IkReal(-1.00000000000000))*(x850)*(x851)))+(((IkReal(-1.00000000000000))*(pp)))+(((x849)*(x851)))+(((IkReal(-0.600000000000000))*(x852))));
if( IKabs(evalcond[0]) > 0.000001  || IKabs(evalcond[1]) > 0.000001  || IKabs(evalcond[2]) > 0.000001  || IKabs(evalcond[3]) > 0.000001  || IKabs(evalcond[4]) > 0.000001  )
{
continue;
}
}

rotationfunction0(solutions);
}
}

}

}

} else
{
{
IkReal j8array[1], cj8array[1], sj8array[1];
bool j8valid[1]={false};
_nj8 = 1;
IkReal x853=((cj7)*(py));
IkReal x854=((px)*(sj7));
if( IKabs(((((IKabs(((((IkReal(-184.140000000000))*(x854)))+(((IkReal(184.140000000000))*(x853))))) != 0)?((IkReal)1/(((((IkReal(-184.140000000000))*(x854)))+(((IkReal(184.140000000000))*(x853)))))):(IkReal)1.0e30))*(((IkReal(-25.9957803600000))+(((IkReal(6000.00000000000))*(x853)*(x854)))+(((IkReal(-3000.00000000000))*((x854)*(x854))))+(((IkReal(-3000.00000000000))*((x853)*(x853))))+(((IkReal(3069.00000000000))*(pp))))))) < IKFAST_ATAN2_MAGTHRESH && IKabs(((((IkReal(1.62919517758227))*(x853)))+(((IkReal(-1.62919517758227))*(x854))))) < IKFAST_ATAN2_MAGTHRESH && IKabs(IKsqr(((((IKabs(((((IkReal(-184.140000000000))*(x854)))+(((IkReal(184.140000000000))*(x853))))) != 0)?((IkReal)1/(((((IkReal(-184.140000000000))*(x854)))+(((IkReal(184.140000000000))*(x853)))))):(IkReal)1.0e30))*(((IkReal(-25.9957803600000))+(((IkReal(6000.00000000000))*(x853)*(x854)))+(((IkReal(-3000.00000000000))*((x854)*(x854))))+(((IkReal(-3000.00000000000))*((x853)*(x853))))+(((IkReal(3069.00000000000))*(pp)))))))+IKsqr(((((IkReal(1.62919517758227))*(x853)))+(((IkReal(-1.62919517758227))*(x854)))))-1) <= IKFAST_SINCOS_THRESH )
    continue;
j8array[0]=IKatan2(((((IKabs(((((IkReal(-184.140000000000))*(x854)))+(((IkReal(184.140000000000))*(x853))))) != 0)?((IkReal)1/(((((IkReal(-184.140000000000))*(x854)))+(((IkReal(184.140000000000))*(x853)))))):(IkReal)1.0e30))*(((IkReal(-25.9957803600000))+(((IkReal(6000.00000000000))*(x853)*(x854)))+(((IkReal(-3000.00000000000))*((x854)*(x854))))+(((IkReal(-3000.00000000000))*((x853)*(x853))))+(((IkReal(3069.00000000000))*(pp)))))), ((((IkReal(1.62919517758227))*(x853)))+(((IkReal(-1.62919517758227))*(x854)))));
sj8array[0]=IKsin(j8array[0]);
cj8array[0]=IKcos(j8array[0]);
if( j8array[0] > IKPI )
{
    j8array[0]-=IK2PI;
}
else if( j8array[0] < -IKPI )
{    j8array[0]+=IK2PI;
}
j8valid[0] = true;
for(int ij8 = 0; ij8 < 1; ++ij8)
{
if( !j8valid[ij8] )
{
    continue;
}
_ij8[0] = ij8; _ij8[1] = -1;
for(int iij8 = ij8+1; iij8 < 1; ++iij8)
{
if( j8valid[iij8] && IKabs(cj8array[ij8]-cj8array[iij8]) < IKFAST_SOLUTION_THRESH && IKabs(sj8array[ij8]-sj8array[iij8]) < IKFAST_SOLUTION_THRESH )
{
    j8valid[iij8]=false; _ij8[1] = iij8; break;
}
}
j8 = j8array[ij8]; cj8 = cj8array[ij8]; sj8 = sj8array[ij8];
{
IkReal evalcond[5];
IkReal x855=IKcos(j8);
IkReal x856=IKsin(j8);
IkReal x857=((cj7)*(py));
IkReal x858=((px)*(sj7));
IkReal x859=((IkReal(0.0600000000000000))*(x856));
IkReal x860=((x855)*(x858));
evalcond[0]=((IkReal(0.613800000000000))+(x860)+(((IkReal(-1.00000000000000))*(x855)*(x857))));
evalcond[1]=((IkReal(0.613800000000000))*(x856));
evalcond[2]=((((IkReal(-1.00000000000000))*(x856)*(x857)))+(((x856)*(x858))));
evalcond[3]=((((IkReal(0.613800000000000))*(x855)))+(((IkReal(-1.00000000000000))*(x857)))+(x858));
evalcond[4]=((IkReal(0.00847044000000000))+(((IkReal(-0.600000000000000))*(x860)))+(((IkReal(-1.00000000000000))*(pp)))+(((IkReal(-1.00000000000000))*(x858)*(x859)))+(((IkReal(0.600000000000000))*(x855)*(x857)))+(((x857)*(x859))));
if( IKabs(evalcond[0]) > 0.000001  || IKabs(evalcond[1]) > 0.000001  || IKabs(evalcond[2]) > 0.000001  || IKabs(evalcond[3]) > 0.000001  || IKabs(evalcond[4]) > 0.000001  )
{
continue;
}
}

rotationfunction0(solutions);
}
}

}

}

} else
{
if( 1 )
{
continue;

} else
{
}
}
}

} else
{
{
IkReal j8array[1], cj8array[1], sj8array[1];
bool j8valid[1]={false};
_nj8 = 1;
IkReal x861=((px)*(sj7));
IkReal x862=((IkReal(0.0300000000000000))*(cj10));
IkReal x863=((IkReal(0.313800000000000))*(sj10));
IkReal x864=((IkReal(0.0300000000000000))*(pz));
IkReal x865=((IkReal(0.313800000000000))*(cj10));
IkReal x866=((cj7)*(py));
IkReal x867=((IkReal(0.0300000000000000))*(x866));
if( IKabs(((gconst50)*(((((IkReal(-0.0300000000000000))*(x861)))+(((IkReal(0.300000000000000))*(pz)))+(((IkReal(-1.00000000000000))*(x862)*(x866)))+(((x861)*(x862)))+(((x861)*(x863)))+(((pz)*(x865)))+(x867)+(((IkReal(-1.00000000000000))*(sj10)*(x864)))+(((IkReal(-1.00000000000000))*(x863)*(x866))))))) < IKFAST_ATAN2_MAGTHRESH && IKabs(((gconst50)*(((((IkReal(-1.00000000000000))*(x864)))+(((IkReal(-0.300000000000000))*(x861)))+(((IkReal(0.300000000000000))*(x866)))+(((IkReal(-1.00000000000000))*(x861)*(x865)))+(((pz)*(x862)))+(((pz)*(x863)))+(((x865)*(x866)))+(((IkReal(0.0300000000000000))*(sj10)*(x861)))+(((IkReal(-1.00000000000000))*(sj10)*(x867))))))) < IKFAST_ATAN2_MAGTHRESH )
    continue;
j8array[0]=IKatan2(((gconst50)*(((((IkReal(-0.0300000000000000))*(x861)))+(((IkReal(0.300000000000000))*(pz)))+(((IkReal(-1.00000000000000))*(x862)*(x866)))+(((x861)*(x862)))+(((x861)*(x863)))+(((pz)*(x865)))+(x867)+(((IkReal(-1.00000000000000))*(sj10)*(x864)))+(((IkReal(-1.00000000000000))*(x863)*(x866)))))), ((gconst50)*(((((IkReal(-1.00000000000000))*(x864)))+(((IkReal(-0.300000000000000))*(x861)))+(((IkReal(0.300000000000000))*(x866)))+(((IkReal(-1.00000000000000))*(x861)*(x865)))+(((pz)*(x862)))+(((pz)*(x863)))+(((x865)*(x866)))+(((IkReal(0.0300000000000000))*(sj10)*(x861)))+(((IkReal(-1.00000000000000))*(sj10)*(x867)))))));
sj8array[0]=IKsin(j8array[0]);
cj8array[0]=IKcos(j8array[0]);
if( j8array[0] > IKPI )
{
    j8array[0]-=IK2PI;
}
else if( j8array[0] < -IKPI )
{    j8array[0]+=IK2PI;
}
j8valid[0] = true;
for(int ij8 = 0; ij8 < 1; ++ij8)
{
if( !j8valid[ij8] )
{
    continue;
}
_ij8[0] = ij8; _ij8[1] = -1;
for(int iij8 = ij8+1; iij8 < 1; ++iij8)
{
if( j8valid[iij8] && IKabs(cj8array[ij8]-cj8array[iij8]) < IKFAST_SOLUTION_THRESH && IKabs(sj8array[ij8]-sj8array[iij8]) < IKFAST_SOLUTION_THRESH )
{
    j8valid[iij8]=false; _ij8[1] = iij8; break;
}
}
j8 = j8array[ij8]; cj8 = cj8array[ij8]; sj8 = sj8array[ij8];
{
IkReal evalcond[5];
IkReal x868=IKcos(j8);
IkReal x869=IKsin(j8);
IkReal x870=((IkReal(0.313800000000000))*(cj10));
IkReal x871=((px)*(sj7));
IkReal x872=((IkReal(0.313800000000000))*(sj10));
IkReal x873=((IkReal(0.0300000000000000))*(cj10));
IkReal x874=((cj7)*(py));
IkReal x875=((pz)*(x868));
IkReal x876=((IkReal(0.0300000000000000))*(x868));
IkReal x877=((pz)*(x869));
IkReal x878=((IkReal(0.0600000000000000))*(x869));
IkReal x879=((IkReal(0.0300000000000000))*(x869));
IkReal x880=((x868)*(x874));
evalcond[0]=((IkReal(0.300000000000000))+(((x868)*(x871)))+(((IkReal(-1.00000000000000))*(x877)))+(((IkReal(-1.00000000000000))*(x880)))+(((IkReal(-0.0300000000000000))*(sj10)))+(x870));
evalcond[1]=((((IkReal(0.300000000000000))*(x869)))+(((x868)*(x873)))+(((x868)*(x872)))+(((IkReal(-1.00000000000000))*(pz)))+(((x869)*(x870)))+(((IkReal(-1.00000000000000))*(sj10)*(x879)))+(((IkReal(-1.00000000000000))*(x876))));
evalcond[2]=((IkReal(0.0300000000000000))+(((IkReal(-1.00000000000000))*(x869)*(x874)))+(((x869)*(x871)))+(x875)+(((IkReal(-1.00000000000000))*(x872)))+(((IkReal(-1.00000000000000))*(x873))));
evalcond[3]=((((IkReal(0.300000000000000))*(x868)))+(((x868)*(x870)))+(((IkReal(-1.00000000000000))*(x869)*(x872)))+(((IkReal(-1.00000000000000))*(x869)*(x873)))+(((IkReal(-1.00000000000000))*(x874)))+(x879)+(x871)+(((IkReal(-1.00000000000000))*(sj10)*(x876))));
evalcond[4]=((IkReal(0.00847044000000000))+(((x874)*(x878)))+(((IkReal(-1.00000000000000))*(x871)*(x878)))+(((IkReal(0.600000000000000))*(x880)))+(((IkReal(-1.00000000000000))*(pp)))+(((IkReal(0.600000000000000))*(x877)))+(((IkReal(-0.0600000000000000))*(x875)))+(((IkReal(-0.600000000000000))*(x868)*(x871))));
if( IKabs(evalcond[0]) > 0.000001  || IKabs(evalcond[1]) > 0.000001  || IKabs(evalcond[2]) > 0.000001  || IKabs(evalcond[3]) > 0.000001  || IKabs(evalcond[4]) > 0.000001  )
{
continue;
}
}

rotationfunction0(solutions);
}
}

}

}

} else
{
{
IkReal j8array[1], cj8array[1], sj8array[1];
bool j8valid[1]={false};
_nj8 = 1;
IkReal x881=(sj10)*(sj10);
IkReal x882=(cj10)*(cj10);
IkReal x883=((IkReal(0.0188280000000000))*(sj10));
if( IKabs(((gconst51)*(((IkReal(0.000900000000000000))+(((IkReal(0.0984704400000000))*(x881)))+(((IkReal(0.000900000000000000))*(x882)))+(((IkReal(-0.00180000000000000))*(cj10)))+(((IkReal(-1.00000000000000))*(x883)))+(((cj10)*(x883)))+(((IkReal(-1.00000000000000))*((pz)*(pz)))))))) < IKFAST_ATAN2_MAGTHRESH && IKabs(((gconst51)*(((IkReal(0.00900000000000000))+(((px)*(pz)*(sj7)))+(((IkReal(0.00941400000000000))*(x881)))+(((IkReal(-0.0950400000000000))*(sj10)))+(((IkReal(0.000414000000000000))*(cj10)))+(((IkReal(-0.00941400000000000))*(x882)))+(((IkReal(-0.0975704400000000))*(cj10)*(sj10)))+(((IkReal(-1.00000000000000))*(cj7)*(py)*(pz))))))) < IKFAST_ATAN2_MAGTHRESH )
    continue;
j8array[0]=IKatan2(((gconst51)*(((IkReal(0.000900000000000000))+(((IkReal(0.0984704400000000))*(x881)))+(((IkReal(0.000900000000000000))*(x882)))+(((IkReal(-0.00180000000000000))*(cj10)))+(((IkReal(-1.00000000000000))*(x883)))+(((cj10)*(x883)))+(((IkReal(-1.00000000000000))*((pz)*(pz))))))), ((gconst51)*(((IkReal(0.00900000000000000))+(((px)*(pz)*(sj7)))+(((IkReal(0.00941400000000000))*(x881)))+(((IkReal(-0.0950400000000000))*(sj10)))+(((IkReal(0.000414000000000000))*(cj10)))+(((IkReal(-0.00941400000000000))*(x882)))+(((IkReal(-0.0975704400000000))*(cj10)*(sj10)))+(((IkReal(-1.00000000000000))*(cj7)*(py)*(pz)))))));
sj8array[0]=IKsin(j8array[0]);
cj8array[0]=IKcos(j8array[0]);
if( j8array[0] > IKPI )
{
    j8array[0]-=IK2PI;
}
else if( j8array[0] < -IKPI )
{    j8array[0]+=IK2PI;
}
j8valid[0] = true;
for(int ij8 = 0; ij8 < 1; ++ij8)
{
if( !j8valid[ij8] )
{
    continue;
}
_ij8[0] = ij8; _ij8[1] = -1;
for(int iij8 = ij8+1; iij8 < 1; ++iij8)
{
if( j8valid[iij8] && IKabs(cj8array[ij8]-cj8array[iij8]) < IKFAST_SOLUTION_THRESH && IKabs(sj8array[ij8]-sj8array[iij8]) < IKFAST_SOLUTION_THRESH )
{
    j8valid[iij8]=false; _ij8[1] = iij8; break;
}
}
j8 = j8array[ij8]; cj8 = cj8array[ij8]; sj8 = sj8array[ij8];
{
IkReal evalcond[5];
IkReal x884=IKcos(j8);
IkReal x885=IKsin(j8);
IkReal x886=((IkReal(0.313800000000000))*(cj10));
IkReal x887=((px)*(sj7));
IkReal x888=((IkReal(0.313800000000000))*(sj10));
IkReal x889=((IkReal(0.0300000000000000))*(cj10));
IkReal x890=((cj7)*(py));
IkReal x891=((pz)*(x884));
IkReal x892=((IkReal(0.0300000000000000))*(x884));
IkReal x893=((pz)*(x885));
IkReal x894=((IkReal(0.0600000000000000))*(x885));
IkReal x895=((IkReal(0.0300000000000000))*(x885));
IkReal x896=((x884)*(x890));
evalcond[0]=((IkReal(0.300000000000000))+(((IkReal(-1.00000000000000))*(x893)))+(((IkReal(-1.00000000000000))*(x896)))+(((IkReal(-0.0300000000000000))*(sj10)))+(x886)+(((x884)*(x887))));
evalcond[1]=((((IkReal(-1.00000000000000))*(sj10)*(x895)))+(((IkReal(-1.00000000000000))*(x892)))+(((IkReal(0.300000000000000))*(x885)))+(((IkReal(-1.00000000000000))*(pz)))+(((x885)*(x886)))+(((x884)*(x888)))+(((x884)*(x889))));
evalcond[2]=((IkReal(0.0300000000000000))+(((IkReal(-1.00000000000000))*(x885)*(x890)))+(((IkReal(-1.00000000000000))*(x888)))+(((IkReal(-1.00000000000000))*(x889)))+(x891)+(((x885)*(x887))));
evalcond[3]=((((IkReal(-1.00000000000000))*(sj10)*(x892)))+(((IkReal(-1.00000000000000))*(x890)))+(((IkReal(0.300000000000000))*(x884)))+(x887)+(x895)+(((IkReal(-1.00000000000000))*(x885)*(x889)))+(((IkReal(-1.00000000000000))*(x885)*(x888)))+(((x884)*(x886))));
evalcond[4]=((IkReal(0.00847044000000000))+(((IkReal(0.600000000000000))*(x893)))+(((IkReal(0.600000000000000))*(x896)))+(((IkReal(-1.00000000000000))*(pp)))+(((IkReal(-0.0600000000000000))*(x891)))+(((IkReal(-0.600000000000000))*(x884)*(x887)))+(((x890)*(x894)))+(((IkReal(-1.00000000000000))*(x887)*(x894))));
if( IKabs(evalcond[0]) > 0.000001  || IKabs(evalcond[1]) > 0.000001  || IKabs(evalcond[2]) > 0.000001  || IKabs(evalcond[3]) > 0.000001  || IKabs(evalcond[4]) > 0.000001  )
{
continue;
}
}

rotationfunction0(solutions);
}
}

}

}

} else
{
if( 1 )
{
continue;

} else
{
}
}
}
}

} else
{
{
IkReal j8array[1], cj8array[1], sj8array[1];
bool j8valid[1]={false};
_nj8 = 1;
IkReal x897=((py)*(sj9));
IkReal x898=((cj7)*(sj9));
IkReal x899=((IkReal(0.300000000000000))*(cj9));
IkReal x900=((cj7)*(py));
IkReal x901=((px)*(sj7));
IkReal x902=((IkReal(0.313800000000000))*(cj10)*(cj9));
IkReal x903=((IkReal(0.0300000000000000))*(cj9)*(sj10));
if( IKabs(((gconst46)*(((((IkReal(-1.00000000000000))*(sj7)*(x897)*(x900)))+(((IkReal(-1.00000000000000))*(px)*(x897)*((cj7)*(cj7))))+(((pz)*(x899)))+(((IkReal(-1.00000000000000))*(pz)*(x903)))+(((sj7)*(x897)*(x901)))+(((pz)*(x902)))+(((px)*(x898)*(x901))))))) < IKFAST_ATAN2_MAGTHRESH && IKabs(((gconst46)*(((((IkReal(-1.00000000000000))*(x900)*(x903)))+(((px)*(pz)*(x898)))+(((x901)*(x903)))+(((x900)*(x902)))+(((x899)*(x900)))+(((pz)*(sj7)*(x897)))+(((IkReal(-1.00000000000000))*(x901)*(x902)))+(((IkReal(-1.00000000000000))*(x899)*(x901))))))) < IKFAST_ATAN2_MAGTHRESH )
    continue;
j8array[0]=IKatan2(((gconst46)*(((((IkReal(-1.00000000000000))*(sj7)*(x897)*(x900)))+(((IkReal(-1.00000000000000))*(px)*(x897)*((cj7)*(cj7))))+(((pz)*(x899)))+(((IkReal(-1.00000000000000))*(pz)*(x903)))+(((sj7)*(x897)*(x901)))+(((pz)*(x902)))+(((px)*(x898)*(x901)))))), ((gconst46)*(((((IkReal(-1.00000000000000))*(x900)*(x903)))+(((px)*(pz)*(x898)))+(((x901)*(x903)))+(((x900)*(x902)))+(((x899)*(x900)))+(((pz)*(sj7)*(x897)))+(((IkReal(-1.00000000000000))*(x901)*(x902)))+(((IkReal(-1.00000000000000))*(x899)*(x901)))))));
sj8array[0]=IKsin(j8array[0]);
cj8array[0]=IKcos(j8array[0]);
if( j8array[0] > IKPI )
{
    j8array[0]-=IK2PI;
}
else if( j8array[0] < -IKPI )
{    j8array[0]+=IK2PI;
}
j8valid[0] = true;
for(int ij8 = 0; ij8 < 1; ++ij8)
{
if( !j8valid[ij8] )
{
    continue;
}
_ij8[0] = ij8; _ij8[1] = -1;
for(int iij8 = ij8+1; iij8 < 1; ++iij8)
{
if( j8valid[iij8] && IKabs(cj8array[ij8]-cj8array[iij8]) < IKFAST_SOLUTION_THRESH && IKabs(sj8array[ij8]-sj8array[iij8]) < IKFAST_SOLUTION_THRESH )
{
    j8valid[iij8]=false; _ij8[1] = iij8; break;
}
}
j8 = j8array[ij8]; cj8 = cj8array[ij8]; sj8 = sj8array[ij8];
{
IkReal evalcond[6];
IkReal x904=IKcos(j8);
IkReal x905=IKsin(j8);
IkReal x906=((IkReal(1.00000000000000))*(sj9));
IkReal x907=((py)*(sj7));
IkReal x908=((cj7)*(px));
IkReal x909=((cj7)*(py));
IkReal x910=((px)*(sj7));
IkReal x911=((IkReal(0.0600000000000000))*(cj9));
IkReal x912=((IkReal(0.0300000000000000))*(cj10));
IkReal x913=((IkReal(0.313800000000000))*(cj10));
IkReal x914=((IkReal(0.0300000000000000))*(sj10));
IkReal x915=((IkReal(1.00000000000000))*(cj9));
IkReal x916=((IkReal(0.313800000000000))*(x905));
IkReal x917=((pz)*(x904));
IkReal x918=((sj10)*(x904));
IkReal x919=((IkReal(0.600000000000000))*(x904));
IkReal x920=((pz)*(x905));
IkReal x921=((sj9)*(x905));
IkReal x922=((cj9)*(x905));
IkReal x923=((sj9)*(x904));
evalcond[0]=((IkReal(0.300000000000000))+(((IkReal(-1.00000000000000))*(x914)))+(((IkReal(-1.00000000000000))*(x920)))+(((IkReal(-1.00000000000000))*(x904)*(x909)))+(x913)+(((x904)*(x910))));
evalcond[1]=((((x909)*(x922)))+(((sj9)*(x907)))+(((sj9)*(x908)))+(((IkReal(-1.00000000000000))*(x905)*(x910)*(x915)))+(((IkReal(-1.00000000000000))*(x915)*(x917))));
evalcond[2]=((((IkReal(0.0300000000000000))*(x923)))+(((IkReal(-1.00000000000000))*(x912)*(x923)))+(((IkReal(-1.00000000000000))*(pz)))+(((IkReal(-0.313800000000000))*(sj9)*(x918)))+(((IkReal(-1.00000000000000))*(x905)*(x914)))+(((IkReal(0.300000000000000))*(x905)))+(((x905)*(x913))));
evalcond[3]=((IkReal(0.0300000000000000))+(((IkReal(-0.313800000000000))*(sj10)))+(((IkReal(-1.00000000000000))*(x906)*(x917)))+(((IkReal(-1.00000000000000))*(x908)*(x915)))+(((IkReal(-1.00000000000000))*(x905)*(x906)*(x910)))+(((IkReal(-1.00000000000000))*(x912)))+(((x909)*(x921)))+(((IkReal(-1.00000000000000))*(x907)*(x915))));
evalcond[4]=((((IkReal(-0.0300000000000000))*(x921)))+(((sj10)*(sj9)*(x916)))+(((IkReal(-1.00000000000000))*(x909)))+(((IkReal(-1.00000000000000))*(x904)*(x914)))+(((IkReal(0.300000000000000))*(x904)))+(x910)+(((x904)*(x913)))+(((x912)*(x921))));
evalcond[5]=((IkReal(0.00847044000000000))+(((x909)*(x919)))+(((IkReal(0.600000000000000))*(x920)))+(((IkReal(-0.0600000000000000))*(x909)*(x921)))+(((IkReal(0.0600000000000000))*(sj9)*(x917)))+(((IkReal(-1.00000000000000))*(pp)))+(((IkReal(-1.00000000000000))*(x910)*(x919)))+(((x907)*(x911)))+(((x908)*(x911)))+(((IkReal(0.0600000000000000))*(x910)*(x921))));
if( IKabs(evalcond[0]) > 0.000001  || IKabs(evalcond[1]) > 0.000001  || IKabs(evalcond[2]) > 0.000001  || IKabs(evalcond[3]) > 0.000001  || IKabs(evalcond[4]) > 0.000001  || IKabs(evalcond[5]) > 0.000001  )
{
continue;
}
}

rotationfunction0(solutions);
}
}

}

}

} else
{
{
IkReal j8array[1], cj8array[1], sj8array[1];
bool j8valid[1]={false};
_nj8 = 1;
IkReal x924=(sj10)*(sj10);
IkReal x925=(cj10)*(cj10);
IkReal x926=((IkReal(0.00941400000000000))*(sj9));
IkReal x927=((cj10)*(sj10));
if( IKabs(((gconst47)*(((((IkReal(-1.00000000000000))*(x925)*(x926)))+(((IkReal(0.000414000000000000))*(cj10)*(sj9)))+(((x924)*(x926)))+(((px)*(pz)*(sj7)))+(((IkReal(-0.0950400000000000))*(sj10)*(sj9)))+(((IkReal(-0.0975704400000000))*(sj9)*(x927)))+(((IkReal(-1.00000000000000))*(cj7)*(py)*(pz)))+(((IkReal(0.00900000000000000))*(sj9))))))) < IKFAST_ATAN2_MAGTHRESH && IKabs(((gconst47)*(((IkReal(-0.0900000000000000))+(((IkReal(-0.000900000000000000))*(x924)))+(((IkReal(-0.188280000000000))*(cj10)))+(((IkReal(0.0188280000000000))*(x927)))+((pz)*(pz))+(((IkReal(0.0180000000000000))*(sj10)))+(((IkReal(-0.0984704400000000))*(x925))))))) < IKFAST_ATAN2_MAGTHRESH )
    continue;
j8array[0]=IKatan2(((gconst47)*(((((IkReal(-1.00000000000000))*(x925)*(x926)))+(((IkReal(0.000414000000000000))*(cj10)*(sj9)))+(((x924)*(x926)))+(((px)*(pz)*(sj7)))+(((IkReal(-0.0950400000000000))*(sj10)*(sj9)))+(((IkReal(-0.0975704400000000))*(sj9)*(x927)))+(((IkReal(-1.00000000000000))*(cj7)*(py)*(pz)))+(((IkReal(0.00900000000000000))*(sj9)))))), ((gconst47)*(((IkReal(-0.0900000000000000))+(((IkReal(-0.000900000000000000))*(x924)))+(((IkReal(-0.188280000000000))*(cj10)))+(((IkReal(0.0188280000000000))*(x927)))+((pz)*(pz))+(((IkReal(0.0180000000000000))*(sj10)))+(((IkReal(-0.0984704400000000))*(x925)))))));
sj8array[0]=IKsin(j8array[0]);
cj8array[0]=IKcos(j8array[0]);
if( j8array[0] > IKPI )
{
    j8array[0]-=IK2PI;
}
else if( j8array[0] < -IKPI )
{    j8array[0]+=IK2PI;
}
j8valid[0] = true;
for(int ij8 = 0; ij8 < 1; ++ij8)
{
if( !j8valid[ij8] )
{
    continue;
}
_ij8[0] = ij8; _ij8[1] = -1;
for(int iij8 = ij8+1; iij8 < 1; ++iij8)
{
if( j8valid[iij8] && IKabs(cj8array[ij8]-cj8array[iij8]) < IKFAST_SOLUTION_THRESH && IKabs(sj8array[ij8]-sj8array[iij8]) < IKFAST_SOLUTION_THRESH )
{
    j8valid[iij8]=false; _ij8[1] = iij8; break;
}
}
j8 = j8array[ij8]; cj8 = cj8array[ij8]; sj8 = sj8array[ij8];
{
IkReal evalcond[6];
IkReal x928=IKcos(j8);
IkReal x929=IKsin(j8);
IkReal x930=((IkReal(1.00000000000000))*(sj9));
IkReal x931=((py)*(sj7));
IkReal x932=((cj7)*(px));
IkReal x933=((cj7)*(py));
IkReal x934=((px)*(sj7));
IkReal x935=((IkReal(0.0600000000000000))*(cj9));
IkReal x936=((IkReal(0.0300000000000000))*(cj10));
IkReal x937=((IkReal(0.313800000000000))*(cj10));
IkReal x938=((IkReal(0.0300000000000000))*(sj10));
IkReal x939=((IkReal(1.00000000000000))*(cj9));
IkReal x940=((IkReal(0.313800000000000))*(x929));
IkReal x941=((pz)*(x928));
IkReal x942=((sj10)*(x928));
IkReal x943=((IkReal(0.600000000000000))*(x928));
IkReal x944=((pz)*(x929));
IkReal x945=((sj9)*(x929));
IkReal x946=((cj9)*(x929));
IkReal x947=((sj9)*(x928));
evalcond[0]=((IkReal(0.300000000000000))+(((x928)*(x934)))+(((IkReal(-1.00000000000000))*(x944)))+(x937)+(((IkReal(-1.00000000000000))*(x928)*(x933)))+(((IkReal(-1.00000000000000))*(x938))));
evalcond[1]=((((x933)*(x946)))+(((IkReal(-1.00000000000000))*(x939)*(x941)))+(((IkReal(-1.00000000000000))*(x929)*(x934)*(x939)))+(((sj9)*(x931)))+(((sj9)*(x932))));
evalcond[2]=((((IkReal(-0.313800000000000))*(sj9)*(x942)))+(((IkReal(0.0300000000000000))*(x947)))+(((IkReal(0.300000000000000))*(x929)))+(((IkReal(-1.00000000000000))*(pz)))+(((IkReal(-1.00000000000000))*(x929)*(x938)))+(((IkReal(-1.00000000000000))*(x936)*(x947)))+(((x929)*(x937))));
evalcond[3]=((IkReal(0.0300000000000000))+(((IkReal(-0.313800000000000))*(sj10)))+(((x933)*(x945)))+(((IkReal(-1.00000000000000))*(x931)*(x939)))+(((IkReal(-1.00000000000000))*(x932)*(x939)))+(((IkReal(-1.00000000000000))*(x930)*(x941)))+(((IkReal(-1.00000000000000))*(x929)*(x930)*(x934)))+(((IkReal(-1.00000000000000))*(x936))));
evalcond[4]=((((IkReal(-1.00000000000000))*(x928)*(x938)))+(((x936)*(x945)))+(((x928)*(x937)))+(((IkReal(0.300000000000000))*(x928)))+(((sj10)*(sj9)*(x940)))+(((IkReal(-1.00000000000000))*(x933)))+(((IkReal(-0.0300000000000000))*(x945)))+(x934));
evalcond[5]=((IkReal(0.00847044000000000))+(((x933)*(x943)))+(((IkReal(0.600000000000000))*(x944)))+(((IkReal(0.0600000000000000))*(x934)*(x945)))+(((IkReal(-1.00000000000000))*(pp)))+(((x931)*(x935)))+(((IkReal(-0.0600000000000000))*(x933)*(x945)))+(((IkReal(0.0600000000000000))*(sj9)*(x941)))+(((x932)*(x935)))+(((IkReal(-1.00000000000000))*(x934)*(x943))));
if( IKabs(evalcond[0]) > 0.000001  || IKabs(evalcond[1]) > 0.000001  || IKabs(evalcond[2]) > 0.000001  || IKabs(evalcond[3]) > 0.000001  || IKabs(evalcond[4]) > 0.000001  || IKabs(evalcond[5]) > 0.000001  )
{
continue;
}
}

rotationfunction0(solutions);
}
}

}

}
}
}

}

}

} else
{
{
IkReal j7array[2], cj7array[2], sj7array[2];
bool j7valid[2]={false};
_nj7 = 2;
IkReal x948=((IkReal(0.0300000000000000))*(cj9));
if( IKabs(((IkReal(-1.00000000000000))*(px))) < IKFAST_ATAN2_MAGTHRESH && IKabs(((IkReal(-1.00000000000000))*(py))) < IKFAST_ATAN2_MAGTHRESH )
    continue;
IkReal x949=((IkReal(1.00000000000000))*(IKatan2(((IkReal(-1.00000000000000))*(px)), ((IkReal(-1.00000000000000))*(py)))));
if( ((((px)*(px))+((py)*(py)))) < (IkReal)-0.00001 )
    continue;
if( (((((IKabs(IKabs(IKsqrt((((px)*(px))+((py)*(py)))))) != 0)?((IkReal)1/(IKabs(IKsqrt((((px)*(px))+((py)*(py))))))):(IkReal)1.0e30))*(((((IkReal(-1.00000000000000))*(cj10)*(x948)))+(((IkReal(-0.313800000000000))*(cj9)*(sj10)))+(x948))))) < -1-IKFAST_SINCOS_THRESH || (((((IKabs(IKabs(IKsqrt((((px)*(px))+((py)*(py)))))) != 0)?((IkReal)1/(IKabs(IKsqrt((((px)*(px))+((py)*(py))))))):(IkReal)1.0e30))*(((((IkReal(-1.00000000000000))*(cj10)*(x948)))+(((IkReal(-0.313800000000000))*(cj9)*(sj10)))+(x948))))) > 1+IKFAST_SINCOS_THRESH )
    continue;
IkReal x950=IKasin(((((IKabs(IKabs(IKsqrt((((px)*(px))+((py)*(py)))))) != 0)?((IkReal)1/(IKabs(IKsqrt((((px)*(px))+((py)*(py))))))):(IkReal)1.0e30))*(((((IkReal(-1.00000000000000))*(cj10)*(x948)))+(((IkReal(-0.313800000000000))*(cj9)*(sj10)))+(x948)))));
j7array[0]=((((IkReal(-1.00000000000000))*(x949)))+(((IkReal(-1.00000000000000))*(x950))));
sj7array[0]=IKsin(j7array[0]);
cj7array[0]=IKcos(j7array[0]);
j7array[1]=((IkReal(3.14159265358979))+(((IkReal(-1.00000000000000))*(x949)))+(x950));
sj7array[1]=IKsin(j7array[1]);
cj7array[1]=IKcos(j7array[1]);
if( j7array[0] > IKPI )
{
    j7array[0]-=IK2PI;
}
else if( j7array[0] < -IKPI )
{    j7array[0]+=IK2PI;
}
j7valid[0] = true;
if( j7array[1] > IKPI )
{
    j7array[1]-=IK2PI;
}
else if( j7array[1] < -IKPI )
{    j7array[1]+=IK2PI;
}
j7valid[1] = true;
for(int ij7 = 0; ij7 < 2; ++ij7)
{
if( !j7valid[ij7] )
{
    continue;
}
_ij7[0] = ij7; _ij7[1] = -1;
for(int iij7 = ij7+1; iij7 < 2; ++iij7)
{
if( j7valid[iij7] && IKabs(cj7array[ij7]-cj7array[iij7]) < IKFAST_SOLUTION_THRESH && IKabs(sj7array[ij7]-sj7array[iij7]) < IKFAST_SOLUTION_THRESH )
{
    j7valid[iij7]=false; _ij7[1] = iij7; break;
}
}
j7 = j7array[ij7]; cj7 = cj7array[ij7]; sj7 = sj7array[ij7];

{
IkReal dummyeval[1];
IkReal gconst47;
IkReal x951=((cj7)*(py));
IkReal x952=((IkReal(0.313800000000000))*(cj10));
IkReal x953=((px)*(sj7));
IkReal x954=((pz)*(sj9));
IkReal x955=((IkReal(0.0300000000000000))*(sj10));
gconst47=IKsign(((((x951)*(x955)))+(((x952)*(x953)))+(((IkReal(0.300000000000000))*(x953)))+(((IkReal(-0.0300000000000000))*(cj10)*(x954)))+(((IkReal(-0.313800000000000))*(sj10)*(x954)))+(((IkReal(-1.00000000000000))*(x953)*(x955)))+(((IkReal(0.0300000000000000))*(x954)))+(((IkReal(-1.00000000000000))*(x951)*(x952)))+(((IkReal(-0.300000000000000))*(x951)))));
IkReal x956=((cj7)*(py));
IkReal x957=((pz)*(sj9));
IkReal x958=((px)*(sj7));
IkReal x959=((IkReal(10.4600000000000))*(cj10));
dummyeval[0]=((((IkReal(-1.00000000000000))*(cj10)*(x957)))+(((sj10)*(x956)))+(((IkReal(10.0000000000000))*(x958)))+(((IkReal(-1.00000000000000))*(x956)*(x959)))+(((x958)*(x959)))+(((IkReal(-10.0000000000000))*(x956)))+(((IkReal(-1.00000000000000))*(sj10)*(x958)))+(x957)+(((IkReal(-10.4600000000000))*(sj10)*(x957))));
if( IKabs(dummyeval[0]) < 0.0000010000000000  )
{
{
IkReal dummyeval[1];
IkReal gconst46;
gconst46=IKsign(((((cj9)*((cj7)*(cj7))*((py)*(py))))+(((cj9)*((pz)*(pz))))+(((cj9)*((px)*(px))*((sj7)*(sj7))))+(((IkReal(-2.00000000000000))*(cj7)*(cj9)*(px)*(py)*(sj7)))));
dummyeval[0]=((((cj9)*((cj7)*(cj7))*((py)*(py))))+(((cj9)*((pz)*(pz))))+(((cj9)*((px)*(px))*((sj7)*(sj7))))+(((IkReal(-2.00000000000000))*(cj7)*(cj9)*(px)*(py)*(sj7))));
if( IKabs(dummyeval[0]) < 0.0000010000000000  )
{
{
IkReal evalcond[4];
IkReal x960=((py)*(sj7));
IkReal x961=((cj7)*(px));
evalcond[0]=((IkReal(-3.14159265358979))+(IKfmod(((IkReal(1.57079632679490))+(j9)), IkReal(6.28318530717959))));
evalcond[1]=((IkReal(0.190270440000000))+(((IkReal(-0.0368280000000000))*(sj10)))+(((IkReal(0.186480000000000))*(cj10)))+(((IkReal(-1.00000000000000))*(pp))));
evalcond[2]=((((IkReal(-1.00000000000000))*(x960)))+(((IkReal(-1.00000000000000))*(x961))));
evalcond[3]=((x960)+(x961));
if( IKabs(evalcond[0]) < 0.0000010000000000  && IKabs(evalcond[1]) < 0.0000010000000000  && IKabs(evalcond[2]) < 0.0000010000000000  && IKabs(evalcond[3]) < 0.0000010000000000  )
{
{
IkReal dummyeval[1];
IkReal gconst49;
IkReal x962=((cj7)*(py));
IkReal x963=((IkReal(0.313800000000000))*(cj10));
IkReal x964=((px)*(sj7));
IkReal x965=((IkReal(0.0300000000000000))*(pz));
IkReal x966=((IkReal(0.0300000000000000))*(sj10));
gconst49=IKsign(((((IkReal(-0.313800000000000))*(pz)*(sj10)))+(((IkReal(-1.00000000000000))*(x962)*(x963)))+(((IkReal(0.300000000000000))*(x964)))+(((x962)*(x966)))+(((IkReal(-1.00000000000000))*(cj10)*(x965)))+(((IkReal(-1.00000000000000))*(x964)*(x966)))+(((x963)*(x964)))+(x965)+(((IkReal(-0.300000000000000))*(x962)))));
IkReal x967=((cj7)*(py));
IkReal x968=((IkReal(10.4600000000000))*(cj10));
IkReal x969=((px)*(sj7));
dummyeval[0]=((((IkReal(-1.00000000000000))*(x967)*(x968)))+(((sj10)*(x967)))+(((x968)*(x969)))+(((IkReal(10.0000000000000))*(x969)))+(((IkReal(-1.00000000000000))*(cj10)*(pz)))+(pz)+(((IkReal(-1.00000000000000))*(sj10)*(x969)))+(((IkReal(-10.0000000000000))*(x967)))+(((IkReal(-10.4600000000000))*(pz)*(sj10))));
if( IKabs(dummyeval[0]) < 0.0000010000000000  )
{
{
IkReal dummyeval[1];
IkReal gconst48;
gconst48=IKsign((((((px)*(px))*((sj7)*(sj7))))+(((IkReal(-2.00000000000000))*(cj7)*(px)*(py)*(sj7)))+((pz)*(pz))+((((cj7)*(cj7))*((py)*(py))))));
dummyeval[0]=(((((px)*(px))*((sj7)*(sj7))))+(((IkReal(-2.00000000000000))*(cj7)*(px)*(py)*(sj7)))+((pz)*(pz))+((((cj7)*(cj7))*((py)*(py)))));
if( IKabs(dummyeval[0]) < 0.0000010000000000  )
{
continue;

} else
{
{
IkReal j8array[1], cj8array[1], sj8array[1];
bool j8valid[1]={false};
_nj8 = 1;
IkReal x970=((px)*(sj7));
IkReal x971=((cj7)*(py));
IkReal x972=((IkReal(0.0300000000000000))*(cj10));
IkReal x973=((IkReal(0.313800000000000))*(sj10));
IkReal x974=((IkReal(0.0300000000000000))*(pz));
IkReal x975=((IkReal(0.313800000000000))*(cj10));
IkReal x976=((IkReal(0.0300000000000000))*(sj10));
if( IKabs(((gconst48)*(((((IkReal(-1.00000000000000))*(sj10)*(x974)))+(((IkReal(0.300000000000000))*(pz)))+(((IkReal(-1.00000000000000))*(x970)*(x972)))+(((IkReal(-1.00000000000000))*(x970)*(x973)))+(((pz)*(x975)))+(((x971)*(x972)))+(((x971)*(x973)))+(((IkReal(0.0300000000000000))*(x970)))+(((IkReal(-0.0300000000000000))*(x971))))))) < IKFAST_ATAN2_MAGTHRESH && IKabs(((gconst48)*(((((IkReal(0.300000000000000))*(x971)))+(((IkReal(-1.00000000000000))*(pz)*(x972)))+(((IkReal(-1.00000000000000))*(pz)*(x973)))+(((IkReal(-1.00000000000000))*(x971)*(x976)))+(((IkReal(-1.00000000000000))*(x970)*(x975)))+(((x971)*(x975)))+(((IkReal(-0.300000000000000))*(x970)))+(((x970)*(x976)))+(x974))))) < IKFAST_ATAN2_MAGTHRESH )
    continue;
j8array[0]=IKatan2(((gconst48)*(((((IkReal(-1.00000000000000))*(sj10)*(x974)))+(((IkReal(0.300000000000000))*(pz)))+(((IkReal(-1.00000000000000))*(x970)*(x972)))+(((IkReal(-1.00000000000000))*(x970)*(x973)))+(((pz)*(x975)))+(((x971)*(x972)))+(((x971)*(x973)))+(((IkReal(0.0300000000000000))*(x970)))+(((IkReal(-0.0300000000000000))*(x971)))))), ((gconst48)*(((((IkReal(0.300000000000000))*(x971)))+(((IkReal(-1.00000000000000))*(pz)*(x972)))+(((IkReal(-1.00000000000000))*(pz)*(x973)))+(((IkReal(-1.00000000000000))*(x971)*(x976)))+(((IkReal(-1.00000000000000))*(x970)*(x975)))+(((x971)*(x975)))+(((IkReal(-0.300000000000000))*(x970)))+(((x970)*(x976)))+(x974)))));
sj8array[0]=IKsin(j8array[0]);
cj8array[0]=IKcos(j8array[0]);
if( j8array[0] > IKPI )
{
    j8array[0]-=IK2PI;
}
else if( j8array[0] < -IKPI )
{    j8array[0]+=IK2PI;
}
j8valid[0] = true;
for(int ij8 = 0; ij8 < 1; ++ij8)
{
if( !j8valid[ij8] )
{
    continue;
}
_ij8[0] = ij8; _ij8[1] = -1;
for(int iij8 = ij8+1; iij8 < 1; ++iij8)
{
if( j8valid[iij8] && IKabs(cj8array[ij8]-cj8array[iij8]) < IKFAST_SOLUTION_THRESH && IKabs(sj8array[ij8]-sj8array[iij8]) < IKFAST_SOLUTION_THRESH )
{
    j8valid[iij8]=false; _ij8[1] = iij8; break;
}
}
j8 = j8array[ij8]; cj8 = cj8array[ij8]; sj8 = sj8array[ij8];
{
IkReal evalcond[5];
IkReal x977=IKcos(j8);
IkReal x978=IKsin(j8);
IkReal x979=((IkReal(0.313800000000000))*(cj10));
IkReal x980=((cj7)*(py));
IkReal x981=((px)*(sj7));
IkReal x982=((IkReal(0.313800000000000))*(sj10));
IkReal x983=((IkReal(0.0300000000000000))*(cj10));
IkReal x984=((pz)*(x977));
IkReal x985=((IkReal(0.0300000000000000))*(x977));
IkReal x986=((IkReal(0.600000000000000))*(x977));
IkReal x987=((pz)*(x978));
IkReal x988=((IkReal(0.0600000000000000))*(x978));
IkReal x989=((IkReal(0.0300000000000000))*(x978));
evalcond[0]=((IkReal(0.300000000000000))+(((IkReal(-1.00000000000000))*(x977)*(x980)))+(((IkReal(-1.00000000000000))*(x987)))+(((x977)*(x981)))+(((IkReal(-0.0300000000000000))*(sj10)))+(x979));
evalcond[1]=((((x978)*(x979)))+(((IkReal(-1.00000000000000))*(sj10)*(x989)))+(((IkReal(0.300000000000000))*(x978)))+(((IkReal(-1.00000000000000))*(pz)))+(((IkReal(-1.00000000000000))*(x977)*(x982)))+(((IkReal(-1.00000000000000))*(x977)*(x983)))+(x985));
evalcond[2]=((IkReal(0.0300000000000000))+(((IkReal(-1.00000000000000))*(x983)))+(((IkReal(-1.00000000000000))*(x982)))+(((IkReal(-1.00000000000000))*(x984)))+(((IkReal(-1.00000000000000))*(x978)*(x981)))+(((x978)*(x980))));
evalcond[3]=((((IkReal(-1.00000000000000))*(x989)))+(((IkReal(-1.00000000000000))*(x980)))+(((IkReal(-1.00000000000000))*(sj10)*(x985)))+(((x977)*(x979)))+(((IkReal(0.300000000000000))*(x977)))+(x981)+(((x978)*(x983)))+(((x978)*(x982))));
evalcond[4]=((IkReal(0.00847044000000000))+(((x981)*(x988)))+(((IkReal(0.0600000000000000))*(x984)))+(((IkReal(0.600000000000000))*(x987)))+(((IkReal(-1.00000000000000))*(pp)))+(((IkReal(-1.00000000000000))*(x980)*(x988)))+(((IkReal(-1.00000000000000))*(x981)*(x986)))+(((x980)*(x986))));
if( IKabs(evalcond[0]) > 0.000001  || IKabs(evalcond[1]) > 0.000001  || IKabs(evalcond[2]) > 0.000001  || IKabs(evalcond[3]) > 0.000001  || IKabs(evalcond[4]) > 0.000001  )
{
continue;
}
}

rotationfunction0(solutions);
}
}

}

}

} else
{
{
IkReal j8array[1], cj8array[1], sj8array[1];
bool j8valid[1]={false};
_nj8 = 1;
IkReal x990=(sj10)*(sj10);
IkReal x991=(cj10)*(cj10);
IkReal x992=((cj10)*(sj10));
if( IKabs(((gconst49)*(((IkReal(0.00900000000000000))+(((IkReal(-0.0975704400000000))*(x992)))+(((px)*(pz)*(sj7)))+(((IkReal(-0.0950400000000000))*(sj10)))+(((IkReal(0.000414000000000000))*(cj10)))+(((IkReal(-0.00941400000000000))*(x991)))+(((IkReal(0.00941400000000000))*(x990)))+(((IkReal(-1.00000000000000))*(cj7)*(py)*(pz))))))) < IKFAST_ATAN2_MAGTHRESH && IKabs(((gconst49)*(((IkReal(-0.0900000000000000))+(((IkReal(0.0188280000000000))*(x992)))+(((IkReal(-0.0984704400000000))*(x991)))+(((IkReal(-0.000900000000000000))*(x990)))+(((IkReal(-0.188280000000000))*(cj10)))+((pz)*(pz))+(((IkReal(0.0180000000000000))*(sj10))))))) < IKFAST_ATAN2_MAGTHRESH )
    continue;
j8array[0]=IKatan2(((gconst49)*(((IkReal(0.00900000000000000))+(((IkReal(-0.0975704400000000))*(x992)))+(((px)*(pz)*(sj7)))+(((IkReal(-0.0950400000000000))*(sj10)))+(((IkReal(0.000414000000000000))*(cj10)))+(((IkReal(-0.00941400000000000))*(x991)))+(((IkReal(0.00941400000000000))*(x990)))+(((IkReal(-1.00000000000000))*(cj7)*(py)*(pz)))))), ((gconst49)*(((IkReal(-0.0900000000000000))+(((IkReal(0.0188280000000000))*(x992)))+(((IkReal(-0.0984704400000000))*(x991)))+(((IkReal(-0.000900000000000000))*(x990)))+(((IkReal(-0.188280000000000))*(cj10)))+((pz)*(pz))+(((IkReal(0.0180000000000000))*(sj10)))))));
sj8array[0]=IKsin(j8array[0]);
cj8array[0]=IKcos(j8array[0]);
if( j8array[0] > IKPI )
{
    j8array[0]-=IK2PI;
}
else if( j8array[0] < -IKPI )
{    j8array[0]+=IK2PI;
}
j8valid[0] = true;
for(int ij8 = 0; ij8 < 1; ++ij8)
{
if( !j8valid[ij8] )
{
    continue;
}
_ij8[0] = ij8; _ij8[1] = -1;
for(int iij8 = ij8+1; iij8 < 1; ++iij8)
{
if( j8valid[iij8] && IKabs(cj8array[ij8]-cj8array[iij8]) < IKFAST_SOLUTION_THRESH && IKabs(sj8array[ij8]-sj8array[iij8]) < IKFAST_SOLUTION_THRESH )
{
    j8valid[iij8]=false; _ij8[1] = iij8; break;
}
}
j8 = j8array[ij8]; cj8 = cj8array[ij8]; sj8 = sj8array[ij8];
{
IkReal evalcond[5];
IkReal x993=IKcos(j8);
IkReal x994=IKsin(j8);
IkReal x995=((IkReal(0.313800000000000))*(cj10));
IkReal x996=((cj7)*(py));
IkReal x997=((px)*(sj7));
IkReal x998=((IkReal(0.313800000000000))*(sj10));
IkReal x999=((IkReal(0.0300000000000000))*(cj10));
IkReal x1000=((pz)*(x993));
IkReal x1001=((IkReal(0.0300000000000000))*(x993));
IkReal x1002=((IkReal(0.600000000000000))*(x993));
IkReal x1003=((pz)*(x994));
IkReal x1004=((IkReal(0.0600000000000000))*(x994));
IkReal x1005=((IkReal(0.0300000000000000))*(x994));
evalcond[0]=((IkReal(0.300000000000000))+(((x993)*(x997)))+(((IkReal(-1.00000000000000))*(x993)*(x996)))+(((IkReal(-1.00000000000000))*(x1003)))+(((IkReal(-0.0300000000000000))*(sj10)))+(x995));
evalcond[1]=((((x994)*(x995)))+(x1001)+(((IkReal(-1.00000000000000))*(sj10)*(x1005)))+(((IkReal(-1.00000000000000))*(pz)))+(((IkReal(-1.00000000000000))*(x993)*(x999)))+(((IkReal(-1.00000000000000))*(x993)*(x998)))+(((IkReal(0.300000000000000))*(x994))));
evalcond[2]=((IkReal(0.0300000000000000))+(((IkReal(-1.00000000000000))*(x1000)))+(((x994)*(x996)))+(((IkReal(-1.00000000000000))*(x998)))+(((IkReal(-1.00000000000000))*(x999)))+(((IkReal(-1.00000000000000))*(x994)*(x997))));
evalcond[3]=((((x993)*(x995)))+(((IkReal(-1.00000000000000))*(x996)))+(((x994)*(x999)))+(((x994)*(x998)))+(((IkReal(-1.00000000000000))*(x1005)))+(((IkReal(-1.00000000000000))*(sj10)*(x1001)))+(((IkReal(0.300000000000000))*(x993)))+(x997));
evalcond[4]=((IkReal(0.00847044000000000))+(((IkReal(-1.00000000000000))*(x1002)*(x997)))+(((IkReal(0.600000000000000))*(x1003)))+(((IkReal(-1.00000000000000))*(pp)))+(((x1002)*(x996)))+(((IkReal(0.0600000000000000))*(x1000)))+(((IkReal(-1.00000000000000))*(x1004)*(x996)))+(((x1004)*(x997))));
if( IKabs(evalcond[0]) > 0.000001  || IKabs(evalcond[1]) > 0.000001  || IKabs(evalcond[2]) > 0.000001  || IKabs(evalcond[3]) > 0.000001  || IKabs(evalcond[4]) > 0.000001  )
{
continue;
}
}

rotationfunction0(solutions);
}
}

}

}

} else
{
IkReal x1006=((((IkReal(-1.00000000000000))*(cj7)*(px)))+(((IkReal(-1.00000000000000))*(py)*(sj7))));
evalcond[0]=((IkReal(-3.14159265358979))+(IKfmod(((IkReal(4.71238898038469))+(j9)), IkReal(6.28318530717959))));
evalcond[1]=((IkReal(0.190270440000000))+(((IkReal(-0.0368280000000000))*(sj10)))+(((IkReal(0.186480000000000))*(cj10)))+(((IkReal(-1.00000000000000))*(pp))));
evalcond[2]=x1006;
evalcond[3]=x1006;
if( IKabs(evalcond[0]) < 0.0000010000000000  && IKabs(evalcond[1]) < 0.0000010000000000  && IKabs(evalcond[2]) < 0.0000010000000000  && IKabs(evalcond[3]) < 0.0000010000000000  )
{
{
IkReal dummyeval[1];
IkReal gconst51;
IkReal x1007=((cj7)*(py));
IkReal x1008=((IkReal(0.313800000000000))*(sj10));
IkReal x1009=((IkReal(0.0300000000000000))*(px)*(sj7));
gconst51=IKsign(((((cj10)*(x1009)))+(((IkReal(-0.300000000000000))*(pz)))+(((IkReal(-1.00000000000000))*(x1009)))+(((IkReal(0.0300000000000000))*(x1007)))+(((IkReal(-0.0300000000000000))*(cj10)*(x1007)))+(((px)*(sj7)*(x1008)))+(((IkReal(-1.00000000000000))*(x1007)*(x1008)))+(((IkReal(0.0300000000000000))*(pz)*(sj10)))+(((IkReal(-0.313800000000000))*(cj10)*(pz)))));
IkReal x1010=((px)*(sj7));
IkReal x1011=((IkReal(10.4600000000000))*(sj10));
IkReal x1012=((cj7)*(py));
dummyeval[0]=((((cj10)*(x1010)))+(((IkReal(-1.00000000000000))*(x1011)*(x1012)))+(x1012)+(((IkReal(-1.00000000000000))*(cj10)*(x1012)))+(((pz)*(sj10)))+(((IkReal(-10.0000000000000))*(pz)))+(((IkReal(-10.4600000000000))*(cj10)*(pz)))+(((x1010)*(x1011)))+(((IkReal(-1.00000000000000))*(x1010))));
if( IKabs(dummyeval[0]) < 0.0000010000000000  )
{
{
IkReal dummyeval[1];
IkReal gconst50;
gconst50=IKsign((((((px)*(px))*((sj7)*(sj7))))+(((IkReal(-2.00000000000000))*(cj7)*(px)*(py)*(sj7)))+((pz)*(pz))+((((cj7)*(cj7))*((py)*(py))))));
dummyeval[0]=(((((px)*(px))*((sj7)*(sj7))))+(((IkReal(-2.00000000000000))*(cj7)*(px)*(py)*(sj7)))+((pz)*(pz))+((((cj7)*(cj7))*((py)*(py)))));
if( IKabs(dummyeval[0]) < 0.0000010000000000  )
{
{
IkReal evalcond[4];
IkReal x1013=x1006;
evalcond[0]=((IKabs(((IkReal(-3.14159265358979))+(IKfmod(((IkReal(3.14159265358979))+(j10)), IkReal(6.28318530717959))))))+(IKabs(pz)));
evalcond[1]=((IkReal(0.376750440000000))+(((IkReal(-1.00000000000000))*(pp))));
evalcond[2]=x1013;
evalcond[3]=x1013;
if( IKabs(evalcond[0]) < 0.0000010000000000  && IKabs(evalcond[1]) < 0.0000010000000000  && IKabs(evalcond[2]) < 0.0000010000000000  && IKabs(evalcond[3]) < 0.0000010000000000  )
{
{
IkReal dummyeval[1];
dummyeval[0]=((((IkReal(-1.00000000000000))*(px)*(sj7)))+(((cj7)*(py))));
if( IKabs(dummyeval[0]) < 0.0000010000000000  )
{
{
IkReal dummyeval[2];
IkReal x1014=((cj7)*(py));
IkReal x1015=((px)*(sj7));
dummyeval[0]=((((IkReal(-1.00000000000000))*((x1014)*(x1014))))+(((IkReal(-1.00000000000000))*((x1015)*(x1015))))+(((IkReal(2.00000000000000))*(x1014)*(x1015))));
dummyeval[1]=((x1015)+(((IkReal(-1.00000000000000))*(x1014))));
if( IKabs(dummyeval[0]) < 0.0000010000000000  || IKabs(dummyeval[1]) < 0.0000010000000000  )
{
{
IkReal evalcond[7];
IkReal x1016=((IkReal(1.00000000000000))*(pp));
IkReal x1017=((IkReal(-1.00000000000000))*(py));
evalcond[0]=((IKabs(px))+(IKabs(((IkReal(-3.14159265358979))+(IKfmod(((IkReal(1.57079632679490))+(j7)), IkReal(6.28318530717959)))))));
evalcond[1]=((IkReal(0.376750440000000))+(((IkReal(-1.00000000000000))*(x1016))));
evalcond[2]=x1017;
evalcond[3]=IkReal(0.613800000000000);
evalcond[4]=x1017;
evalcond[5]=IkReal(0);
evalcond[6]=((IkReal(0.00847044000000000))+(((IkReal(-1.00000000000000))*(x1016))));
if( IKabs(evalcond[0]) < 0.0000010000000000  && IKabs(evalcond[1]) < 0.0000010000000000  && IKabs(evalcond[2]) < 0.0000010000000000  && IKabs(evalcond[3]) < 0.0000010000000000  && IKabs(evalcond[4]) < 0.0000010000000000  && IKabs(evalcond[5]) < 0.0000010000000000  && IKabs(evalcond[6]) < 0.0000010000000000  )
{
{
IkReal dummyeval[1];
dummyeval[0]=IkReal(-1.00000000000000);
if( IKabs(dummyeval[0]) < 0.0000001000000000  )
{
continue;

} else
{
IkReal op[2+1], zeror[2];
int numroots;
op[0]=IkReal(-1.00000000000000);
op[1]=IkReal(0);
op[2]=IkReal(1.00000000000000);
polyroots2(op,zeror,numroots);
IkReal j8array[2], cj8array[2], sj8array[2], tempj8array[1];
int numsolutions = 0;
for(int ij8 = 0; ij8 < numroots; ++ij8)
{
IkReal htj8 = zeror[ij8];
tempj8array[0]=((IkReal(2.00000000000000))*(atan(htj8)));
for(int kj8 = 0; kj8 < 1; ++kj8)
{
j8array[numsolutions] = tempj8array[kj8];
if( j8array[numsolutions] > IKPI )
{
    j8array[numsolutions]-=IK2PI;
}
else if( j8array[numsolutions] < -IKPI )
{
    j8array[numsolutions]+=IK2PI;
}
sj8array[numsolutions] = IKsin(j8array[numsolutions]);
cj8array[numsolutions] = IKcos(j8array[numsolutions]);
numsolutions++;
}
}
bool j8valid[2]={true,true};
_nj8 = 2;
for(int ij8 = 0; ij8 < numsolutions; ++ij8)
    {
if( !j8valid[ij8] )
{
    continue;
}
    j8 = j8array[ij8]; cj8 = cj8array[ij8]; sj8 = sj8array[ij8];
htj8 = IKtan(j8/2);

_ij8[0] = ij8; _ij8[1] = -1;
for(int iij8 = ij8+1; iij8 < numsolutions; ++iij8)
{
if( j8valid[iij8] && IKabs(cj8array[ij8]-cj8array[iij8]) < IKFAST_SOLUTION_THRESH && IKabs(sj8array[ij8]-sj8array[iij8]) < IKFAST_SOLUTION_THRESH )
{
    j8valid[iij8]=false; _ij8[1] = iij8; break;
}
}
rotationfunction0(solutions);
    }

}

}

} else
{
IkReal x1018=((IkReal(1.00000000000000))*(pp));
evalcond[0]=((IKabs(px))+(IKabs(((IkReal(-3.14159265358979))+(IKfmod(((IkReal(4.71238898038469))+(j7)), IkReal(6.28318530717959)))))));
evalcond[1]=((IkReal(0.376750440000000))+(((IkReal(-1.00000000000000))*(x1018))));
evalcond[2]=py;
evalcond[3]=IkReal(0.613800000000000);
evalcond[4]=py;
evalcond[5]=IkReal(0);
evalcond[6]=((IkReal(0.00847044000000000))+(((IkReal(-1.00000000000000))*(x1018))));
if( IKabs(evalcond[0]) < 0.0000010000000000  && IKabs(evalcond[1]) < 0.0000010000000000  && IKabs(evalcond[2]) < 0.0000010000000000  && IKabs(evalcond[3]) < 0.0000010000000000  && IKabs(evalcond[4]) < 0.0000010000000000  && IKabs(evalcond[5]) < 0.0000010000000000  && IKabs(evalcond[6]) < 0.0000010000000000  )
{
{
IkReal dummyeval[1];
dummyeval[0]=IkReal(-1.00000000000000);
if( IKabs(dummyeval[0]) < 0.0000001000000000  )
{
continue;

} else
{
IkReal op[2+1], zeror[2];
int numroots;
op[0]=IkReal(-1.00000000000000);
op[1]=IkReal(0);
op[2]=IkReal(1.00000000000000);
polyroots2(op,zeror,numroots);
IkReal j8array[2], cj8array[2], sj8array[2], tempj8array[1];
int numsolutions = 0;
for(int ij8 = 0; ij8 < numroots; ++ij8)
{
IkReal htj8 = zeror[ij8];
tempj8array[0]=((IkReal(2.00000000000000))*(atan(htj8)));
for(int kj8 = 0; kj8 < 1; ++kj8)
{
j8array[numsolutions] = tempj8array[kj8];
if( j8array[numsolutions] > IKPI )
{
    j8array[numsolutions]-=IK2PI;
}
else if( j8array[numsolutions] < -IKPI )
{
    j8array[numsolutions]+=IK2PI;
}
sj8array[numsolutions] = IKsin(j8array[numsolutions]);
cj8array[numsolutions] = IKcos(j8array[numsolutions]);
numsolutions++;
}
}
bool j8valid[2]={true,true};
_nj8 = 2;
for(int ij8 = 0; ij8 < numsolutions; ++ij8)
    {
if( !j8valid[ij8] )
{
    continue;
}
    j8 = j8array[ij8]; cj8 = cj8array[ij8]; sj8 = sj8array[ij8];
htj8 = IKtan(j8/2);

_ij8[0] = ij8; _ij8[1] = -1;
for(int iij8 = ij8+1; iij8 < numsolutions; ++iij8)
{
if( j8valid[iij8] && IKabs(cj8array[ij8]-cj8array[iij8]) < IKFAST_SOLUTION_THRESH && IKabs(sj8array[ij8]-sj8array[iij8]) < IKFAST_SOLUTION_THRESH )
{
    j8valid[iij8]=false; _ij8[1] = iij8; break;
}
}
rotationfunction0(solutions);
    }

}

}

} else
{
IkReal x1019=((IkReal(1.00000000000000))*(pp));
IkReal x1020=((IkReal(-1.00000000000000))*(px));
evalcond[0]=((IKabs(((IkReal(-3.14159265358979))+(IKfmod(((IkReal(3.14159265358979))+(j7)), IkReal(6.28318530717959))))))+(IKabs(py)));
evalcond[1]=((IkReal(0.376750440000000))+(((IkReal(-1.00000000000000))*(x1019))));
evalcond[2]=x1020;
evalcond[3]=IkReal(0.613800000000000);
evalcond[4]=x1020;
evalcond[5]=IkReal(0);
evalcond[6]=((IkReal(0.00847044000000000))+(((IkReal(-1.00000000000000))*(x1019))));
if( IKabs(evalcond[0]) < 0.0000010000000000  && IKabs(evalcond[1]) < 0.0000010000000000  && IKabs(evalcond[2]) < 0.0000010000000000  && IKabs(evalcond[3]) < 0.0000010000000000  && IKabs(evalcond[4]) < 0.0000010000000000  && IKabs(evalcond[5]) < 0.0000010000000000  && IKabs(evalcond[6]) < 0.0000010000000000  )
{
{
IkReal dummyeval[1];
dummyeval[0]=IkReal(-1.00000000000000);
if( IKabs(dummyeval[0]) < 0.0000001000000000  )
{
continue;

} else
{
IkReal op[2+1], zeror[2];
int numroots;
op[0]=IkReal(-1.00000000000000);
op[1]=IkReal(0);
op[2]=IkReal(1.00000000000000);
polyroots2(op,zeror,numroots);
IkReal j8array[2], cj8array[2], sj8array[2], tempj8array[1];
int numsolutions = 0;
for(int ij8 = 0; ij8 < numroots; ++ij8)
{
IkReal htj8 = zeror[ij8];
tempj8array[0]=((IkReal(2.00000000000000))*(atan(htj8)));
for(int kj8 = 0; kj8 < 1; ++kj8)
{
j8array[numsolutions] = tempj8array[kj8];
if( j8array[numsolutions] > IKPI )
{
    j8array[numsolutions]-=IK2PI;
}
else if( j8array[numsolutions] < -IKPI )
{
    j8array[numsolutions]+=IK2PI;
}
sj8array[numsolutions] = IKsin(j8array[numsolutions]);
cj8array[numsolutions] = IKcos(j8array[numsolutions]);
numsolutions++;
}
}
bool j8valid[2]={true,true};
_nj8 = 2;
for(int ij8 = 0; ij8 < numsolutions; ++ij8)
    {
if( !j8valid[ij8] )
{
    continue;
}
    j8 = j8array[ij8]; cj8 = cj8array[ij8]; sj8 = sj8array[ij8];
htj8 = IKtan(j8/2);

_ij8[0] = ij8; _ij8[1] = -1;
for(int iij8 = ij8+1; iij8 < numsolutions; ++iij8)
{
if( j8valid[iij8] && IKabs(cj8array[ij8]-cj8array[iij8]) < IKFAST_SOLUTION_THRESH && IKabs(sj8array[ij8]-sj8array[iij8]) < IKFAST_SOLUTION_THRESH )
{
    j8valid[iij8]=false; _ij8[1] = iij8; break;
}
}
rotationfunction0(solutions);
    }

}

}

} else
{
IkReal x1021=((IkReal(1.00000000000000))*(pp));
evalcond[0]=((IKabs(py))+(IKabs(((IkReal(-3.14159265358979))+(IKfmod(j7, IkReal(6.28318530717959)))))));
evalcond[1]=((IkReal(0.376750440000000))+(((IkReal(-1.00000000000000))*(x1021))));
evalcond[2]=px;
evalcond[3]=IkReal(0.613800000000000);
evalcond[4]=px;
evalcond[5]=IkReal(0);
evalcond[6]=((IkReal(0.00847044000000000))+(((IkReal(-1.00000000000000))*(x1021))));
if( IKabs(evalcond[0]) < 0.0000010000000000  && IKabs(evalcond[1]) < 0.0000010000000000  && IKabs(evalcond[2]) < 0.0000010000000000  && IKabs(evalcond[3]) < 0.0000010000000000  && IKabs(evalcond[4]) < 0.0000010000000000  && IKabs(evalcond[5]) < 0.0000010000000000  && IKabs(evalcond[6]) < 0.0000010000000000  )
{
{
IkReal dummyeval[1];
dummyeval[0]=IkReal(-1.00000000000000);
if( IKabs(dummyeval[0]) < 0.0000001000000000  )
{
continue;

} else
{
IkReal op[2+1], zeror[2];
int numroots;
op[0]=IkReal(-1.00000000000000);
op[1]=IkReal(0);
op[2]=IkReal(1.00000000000000);
polyroots2(op,zeror,numroots);
IkReal j8array[2], cj8array[2], sj8array[2], tempj8array[1];
int numsolutions = 0;
for(int ij8 = 0; ij8 < numroots; ++ij8)
{
IkReal htj8 = zeror[ij8];
tempj8array[0]=((IkReal(2.00000000000000))*(atan(htj8)));
for(int kj8 = 0; kj8 < 1; ++kj8)
{
j8array[numsolutions] = tempj8array[kj8];
if( j8array[numsolutions] > IKPI )
{
    j8array[numsolutions]-=IK2PI;
}
else if( j8array[numsolutions] < -IKPI )
{
    j8array[numsolutions]+=IK2PI;
}
sj8array[numsolutions] = IKsin(j8array[numsolutions]);
cj8array[numsolutions] = IKcos(j8array[numsolutions]);
numsolutions++;
}
}
bool j8valid[2]={true,true};
_nj8 = 2;
for(int ij8 = 0; ij8 < numsolutions; ++ij8)
    {
if( !j8valid[ij8] )
{
    continue;
}
    j8 = j8array[ij8]; cj8 = cj8array[ij8]; sj8 = sj8array[ij8];
htj8 = IKtan(j8/2);

_ij8[0] = ij8; _ij8[1] = -1;
for(int iij8 = ij8+1; iij8 < numsolutions; ++iij8)
{
if( j8valid[iij8] && IKabs(cj8array[ij8]-cj8array[iij8]) < IKFAST_SOLUTION_THRESH && IKabs(sj8array[ij8]-sj8array[iij8]) < IKFAST_SOLUTION_THRESH )
{
    j8valid[iij8]=false; _ij8[1] = iij8; break;
}
}
rotationfunction0(solutions);
    }

}

}

} else
{
if( 1 )
{
continue;

} else
{
}
}
}
}
}
}

} else
{
{
IkReal j8array[1], cj8array[1], sj8array[1];
bool j8valid[1]={false};
_nj8 = 1;
IkReal x1022=((cj7)*(py));
IkReal x1023=((px)*(sj7));
IkReal x1024=((IkReal(5000.00000000000))*(x1023));
if( IKabs(((((IKabs(((((IkReal(-300.000000000000))*((x1022)*(x1022))))+(((IkReal(600.000000000000))*(x1022)*(x1023)))+(((IkReal(-300.000000000000))*((x1023)*(x1023)))))) != 0)?((IkReal)1/(((((IkReal(-300.000000000000))*((x1022)*(x1022))))+(((IkReal(600.000000000000))*(x1022)*(x1023)))+(((IkReal(-300.000000000000))*((x1023)*(x1023))))))):(IkReal)1.0e30))*(((((pp)*(x1024)))+(((IkReal(-5000.00000000000))*(pp)*(x1022)))+(((IkReal(1883.75220000000))*(x1022)))+(((IkReal(-1883.75220000000))*(x1023))))))) < IKFAST_ATAN2_MAGTHRESH && IKabs(((IkReal(-3069.00000000000))*(((IKabs(((x1024)+(((IkReal(-5000.00000000000))*(x1022))))) != 0)?((IkReal)1/(((x1024)+(((IkReal(-5000.00000000000))*(x1022)))))):(IkReal)1.0e30)))) < IKFAST_ATAN2_MAGTHRESH && IKabs(IKsqr(((((IKabs(((((IkReal(-300.000000000000))*((x1022)*(x1022))))+(((IkReal(600.000000000000))*(x1022)*(x1023)))+(((IkReal(-300.000000000000))*((x1023)*(x1023)))))) != 0)?((IkReal)1/(((((IkReal(-300.000000000000))*((x1022)*(x1022))))+(((IkReal(600.000000000000))*(x1022)*(x1023)))+(((IkReal(-300.000000000000))*((x1023)*(x1023))))))):(IkReal)1.0e30))*(((((pp)*(x1024)))+(((IkReal(-5000.00000000000))*(pp)*(x1022)))+(((IkReal(1883.75220000000))*(x1022)))+(((IkReal(-1883.75220000000))*(x1023)))))))+IKsqr(((IkReal(-3069.00000000000))*(((IKabs(((x1024)+(((IkReal(-5000.00000000000))*(x1022))))) != 0)?((IkReal)1/(((x1024)+(((IkReal(-5000.00000000000))*(x1022)))))):(IkReal)1.0e30))))-1) <= IKFAST_SINCOS_THRESH )
    continue;
j8array[0]=IKatan2(((((IKabs(((((IkReal(-300.000000000000))*((x1022)*(x1022))))+(((IkReal(600.000000000000))*(x1022)*(x1023)))+(((IkReal(-300.000000000000))*((x1023)*(x1023)))))) != 0)?((IkReal)1/(((((IkReal(-300.000000000000))*((x1022)*(x1022))))+(((IkReal(600.000000000000))*(x1022)*(x1023)))+(((IkReal(-300.000000000000))*((x1023)*(x1023))))))):(IkReal)1.0e30))*(((((pp)*(x1024)))+(((IkReal(-5000.00000000000))*(pp)*(x1022)))+(((IkReal(1883.75220000000))*(x1022)))+(((IkReal(-1883.75220000000))*(x1023)))))), ((IkReal(-3069.00000000000))*(((IKabs(((x1024)+(((IkReal(-5000.00000000000))*(x1022))))) != 0)?((IkReal)1/(((x1024)+(((IkReal(-5000.00000000000))*(x1022)))))):(IkReal)1.0e30))));
sj8array[0]=IKsin(j8array[0]);
cj8array[0]=IKcos(j8array[0]);
if( j8array[0] > IKPI )
{
    j8array[0]-=IK2PI;
}
else if( j8array[0] < -IKPI )
{    j8array[0]+=IK2PI;
}
j8valid[0] = true;
for(int ij8 = 0; ij8 < 1; ++ij8)
{
if( !j8valid[ij8] )
{
    continue;
}
_ij8[0] = ij8; _ij8[1] = -1;
for(int iij8 = ij8+1; iij8 < 1; ++iij8)
{
if( j8valid[iij8] && IKabs(cj8array[ij8]-cj8array[iij8]) < IKFAST_SOLUTION_THRESH && IKabs(sj8array[ij8]-sj8array[iij8]) < IKFAST_SOLUTION_THRESH )
{
    j8valid[iij8]=false; _ij8[1] = iij8; break;
}
}
j8 = j8array[ij8]; cj8 = cj8array[ij8]; sj8 = sj8array[ij8];
{
IkReal evalcond[5];
IkReal x1025=IKcos(j8);
IkReal x1026=IKsin(j8);
IkReal x1027=((cj7)*(py));
IkReal x1028=((px)*(sj7));
IkReal x1029=((IkReal(0.0600000000000000))*(x1026));
IkReal x1030=((x1025)*(x1028));
evalcond[0]=((IkReal(0.613800000000000))+(x1030)+(((IkReal(-1.00000000000000))*(x1025)*(x1027))));
evalcond[1]=((IkReal(0.613800000000000))*(x1026));
evalcond[2]=((((IkReal(-1.00000000000000))*(x1026)*(x1027)))+(((x1026)*(x1028))));
evalcond[3]=((x1028)+(((IkReal(-1.00000000000000))*(x1027)))+(((IkReal(0.613800000000000))*(x1025))));
evalcond[4]=((IkReal(0.00847044000000000))+(((IkReal(-1.00000000000000))*(x1028)*(x1029)))+(((IkReal(0.600000000000000))*(x1025)*(x1027)))+(((IkReal(-1.00000000000000))*(pp)))+(((x1027)*(x1029)))+(((IkReal(-0.600000000000000))*(x1030))));
if( IKabs(evalcond[0]) > 0.000001  || IKabs(evalcond[1]) > 0.000001  || IKabs(evalcond[2]) > 0.000001  || IKabs(evalcond[3]) > 0.000001  || IKabs(evalcond[4]) > 0.000001  )
{
continue;
}
}

rotationfunction0(solutions);
}
}

}

}

} else
{
{
IkReal j8array[1], cj8array[1], sj8array[1];
bool j8valid[1]={false};
_nj8 = 1;
IkReal x1031=((cj7)*(py));
IkReal x1032=((px)*(sj7));
if( IKabs(((((IKabs(((((IkReal(-184.140000000000))*(x1032)))+(((IkReal(184.140000000000))*(x1031))))) != 0)?((IkReal)1/(((((IkReal(-184.140000000000))*(x1032)))+(((IkReal(184.140000000000))*(x1031)))))):(IkReal)1.0e30))*(((IkReal(-25.9957803600000))+(((IkReal(-3000.00000000000))*((x1032)*(x1032))))+(((IkReal(-3000.00000000000))*((x1031)*(x1031))))+(((IkReal(3069.00000000000))*(pp)))+(((IkReal(6000.00000000000))*(x1031)*(x1032))))))) < IKFAST_ATAN2_MAGTHRESH && IKabs(((((IkReal(1.62919517758227))*(x1031)))+(((IkReal(-1.62919517758227))*(x1032))))) < IKFAST_ATAN2_MAGTHRESH && IKabs(IKsqr(((((IKabs(((((IkReal(-184.140000000000))*(x1032)))+(((IkReal(184.140000000000))*(x1031))))) != 0)?((IkReal)1/(((((IkReal(-184.140000000000))*(x1032)))+(((IkReal(184.140000000000))*(x1031)))))):(IkReal)1.0e30))*(((IkReal(-25.9957803600000))+(((IkReal(-3000.00000000000))*((x1032)*(x1032))))+(((IkReal(-3000.00000000000))*((x1031)*(x1031))))+(((IkReal(3069.00000000000))*(pp)))+(((IkReal(6000.00000000000))*(x1031)*(x1032)))))))+IKsqr(((((IkReal(1.62919517758227))*(x1031)))+(((IkReal(-1.62919517758227))*(x1032)))))-1) <= IKFAST_SINCOS_THRESH )
    continue;
j8array[0]=IKatan2(((((IKabs(((((IkReal(-184.140000000000))*(x1032)))+(((IkReal(184.140000000000))*(x1031))))) != 0)?((IkReal)1/(((((IkReal(-184.140000000000))*(x1032)))+(((IkReal(184.140000000000))*(x1031)))))):(IkReal)1.0e30))*(((IkReal(-25.9957803600000))+(((IkReal(-3000.00000000000))*((x1032)*(x1032))))+(((IkReal(-3000.00000000000))*((x1031)*(x1031))))+(((IkReal(3069.00000000000))*(pp)))+(((IkReal(6000.00000000000))*(x1031)*(x1032)))))), ((((IkReal(1.62919517758227))*(x1031)))+(((IkReal(-1.62919517758227))*(x1032)))));
sj8array[0]=IKsin(j8array[0]);
cj8array[0]=IKcos(j8array[0]);
if( j8array[0] > IKPI )
{
    j8array[0]-=IK2PI;
}
else if( j8array[0] < -IKPI )
{    j8array[0]+=IK2PI;
}
j8valid[0] = true;
for(int ij8 = 0; ij8 < 1; ++ij8)
{
if( !j8valid[ij8] )
{
    continue;
}
_ij8[0] = ij8; _ij8[1] = -1;
for(int iij8 = ij8+1; iij8 < 1; ++iij8)
{
if( j8valid[iij8] && IKabs(cj8array[ij8]-cj8array[iij8]) < IKFAST_SOLUTION_THRESH && IKabs(sj8array[ij8]-sj8array[iij8]) < IKFAST_SOLUTION_THRESH )
{
    j8valid[iij8]=false; _ij8[1] = iij8; break;
}
}
j8 = j8array[ij8]; cj8 = cj8array[ij8]; sj8 = sj8array[ij8];
{
IkReal evalcond[5];
IkReal x1033=IKcos(j8);
IkReal x1034=IKsin(j8);
IkReal x1035=((cj7)*(py));
IkReal x1036=((px)*(sj7));
IkReal x1037=((IkReal(0.0600000000000000))*(x1034));
IkReal x1038=((x1033)*(x1036));
evalcond[0]=((IkReal(0.613800000000000))+(x1038)+(((IkReal(-1.00000000000000))*(x1033)*(x1035))));
evalcond[1]=((IkReal(0.613800000000000))*(x1034));
evalcond[2]=((((IkReal(-1.00000000000000))*(x1034)*(x1035)))+(((x1034)*(x1036))));
evalcond[3]=((x1036)+(((IkReal(-1.00000000000000))*(x1035)))+(((IkReal(0.613800000000000))*(x1033))));
evalcond[4]=((IkReal(0.00847044000000000))+(((IkReal(0.600000000000000))*(x1033)*(x1035)))+(((IkReal(-1.00000000000000))*(x1036)*(x1037)))+(((IkReal(-1.00000000000000))*(pp)))+(((x1035)*(x1037)))+(((IkReal(-0.600000000000000))*(x1038))));
if( IKabs(evalcond[0]) > 0.000001  || IKabs(evalcond[1]) > 0.000001  || IKabs(evalcond[2]) > 0.000001  || IKabs(evalcond[3]) > 0.000001  || IKabs(evalcond[4]) > 0.000001  )
{
continue;
}
}

rotationfunction0(solutions);
}
}

}

}

} else
{
if( 1 )
{
continue;

} else
{
}
}
}

} else
{
{
IkReal j8array[1], cj8array[1], sj8array[1];
bool j8valid[1]={false};
_nj8 = 1;
IkReal x1039=((px)*(sj7));
IkReal x1040=((IkReal(0.0300000000000000))*(cj10));
IkReal x1041=((IkReal(0.313800000000000))*(sj10));
IkReal x1042=((IkReal(0.0300000000000000))*(pz));
IkReal x1043=((IkReal(0.313800000000000))*(cj10));
IkReal x1044=((cj7)*(py));
IkReal x1045=((IkReal(0.0300000000000000))*(x1044));
if( IKabs(((gconst50)*(((x1045)+(((x1039)*(x1041)))+(((x1039)*(x1040)))+(((IkReal(0.300000000000000))*(pz)))+(((IkReal(-1.00000000000000))*(x1041)*(x1044)))+(((pz)*(x1043)))+(((IkReal(-1.00000000000000))*(x1040)*(x1044)))+(((IkReal(-0.0300000000000000))*(x1039)))+(((IkReal(-1.00000000000000))*(sj10)*(x1042))))))) < IKFAST_ATAN2_MAGTHRESH && IKabs(((gconst50)*(((((IkReal(0.300000000000000))*(x1044)))+(((x1043)*(x1044)))+(((IkReal(-1.00000000000000))*(x1039)*(x1043)))+(((pz)*(x1040)))+(((pz)*(x1041)))+(((IkReal(0.0300000000000000))*(sj10)*(x1039)))+(((IkReal(-0.300000000000000))*(x1039)))+(((IkReal(-1.00000000000000))*(sj10)*(x1045)))+(((IkReal(-1.00000000000000))*(x1042))))))) < IKFAST_ATAN2_MAGTHRESH )
    continue;
j8array[0]=IKatan2(((gconst50)*(((x1045)+(((x1039)*(x1041)))+(((x1039)*(x1040)))+(((IkReal(0.300000000000000))*(pz)))+(((IkReal(-1.00000000000000))*(x1041)*(x1044)))+(((pz)*(x1043)))+(((IkReal(-1.00000000000000))*(x1040)*(x1044)))+(((IkReal(-0.0300000000000000))*(x1039)))+(((IkReal(-1.00000000000000))*(sj10)*(x1042)))))), ((gconst50)*(((((IkReal(0.300000000000000))*(x1044)))+(((x1043)*(x1044)))+(((IkReal(-1.00000000000000))*(x1039)*(x1043)))+(((pz)*(x1040)))+(((pz)*(x1041)))+(((IkReal(0.0300000000000000))*(sj10)*(x1039)))+(((IkReal(-0.300000000000000))*(x1039)))+(((IkReal(-1.00000000000000))*(sj10)*(x1045)))+(((IkReal(-1.00000000000000))*(x1042)))))));
sj8array[0]=IKsin(j8array[0]);
cj8array[0]=IKcos(j8array[0]);
if( j8array[0] > IKPI )
{
    j8array[0]-=IK2PI;
}
else if( j8array[0] < -IKPI )
{    j8array[0]+=IK2PI;
}
j8valid[0] = true;
for(int ij8 = 0; ij8 < 1; ++ij8)
{
if( !j8valid[ij8] )
{
    continue;
}
_ij8[0] = ij8; _ij8[1] = -1;
for(int iij8 = ij8+1; iij8 < 1; ++iij8)
{
if( j8valid[iij8] && IKabs(cj8array[ij8]-cj8array[iij8]) < IKFAST_SOLUTION_THRESH && IKabs(sj8array[ij8]-sj8array[iij8]) < IKFAST_SOLUTION_THRESH )
{
    j8valid[iij8]=false; _ij8[1] = iij8; break;
}
}
j8 = j8array[ij8]; cj8 = cj8array[ij8]; sj8 = sj8array[ij8];
{
IkReal evalcond[5];
IkReal x1046=IKcos(j8);
IkReal x1047=IKsin(j8);
IkReal x1048=((IkReal(0.313800000000000))*(cj10));
IkReal x1049=((px)*(sj7));
IkReal x1050=((IkReal(0.313800000000000))*(sj10));
IkReal x1051=((IkReal(0.0300000000000000))*(cj10));
IkReal x1052=((cj7)*(py));
IkReal x1053=((pz)*(x1046));
IkReal x1054=((IkReal(0.0300000000000000))*(x1046));
IkReal x1055=((pz)*(x1047));
IkReal x1056=((IkReal(0.0600000000000000))*(x1047));
IkReal x1057=((IkReal(0.0300000000000000))*(x1047));
IkReal x1058=((x1046)*(x1052));
evalcond[0]=((IkReal(0.300000000000000))+(x1048)+(((IkReal(-0.0300000000000000))*(sj10)))+(((IkReal(-1.00000000000000))*(x1055)))+(((IkReal(-1.00000000000000))*(x1058)))+(((x1046)*(x1049))));
evalcond[1]=((((IkReal(-1.00000000000000))*(sj10)*(x1057)))+(((IkReal(-1.00000000000000))*(x1054)))+(((IkReal(0.300000000000000))*(x1047)))+(((IkReal(-1.00000000000000))*(pz)))+(((x1047)*(x1048)))+(((x1046)*(x1050)))+(((x1046)*(x1051))));
evalcond[2]=((IkReal(0.0300000000000000))+(((IkReal(-1.00000000000000))*(x1051)))+(((IkReal(-1.00000000000000))*(x1050)))+(x1053)+(((x1047)*(x1049)))+(((IkReal(-1.00000000000000))*(x1047)*(x1052))));
evalcond[3]=((((IkReal(-1.00000000000000))*(sj10)*(x1054)))+(x1057)+(x1049)+(((IkReal(0.300000000000000))*(x1046)))+(((IkReal(-1.00000000000000))*(x1052)))+(((x1046)*(x1048)))+(((IkReal(-1.00000000000000))*(x1047)*(x1050)))+(((IkReal(-1.00000000000000))*(x1047)*(x1051))));
evalcond[4]=((IkReal(0.00847044000000000))+(((IkReal(-0.600000000000000))*(x1046)*(x1049)))+(((IkReal(-0.0600000000000000))*(x1053)))+(((x1052)*(x1056)))+(((IkReal(-1.00000000000000))*(pp)))+(((IkReal(0.600000000000000))*(x1055)))+(((IkReal(0.600000000000000))*(x1058)))+(((IkReal(-1.00000000000000))*(x1049)*(x1056))));
if( IKabs(evalcond[0]) > 0.000001  || IKabs(evalcond[1]) > 0.000001  || IKabs(evalcond[2]) > 0.000001  || IKabs(evalcond[3]) > 0.000001  || IKabs(evalcond[4]) > 0.000001  )
{
continue;
}
}

rotationfunction0(solutions);
}
}

}

}

} else
{
{
IkReal j8array[1], cj8array[1], sj8array[1];
bool j8valid[1]={false};
_nj8 = 1;
IkReal x1059=(sj10)*(sj10);
IkReal x1060=(cj10)*(cj10);
IkReal x1061=((IkReal(0.0188280000000000))*(sj10));
if( IKabs(((gconst51)*(((IkReal(0.000900000000000000))+(((IkReal(-0.00180000000000000))*(cj10)))+(((IkReal(0.0984704400000000))*(x1059)))+(((IkReal(-1.00000000000000))*((pz)*(pz))))+(((IkReal(0.000900000000000000))*(x1060)))+(((IkReal(-1.00000000000000))*(x1061)))+(((cj10)*(x1061))))))) < IKFAST_ATAN2_MAGTHRESH && IKabs(((gconst51)*(((IkReal(0.00900000000000000))+(((IkReal(-0.00941400000000000))*(x1060)))+(((px)*(pz)*(sj7)))+(((IkReal(-0.0950400000000000))*(sj10)))+(((IkReal(0.000414000000000000))*(cj10)))+(((IkReal(-0.0975704400000000))*(cj10)*(sj10)))+(((IkReal(0.00941400000000000))*(x1059)))+(((IkReal(-1.00000000000000))*(cj7)*(py)*(pz))))))) < IKFAST_ATAN2_MAGTHRESH )
    continue;
j8array[0]=IKatan2(((gconst51)*(((IkReal(0.000900000000000000))+(((IkReal(-0.00180000000000000))*(cj10)))+(((IkReal(0.0984704400000000))*(x1059)))+(((IkReal(-1.00000000000000))*((pz)*(pz))))+(((IkReal(0.000900000000000000))*(x1060)))+(((IkReal(-1.00000000000000))*(x1061)))+(((cj10)*(x1061)))))), ((gconst51)*(((IkReal(0.00900000000000000))+(((IkReal(-0.00941400000000000))*(x1060)))+(((px)*(pz)*(sj7)))+(((IkReal(-0.0950400000000000))*(sj10)))+(((IkReal(0.000414000000000000))*(cj10)))+(((IkReal(-0.0975704400000000))*(cj10)*(sj10)))+(((IkReal(0.00941400000000000))*(x1059)))+(((IkReal(-1.00000000000000))*(cj7)*(py)*(pz)))))));
sj8array[0]=IKsin(j8array[0]);
cj8array[0]=IKcos(j8array[0]);
if( j8array[0] > IKPI )
{
    j8array[0]-=IK2PI;
}
else if( j8array[0] < -IKPI )
{    j8array[0]+=IK2PI;
}
j8valid[0] = true;
for(int ij8 = 0; ij8 < 1; ++ij8)
{
if( !j8valid[ij8] )
{
    continue;
}
_ij8[0] = ij8; _ij8[1] = -1;
for(int iij8 = ij8+1; iij8 < 1; ++iij8)
{
if( j8valid[iij8] && IKabs(cj8array[ij8]-cj8array[iij8]) < IKFAST_SOLUTION_THRESH && IKabs(sj8array[ij8]-sj8array[iij8]) < IKFAST_SOLUTION_THRESH )
{
    j8valid[iij8]=false; _ij8[1] = iij8; break;
}
}
j8 = j8array[ij8]; cj8 = cj8array[ij8]; sj8 = sj8array[ij8];
{
IkReal evalcond[5];
IkReal x1062=IKcos(j8);
IkReal x1063=IKsin(j8);
IkReal x1064=((IkReal(0.313800000000000))*(cj10));
IkReal x1065=((px)*(sj7));
IkReal x1066=((IkReal(0.313800000000000))*(sj10));
IkReal x1067=((IkReal(0.0300000000000000))*(cj10));
IkReal x1068=((cj7)*(py));
IkReal x1069=((pz)*(x1062));
IkReal x1070=((IkReal(0.0300000000000000))*(x1062));
IkReal x1071=((pz)*(x1063));
IkReal x1072=((IkReal(0.0600000000000000))*(x1063));
IkReal x1073=((IkReal(0.0300000000000000))*(x1063));
IkReal x1074=((x1062)*(x1068));
evalcond[0]=((IkReal(0.300000000000000))+(x1064)+(((IkReal(-0.0300000000000000))*(sj10)))+(((x1062)*(x1065)))+(((IkReal(-1.00000000000000))*(x1071)))+(((IkReal(-1.00000000000000))*(x1074))));
evalcond[1]=((((IkReal(0.300000000000000))*(x1063)))+(((IkReal(-1.00000000000000))*(sj10)*(x1073)))+(((IkReal(-1.00000000000000))*(pz)))+(((x1062)*(x1067)))+(((x1062)*(x1066)))+(((x1063)*(x1064)))+(((IkReal(-1.00000000000000))*(x1070))));
evalcond[2]=((IkReal(0.0300000000000000))+(x1069)+(((x1063)*(x1065)))+(((IkReal(-1.00000000000000))*(x1066)))+(((IkReal(-1.00000000000000))*(x1067)))+(((IkReal(-1.00000000000000))*(x1063)*(x1068))));
evalcond[3]=((((IkReal(-1.00000000000000))*(x1063)*(x1067)))+(((IkReal(-1.00000000000000))*(x1063)*(x1066)))+(((IkReal(0.300000000000000))*(x1062)))+(x1073)+(x1065)+(((IkReal(-1.00000000000000))*(sj10)*(x1070)))+(((x1062)*(x1064)))+(((IkReal(-1.00000000000000))*(x1068))));
evalcond[4]=((IkReal(0.00847044000000000))+(((x1068)*(x1072)))+(((IkReal(-0.0600000000000000))*(x1069)))+(((IkReal(0.600000000000000))*(x1071)))+(((IkReal(0.600000000000000))*(x1074)))+(((IkReal(-1.00000000000000))*(pp)))+(((IkReal(-1.00000000000000))*(x1065)*(x1072)))+(((IkReal(-0.600000000000000))*(x1062)*(x1065))));
if( IKabs(evalcond[0]) > 0.000001  || IKabs(evalcond[1]) > 0.000001  || IKabs(evalcond[2]) > 0.000001  || IKabs(evalcond[3]) > 0.000001  || IKabs(evalcond[4]) > 0.000001  )
{
continue;
}
}

rotationfunction0(solutions);
}
}

}

}

} else
{
if( 1 )
{
continue;

} else
{
}
}
}
}

} else
{
{
IkReal j8array[1], cj8array[1], sj8array[1];
bool j8valid[1]={false};
_nj8 = 1;
IkReal x1075=((py)*(sj9));
IkReal x1076=((cj7)*(sj9));
IkReal x1077=((IkReal(0.300000000000000))*(cj9));
IkReal x1078=((cj7)*(py));
IkReal x1079=((px)*(sj7));
IkReal x1080=((IkReal(0.313800000000000))*(cj10)*(cj9));
IkReal x1081=((IkReal(0.0300000000000000))*(cj9)*(sj10));
if( IKabs(((gconst46)*(((((IkReal(-1.00000000000000))*(pz)*(x1081)))+(((pz)*(x1080)))+(((sj7)*(x1075)*(x1079)))+(((pz)*(x1077)))+(((IkReal(-1.00000000000000))*(sj7)*(x1075)*(x1078)))+(((IkReal(-1.00000000000000))*(px)*(x1075)*((cj7)*(cj7))))+(((px)*(x1076)*(x1079))))))) < IKFAST_ATAN2_MAGTHRESH && IKabs(((gconst46)*(((((x1079)*(x1081)))+(((x1077)*(x1078)))+(((IkReal(-1.00000000000000))*(x1077)*(x1079)))+(((pz)*(sj7)*(x1075)))+(((x1078)*(x1080)))+(((IkReal(-1.00000000000000))*(x1078)*(x1081)))+(((px)*(pz)*(x1076)))+(((IkReal(-1.00000000000000))*(x1079)*(x1080))))))) < IKFAST_ATAN2_MAGTHRESH )
    continue;
j8array[0]=IKatan2(((gconst46)*(((((IkReal(-1.00000000000000))*(pz)*(x1081)))+(((pz)*(x1080)))+(((sj7)*(x1075)*(x1079)))+(((pz)*(x1077)))+(((IkReal(-1.00000000000000))*(sj7)*(x1075)*(x1078)))+(((IkReal(-1.00000000000000))*(px)*(x1075)*((cj7)*(cj7))))+(((px)*(x1076)*(x1079)))))), ((gconst46)*(((((x1079)*(x1081)))+(((x1077)*(x1078)))+(((IkReal(-1.00000000000000))*(x1077)*(x1079)))+(((pz)*(sj7)*(x1075)))+(((x1078)*(x1080)))+(((IkReal(-1.00000000000000))*(x1078)*(x1081)))+(((px)*(pz)*(x1076)))+(((IkReal(-1.00000000000000))*(x1079)*(x1080)))))));
sj8array[0]=IKsin(j8array[0]);
cj8array[0]=IKcos(j8array[0]);
if( j8array[0] > IKPI )
{
    j8array[0]-=IK2PI;
}
else if( j8array[0] < -IKPI )
{    j8array[0]+=IK2PI;
}
j8valid[0] = true;
for(int ij8 = 0; ij8 < 1; ++ij8)
{
if( !j8valid[ij8] )
{
    continue;
}
_ij8[0] = ij8; _ij8[1] = -1;
for(int iij8 = ij8+1; iij8 < 1; ++iij8)
{
if( j8valid[iij8] && IKabs(cj8array[ij8]-cj8array[iij8]) < IKFAST_SOLUTION_THRESH && IKabs(sj8array[ij8]-sj8array[iij8]) < IKFAST_SOLUTION_THRESH )
{
    j8valid[iij8]=false; _ij8[1] = iij8; break;
}
}
j8 = j8array[ij8]; cj8 = cj8array[ij8]; sj8 = sj8array[ij8];
{
IkReal evalcond[6];
IkReal x1082=IKcos(j8);
IkReal x1083=IKsin(j8);
IkReal x1084=((IkReal(1.00000000000000))*(sj9));
IkReal x1085=((py)*(sj7));
IkReal x1086=((cj7)*(px));
IkReal x1087=((cj7)*(py));
IkReal x1088=((px)*(sj7));
IkReal x1089=((IkReal(0.0600000000000000))*(cj9));
IkReal x1090=((IkReal(0.0300000000000000))*(cj10));
IkReal x1091=((IkReal(0.313800000000000))*(cj10));
IkReal x1092=((IkReal(0.0300000000000000))*(sj10));
IkReal x1093=((IkReal(1.00000000000000))*(cj9));
IkReal x1094=((IkReal(0.313800000000000))*(x1083));
IkReal x1095=((pz)*(x1082));
IkReal x1096=((sj10)*(x1082));
IkReal x1097=((IkReal(0.600000000000000))*(x1082));
IkReal x1098=((pz)*(x1083));
IkReal x1099=((sj9)*(x1083));
IkReal x1100=((cj9)*(x1083));
IkReal x1101=((sj9)*(x1082));
evalcond[0]=((IkReal(0.300000000000000))+(((x1082)*(x1088)))+(((IkReal(-1.00000000000000))*(x1082)*(x1087)))+(x1091)+(((IkReal(-1.00000000000000))*(x1092)))+(((IkReal(-1.00000000000000))*(x1098))));
evalcond[1]=((((sj9)*(x1085)))+(((sj9)*(x1086)))+(((x1087)*(x1100)))+(((IkReal(-1.00000000000000))*(x1093)*(x1095)))+(((IkReal(-1.00000000000000))*(x1083)*(x1088)*(x1093))));
evalcond[2]=((((IkReal(0.0300000000000000))*(x1101)))+(((x1083)*(x1091)))+(((IkReal(-1.00000000000000))*(x1090)*(x1101)))+(((IkReal(-0.313800000000000))*(sj9)*(x1096)))+(((IkReal(-1.00000000000000))*(x1083)*(x1092)))+(((IkReal(-1.00000000000000))*(pz)))+(((IkReal(0.300000000000000))*(x1083))));
evalcond[3]=((IkReal(0.0300000000000000))+(((IkReal(-1.00000000000000))*(x1086)*(x1093)))+(((IkReal(-0.313800000000000))*(sj10)))+(((x1087)*(x1099)))+(((IkReal(-1.00000000000000))*(x1090)))+(((IkReal(-1.00000000000000))*(x1084)*(x1095)))+(((IkReal(-1.00000000000000))*(x1085)*(x1093)))+(((IkReal(-1.00000000000000))*(x1083)*(x1084)*(x1088))));
evalcond[4]=((x1088)+(((IkReal(-1.00000000000000))*(x1087)))+(((sj10)*(sj9)*(x1094)))+(((IkReal(-0.0300000000000000))*(x1099)))+(((x1082)*(x1091)))+(((x1090)*(x1099)))+(((IkReal(-1.00000000000000))*(x1082)*(x1092)))+(((IkReal(0.300000000000000))*(x1082))));
evalcond[5]=((IkReal(0.00847044000000000))+(((IkReal(0.600000000000000))*(x1098)))+(((x1087)*(x1097)))+(((IkReal(-1.00000000000000))*(x1088)*(x1097)))+(((IkReal(-0.0600000000000000))*(x1087)*(x1099)))+(((IkReal(-1.00000000000000))*(pp)))+(((x1086)*(x1089)))+(((IkReal(0.0600000000000000))*(x1088)*(x1099)))+(((x1085)*(x1089)))+(((IkReal(0.0600000000000000))*(sj9)*(x1095))));
if( IKabs(evalcond[0]) > 0.000001  || IKabs(evalcond[1]) > 0.000001  || IKabs(evalcond[2]) > 0.000001  || IKabs(evalcond[3]) > 0.000001  || IKabs(evalcond[4]) > 0.000001  || IKabs(evalcond[5]) > 0.000001  )
{
continue;
}
}

rotationfunction0(solutions);
}
}

}

}

} else
{
{
IkReal j8array[1], cj8array[1], sj8array[1];
bool j8valid[1]={false};
_nj8 = 1;
IkReal x1102=(sj10)*(sj10);
IkReal x1103=(cj10)*(cj10);
IkReal x1104=((IkReal(0.00941400000000000))*(sj9));
IkReal x1105=((cj10)*(sj10));
if( IKabs(((gconst47)*(((((IkReal(-1.00000000000000))*(x1103)*(x1104)))+(((IkReal(0.000414000000000000))*(cj10)*(sj9)))+(((x1102)*(x1104)))+(((px)*(pz)*(sj7)))+(((IkReal(-0.0950400000000000))*(sj10)*(sj9)))+(((IkReal(-0.0975704400000000))*(sj9)*(x1105)))+(((IkReal(-1.00000000000000))*(cj7)*(py)*(pz)))+(((IkReal(0.00900000000000000))*(sj9))))))) < IKFAST_ATAN2_MAGTHRESH && IKabs(((gconst47)*(((IkReal(-0.0900000000000000))+(((IkReal(0.0188280000000000))*(x1105)))+(((IkReal(-0.188280000000000))*(cj10)))+((pz)*(pz))+(((IkReal(0.0180000000000000))*(sj10)))+(((IkReal(-0.000900000000000000))*(x1102)))+(((IkReal(-0.0984704400000000))*(x1103))))))) < IKFAST_ATAN2_MAGTHRESH )
    continue;
j8array[0]=IKatan2(((gconst47)*(((((IkReal(-1.00000000000000))*(x1103)*(x1104)))+(((IkReal(0.000414000000000000))*(cj10)*(sj9)))+(((x1102)*(x1104)))+(((px)*(pz)*(sj7)))+(((IkReal(-0.0950400000000000))*(sj10)*(sj9)))+(((IkReal(-0.0975704400000000))*(sj9)*(x1105)))+(((IkReal(-1.00000000000000))*(cj7)*(py)*(pz)))+(((IkReal(0.00900000000000000))*(sj9)))))), ((gconst47)*(((IkReal(-0.0900000000000000))+(((IkReal(0.0188280000000000))*(x1105)))+(((IkReal(-0.188280000000000))*(cj10)))+((pz)*(pz))+(((IkReal(0.0180000000000000))*(sj10)))+(((IkReal(-0.000900000000000000))*(x1102)))+(((IkReal(-0.0984704400000000))*(x1103)))))));
sj8array[0]=IKsin(j8array[0]);
cj8array[0]=IKcos(j8array[0]);
if( j8array[0] > IKPI )
{
    j8array[0]-=IK2PI;
}
else if( j8array[0] < -IKPI )
{    j8array[0]+=IK2PI;
}
j8valid[0] = true;
for(int ij8 = 0; ij8 < 1; ++ij8)
{
if( !j8valid[ij8] )
{
    continue;
}
_ij8[0] = ij8; _ij8[1] = -1;
for(int iij8 = ij8+1; iij8 < 1; ++iij8)
{
if( j8valid[iij8] && IKabs(cj8array[ij8]-cj8array[iij8]) < IKFAST_SOLUTION_THRESH && IKabs(sj8array[ij8]-sj8array[iij8]) < IKFAST_SOLUTION_THRESH )
{
    j8valid[iij8]=false; _ij8[1] = iij8; break;
}
}
j8 = j8array[ij8]; cj8 = cj8array[ij8]; sj8 = sj8array[ij8];
{
IkReal evalcond[6];
IkReal x1106=IKcos(j8);
IkReal x1107=IKsin(j8);
IkReal x1108=((IkReal(1.00000000000000))*(sj9));
IkReal x1109=((py)*(sj7));
IkReal x1110=((cj7)*(px));
IkReal x1111=((cj7)*(py));
IkReal x1112=((px)*(sj7));
IkReal x1113=((IkReal(0.0600000000000000))*(cj9));
IkReal x1114=((IkReal(0.0300000000000000))*(cj10));
IkReal x1115=((IkReal(0.313800000000000))*(cj10));
IkReal x1116=((IkReal(0.0300000000000000))*(sj10));
IkReal x1117=((IkReal(1.00000000000000))*(cj9));
IkReal x1118=((IkReal(0.313800000000000))*(x1107));
IkReal x1119=((pz)*(x1106));
IkReal x1120=((sj10)*(x1106));
IkReal x1121=((IkReal(0.600000000000000))*(x1106));
IkReal x1122=((pz)*(x1107));
IkReal x1123=((sj9)*(x1107));
IkReal x1124=((cj9)*(x1107));
IkReal x1125=((sj9)*(x1106));
evalcond[0]=((IkReal(0.300000000000000))+(x1115)+(((IkReal(-1.00000000000000))*(x1122)))+(((IkReal(-1.00000000000000))*(x1116)))+(((x1106)*(x1112)))+(((IkReal(-1.00000000000000))*(x1106)*(x1111))));
evalcond[1]=((((sj9)*(x1109)))+(((sj9)*(x1110)))+(((x1111)*(x1124)))+(((IkReal(-1.00000000000000))*(x1107)*(x1112)*(x1117)))+(((IkReal(-1.00000000000000))*(x1117)*(x1119))));
evalcond[2]=((((IkReal(-1.00000000000000))*(x1114)*(x1125)))+(((IkReal(-1.00000000000000))*(pz)))+(((IkReal(-0.313800000000000))*(sj9)*(x1120)))+(((IkReal(-1.00000000000000))*(x1107)*(x1116)))+(((IkReal(0.0300000000000000))*(x1125)))+(((x1107)*(x1115)))+(((IkReal(0.300000000000000))*(x1107))));
evalcond[3]=((IkReal(0.0300000000000000))+(((IkReal(-0.313800000000000))*(sj10)))+(((IkReal(-1.00000000000000))*(x1109)*(x1117)))+(((x1111)*(x1123)))+(((IkReal(-1.00000000000000))*(x1108)*(x1119)))+(((IkReal(-1.00000000000000))*(x1107)*(x1108)*(x1112)))+(((IkReal(-1.00000000000000))*(x1110)*(x1117)))+(((IkReal(-1.00000000000000))*(x1114))));
evalcond[4]=((x1112)+(((sj10)*(sj9)*(x1118)))+(((x1114)*(x1123)))+(((IkReal(-0.0300000000000000))*(x1123)))+(((IkReal(-1.00000000000000))*(x1111)))+(((IkReal(-1.00000000000000))*(x1106)*(x1116)))+(((x1106)*(x1115)))+(((IkReal(0.300000000000000))*(x1106))));
evalcond[5]=((IkReal(0.00847044000000000))+(((IkReal(0.0600000000000000))*(sj9)*(x1119)))+(((x1109)*(x1113)))+(((IkReal(-1.00000000000000))*(x1112)*(x1121)))+(((x1110)*(x1113)))+(((x1111)*(x1121)))+(((IkReal(0.0600000000000000))*(x1112)*(x1123)))+(((IkReal(0.600000000000000))*(x1122)))+(((IkReal(-1.00000000000000))*(pp)))+(((IkReal(-0.0600000000000000))*(x1111)*(x1123))));
if( IKabs(evalcond[0]) > 0.000001  || IKabs(evalcond[1]) > 0.000001  || IKabs(evalcond[2]) > 0.000001  || IKabs(evalcond[3]) > 0.000001  || IKabs(evalcond[4]) > 0.000001  || IKabs(evalcond[5]) > 0.000001  )
{
continue;
}
}

rotationfunction0(solutions);
}
}

}

}
}
}

}

}
}
}
}
return solutions.GetNumSolutions()>0;
}
inline void rotationfunction0(IkSolutionListBase<IkReal>& solutions) {
for(int rotationiter = 0; rotationiter < 1; ++rotationiter) {
IkReal x95=((cj7)*(cj9));
IkReal x96=((IkReal(1.00000000000000))*(sj8));
IkReal x97=((cj10)*(cj8));
IkReal x98=((sj10)*(sj9));
IkReal x99=((IkReal(1.00000000000000))*(sj7));
IkReal x100=((cj9)*(sj7));
IkReal x101=((cj8)*(cj9));
IkReal x102=((cj10)*(x95));
IkReal x103=((sj10)*(x95));
IkReal x104=((IkReal(-1.00000000000000))*(sj7));
IkReal x105=((((cj8)*(sj10)))+(((IkReal(-1.00000000000000))*(cj10)*(sj9)*(x96))));
IkReal x106=((((sj9)*(x97)))+(((sj10)*(sj8))));
IkReal x107=((((IkReal(-1.00000000000000))*(cj7)*(sj9)))+(((sj8)*(x100))));
IkReal x108=((((cj8)*(x98)))+(((IkReal(-1.00000000000000))*(cj10)*(x96))));
IkReal x109=((((IkReal(-1.00000000000000))*(x95)*(x96)))+(((IkReal(-1.00000000000000))*(sj9)*(x99))));
IkReal x110=((((IkReal(-1.00000000000000))*(x97)))+(((IkReal(-1.00000000000000))*(x96)*(x98))));
IkReal x111=((sj7)*(x110));
IkReal x112=((((cj7)*(x105)))+(((cj10)*(x100))));
IkReal x113=((x102)+(((x104)*(x105))));
IkReal x114=((x103)+(((IkReal(-1.00000000000000))*(x110)*(x99))));
IkReal x115=((((cj7)*(x110)))+(((sj10)*(x100))));
new_r00=((((r10)*(x112)))+(((r20)*(x106)))+(((r00)*(x113))));
new_r01=((((r21)*(x106)))+(((r11)*(x112)))+(((r01)*(x113))));
new_r02=((((r22)*(x106)))+(((r02)*(((x102)+(((IkReal(-1.00000000000000))*(x105)*(x99)))))))+(((r12)*(x112))));
new_r10=((((r10)*(x109)))+(((r20)*(x101)))+(((r00)*(x107))));
new_r11=((((r21)*(x101)))+(((r01)*(x107)))+(((r11)*(x109))));
new_r12=((((r02)*(x107)))+(((r22)*(x101)))+(((r12)*(x109))));
new_r20=((((r10)*(x115)))+(((r20)*(x108)))+(((r00)*(x114))));
new_r21=((((r21)*(x108)))+(((r11)*(x115)))+(((r01)*(x114))));
new_r22=((((r22)*(x108)))+(((r02)*(((x103)+(((x104)*(x110)))))))+(((r12)*(x115))));
{
IkReal j12array[2], cj12array[2], sj12array[2];
bool j12valid[2]={false};
_nj12 = 2;
cj12array[0]=((IkReal(-1.00000000000000))*(new_r22));
if( cj12array[0] >= -1-IKFAST_SINCOS_THRESH && cj12array[0] <= 1+IKFAST_SINCOS_THRESH )
{
    j12valid[0] = j12valid[1] = true;
    j12array[0] = IKacos(cj12array[0]);
    sj12array[0] = IKsin(j12array[0]);
    cj12array[1] = cj12array[0];
    j12array[1] = -j12array[0];
    sj12array[1] = -sj12array[0];
}
else if( isnan(cj12array[0]) )
{
    // probably any value will work
    j12valid[0] = true;
    cj12array[0] = 1; sj12array[0] = 0; j12array[0] = 0;
}
for(int ij12 = 0; ij12 < 2; ++ij12)
{
if( !j12valid[ij12] )
{
    continue;
}
_ij12[0] = ij12; _ij12[1] = -1;
for(int iij12 = ij12+1; iij12 < 2; ++iij12)
{
if( j12valid[iij12] && IKabs(cj12array[ij12]-cj12array[iij12]) < IKFAST_SOLUTION_THRESH && IKabs(sj12array[ij12]-sj12array[iij12]) < IKFAST_SOLUTION_THRESH )
{
    j12valid[iij12]=false; _ij12[1] = iij12; break;
}
}
j12 = j12array[ij12]; cj12 = cj12array[ij12]; sj12 = sj12array[ij12];

{
IkReal dummyeval[1];
IkReal gconst54;
gconst54=IKsign(sj12);
dummyeval[0]=sj12;
if( IKabs(dummyeval[0]) < 0.0000010000000000  )
{
{
IkReal dummyeval[1];
IkReal gconst52;
gconst52=IKsign(((((IkReal(-1.00000000000000))*((new_r02)*(new_r02))))+(((IkReal(-1.00000000000000))*((new_r12)*(new_r12))))));
dummyeval[0]=((((IkReal(-1.00000000000000))*((new_r02)*(new_r02))))+(((IkReal(-1.00000000000000))*((new_r12)*(new_r12)))));
if( IKabs(dummyeval[0]) < 0.0000010000000000  )
{
{
IkReal dummyeval[1];
IkReal gconst53;
gconst53=IKsign(((((cj12)*((new_r12)*(new_r12))))+(((cj12)*((new_r02)*(new_r02))))));
dummyeval[0]=((((cj12)*((new_r12)*(new_r12))))+(((cj12)*((new_r02)*(new_r02)))));
if( IKabs(dummyeval[0]) < 0.0000010000000000  )
{
{
IkReal evalcond[7];
evalcond[0]=((IkReal(-3.14159265358979))+(IKfmod(((IkReal(1.57079632679490))+(j12)), IkReal(6.28318530717959))));
evalcond[1]=new_r22;
evalcond[2]=((IkReal(-1.00000000000000))*(new_r22));
if( IKabs(evalcond[0]) < 0.0000010000000000  && IKabs(evalcond[1]) < 0.0000010000000000  && IKabs(evalcond[2]) < 0.0000010000000000  )
{
{
IkReal j14array[1], cj14array[1], sj14array[1];
bool j14valid[1]={false};
_nj14 = 1;
if( IKabs(((IkReal(-1.00000000000000))*(new_r21))) < IKFAST_ATAN2_MAGTHRESH && IKabs(new_r20) < IKFAST_ATAN2_MAGTHRESH && IKabs(IKsqr(((IkReal(-1.00000000000000))*(new_r21)))+IKsqr(new_r20)-1) <= IKFAST_SINCOS_THRESH )
    continue;
j14array[0]=IKatan2(((IkReal(-1.00000000000000))*(new_r21)), new_r20);
sj14array[0]=IKsin(j14array[0]);
cj14array[0]=IKcos(j14array[0]);
if( j14array[0] > IKPI )
{
    j14array[0]-=IK2PI;
}
else if( j14array[0] < -IKPI )
{    j14array[0]+=IK2PI;
}
j14valid[0] = true;
for(int ij14 = 0; ij14 < 1; ++ij14)
{
if( !j14valid[ij14] )
{
    continue;
}
_ij14[0] = ij14; _ij14[1] = -1;
for(int iij14 = ij14+1; iij14 < 1; ++iij14)
{
if( j14valid[iij14] && IKabs(cj14array[ij14]-cj14array[iij14]) < IKFAST_SOLUTION_THRESH && IKabs(sj14array[ij14]-sj14array[iij14]) < IKFAST_SOLUTION_THRESH )
{
    j14valid[iij14]=false; _ij14[1] = iij14; break;
}
}
j14 = j14array[ij14]; cj14 = cj14array[ij14]; sj14 = sj14array[ij14];
{
IkReal evalcond[2];
evalcond[0]=((IKsin(j14))+(new_r21));
evalcond[1]=((((IkReal(-1.00000000000000))*(IKcos(j14))))+(new_r20));
if( IKabs(evalcond[0]) > 0.000001  || IKabs(evalcond[1]) > 0.000001  )
{
continue;
}
}

{
IkReal dummyeval[1];
IkReal gconst60;
gconst60=IKsign(((((IkReal(-1.00000000000000))*(new_r00)*(new_r12)))+(((new_r02)*(new_r10)))));
dummyeval[0]=((((IkReal(-1.00000000000000))*(new_r00)*(new_r12)))+(((new_r02)*(new_r10))));
if( IKabs(dummyeval[0]) < 0.0000010000000000  )
{
{
IkReal dummyeval[1];
IkReal gconst61;
gconst61=IKsign(((((IkReal(-1.00000000000000))*(new_r01)*(new_r12)))+(((new_r02)*(new_r11)))));
dummyeval[0]=((((IkReal(-1.00000000000000))*(new_r01)*(new_r12)))+(((new_r02)*(new_r11))));
if( IKabs(dummyeval[0]) < 0.0000010000000000  )
{
continue;

} else
{
{
IkReal j11array[1], cj11array[1], sj11array[1];
bool j11valid[1]={false};
_nj11 = 1;
if( IKabs(((gconst61)*(new_r01))) < IKFAST_ATAN2_MAGTHRESH && IKabs(((IkReal(-1.00000000000000))*(gconst61)*(new_r11))) < IKFAST_ATAN2_MAGTHRESH )
    continue;
j11array[0]=IKatan2(((gconst61)*(new_r01)), ((IkReal(-1.00000000000000))*(gconst61)*(new_r11)));
sj11array[0]=IKsin(j11array[0]);
cj11array[0]=IKcos(j11array[0]);
if( j11array[0] > IKPI )
{
    j11array[0]-=IK2PI;
}
else if( j11array[0] < -IKPI )
{    j11array[0]+=IK2PI;
}
j11valid[0] = true;
for(int ij11 = 0; ij11 < 1; ++ij11)
{
if( !j11valid[ij11] )
{
    continue;
}
_ij11[0] = ij11; _ij11[1] = -1;
for(int iij11 = ij11+1; iij11 < 1; ++iij11)
{
if( j11valid[iij11] && IKabs(cj11array[ij11]-cj11array[iij11]) < IKFAST_SOLUTION_THRESH && IKabs(sj11array[ij11]-sj11array[iij11]) < IKFAST_SOLUTION_THRESH )
{
    j11valid[iij11]=false; _ij11[1] = iij11; break;
}
}
j11 = j11array[ij11]; cj11 = cj11array[ij11]; sj11 = sj11array[ij11];
{
IkReal evalcond[6];
IkReal x116=IKcos(j11);
IkReal x117=IKsin(j11);
IkReal x118=((IkReal(1.00000000000000))*(x117));
evalcond[0]=((((IkReal(-1.00000000000000))*(new_r02)*(x118)))+(((new_r12)*(x116))));
evalcond[1]=((IkReal(1.00000000000000))+(((new_r02)*(x116)))+(((new_r12)*(x117))));
evalcond[2]=((((new_r10)*(x116)))+(((IkReal(-1.00000000000000))*(new_r00)*(x118)))+(((IkReal(-1.00000000000000))*(sj14))));
evalcond[3]=((((new_r11)*(x116)))+(((IkReal(-1.00000000000000))*(new_r01)*(x118)))+(((IkReal(-1.00000000000000))*(cj14))));
evalcond[4]=((((new_r10)*(x117)))+(((new_r00)*(x116))));
evalcond[5]=((((new_r11)*(x117)))+(((new_r01)*(x116))));
if( IKabs(evalcond[0]) > 0.000001  || IKabs(evalcond[1]) > 0.000001  || IKabs(evalcond[2]) > 0.000001  || IKabs(evalcond[3]) > 0.000001  || IKabs(evalcond[4]) > 0.000001  || IKabs(evalcond[5]) > 0.000001  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(7);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j7;
vinfos[0].indices[0] = _ij7[0];
vinfos[0].indices[1] = _ij7[1];
vinfos[0].maxsolutions = _nj7;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j8;
vinfos[1].indices[0] = _ij8[0];
vinfos[1].indices[1] = _ij8[1];
vinfos[1].maxsolutions = _nj8;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j9;
vinfos[2].indices[0] = _ij9[0];
vinfos[2].indices[1] = _ij9[1];
vinfos[2].maxsolutions = _nj9;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j10;
vinfos[3].indices[0] = _ij10[0];
vinfos[3].indices[1] = _ij10[1];
vinfos[3].maxsolutions = _nj10;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j11;
vinfos[4].indices[0] = _ij11[0];
vinfos[4].indices[1] = _ij11[1];
vinfos[4].maxsolutions = _nj11;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j12;
vinfos[5].indices[0] = _ij12[0];
vinfos[5].indices[1] = _ij12[1];
vinfos[5].maxsolutions = _nj12;
vinfos[6].jointtype = 1;
vinfos[6].foffset = j14;
vinfos[6].indices[0] = _ij14[0];
vinfos[6].indices[1] = _ij14[1];
vinfos[6].maxsolutions = _nj14;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j11array[1], cj11array[1], sj11array[1];
bool j11valid[1]={false};
_nj11 = 1;
if( IKabs(((gconst60)*(new_r00))) < IKFAST_ATAN2_MAGTHRESH && IKabs(((IkReal(-1.00000000000000))*(gconst60)*(new_r10))) < IKFAST_ATAN2_MAGTHRESH )
    continue;
j11array[0]=IKatan2(((gconst60)*(new_r00)), ((IkReal(-1.00000000000000))*(gconst60)*(new_r10)));
sj11array[0]=IKsin(j11array[0]);
cj11array[0]=IKcos(j11array[0]);
if( j11array[0] > IKPI )
{
    j11array[0]-=IK2PI;
}
else if( j11array[0] < -IKPI )
{    j11array[0]+=IK2PI;
}
j11valid[0] = true;
for(int ij11 = 0; ij11 < 1; ++ij11)
{
if( !j11valid[ij11] )
{
    continue;
}
_ij11[0] = ij11; _ij11[1] = -1;
for(int iij11 = ij11+1; iij11 < 1; ++iij11)
{
if( j11valid[iij11] && IKabs(cj11array[ij11]-cj11array[iij11]) < IKFAST_SOLUTION_THRESH && IKabs(sj11array[ij11]-sj11array[iij11]) < IKFAST_SOLUTION_THRESH )
{
    j11valid[iij11]=false; _ij11[1] = iij11; break;
}
}
j11 = j11array[ij11]; cj11 = cj11array[ij11]; sj11 = sj11array[ij11];
{
IkReal evalcond[6];
IkReal x119=IKcos(j11);
IkReal x120=IKsin(j11);
IkReal x121=((IkReal(1.00000000000000))*(x120));
evalcond[0]=((((IkReal(-1.00000000000000))*(new_r02)*(x121)))+(((new_r12)*(x119))));
evalcond[1]=((IkReal(1.00000000000000))+(((new_r02)*(x119)))+(((new_r12)*(x120))));
evalcond[2]=((((new_r10)*(x119)))+(((IkReal(-1.00000000000000))*(new_r00)*(x121)))+(((IkReal(-1.00000000000000))*(sj14))));
evalcond[3]=((((new_r11)*(x119)))+(((IkReal(-1.00000000000000))*(new_r01)*(x121)))+(((IkReal(-1.00000000000000))*(cj14))));
evalcond[4]=((((new_r00)*(x119)))+(((new_r10)*(x120))));
evalcond[5]=((((new_r01)*(x119)))+(((new_r11)*(x120))));
if( IKabs(evalcond[0]) > 0.000001  || IKabs(evalcond[1]) > 0.000001  || IKabs(evalcond[2]) > 0.000001  || IKabs(evalcond[3]) > 0.000001  || IKabs(evalcond[4]) > 0.000001  || IKabs(evalcond[5]) > 0.000001  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(7);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j7;
vinfos[0].indices[0] = _ij7[0];
vinfos[0].indices[1] = _ij7[1];
vinfos[0].maxsolutions = _nj7;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j8;
vinfos[1].indices[0] = _ij8[0];
vinfos[1].indices[1] = _ij8[1];
vinfos[1].maxsolutions = _nj8;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j9;
vinfos[2].indices[0] = _ij9[0];
vinfos[2].indices[1] = _ij9[1];
vinfos[2].maxsolutions = _nj9;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j10;
vinfos[3].indices[0] = _ij10[0];
vinfos[3].indices[1] = _ij10[1];
vinfos[3].maxsolutions = _nj10;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j11;
vinfos[4].indices[0] = _ij11[0];
vinfos[4].indices[1] = _ij11[1];
vinfos[4].maxsolutions = _nj11;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j12;
vinfos[5].indices[0] = _ij12[0];
vinfos[5].indices[1] = _ij12[1];
vinfos[5].maxsolutions = _nj12;
vinfos[6].jointtype = 1;
vinfos[6].foffset = j14;
vinfos[6].indices[0] = _ij14[0];
vinfos[6].indices[1] = _ij14[1];
vinfos[6].maxsolutions = _nj14;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}
}
}

} else
{
evalcond[0]=((IkReal(-3.14159265358979))+(IKfmod(((IkReal(4.71238898038469))+(j12)), IkReal(6.28318530717959))));
evalcond[1]=new_r22;
evalcond[2]=new_r22;
if( IKabs(evalcond[0]) < 0.0000010000000000  && IKabs(evalcond[1]) < 0.0000010000000000  && IKabs(evalcond[2]) < 0.0000010000000000  )
{
{
IkReal j14array[1], cj14array[1], sj14array[1];
bool j14valid[1]={false};
_nj14 = 1;
if( IKabs(new_r21) < IKFAST_ATAN2_MAGTHRESH && IKabs(((IkReal(-1.00000000000000))*(new_r20))) < IKFAST_ATAN2_MAGTHRESH && IKabs(IKsqr(new_r21)+IKsqr(((IkReal(-1.00000000000000))*(new_r20)))-1) <= IKFAST_SINCOS_THRESH )
    continue;
j14array[0]=IKatan2(new_r21, ((IkReal(-1.00000000000000))*(new_r20)));
sj14array[0]=IKsin(j14array[0]);
cj14array[0]=IKcos(j14array[0]);
if( j14array[0] > IKPI )
{
    j14array[0]-=IK2PI;
}
else if( j14array[0] < -IKPI )
{    j14array[0]+=IK2PI;
}
j14valid[0] = true;
for(int ij14 = 0; ij14 < 1; ++ij14)
{
if( !j14valid[ij14] )
{
    continue;
}
_ij14[0] = ij14; _ij14[1] = -1;
for(int iij14 = ij14+1; iij14 < 1; ++iij14)
{
if( j14valid[iij14] && IKabs(cj14array[ij14]-cj14array[iij14]) < IKFAST_SOLUTION_THRESH && IKabs(sj14array[ij14]-sj14array[iij14]) < IKFAST_SOLUTION_THRESH )
{
    j14valid[iij14]=false; _ij14[1] = iij14; break;
}
}
j14 = j14array[ij14]; cj14 = cj14array[ij14]; sj14 = sj14array[ij14];
{
IkReal evalcond[2];
evalcond[0]=((((IkReal(-1.00000000000000))*(IKsin(j14))))+(new_r21));
evalcond[1]=((IKcos(j14))+(new_r20));
if( IKabs(evalcond[0]) > 0.000001  || IKabs(evalcond[1]) > 0.000001  )
{
continue;
}
}

{
IkReal dummyeval[1];
IkReal gconst64;
gconst64=IKsign(((((new_r00)*(new_r12)))+(((IkReal(-1.00000000000000))*(new_r02)*(new_r10)))));
dummyeval[0]=((((new_r00)*(new_r12)))+(((IkReal(-1.00000000000000))*(new_r02)*(new_r10))));
if( IKabs(dummyeval[0]) < 0.0000010000000000  )
{
{
IkReal dummyeval[1];
IkReal gconst65;
gconst65=IKsign(((((new_r01)*(new_r12)))+(((IkReal(-1.00000000000000))*(new_r02)*(new_r11)))));
dummyeval[0]=((((new_r01)*(new_r12)))+(((IkReal(-1.00000000000000))*(new_r02)*(new_r11))));
if( IKabs(dummyeval[0]) < 0.0000010000000000  )
{
continue;

} else
{
{
IkReal j11array[1], cj11array[1], sj11array[1];
bool j11valid[1]={false};
_nj11 = 1;
if( IKabs(((gconst65)*(new_r01))) < IKFAST_ATAN2_MAGTHRESH && IKabs(((IkReal(-1.00000000000000))*(gconst65)*(new_r11))) < IKFAST_ATAN2_MAGTHRESH )
    continue;
j11array[0]=IKatan2(((gconst65)*(new_r01)), ((IkReal(-1.00000000000000))*(gconst65)*(new_r11)));
sj11array[0]=IKsin(j11array[0]);
cj11array[0]=IKcos(j11array[0]);
if( j11array[0] > IKPI )
{
    j11array[0]-=IK2PI;
}
else if( j11array[0] < -IKPI )
{    j11array[0]+=IK2PI;
}
j11valid[0] = true;
for(int ij11 = 0; ij11 < 1; ++ij11)
{
if( !j11valid[ij11] )
{
    continue;
}
_ij11[0] = ij11; _ij11[1] = -1;
for(int iij11 = ij11+1; iij11 < 1; ++iij11)
{
if( j11valid[iij11] && IKabs(cj11array[ij11]-cj11array[iij11]) < IKFAST_SOLUTION_THRESH && IKabs(sj11array[ij11]-sj11array[iij11]) < IKFAST_SOLUTION_THRESH )
{
    j11valid[iij11]=false; _ij11[1] = iij11; break;
}
}
j11 = j11array[ij11]; cj11 = cj11array[ij11]; sj11 = sj11array[ij11];
{
IkReal evalcond[6];
IkReal x122=IKcos(j11);
IkReal x123=IKsin(j11);
IkReal x124=((IkReal(1.00000000000000))*(x123));
evalcond[0]=((((IkReal(-1.00000000000000))*(new_r02)*(x124)))+(((new_r12)*(x122))));
evalcond[1]=((IkReal(-1.00000000000000))+(((new_r02)*(x122)))+(((new_r12)*(x123))));
evalcond[2]=((((IkReal(-1.00000000000000))*(new_r00)*(x124)))+(((IkReal(-1.00000000000000))*(sj14)))+(((new_r10)*(x122))));
evalcond[3]=((((IkReal(-1.00000000000000))*(new_r01)*(x124)))+(((IkReal(-1.00000000000000))*(cj14)))+(((new_r11)*(x122))));
evalcond[4]=((((new_r00)*(x122)))+(((new_r10)*(x123))));
evalcond[5]=((((new_r01)*(x122)))+(((new_r11)*(x123))));
if( IKabs(evalcond[0]) > 0.000001  || IKabs(evalcond[1]) > 0.000001  || IKabs(evalcond[2]) > 0.000001  || IKabs(evalcond[3]) > 0.000001  || IKabs(evalcond[4]) > 0.000001  || IKabs(evalcond[5]) > 0.000001  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(7);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j7;
vinfos[0].indices[0] = _ij7[0];
vinfos[0].indices[1] = _ij7[1];
vinfos[0].maxsolutions = _nj7;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j8;
vinfos[1].indices[0] = _ij8[0];
vinfos[1].indices[1] = _ij8[1];
vinfos[1].maxsolutions = _nj8;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j9;
vinfos[2].indices[0] = _ij9[0];
vinfos[2].indices[1] = _ij9[1];
vinfos[2].maxsolutions = _nj9;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j10;
vinfos[3].indices[0] = _ij10[0];
vinfos[3].indices[1] = _ij10[1];
vinfos[3].maxsolutions = _nj10;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j11;
vinfos[4].indices[0] = _ij11[0];
vinfos[4].indices[1] = _ij11[1];
vinfos[4].maxsolutions = _nj11;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j12;
vinfos[5].indices[0] = _ij12[0];
vinfos[5].indices[1] = _ij12[1];
vinfos[5].maxsolutions = _nj12;
vinfos[6].jointtype = 1;
vinfos[6].foffset = j14;
vinfos[6].indices[0] = _ij14[0];
vinfos[6].indices[1] = _ij14[1];
vinfos[6].maxsolutions = _nj14;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j11array[1], cj11array[1], sj11array[1];
bool j11valid[1]={false};
_nj11 = 1;
if( IKabs(((gconst64)*(new_r00))) < IKFAST_ATAN2_MAGTHRESH && IKabs(((IkReal(-1.00000000000000))*(gconst64)*(new_r10))) < IKFAST_ATAN2_MAGTHRESH )
    continue;
j11array[0]=IKatan2(((gconst64)*(new_r00)), ((IkReal(-1.00000000000000))*(gconst64)*(new_r10)));
sj11array[0]=IKsin(j11array[0]);
cj11array[0]=IKcos(j11array[0]);
if( j11array[0] > IKPI )
{
    j11array[0]-=IK2PI;
}
else if( j11array[0] < -IKPI )
{    j11array[0]+=IK2PI;
}
j11valid[0] = true;
for(int ij11 = 0; ij11 < 1; ++ij11)
{
if( !j11valid[ij11] )
{
    continue;
}
_ij11[0] = ij11; _ij11[1] = -1;
for(int iij11 = ij11+1; iij11 < 1; ++iij11)
{
if( j11valid[iij11] && IKabs(cj11array[ij11]-cj11array[iij11]) < IKFAST_SOLUTION_THRESH && IKabs(sj11array[ij11]-sj11array[iij11]) < IKFAST_SOLUTION_THRESH )
{
    j11valid[iij11]=false; _ij11[1] = iij11; break;
}
}
j11 = j11array[ij11]; cj11 = cj11array[ij11]; sj11 = sj11array[ij11];
{
IkReal evalcond[6];
IkReal x125=IKcos(j11);
IkReal x126=IKsin(j11);
IkReal x127=((IkReal(1.00000000000000))*(x126));
evalcond[0]=((((IkReal(-1.00000000000000))*(new_r02)*(x127)))+(((new_r12)*(x125))));
evalcond[1]=((IkReal(-1.00000000000000))+(((new_r02)*(x125)))+(((new_r12)*(x126))));
evalcond[2]=((((IkReal(-1.00000000000000))*(new_r00)*(x127)))+(((IkReal(-1.00000000000000))*(sj14)))+(((new_r10)*(x125))));
evalcond[3]=((((IkReal(-1.00000000000000))*(new_r01)*(x127)))+(((IkReal(-1.00000000000000))*(cj14)))+(((new_r11)*(x125))));
evalcond[4]=((((new_r00)*(x125)))+(((new_r10)*(x126))));
evalcond[5]=((((new_r01)*(x125)))+(((new_r11)*(x126))));
if( IKabs(evalcond[0]) > 0.000001  || IKabs(evalcond[1]) > 0.000001  || IKabs(evalcond[2]) > 0.000001  || IKabs(evalcond[3]) > 0.000001  || IKabs(evalcond[4]) > 0.000001  || IKabs(evalcond[5]) > 0.000001  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(7);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j7;
vinfos[0].indices[0] = _ij7[0];
vinfos[0].indices[1] = _ij7[1];
vinfos[0].maxsolutions = _nj7;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j8;
vinfos[1].indices[0] = _ij8[0];
vinfos[1].indices[1] = _ij8[1];
vinfos[1].maxsolutions = _nj8;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j9;
vinfos[2].indices[0] = _ij9[0];
vinfos[2].indices[1] = _ij9[1];
vinfos[2].maxsolutions = _nj9;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j10;
vinfos[3].indices[0] = _ij10[0];
vinfos[3].indices[1] = _ij10[1];
vinfos[3].maxsolutions = _nj10;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j11;
vinfos[4].indices[0] = _ij11[0];
vinfos[4].indices[1] = _ij11[1];
vinfos[4].maxsolutions = _nj11;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j12;
vinfos[5].indices[0] = _ij12[0];
vinfos[5].indices[1] = _ij12[1];
vinfos[5].maxsolutions = _nj12;
vinfos[6].jointtype = 1;
vinfos[6].foffset = j14;
vinfos[6].indices[0] = _ij14[0];
vinfos[6].indices[1] = _ij14[1];
vinfos[6].maxsolutions = _nj14;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}
}
}

} else
{
evalcond[0]=((IkReal(-3.14159265358979))+(IKfmod(((IkReal(3.14159265358979))+(j12)), IkReal(6.28318530717959))));
evalcond[1]=((IkReal(1.00000000000000))+(new_r22));
evalcond[2]=new_r21;
evalcond[3]=new_r20;
evalcond[4]=((IkReal(-1.00000000000000))*(new_r20));
evalcond[5]=((IkReal(-1.00000000000000))*(new_r21));
evalcond[6]=((IkReal(-1.00000000000000))+(((IkReal(-1.00000000000000))*(new_r22))));
if( IKabs(evalcond[0]) < 0.0000010000000000  && IKabs(evalcond[1]) < 0.0000010000000000  && IKabs(evalcond[2]) < 0.0000010000000000  && IKabs(evalcond[3]) < 0.0000010000000000  && IKabs(evalcond[4]) < 0.0000010000000000  && IKabs(evalcond[5]) < 0.0000010000000000  && IKabs(evalcond[6]) < 0.0000010000000000  )
{
{
IkReal j11array[2], cj11array[2], sj11array[2];
bool j11valid[2]={false};
_nj11 = 2;
if( IKabs(new_r02) < IKFAST_ATAN2_MAGTHRESH && IKabs(new_r12) < IKFAST_ATAN2_MAGTHRESH )
    continue;
IkReal x128=IKatan2(new_r02, new_r12);
j11array[0]=((IkReal(-1.00000000000000))*(x128));
sj11array[0]=IKsin(j11array[0]);
cj11array[0]=IKcos(j11array[0]);
j11array[1]=((IkReal(3.14159265358979))+(((IkReal(-1.00000000000000))*(x128))));
sj11array[1]=IKsin(j11array[1]);
cj11array[1]=IKcos(j11array[1]);
if( j11array[0] > IKPI )
{
    j11array[0]-=IK2PI;
}
else if( j11array[0] < -IKPI )
{    j11array[0]+=IK2PI;
}
j11valid[0] = true;
if( j11array[1] > IKPI )
{
    j11array[1]-=IK2PI;
}
else if( j11array[1] < -IKPI )
{    j11array[1]+=IK2PI;
}
j11valid[1] = true;
for(int ij11 = 0; ij11 < 2; ++ij11)
{
if( !j11valid[ij11] )
{
    continue;
}
_ij11[0] = ij11; _ij11[1] = -1;
for(int iij11 = ij11+1; iij11 < 2; ++iij11)
{
if( j11valid[iij11] && IKabs(cj11array[ij11]-cj11array[iij11]) < IKFAST_SOLUTION_THRESH && IKabs(sj11array[ij11]-sj11array[iij11]) < IKFAST_SOLUTION_THRESH )
{
    j11valid[iij11]=false; _ij11[1] = iij11; break;
}
}
j11 = j11array[ij11]; cj11 = cj11array[ij11]; sj11 = sj11array[ij11];
{
IkReal evalcond[1];
evalcond[0]=((((new_r12)*(IKcos(j11))))+(((IkReal(-1.00000000000000))*(new_r02)*(IKsin(j11)))));
if( IKabs(evalcond[0]) > 0.000001  )
{
continue;
}
}

{
IkReal j14array[1], cj14array[1], sj14array[1];
bool j14valid[1]={false};
_nj14 = 1;
if( IKabs(((((new_r11)*(sj11)))+(((cj11)*(new_r01))))) < IKFAST_ATAN2_MAGTHRESH && IKabs(((((IkReal(-1.00000000000000))*(new_r10)*(sj11)))+(((IkReal(-1.00000000000000))*(cj11)*(new_r00))))) < IKFAST_ATAN2_MAGTHRESH && IKabs(IKsqr(((((new_r11)*(sj11)))+(((cj11)*(new_r01)))))+IKsqr(((((IkReal(-1.00000000000000))*(new_r10)*(sj11)))+(((IkReal(-1.00000000000000))*(cj11)*(new_r00)))))-1) <= IKFAST_SINCOS_THRESH )
    continue;
j14array[0]=IKatan2(((((new_r11)*(sj11)))+(((cj11)*(new_r01)))), ((((IkReal(-1.00000000000000))*(new_r10)*(sj11)))+(((IkReal(-1.00000000000000))*(cj11)*(new_r00)))));
sj14array[0]=IKsin(j14array[0]);
cj14array[0]=IKcos(j14array[0]);
if( j14array[0] > IKPI )
{
    j14array[0]-=IK2PI;
}
else if( j14array[0] < -IKPI )
{    j14array[0]+=IK2PI;
}
j14valid[0] = true;
for(int ij14 = 0; ij14 < 1; ++ij14)
{
if( !j14valid[ij14] )
{
    continue;
}
_ij14[0] = ij14; _ij14[1] = -1;
for(int iij14 = ij14+1; iij14 < 1; ++iij14)
{
if( j14valid[iij14] && IKabs(cj14array[ij14]-cj14array[iij14]) < IKFAST_SOLUTION_THRESH && IKabs(sj14array[ij14]-sj14array[iij14]) < IKFAST_SOLUTION_THRESH )
{
    j14valid[iij14]=false; _ij14[1] = iij14; break;
}
}
j14 = j14array[ij14]; cj14 = cj14array[ij14]; sj14 = sj14array[ij14];
{
IkReal evalcond[4];
IkReal x129=IKcos(j14);
IkReal x130=((IkReal(1.00000000000000))*(sj11));
IkReal x131=((IkReal(1.00000000000000))*(IKsin(j14)));
evalcond[0]=((((cj11)*(new_r10)))+(((IkReal(-1.00000000000000))*(new_r00)*(x130)))+(((IkReal(-1.00000000000000))*(x131))));
evalcond[1]=((((cj11)*(new_r11)))+(((IkReal(-1.00000000000000))*(new_r01)*(x130)))+(((IkReal(-1.00000000000000))*(x129))));
evalcond[2]=((x129)+(((new_r10)*(sj11)))+(((cj11)*(new_r00))));
evalcond[3]=((((IkReal(-1.00000000000000))*(x131)))+(((new_r11)*(sj11)))+(((cj11)*(new_r01))));
if( IKabs(evalcond[0]) > 0.000001  || IKabs(evalcond[1]) > 0.000001  || IKabs(evalcond[2]) > 0.000001  || IKabs(evalcond[3]) > 0.000001  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(7);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j7;
vinfos[0].indices[0] = _ij7[0];
vinfos[0].indices[1] = _ij7[1];
vinfos[0].maxsolutions = _nj7;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j8;
vinfos[1].indices[0] = _ij8[0];
vinfos[1].indices[1] = _ij8[1];
vinfos[1].maxsolutions = _nj8;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j9;
vinfos[2].indices[0] = _ij9[0];
vinfos[2].indices[1] = _ij9[1];
vinfos[2].maxsolutions = _nj9;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j10;
vinfos[3].indices[0] = _ij10[0];
vinfos[3].indices[1] = _ij10[1];
vinfos[3].maxsolutions = _nj10;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j11;
vinfos[4].indices[0] = _ij11[0];
vinfos[4].indices[1] = _ij11[1];
vinfos[4].maxsolutions = _nj11;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j12;
vinfos[5].indices[0] = _ij12[0];
vinfos[5].indices[1] = _ij12[1];
vinfos[5].maxsolutions = _nj12;
vinfos[6].jointtype = 1;
vinfos[6].foffset = j14;
vinfos[6].indices[0] = _ij14[0];
vinfos[6].indices[1] = _ij14[1];
vinfos[6].maxsolutions = _nj14;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}
}
}

} else
{
IkReal x132=((IkReal(-1.00000000000000))+(new_r22));
evalcond[0]=((IkReal(-3.14159265358979))+(IKfmod(j12, IkReal(6.28318530717959))));
evalcond[1]=x132;
evalcond[2]=new_r21;
evalcond[3]=new_r20;
evalcond[4]=new_r20;
evalcond[5]=new_r21;
evalcond[6]=x132;
if( IKabs(evalcond[0]) < 0.0000010000000000  && IKabs(evalcond[1]) < 0.0000010000000000  && IKabs(evalcond[2]) < 0.0000010000000000  && IKabs(evalcond[3]) < 0.0000010000000000  && IKabs(evalcond[4]) < 0.0000010000000000  && IKabs(evalcond[5]) < 0.0000010000000000  && IKabs(evalcond[6]) < 0.0000010000000000  )
{
{
IkReal j11array[2], cj11array[2], sj11array[2];
bool j11valid[2]={false};
_nj11 = 2;
if( IKabs(new_r02) < IKFAST_ATAN2_MAGTHRESH && IKabs(new_r12) < IKFAST_ATAN2_MAGTHRESH )
    continue;
IkReal x133=IKatan2(new_r02, new_r12);
j11array[0]=((IkReal(-1.00000000000000))*(x133));
sj11array[0]=IKsin(j11array[0]);
cj11array[0]=IKcos(j11array[0]);
j11array[1]=((IkReal(3.14159265358979))+(((IkReal(-1.00000000000000))*(x133))));
sj11array[1]=IKsin(j11array[1]);
cj11array[1]=IKcos(j11array[1]);
if( j11array[0] > IKPI )
{
    j11array[0]-=IK2PI;
}
else if( j11array[0] < -IKPI )
{    j11array[0]+=IK2PI;
}
j11valid[0] = true;
if( j11array[1] > IKPI )
{
    j11array[1]-=IK2PI;
}
else if( j11array[1] < -IKPI )
{    j11array[1]+=IK2PI;
}
j11valid[1] = true;
for(int ij11 = 0; ij11 < 2; ++ij11)
{
if( !j11valid[ij11] )
{
    continue;
}
_ij11[0] = ij11; _ij11[1] = -1;
for(int iij11 = ij11+1; iij11 < 2; ++iij11)
{
if( j11valid[iij11] && IKabs(cj11array[ij11]-cj11array[iij11]) < IKFAST_SOLUTION_THRESH && IKabs(sj11array[ij11]-sj11array[iij11]) < IKFAST_SOLUTION_THRESH )
{
    j11valid[iij11]=false; _ij11[1] = iij11; break;
}
}
j11 = j11array[ij11]; cj11 = cj11array[ij11]; sj11 = sj11array[ij11];
{
IkReal evalcond[1];
evalcond[0]=((((new_r12)*(IKcos(j11))))+(((IkReal(-1.00000000000000))*(new_r02)*(IKsin(j11)))));
if( IKabs(evalcond[0]) > 0.000001  )
{
continue;
}
}

{
IkReal j14array[1], cj14array[1], sj14array[1];
bool j14valid[1]={false};
_nj14 = 1;
if( IKabs(((((IkReal(-1.00000000000000))*(new_r11)*(sj11)))+(((IkReal(-1.00000000000000))*(cj11)*(new_r01))))) < IKFAST_ATAN2_MAGTHRESH && IKabs(((((new_r10)*(sj11)))+(((cj11)*(new_r00))))) < IKFAST_ATAN2_MAGTHRESH && IKabs(IKsqr(((((IkReal(-1.00000000000000))*(new_r11)*(sj11)))+(((IkReal(-1.00000000000000))*(cj11)*(new_r01)))))+IKsqr(((((new_r10)*(sj11)))+(((cj11)*(new_r00)))))-1) <= IKFAST_SINCOS_THRESH )
    continue;
j14array[0]=IKatan2(((((IkReal(-1.00000000000000))*(new_r11)*(sj11)))+(((IkReal(-1.00000000000000))*(cj11)*(new_r01)))), ((((new_r10)*(sj11)))+(((cj11)*(new_r00)))));
sj14array[0]=IKsin(j14array[0]);
cj14array[0]=IKcos(j14array[0]);
if( j14array[0] > IKPI )
{
    j14array[0]-=IK2PI;
}
else if( j14array[0] < -IKPI )
{    j14array[0]+=IK2PI;
}
j14valid[0] = true;
for(int ij14 = 0; ij14 < 1; ++ij14)
{
if( !j14valid[ij14] )
{
    continue;
}
_ij14[0] = ij14; _ij14[1] = -1;
for(int iij14 = ij14+1; iij14 < 1; ++iij14)
{
if( j14valid[iij14] && IKabs(cj14array[ij14]-cj14array[iij14]) < IKFAST_SOLUTION_THRESH && IKabs(sj14array[ij14]-sj14array[iij14]) < IKFAST_SOLUTION_THRESH )
{
    j14valid[iij14]=false; _ij14[1] = iij14; break;
}
}
j14 = j14array[ij14]; cj14 = cj14array[ij14]; sj14 = sj14array[ij14];
{
IkReal evalcond[4];
IkReal x134=IKsin(j14);
IkReal x135=((IkReal(1.00000000000000))*(sj11));
IkReal x136=((IkReal(1.00000000000000))*(IKcos(j14)));
evalcond[0]=((((cj11)*(new_r10)))+(((IkReal(-1.00000000000000))*(new_r00)*(x135)))+(((IkReal(-1.00000000000000))*(x134))));
evalcond[1]=((((cj11)*(new_r11)))+(((IkReal(-1.00000000000000))*(new_r01)*(x135)))+(((IkReal(-1.00000000000000))*(x136))));
evalcond[2]=((((IkReal(-1.00000000000000))*(x136)))+(((new_r10)*(sj11)))+(((cj11)*(new_r00))));
evalcond[3]=((x134)+(((new_r11)*(sj11)))+(((cj11)*(new_r01))));
if( IKabs(evalcond[0]) > 0.000001  || IKabs(evalcond[1]) > 0.000001  || IKabs(evalcond[2]) > 0.000001  || IKabs(evalcond[3]) > 0.000001  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(7);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j7;
vinfos[0].indices[0] = _ij7[0];
vinfos[0].indices[1] = _ij7[1];
vinfos[0].maxsolutions = _nj7;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j8;
vinfos[1].indices[0] = _ij8[0];
vinfos[1].indices[1] = _ij8[1];
vinfos[1].maxsolutions = _nj8;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j9;
vinfos[2].indices[0] = _ij9[0];
vinfos[2].indices[1] = _ij9[1];
vinfos[2].maxsolutions = _nj9;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j10;
vinfos[3].indices[0] = _ij10[0];
vinfos[3].indices[1] = _ij10[1];
vinfos[3].maxsolutions = _nj10;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j11;
vinfos[4].indices[0] = _ij11[0];
vinfos[4].indices[1] = _ij11[1];
vinfos[4].maxsolutions = _nj11;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j12;
vinfos[5].indices[0] = _ij12[0];
vinfos[5].indices[1] = _ij12[1];
vinfos[5].maxsolutions = _nj12;
vinfos[6].jointtype = 1;
vinfos[6].foffset = j14;
vinfos[6].indices[0] = _ij14[0];
vinfos[6].indices[1] = _ij14[1];
vinfos[6].maxsolutions = _nj14;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}
}
}

} else
{
if( 1 )
{
continue;

} else
{
}
}
}
}
}
}

} else
{
{
IkReal j11array[1], cj11array[1], sj11array[1];
bool j11valid[1]={false};
_nj11 = 1;
IkReal x137=((gconst53)*(new_r22)*(sj12));
if( IKabs(((new_r12)*(x137))) < IKFAST_ATAN2_MAGTHRESH && IKabs(((new_r02)*(x137))) < IKFAST_ATAN2_MAGTHRESH )
    continue;
j11array[0]=IKatan2(((new_r12)*(x137)), ((new_r02)*(x137)));
sj11array[0]=IKsin(j11array[0]);
cj11array[0]=IKcos(j11array[0]);
if( j11array[0] > IKPI )
{
    j11array[0]-=IK2PI;
}
else if( j11array[0] < -IKPI )
{    j11array[0]+=IK2PI;
}
j11valid[0] = true;
for(int ij11 = 0; ij11 < 1; ++ij11)
{
if( !j11valid[ij11] )
{
    continue;
}
_ij11[0] = ij11; _ij11[1] = -1;
for(int iij11 = ij11+1; iij11 < 1; ++iij11)
{
if( j11valid[iij11] && IKabs(cj11array[ij11]-cj11array[iij11]) < IKFAST_SOLUTION_THRESH && IKabs(sj11array[ij11]-sj11array[iij11]) < IKFAST_SOLUTION_THRESH )
{
    j11valid[iij11]=false; _ij11[1] = iij11; break;
}
}
j11 = j11array[ij11]; cj11 = cj11array[ij11]; sj11 = sj11array[ij11];
{
IkReal evalcond[6];
IkReal x138=IKcos(j11);
IkReal x139=IKsin(j11);
IkReal x140=((IkReal(1.00000000000000))*(cj12));
IkReal x141=((IkReal(1.00000000000000))*(sj12));
IkReal x142=((new_r12)*(x139));
IkReal x143=((new_r02)*(x138));
evalcond[0]=((((new_r12)*(x138)))+(((IkReal(-1.00000000000000))*(new_r02)*(x139))));
evalcond[1]=((x142)+(x143)+(sj12));
evalcond[2]=((((cj12)*(x143)))+(((cj12)*(x142)))+(((IkReal(-1.00000000000000))*(new_r22)*(x141))));
evalcond[3]=((((IkReal(-1.00000000000000))*(new_r20)*(x140)))+(((IkReal(-1.00000000000000))*(new_r10)*(x139)*(x141)))+(((IkReal(-1.00000000000000))*(new_r00)*(x138)*(x141))));
evalcond[4]=((((IkReal(-1.00000000000000))*(new_r01)*(x138)*(x141)))+(((IkReal(-1.00000000000000))*(new_r21)*(x140)))+(((IkReal(-1.00000000000000))*(new_r11)*(x139)*(x141))));
evalcond[5]=((IkReal(-1.00000000000000))+(((IkReal(-1.00000000000000))*(new_r22)*(x140)))+(((IkReal(-1.00000000000000))*(x141)*(x143)))+(((IkReal(-1.00000000000000))*(x141)*(x142))));
if( IKabs(evalcond[0]) > 0.000001  || IKabs(evalcond[1]) > 0.000001  || IKabs(evalcond[2]) > 0.000001  || IKabs(evalcond[3]) > 0.000001  || IKabs(evalcond[4]) > 0.000001  || IKabs(evalcond[5]) > 0.000001  )
{
continue;
}
}

{
IkReal dummyeval[1];
IkReal gconst55;
gconst55=IKsign(sj12);
dummyeval[0]=sj12;
if( IKabs(dummyeval[0]) < 0.0000010000000000  )
{
{
IkReal dummyeval[1];
dummyeval[0]=sj12;
if( IKabs(dummyeval[0]) < 0.0000010000000000  )
{
{
IkReal dummyeval[1];
dummyeval[0]=sj12;
if( IKabs(dummyeval[0]) < 0.0000010000000000  )
{
{
IkReal evalcond[11];
IkReal x144=((((cj11)*(new_r12)))+(((IkReal(-1.00000000000000))*(new_r02)*(sj11))));
IkReal x145=((((cj11)*(new_r02)))+(((new_r12)*(sj11))));
evalcond[0]=((IkReal(-3.14159265358979))+(IKfmod(((IkReal(3.14159265358979))+(j12)), IkReal(6.28318530717959))));
evalcond[1]=((IkReal(1.00000000000000))+(new_r22));
evalcond[2]=new_r21;
evalcond[3]=new_r20;
evalcond[4]=x144;
evalcond[5]=x144;
evalcond[6]=x145;
evalcond[7]=x145;
evalcond[8]=((IkReal(-1.00000000000000))*(new_r20));
evalcond[9]=((IkReal(-1.00000000000000))*(new_r21));
evalcond[10]=((IkReal(-1.00000000000000))+(((IkReal(-1.00000000000000))*(new_r22))));
if( IKabs(evalcond[0]) < 0.0000010000000000  && IKabs(evalcond[1]) < 0.0000010000000000  && IKabs(evalcond[2]) < 0.0000010000000000  && IKabs(evalcond[3]) < 0.0000010000000000  && IKabs(evalcond[4]) < 0.0000010000000000  && IKabs(evalcond[5]) < 0.0000010000000000  && IKabs(evalcond[6]) < 0.0000010000000000  && IKabs(evalcond[7]) < 0.0000010000000000  && IKabs(evalcond[8]) < 0.0000010000000000  && IKabs(evalcond[9]) < 0.0000010000000000  && IKabs(evalcond[10]) < 0.0000010000000000  )
{
{
IkReal j14array[1], cj14array[1], sj14array[1];
bool j14valid[1]={false};
_nj14 = 1;
if( IKabs(((((new_r11)*(sj11)))+(((cj11)*(new_r01))))) < IKFAST_ATAN2_MAGTHRESH && IKabs(((((IkReal(-1.00000000000000))*(new_r10)*(sj11)))+(((IkReal(-1.00000000000000))*(cj11)*(new_r00))))) < IKFAST_ATAN2_MAGTHRESH && IKabs(IKsqr(((((new_r11)*(sj11)))+(((cj11)*(new_r01)))))+IKsqr(((((IkReal(-1.00000000000000))*(new_r10)*(sj11)))+(((IkReal(-1.00000000000000))*(cj11)*(new_r00)))))-1) <= IKFAST_SINCOS_THRESH )
    continue;
j14array[0]=IKatan2(((((new_r11)*(sj11)))+(((cj11)*(new_r01)))), ((((IkReal(-1.00000000000000))*(new_r10)*(sj11)))+(((IkReal(-1.00000000000000))*(cj11)*(new_r00)))));
sj14array[0]=IKsin(j14array[0]);
cj14array[0]=IKcos(j14array[0]);
if( j14array[0] > IKPI )
{
    j14array[0]-=IK2PI;
}
else if( j14array[0] < -IKPI )
{    j14array[0]+=IK2PI;
}
j14valid[0] = true;
for(int ij14 = 0; ij14 < 1; ++ij14)
{
if( !j14valid[ij14] )
{
    continue;
}
_ij14[0] = ij14; _ij14[1] = -1;
for(int iij14 = ij14+1; iij14 < 1; ++iij14)
{
if( j14valid[iij14] && IKabs(cj14array[ij14]-cj14array[iij14]) < IKFAST_SOLUTION_THRESH && IKabs(sj14array[ij14]-sj14array[iij14]) < IKFAST_SOLUTION_THRESH )
{
    j14valid[iij14]=false; _ij14[1] = iij14; break;
}
}
j14 = j14array[ij14]; cj14 = cj14array[ij14]; sj14 = sj14array[ij14];
{
IkReal evalcond[4];
IkReal x146=IKcos(j14);
IkReal x147=((IkReal(1.00000000000000))*(sj11));
IkReal x148=((IkReal(1.00000000000000))*(IKsin(j14)));
evalcond[0]=((((IkReal(-1.00000000000000))*(x148)))+(((cj11)*(new_r10)))+(((IkReal(-1.00000000000000))*(new_r00)*(x147))));
evalcond[1]=((((IkReal(-1.00000000000000))*(new_r01)*(x147)))+(((cj11)*(new_r11)))+(((IkReal(-1.00000000000000))*(x146))));
evalcond[2]=((x146)+(((new_r10)*(sj11)))+(((cj11)*(new_r00))));
evalcond[3]=((((IkReal(-1.00000000000000))*(x148)))+(((new_r11)*(sj11)))+(((cj11)*(new_r01))));
if( IKabs(evalcond[0]) > 0.000001  || IKabs(evalcond[1]) > 0.000001  || IKabs(evalcond[2]) > 0.000001  || IKabs(evalcond[3]) > 0.000001  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(7);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j7;
vinfos[0].indices[0] = _ij7[0];
vinfos[0].indices[1] = _ij7[1];
vinfos[0].maxsolutions = _nj7;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j8;
vinfos[1].indices[0] = _ij8[0];
vinfos[1].indices[1] = _ij8[1];
vinfos[1].maxsolutions = _nj8;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j9;
vinfos[2].indices[0] = _ij9[0];
vinfos[2].indices[1] = _ij9[1];
vinfos[2].maxsolutions = _nj9;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j10;
vinfos[3].indices[0] = _ij10[0];
vinfos[3].indices[1] = _ij10[1];
vinfos[3].maxsolutions = _nj10;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j11;
vinfos[4].indices[0] = _ij11[0];
vinfos[4].indices[1] = _ij11[1];
vinfos[4].maxsolutions = _nj11;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j12;
vinfos[5].indices[0] = _ij12[0];
vinfos[5].indices[1] = _ij12[1];
vinfos[5].maxsolutions = _nj12;
vinfos[6].jointtype = 1;
vinfos[6].foffset = j14;
vinfos[6].indices[0] = _ij14[0];
vinfos[6].indices[1] = _ij14[1];
vinfos[6].maxsolutions = _nj14;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

} else
{
IkReal x149=((IkReal(-1.00000000000000))+(new_r22));
IkReal x150=((cj11)*(new_r02));
IkReal x151=((new_r12)*(sj11));
IkReal x152=((((cj11)*(new_r12)))+(((IkReal(-1.00000000000000))*(new_r02)*(sj11))));
evalcond[0]=((IkReal(-3.14159265358979))+(IKfmod(j12, IkReal(6.28318530717959))));
evalcond[1]=x149;
evalcond[2]=new_r21;
evalcond[3]=new_r20;
evalcond[4]=x152;
evalcond[5]=x152;
evalcond[6]=((x151)+(x150));
evalcond[7]=((((IkReal(-1.00000000000000))*(x151)))+(((IkReal(-1.00000000000000))*(x150))));
evalcond[8]=new_r20;
evalcond[9]=new_r21;
evalcond[10]=x149;
if( IKabs(evalcond[0]) < 0.0000010000000000  && IKabs(evalcond[1]) < 0.0000010000000000  && IKabs(evalcond[2]) < 0.0000010000000000  && IKabs(evalcond[3]) < 0.0000010000000000  && IKabs(evalcond[4]) < 0.0000010000000000  && IKabs(evalcond[5]) < 0.0000010000000000  && IKabs(evalcond[6]) < 0.0000010000000000  && IKabs(evalcond[7]) < 0.0000010000000000  && IKabs(evalcond[8]) < 0.0000010000000000  && IKabs(evalcond[9]) < 0.0000010000000000  && IKabs(evalcond[10]) < 0.0000010000000000  )
{
{
IkReal j14array[1], cj14array[1], sj14array[1];
bool j14valid[1]={false};
_nj14 = 1;
if( IKabs(((((IkReal(-1.00000000000000))*(new_r11)*(sj11)))+(((IkReal(-1.00000000000000))*(cj11)*(new_r01))))) < IKFAST_ATAN2_MAGTHRESH && IKabs(((((new_r10)*(sj11)))+(((cj11)*(new_r00))))) < IKFAST_ATAN2_MAGTHRESH && IKabs(IKsqr(((((IkReal(-1.00000000000000))*(new_r11)*(sj11)))+(((IkReal(-1.00000000000000))*(cj11)*(new_r01)))))+IKsqr(((((new_r10)*(sj11)))+(((cj11)*(new_r00)))))-1) <= IKFAST_SINCOS_THRESH )
    continue;
j14array[0]=IKatan2(((((IkReal(-1.00000000000000))*(new_r11)*(sj11)))+(((IkReal(-1.00000000000000))*(cj11)*(new_r01)))), ((((new_r10)*(sj11)))+(((cj11)*(new_r00)))));
sj14array[0]=IKsin(j14array[0]);
cj14array[0]=IKcos(j14array[0]);
if( j14array[0] > IKPI )
{
    j14array[0]-=IK2PI;
}
else if( j14array[0] < -IKPI )
{    j14array[0]+=IK2PI;
}
j14valid[0] = true;
for(int ij14 = 0; ij14 < 1; ++ij14)
{
if( !j14valid[ij14] )
{
    continue;
}
_ij14[0] = ij14; _ij14[1] = -1;
for(int iij14 = ij14+1; iij14 < 1; ++iij14)
{
if( j14valid[iij14] && IKabs(cj14array[ij14]-cj14array[iij14]) < IKFAST_SOLUTION_THRESH && IKabs(sj14array[ij14]-sj14array[iij14]) < IKFAST_SOLUTION_THRESH )
{
    j14valid[iij14]=false; _ij14[1] = iij14; break;
}
}
j14 = j14array[ij14]; cj14 = cj14array[ij14]; sj14 = sj14array[ij14];
{
IkReal evalcond[4];
IkReal x153=IKsin(j14);
IkReal x154=((IkReal(1.00000000000000))*(sj11));
IkReal x155=((IkReal(1.00000000000000))*(IKcos(j14)));
evalcond[0]=((((cj11)*(new_r10)))+(((IkReal(-1.00000000000000))*(x153)))+(((IkReal(-1.00000000000000))*(new_r00)*(x154))));
evalcond[1]=((((cj11)*(new_r11)))+(((IkReal(-1.00000000000000))*(x155)))+(((IkReal(-1.00000000000000))*(new_r01)*(x154))));
evalcond[2]=((((IkReal(-1.00000000000000))*(x155)))+(((new_r10)*(sj11)))+(((cj11)*(new_r00))));
evalcond[3]=((x153)+(((new_r11)*(sj11)))+(((cj11)*(new_r01))));
if( IKabs(evalcond[0]) > 0.000001  || IKabs(evalcond[1]) > 0.000001  || IKabs(evalcond[2]) > 0.000001  || IKabs(evalcond[3]) > 0.000001  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(7);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j7;
vinfos[0].indices[0] = _ij7[0];
vinfos[0].indices[1] = _ij7[1];
vinfos[0].maxsolutions = _nj7;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j8;
vinfos[1].indices[0] = _ij8[0];
vinfos[1].indices[1] = _ij8[1];
vinfos[1].maxsolutions = _nj8;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j9;
vinfos[2].indices[0] = _ij9[0];
vinfos[2].indices[1] = _ij9[1];
vinfos[2].maxsolutions = _nj9;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j10;
vinfos[3].indices[0] = _ij10[0];
vinfos[3].indices[1] = _ij10[1];
vinfos[3].maxsolutions = _nj10;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j11;
vinfos[4].indices[0] = _ij11[0];
vinfos[4].indices[1] = _ij11[1];
vinfos[4].maxsolutions = _nj11;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j12;
vinfos[5].indices[0] = _ij12[0];
vinfos[5].indices[1] = _ij12[1];
vinfos[5].maxsolutions = _nj12;
vinfos[6].jointtype = 1;
vinfos[6].foffset = j14;
vinfos[6].indices[0] = _ij14[0];
vinfos[6].indices[1] = _ij14[1];
vinfos[6].maxsolutions = _nj14;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

} else
{
if( 1 )
{
continue;

} else
{
}
}
}
}

} else
{
{
IkReal j14array[1], cj14array[1], sj14array[1];
bool j14valid[1]={false};
_nj14 = 1;
if( IKabs(((IkReal(-1.00000000000000))*(new_r21)*(((IKabs(sj12) != 0)?((IkReal)1/(sj12)):(IkReal)1.0e30)))) < IKFAST_ATAN2_MAGTHRESH && IKabs(((((cj11)*(new_r11)))+(((IkReal(-1.00000000000000))*(new_r01)*(sj11))))) < IKFAST_ATAN2_MAGTHRESH && IKabs(IKsqr(((IkReal(-1.00000000000000))*(new_r21)*(((IKabs(sj12) != 0)?((IkReal)1/(sj12)):(IkReal)1.0e30))))+IKsqr(((((cj11)*(new_r11)))+(((IkReal(-1.00000000000000))*(new_r01)*(sj11)))))-1) <= IKFAST_SINCOS_THRESH )
    continue;
j14array[0]=IKatan2(((IkReal(-1.00000000000000))*(new_r21)*(((IKabs(sj12) != 0)?((IkReal)1/(sj12)):(IkReal)1.0e30))), ((((cj11)*(new_r11)))+(((IkReal(-1.00000000000000))*(new_r01)*(sj11)))));
sj14array[0]=IKsin(j14array[0]);
cj14array[0]=IKcos(j14array[0]);
if( j14array[0] > IKPI )
{
    j14array[0]-=IK2PI;
}
else if( j14array[0] < -IKPI )
{    j14array[0]+=IK2PI;
}
j14valid[0] = true;
for(int ij14 = 0; ij14 < 1; ++ij14)
{
if( !j14valid[ij14] )
{
    continue;
}
_ij14[0] = ij14; _ij14[1] = -1;
for(int iij14 = ij14+1; iij14 < 1; ++iij14)
{
if( j14valid[iij14] && IKabs(cj14array[ij14]-cj14array[iij14]) < IKFAST_SOLUTION_THRESH && IKabs(sj14array[ij14]-sj14array[iij14]) < IKFAST_SOLUTION_THRESH )
{
    j14valid[iij14]=false; _ij14[1] = iij14; break;
}
}
j14 = j14array[ij14]; cj14 = cj14array[ij14]; sj14 = sj14array[ij14];
{
IkReal evalcond[8];
IkReal x156=IKsin(j14);
IkReal x157=IKcos(j14);
IkReal x158=((new_r11)*(sj11));
IkReal x159=((new_r10)*(sj11));
IkReal x160=((cj11)*(new_r00));
IkReal x161=((IkReal(1.00000000000000))*(sj11));
IkReal x162=((IkReal(1.00000000000000))*(sj12));
IkReal x163=((cj11)*(new_r01));
IkReal x164=((IkReal(1.00000000000000))*(x156));
evalcond[0]=((((sj12)*(x156)))+(new_r21));
evalcond[1]=((((IkReal(-1.00000000000000))*(x157)*(x162)))+(new_r20));
evalcond[2]=((((cj11)*(new_r10)))+(((IkReal(-1.00000000000000))*(new_r00)*(x161)))+(((IkReal(-1.00000000000000))*(x164))));
evalcond[3]=((((cj11)*(new_r11)))+(((IkReal(-1.00000000000000))*(x157)))+(((IkReal(-1.00000000000000))*(new_r01)*(x161))));
evalcond[4]=((((cj12)*(x157)))+(x160)+(x159));
evalcond[5]=((x163)+(x158)+(((IkReal(-1.00000000000000))*(cj12)*(x164))));
evalcond[6]=((((cj12)*(x159)))+(((cj12)*(x160)))+(((IkReal(-1.00000000000000))*(new_r20)*(x162)))+(x157));
evalcond[7]=((((cj12)*(x158)))+(((IkReal(-1.00000000000000))*(new_r21)*(x162)))+(((cj12)*(x163)))+(((IkReal(-1.00000000000000))*(x164))));
if( IKabs(evalcond[0]) > 0.000001  || IKabs(evalcond[1]) > 0.000001  || IKabs(evalcond[2]) > 0.000001  || IKabs(evalcond[3]) > 0.000001  || IKabs(evalcond[4]) > 0.000001  || IKabs(evalcond[5]) > 0.000001  || IKabs(evalcond[6]) > 0.000001  || IKabs(evalcond[7]) > 0.000001  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(7);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j7;
vinfos[0].indices[0] = _ij7[0];
vinfos[0].indices[1] = _ij7[1];
vinfos[0].maxsolutions = _nj7;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j8;
vinfos[1].indices[0] = _ij8[0];
vinfos[1].indices[1] = _ij8[1];
vinfos[1].maxsolutions = _nj8;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j9;
vinfos[2].indices[0] = _ij9[0];
vinfos[2].indices[1] = _ij9[1];
vinfos[2].maxsolutions = _nj9;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j10;
vinfos[3].indices[0] = _ij10[0];
vinfos[3].indices[1] = _ij10[1];
vinfos[3].maxsolutions = _nj10;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j11;
vinfos[4].indices[0] = _ij11[0];
vinfos[4].indices[1] = _ij11[1];
vinfos[4].maxsolutions = _nj11;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j12;
vinfos[5].indices[0] = _ij12[0];
vinfos[5].indices[1] = _ij12[1];
vinfos[5].maxsolutions = _nj12;
vinfos[6].jointtype = 1;
vinfos[6].foffset = j14;
vinfos[6].indices[0] = _ij14[0];
vinfos[6].indices[1] = _ij14[1];
vinfos[6].maxsolutions = _nj14;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j14array[1], cj14array[1], sj14array[1];
bool j14valid[1]={false};
_nj14 = 1;
if( IKabs(((((cj11)*(new_r10)))+(((IkReal(-1.00000000000000))*(new_r00)*(sj11))))) < IKFAST_ATAN2_MAGTHRESH && IKabs(((new_r20)*(((IKabs(sj12) != 0)?((IkReal)1/(sj12)):(IkReal)1.0e30)))) < IKFAST_ATAN2_MAGTHRESH && IKabs(IKsqr(((((cj11)*(new_r10)))+(((IkReal(-1.00000000000000))*(new_r00)*(sj11)))))+IKsqr(((new_r20)*(((IKabs(sj12) != 0)?((IkReal)1/(sj12)):(IkReal)1.0e30))))-1) <= IKFAST_SINCOS_THRESH )
    continue;
j14array[0]=IKatan2(((((cj11)*(new_r10)))+(((IkReal(-1.00000000000000))*(new_r00)*(sj11)))), ((new_r20)*(((IKabs(sj12) != 0)?((IkReal)1/(sj12)):(IkReal)1.0e30))));
sj14array[0]=IKsin(j14array[0]);
cj14array[0]=IKcos(j14array[0]);
if( j14array[0] > IKPI )
{
    j14array[0]-=IK2PI;
}
else if( j14array[0] < -IKPI )
{    j14array[0]+=IK2PI;
}
j14valid[0] = true;
for(int ij14 = 0; ij14 < 1; ++ij14)
{
if( !j14valid[ij14] )
{
    continue;
}
_ij14[0] = ij14; _ij14[1] = -1;
for(int iij14 = ij14+1; iij14 < 1; ++iij14)
{
if( j14valid[iij14] && IKabs(cj14array[ij14]-cj14array[iij14]) < IKFAST_SOLUTION_THRESH && IKabs(sj14array[ij14]-sj14array[iij14]) < IKFAST_SOLUTION_THRESH )
{
    j14valid[iij14]=false; _ij14[1] = iij14; break;
}
}
j14 = j14array[ij14]; cj14 = cj14array[ij14]; sj14 = sj14array[ij14];
{
IkReal evalcond[8];
IkReal x165=IKsin(j14);
IkReal x166=IKcos(j14);
IkReal x167=((new_r11)*(sj11));
IkReal x168=((new_r10)*(sj11));
IkReal x169=((cj11)*(new_r00));
IkReal x170=((IkReal(1.00000000000000))*(sj11));
IkReal x171=((IkReal(1.00000000000000))*(sj12));
IkReal x172=((cj11)*(new_r01));
IkReal x173=((IkReal(1.00000000000000))*(x165));
evalcond[0]=((((sj12)*(x165)))+(new_r21));
evalcond[1]=((new_r20)+(((IkReal(-1.00000000000000))*(x166)*(x171))));
evalcond[2]=((((cj11)*(new_r10)))+(((IkReal(-1.00000000000000))*(x173)))+(((IkReal(-1.00000000000000))*(new_r00)*(x170))));
evalcond[3]=((((cj11)*(new_r11)))+(((IkReal(-1.00000000000000))*(x166)))+(((IkReal(-1.00000000000000))*(new_r01)*(x170))));
evalcond[4]=((((cj12)*(x166)))+(x168)+(x169));
evalcond[5]=((x172)+(x167)+(((IkReal(-1.00000000000000))*(cj12)*(x173))));
evalcond[6]=((((cj12)*(x168)))+(((cj12)*(x169)))+(((IkReal(-1.00000000000000))*(new_r20)*(x171)))+(x166));
evalcond[7]=((((IkReal(-1.00000000000000))*(new_r21)*(x171)))+(((cj12)*(x167)))+(((cj12)*(x172)))+(((IkReal(-1.00000000000000))*(x173))));
if( IKabs(evalcond[0]) > 0.000001  || IKabs(evalcond[1]) > 0.000001  || IKabs(evalcond[2]) > 0.000001  || IKabs(evalcond[3]) > 0.000001  || IKabs(evalcond[4]) > 0.000001  || IKabs(evalcond[5]) > 0.000001  || IKabs(evalcond[6]) > 0.000001  || IKabs(evalcond[7]) > 0.000001  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(7);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j7;
vinfos[0].indices[0] = _ij7[0];
vinfos[0].indices[1] = _ij7[1];
vinfos[0].maxsolutions = _nj7;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j8;
vinfos[1].indices[0] = _ij8[0];
vinfos[1].indices[1] = _ij8[1];
vinfos[1].maxsolutions = _nj8;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j9;
vinfos[2].indices[0] = _ij9[0];
vinfos[2].indices[1] = _ij9[1];
vinfos[2].maxsolutions = _nj9;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j10;
vinfos[3].indices[0] = _ij10[0];
vinfos[3].indices[1] = _ij10[1];
vinfos[3].maxsolutions = _nj10;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j11;
vinfos[4].indices[0] = _ij11[0];
vinfos[4].indices[1] = _ij11[1];
vinfos[4].maxsolutions = _nj11;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j12;
vinfos[5].indices[0] = _ij12[0];
vinfos[5].indices[1] = _ij12[1];
vinfos[5].maxsolutions = _nj12;
vinfos[6].jointtype = 1;
vinfos[6].foffset = j14;
vinfos[6].indices[0] = _ij14[0];
vinfos[6].indices[1] = _ij14[1];
vinfos[6].maxsolutions = _nj14;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j14array[1], cj14array[1], sj14array[1];
bool j14valid[1]={false};
_nj14 = 1;
if( IKabs(((IkReal(-1.00000000000000))*(gconst55)*(new_r21))) < IKFAST_ATAN2_MAGTHRESH && IKabs(((gconst55)*(new_r20))) < IKFAST_ATAN2_MAGTHRESH )
    continue;
j14array[0]=IKatan2(((IkReal(-1.00000000000000))*(gconst55)*(new_r21)), ((gconst55)*(new_r20)));
sj14array[0]=IKsin(j14array[0]);
cj14array[0]=IKcos(j14array[0]);
if( j14array[0] > IKPI )
{
    j14array[0]-=IK2PI;
}
else if( j14array[0] < -IKPI )
{    j14array[0]+=IK2PI;
}
j14valid[0] = true;
for(int ij14 = 0; ij14 < 1; ++ij14)
{
if( !j14valid[ij14] )
{
    continue;
}
_ij14[0] = ij14; _ij14[1] = -1;
for(int iij14 = ij14+1; iij14 < 1; ++iij14)
{
if( j14valid[iij14] && IKabs(cj14array[ij14]-cj14array[iij14]) < IKFAST_SOLUTION_THRESH && IKabs(sj14array[ij14]-sj14array[iij14]) < IKFAST_SOLUTION_THRESH )
{
    j14valid[iij14]=false; _ij14[1] = iij14; break;
}
}
j14 = j14array[ij14]; cj14 = cj14array[ij14]; sj14 = sj14array[ij14];
{
IkReal evalcond[8];
IkReal x174=IKsin(j14);
IkReal x175=IKcos(j14);
IkReal x176=((new_r11)*(sj11));
IkReal x177=((new_r10)*(sj11));
IkReal x178=((cj11)*(new_r00));
IkReal x179=((IkReal(1.00000000000000))*(sj11));
IkReal x180=((IkReal(1.00000000000000))*(sj12));
IkReal x181=((cj11)*(new_r01));
IkReal x182=((IkReal(1.00000000000000))*(x174));
evalcond[0]=((((sj12)*(x174)))+(new_r21));
evalcond[1]=((((IkReal(-1.00000000000000))*(x175)*(x180)))+(new_r20));
evalcond[2]=((((cj11)*(new_r10)))+(((IkReal(-1.00000000000000))*(x182)))+(((IkReal(-1.00000000000000))*(new_r00)*(x179))));
evalcond[3]=((((cj11)*(new_r11)))+(((IkReal(-1.00000000000000))*(x175)))+(((IkReal(-1.00000000000000))*(new_r01)*(x179))));
evalcond[4]=((((cj12)*(x175)))+(x178)+(x177));
evalcond[5]=((x176)+(x181)+(((IkReal(-1.00000000000000))*(cj12)*(x182))));
evalcond[6]=((((cj12)*(x178)))+(((cj12)*(x177)))+(x175)+(((IkReal(-1.00000000000000))*(new_r20)*(x180))));
evalcond[7]=((((cj12)*(x181)))+(((cj12)*(x176)))+(((IkReal(-1.00000000000000))*(x182)))+(((IkReal(-1.00000000000000))*(new_r21)*(x180))));
if( IKabs(evalcond[0]) > 0.000001  || IKabs(evalcond[1]) > 0.000001  || IKabs(evalcond[2]) > 0.000001  || IKabs(evalcond[3]) > 0.000001  || IKabs(evalcond[4]) > 0.000001  || IKabs(evalcond[5]) > 0.000001  || IKabs(evalcond[6]) > 0.000001  || IKabs(evalcond[7]) > 0.000001  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(7);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j7;
vinfos[0].indices[0] = _ij7[0];
vinfos[0].indices[1] = _ij7[1];
vinfos[0].maxsolutions = _nj7;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j8;
vinfos[1].indices[0] = _ij8[0];
vinfos[1].indices[1] = _ij8[1];
vinfos[1].maxsolutions = _nj8;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j9;
vinfos[2].indices[0] = _ij9[0];
vinfos[2].indices[1] = _ij9[1];
vinfos[2].maxsolutions = _nj9;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j10;
vinfos[3].indices[0] = _ij10[0];
vinfos[3].indices[1] = _ij10[1];
vinfos[3].maxsolutions = _nj10;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j11;
vinfos[4].indices[0] = _ij11[0];
vinfos[4].indices[1] = _ij11[1];
vinfos[4].maxsolutions = _nj11;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j12;
vinfos[5].indices[0] = _ij12[0];
vinfos[5].indices[1] = _ij12[1];
vinfos[5].maxsolutions = _nj12;
vinfos[6].jointtype = 1;
vinfos[6].foffset = j14;
vinfos[6].indices[0] = _ij14[0];
vinfos[6].indices[1] = _ij14[1];
vinfos[6].maxsolutions = _nj14;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}
}
}

}

}

} else
{
{
IkReal j11array[1], cj11array[1], sj11array[1];
bool j11valid[1]={false};
_nj11 = 1;
IkReal x183=((gconst52)*(sj12));
if( IKabs(((new_r12)*(x183))) < IKFAST_ATAN2_MAGTHRESH && IKabs(((new_r02)*(x183))) < IKFAST_ATAN2_MAGTHRESH )
    continue;
j11array[0]=IKatan2(((new_r12)*(x183)), ((new_r02)*(x183)));
sj11array[0]=IKsin(j11array[0]);
cj11array[0]=IKcos(j11array[0]);
if( j11array[0] > IKPI )
{
    j11array[0]-=IK2PI;
}
else if( j11array[0] < -IKPI )
{    j11array[0]+=IK2PI;
}
j11valid[0] = true;
for(int ij11 = 0; ij11 < 1; ++ij11)
{
if( !j11valid[ij11] )
{
    continue;
}
_ij11[0] = ij11; _ij11[1] = -1;
for(int iij11 = ij11+1; iij11 < 1; ++iij11)
{
if( j11valid[iij11] && IKabs(cj11array[ij11]-cj11array[iij11]) < IKFAST_SOLUTION_THRESH && IKabs(sj11array[ij11]-sj11array[iij11]) < IKFAST_SOLUTION_THRESH )
{
    j11valid[iij11]=false; _ij11[1] = iij11; break;
}
}
j11 = j11array[ij11]; cj11 = cj11array[ij11]; sj11 = sj11array[ij11];
{
IkReal evalcond[6];
IkReal x184=IKcos(j11);
IkReal x185=IKsin(j11);
IkReal x186=((IkReal(1.00000000000000))*(cj12));
IkReal x187=((IkReal(1.00000000000000))*(sj12));
IkReal x188=((new_r12)*(x185));
IkReal x189=((new_r02)*(x184));
evalcond[0]=((((new_r12)*(x184)))+(((IkReal(-1.00000000000000))*(new_r02)*(x185))));
evalcond[1]=((x188)+(x189)+(sj12));
evalcond[2]=((((cj12)*(x189)))+(((cj12)*(x188)))+(((IkReal(-1.00000000000000))*(new_r22)*(x187))));
evalcond[3]=((((IkReal(-1.00000000000000))*(new_r00)*(x184)*(x187)))+(((IkReal(-1.00000000000000))*(new_r20)*(x186)))+(((IkReal(-1.00000000000000))*(new_r10)*(x185)*(x187))));
evalcond[4]=((((IkReal(-1.00000000000000))*(new_r01)*(x184)*(x187)))+(((IkReal(-1.00000000000000))*(new_r21)*(x186)))+(((IkReal(-1.00000000000000))*(new_r11)*(x185)*(x187))));
evalcond[5]=((IkReal(-1.00000000000000))+(((IkReal(-1.00000000000000))*(new_r22)*(x186)))+(((IkReal(-1.00000000000000))*(x187)*(x188)))+(((IkReal(-1.00000000000000))*(x187)*(x189))));
if( IKabs(evalcond[0]) > 0.000001  || IKabs(evalcond[1]) > 0.000001  || IKabs(evalcond[2]) > 0.000001  || IKabs(evalcond[3]) > 0.000001  || IKabs(evalcond[4]) > 0.000001  || IKabs(evalcond[5]) > 0.000001  )
{
continue;
}
}

{
IkReal dummyeval[1];
IkReal gconst55;
gconst55=IKsign(sj12);
dummyeval[0]=sj12;
if( IKabs(dummyeval[0]) < 0.0000010000000000  )
{
{
IkReal dummyeval[1];
dummyeval[0]=sj12;
if( IKabs(dummyeval[0]) < 0.0000010000000000  )
{
{
IkReal dummyeval[1];
dummyeval[0]=sj12;
if( IKabs(dummyeval[0]) < 0.0000010000000000  )
{
{
IkReal evalcond[11];
IkReal x190=((((cj11)*(new_r12)))+(((IkReal(-1.00000000000000))*(new_r02)*(sj11))));
IkReal x191=((((cj11)*(new_r02)))+(((new_r12)*(sj11))));
evalcond[0]=((IkReal(-3.14159265358979))+(IKfmod(((IkReal(3.14159265358979))+(j12)), IkReal(6.28318530717959))));
evalcond[1]=((IkReal(1.00000000000000))+(new_r22));
evalcond[2]=new_r21;
evalcond[3]=new_r20;
evalcond[4]=x190;
evalcond[5]=x190;
evalcond[6]=x191;
evalcond[7]=x191;
evalcond[8]=((IkReal(-1.00000000000000))*(new_r20));
evalcond[9]=((IkReal(-1.00000000000000))*(new_r21));
evalcond[10]=((IkReal(-1.00000000000000))+(((IkReal(-1.00000000000000))*(new_r22))));
if( IKabs(evalcond[0]) < 0.0000010000000000  && IKabs(evalcond[1]) < 0.0000010000000000  && IKabs(evalcond[2]) < 0.0000010000000000  && IKabs(evalcond[3]) < 0.0000010000000000  && IKabs(evalcond[4]) < 0.0000010000000000  && IKabs(evalcond[5]) < 0.0000010000000000  && IKabs(evalcond[6]) < 0.0000010000000000  && IKabs(evalcond[7]) < 0.0000010000000000  && IKabs(evalcond[8]) < 0.0000010000000000  && IKabs(evalcond[9]) < 0.0000010000000000  && IKabs(evalcond[10]) < 0.0000010000000000  )
{
{
IkReal j14array[1], cj14array[1], sj14array[1];
bool j14valid[1]={false};
_nj14 = 1;
if( IKabs(((((new_r11)*(sj11)))+(((cj11)*(new_r01))))) < IKFAST_ATAN2_MAGTHRESH && IKabs(((((IkReal(-1.00000000000000))*(new_r10)*(sj11)))+(((IkReal(-1.00000000000000))*(cj11)*(new_r00))))) < IKFAST_ATAN2_MAGTHRESH && IKabs(IKsqr(((((new_r11)*(sj11)))+(((cj11)*(new_r01)))))+IKsqr(((((IkReal(-1.00000000000000))*(new_r10)*(sj11)))+(((IkReal(-1.00000000000000))*(cj11)*(new_r00)))))-1) <= IKFAST_SINCOS_THRESH )
    continue;
j14array[0]=IKatan2(((((new_r11)*(sj11)))+(((cj11)*(new_r01)))), ((((IkReal(-1.00000000000000))*(new_r10)*(sj11)))+(((IkReal(-1.00000000000000))*(cj11)*(new_r00)))));
sj14array[0]=IKsin(j14array[0]);
cj14array[0]=IKcos(j14array[0]);
if( j14array[0] > IKPI )
{
    j14array[0]-=IK2PI;
}
else if( j14array[0] < -IKPI )
{    j14array[0]+=IK2PI;
}
j14valid[0] = true;
for(int ij14 = 0; ij14 < 1; ++ij14)
{
if( !j14valid[ij14] )
{
    continue;
}
_ij14[0] = ij14; _ij14[1] = -1;
for(int iij14 = ij14+1; iij14 < 1; ++iij14)
{
if( j14valid[iij14] && IKabs(cj14array[ij14]-cj14array[iij14]) < IKFAST_SOLUTION_THRESH && IKabs(sj14array[ij14]-sj14array[iij14]) < IKFAST_SOLUTION_THRESH )
{
    j14valid[iij14]=false; _ij14[1] = iij14; break;
}
}
j14 = j14array[ij14]; cj14 = cj14array[ij14]; sj14 = sj14array[ij14];
{
IkReal evalcond[4];
IkReal x192=IKcos(j14);
IkReal x193=((IkReal(1.00000000000000))*(sj11));
IkReal x194=((IkReal(1.00000000000000))*(IKsin(j14)));
evalcond[0]=((((cj11)*(new_r10)))+(((IkReal(-1.00000000000000))*(x194)))+(((IkReal(-1.00000000000000))*(new_r00)*(x193))));
evalcond[1]=((((cj11)*(new_r11)))+(((IkReal(-1.00000000000000))*(x192)))+(((IkReal(-1.00000000000000))*(new_r01)*(x193))));
evalcond[2]=((x192)+(((new_r10)*(sj11)))+(((cj11)*(new_r00))));
evalcond[3]=((((IkReal(-1.00000000000000))*(x194)))+(((new_r11)*(sj11)))+(((cj11)*(new_r01))));
if( IKabs(evalcond[0]) > 0.000001  || IKabs(evalcond[1]) > 0.000001  || IKabs(evalcond[2]) > 0.000001  || IKabs(evalcond[3]) > 0.000001  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(7);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j7;
vinfos[0].indices[0] = _ij7[0];
vinfos[0].indices[1] = _ij7[1];
vinfos[0].maxsolutions = _nj7;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j8;
vinfos[1].indices[0] = _ij8[0];
vinfos[1].indices[1] = _ij8[1];
vinfos[1].maxsolutions = _nj8;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j9;
vinfos[2].indices[0] = _ij9[0];
vinfos[2].indices[1] = _ij9[1];
vinfos[2].maxsolutions = _nj9;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j10;
vinfos[3].indices[0] = _ij10[0];
vinfos[3].indices[1] = _ij10[1];
vinfos[3].maxsolutions = _nj10;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j11;
vinfos[4].indices[0] = _ij11[0];
vinfos[4].indices[1] = _ij11[1];
vinfos[4].maxsolutions = _nj11;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j12;
vinfos[5].indices[0] = _ij12[0];
vinfos[5].indices[1] = _ij12[1];
vinfos[5].maxsolutions = _nj12;
vinfos[6].jointtype = 1;
vinfos[6].foffset = j14;
vinfos[6].indices[0] = _ij14[0];
vinfos[6].indices[1] = _ij14[1];
vinfos[6].maxsolutions = _nj14;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

} else
{
IkReal x195=((IkReal(-1.00000000000000))+(new_r22));
IkReal x196=((cj11)*(new_r02));
IkReal x197=((new_r12)*(sj11));
IkReal x198=((((cj11)*(new_r12)))+(((IkReal(-1.00000000000000))*(new_r02)*(sj11))));
evalcond[0]=((IkReal(-3.14159265358979))+(IKfmod(j12, IkReal(6.28318530717959))));
evalcond[1]=x195;
evalcond[2]=new_r21;
evalcond[3]=new_r20;
evalcond[4]=x198;
evalcond[5]=x198;
evalcond[6]=((x197)+(x196));
evalcond[7]=((((IkReal(-1.00000000000000))*(x196)))+(((IkReal(-1.00000000000000))*(x197))));
evalcond[8]=new_r20;
evalcond[9]=new_r21;
evalcond[10]=x195;
if( IKabs(evalcond[0]) < 0.0000010000000000  && IKabs(evalcond[1]) < 0.0000010000000000  && IKabs(evalcond[2]) < 0.0000010000000000  && IKabs(evalcond[3]) < 0.0000010000000000  && IKabs(evalcond[4]) < 0.0000010000000000  && IKabs(evalcond[5]) < 0.0000010000000000  && IKabs(evalcond[6]) < 0.0000010000000000  && IKabs(evalcond[7]) < 0.0000010000000000  && IKabs(evalcond[8]) < 0.0000010000000000  && IKabs(evalcond[9]) < 0.0000010000000000  && IKabs(evalcond[10]) < 0.0000010000000000  )
{
{
IkReal j14array[1], cj14array[1], sj14array[1];
bool j14valid[1]={false};
_nj14 = 1;
if( IKabs(((((IkReal(-1.00000000000000))*(new_r11)*(sj11)))+(((IkReal(-1.00000000000000))*(cj11)*(new_r01))))) < IKFAST_ATAN2_MAGTHRESH && IKabs(((((new_r10)*(sj11)))+(((cj11)*(new_r00))))) < IKFAST_ATAN2_MAGTHRESH && IKabs(IKsqr(((((IkReal(-1.00000000000000))*(new_r11)*(sj11)))+(((IkReal(-1.00000000000000))*(cj11)*(new_r01)))))+IKsqr(((((new_r10)*(sj11)))+(((cj11)*(new_r00)))))-1) <= IKFAST_SINCOS_THRESH )
    continue;
j14array[0]=IKatan2(((((IkReal(-1.00000000000000))*(new_r11)*(sj11)))+(((IkReal(-1.00000000000000))*(cj11)*(new_r01)))), ((((new_r10)*(sj11)))+(((cj11)*(new_r00)))));
sj14array[0]=IKsin(j14array[0]);
cj14array[0]=IKcos(j14array[0]);
if( j14array[0] > IKPI )
{
    j14array[0]-=IK2PI;
}
else if( j14array[0] < -IKPI )
{    j14array[0]+=IK2PI;
}
j14valid[0] = true;
for(int ij14 = 0; ij14 < 1; ++ij14)
{
if( !j14valid[ij14] )
{
    continue;
}
_ij14[0] = ij14; _ij14[1] = -1;
for(int iij14 = ij14+1; iij14 < 1; ++iij14)
{
if( j14valid[iij14] && IKabs(cj14array[ij14]-cj14array[iij14]) < IKFAST_SOLUTION_THRESH && IKabs(sj14array[ij14]-sj14array[iij14]) < IKFAST_SOLUTION_THRESH )
{
    j14valid[iij14]=false; _ij14[1] = iij14; break;
}
}
j14 = j14array[ij14]; cj14 = cj14array[ij14]; sj14 = sj14array[ij14];
{
IkReal evalcond[4];
IkReal x199=IKsin(j14);
IkReal x200=((IkReal(1.00000000000000))*(sj11));
IkReal x201=((IkReal(1.00000000000000))*(IKcos(j14)));
evalcond[0]=((((IkReal(-1.00000000000000))*(new_r00)*(x200)))+(((cj11)*(new_r10)))+(((IkReal(-1.00000000000000))*(x199))));
evalcond[1]=((((cj11)*(new_r11)))+(((IkReal(-1.00000000000000))*(x201)))+(((IkReal(-1.00000000000000))*(new_r01)*(x200))));
evalcond[2]=((((IkReal(-1.00000000000000))*(x201)))+(((new_r10)*(sj11)))+(((cj11)*(new_r00))));
evalcond[3]=((x199)+(((new_r11)*(sj11)))+(((cj11)*(new_r01))));
if( IKabs(evalcond[0]) > 0.000001  || IKabs(evalcond[1]) > 0.000001  || IKabs(evalcond[2]) > 0.000001  || IKabs(evalcond[3]) > 0.000001  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(7);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j7;
vinfos[0].indices[0] = _ij7[0];
vinfos[0].indices[1] = _ij7[1];
vinfos[0].maxsolutions = _nj7;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j8;
vinfos[1].indices[0] = _ij8[0];
vinfos[1].indices[1] = _ij8[1];
vinfos[1].maxsolutions = _nj8;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j9;
vinfos[2].indices[0] = _ij9[0];
vinfos[2].indices[1] = _ij9[1];
vinfos[2].maxsolutions = _nj9;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j10;
vinfos[3].indices[0] = _ij10[0];
vinfos[3].indices[1] = _ij10[1];
vinfos[3].maxsolutions = _nj10;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j11;
vinfos[4].indices[0] = _ij11[0];
vinfos[4].indices[1] = _ij11[1];
vinfos[4].maxsolutions = _nj11;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j12;
vinfos[5].indices[0] = _ij12[0];
vinfos[5].indices[1] = _ij12[1];
vinfos[5].maxsolutions = _nj12;
vinfos[6].jointtype = 1;
vinfos[6].foffset = j14;
vinfos[6].indices[0] = _ij14[0];
vinfos[6].indices[1] = _ij14[1];
vinfos[6].maxsolutions = _nj14;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

} else
{
if( 1 )
{
continue;

} else
{
}
}
}
}

} else
{
{
IkReal j14array[1], cj14array[1], sj14array[1];
bool j14valid[1]={false};
_nj14 = 1;
if( IKabs(((IkReal(-1.00000000000000))*(new_r21)*(((IKabs(sj12) != 0)?((IkReal)1/(sj12)):(IkReal)1.0e30)))) < IKFAST_ATAN2_MAGTHRESH && IKabs(((((cj11)*(new_r11)))+(((IkReal(-1.00000000000000))*(new_r01)*(sj11))))) < IKFAST_ATAN2_MAGTHRESH && IKabs(IKsqr(((IkReal(-1.00000000000000))*(new_r21)*(((IKabs(sj12) != 0)?((IkReal)1/(sj12)):(IkReal)1.0e30))))+IKsqr(((((cj11)*(new_r11)))+(((IkReal(-1.00000000000000))*(new_r01)*(sj11)))))-1) <= IKFAST_SINCOS_THRESH )
    continue;
j14array[0]=IKatan2(((IkReal(-1.00000000000000))*(new_r21)*(((IKabs(sj12) != 0)?((IkReal)1/(sj12)):(IkReal)1.0e30))), ((((cj11)*(new_r11)))+(((IkReal(-1.00000000000000))*(new_r01)*(sj11)))));
sj14array[0]=IKsin(j14array[0]);
cj14array[0]=IKcos(j14array[0]);
if( j14array[0] > IKPI )
{
    j14array[0]-=IK2PI;
}
else if( j14array[0] < -IKPI )
{    j14array[0]+=IK2PI;
}
j14valid[0] = true;
for(int ij14 = 0; ij14 < 1; ++ij14)
{
if( !j14valid[ij14] )
{
    continue;
}
_ij14[0] = ij14; _ij14[1] = -1;
for(int iij14 = ij14+1; iij14 < 1; ++iij14)
{
if( j14valid[iij14] && IKabs(cj14array[ij14]-cj14array[iij14]) < IKFAST_SOLUTION_THRESH && IKabs(sj14array[ij14]-sj14array[iij14]) < IKFAST_SOLUTION_THRESH )
{
    j14valid[iij14]=false; _ij14[1] = iij14; break;
}
}
j14 = j14array[ij14]; cj14 = cj14array[ij14]; sj14 = sj14array[ij14];
{
IkReal evalcond[8];
IkReal x202=IKsin(j14);
IkReal x203=IKcos(j14);
IkReal x204=((new_r11)*(sj11));
IkReal x205=((new_r10)*(sj11));
IkReal x206=((cj11)*(new_r00));
IkReal x207=((IkReal(1.00000000000000))*(sj11));
IkReal x208=((IkReal(1.00000000000000))*(sj12));
IkReal x209=((cj11)*(new_r01));
IkReal x210=((IkReal(1.00000000000000))*(x202));
evalcond[0]=((((sj12)*(x202)))+(new_r21));
evalcond[1]=((((IkReal(-1.00000000000000))*(x203)*(x208)))+(new_r20));
evalcond[2]=((((IkReal(-1.00000000000000))*(new_r00)*(x207)))+(((cj11)*(new_r10)))+(((IkReal(-1.00000000000000))*(x210))));
evalcond[3]=((((cj11)*(new_r11)))+(((IkReal(-1.00000000000000))*(x203)))+(((IkReal(-1.00000000000000))*(new_r01)*(x207))));
evalcond[4]=((x206)+(x205)+(((cj12)*(x203))));
evalcond[5]=((x204)+(x209)+(((IkReal(-1.00000000000000))*(cj12)*(x210))));
evalcond[6]=((((IkReal(-1.00000000000000))*(new_r20)*(x208)))+(x203)+(((cj12)*(x205)))+(((cj12)*(x206))));
evalcond[7]=((((IkReal(-1.00000000000000))*(new_r21)*(x208)))+(((cj12)*(x209)))+(((cj12)*(x204)))+(((IkReal(-1.00000000000000))*(x210))));
if( IKabs(evalcond[0]) > 0.000001  || IKabs(evalcond[1]) > 0.000001  || IKabs(evalcond[2]) > 0.000001  || IKabs(evalcond[3]) > 0.000001  || IKabs(evalcond[4]) > 0.000001  || IKabs(evalcond[5]) > 0.000001  || IKabs(evalcond[6]) > 0.000001  || IKabs(evalcond[7]) > 0.000001  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(7);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j7;
vinfos[0].indices[0] = _ij7[0];
vinfos[0].indices[1] = _ij7[1];
vinfos[0].maxsolutions = _nj7;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j8;
vinfos[1].indices[0] = _ij8[0];
vinfos[1].indices[1] = _ij8[1];
vinfos[1].maxsolutions = _nj8;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j9;
vinfos[2].indices[0] = _ij9[0];
vinfos[2].indices[1] = _ij9[1];
vinfos[2].maxsolutions = _nj9;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j10;
vinfos[3].indices[0] = _ij10[0];
vinfos[3].indices[1] = _ij10[1];
vinfos[3].maxsolutions = _nj10;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j11;
vinfos[4].indices[0] = _ij11[0];
vinfos[4].indices[1] = _ij11[1];
vinfos[4].maxsolutions = _nj11;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j12;
vinfos[5].indices[0] = _ij12[0];
vinfos[5].indices[1] = _ij12[1];
vinfos[5].maxsolutions = _nj12;
vinfos[6].jointtype = 1;
vinfos[6].foffset = j14;
vinfos[6].indices[0] = _ij14[0];
vinfos[6].indices[1] = _ij14[1];
vinfos[6].maxsolutions = _nj14;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j14array[1], cj14array[1], sj14array[1];
bool j14valid[1]={false};
_nj14 = 1;
if( IKabs(((((cj11)*(new_r10)))+(((IkReal(-1.00000000000000))*(new_r00)*(sj11))))) < IKFAST_ATAN2_MAGTHRESH && IKabs(((new_r20)*(((IKabs(sj12) != 0)?((IkReal)1/(sj12)):(IkReal)1.0e30)))) < IKFAST_ATAN2_MAGTHRESH && IKabs(IKsqr(((((cj11)*(new_r10)))+(((IkReal(-1.00000000000000))*(new_r00)*(sj11)))))+IKsqr(((new_r20)*(((IKabs(sj12) != 0)?((IkReal)1/(sj12)):(IkReal)1.0e30))))-1) <= IKFAST_SINCOS_THRESH )
    continue;
j14array[0]=IKatan2(((((cj11)*(new_r10)))+(((IkReal(-1.00000000000000))*(new_r00)*(sj11)))), ((new_r20)*(((IKabs(sj12) != 0)?((IkReal)1/(sj12)):(IkReal)1.0e30))));
sj14array[0]=IKsin(j14array[0]);
cj14array[0]=IKcos(j14array[0]);
if( j14array[0] > IKPI )
{
    j14array[0]-=IK2PI;
}
else if( j14array[0] < -IKPI )
{    j14array[0]+=IK2PI;
}
j14valid[0] = true;
for(int ij14 = 0; ij14 < 1; ++ij14)
{
if( !j14valid[ij14] )
{
    continue;
}
_ij14[0] = ij14; _ij14[1] = -1;
for(int iij14 = ij14+1; iij14 < 1; ++iij14)
{
if( j14valid[iij14] && IKabs(cj14array[ij14]-cj14array[iij14]) < IKFAST_SOLUTION_THRESH && IKabs(sj14array[ij14]-sj14array[iij14]) < IKFAST_SOLUTION_THRESH )
{
    j14valid[iij14]=false; _ij14[1] = iij14; break;
}
}
j14 = j14array[ij14]; cj14 = cj14array[ij14]; sj14 = sj14array[ij14];
{
IkReal evalcond[8];
IkReal x211=IKsin(j14);
IkReal x212=IKcos(j14);
IkReal x213=((new_r11)*(sj11));
IkReal x214=((new_r10)*(sj11));
IkReal x215=((cj11)*(new_r00));
IkReal x216=((IkReal(1.00000000000000))*(sj11));
IkReal x217=((IkReal(1.00000000000000))*(sj12));
IkReal x218=((cj11)*(new_r01));
IkReal x219=((IkReal(1.00000000000000))*(x211));
evalcond[0]=((new_r21)+(((sj12)*(x211))));
evalcond[1]=((new_r20)+(((IkReal(-1.00000000000000))*(x212)*(x217))));
evalcond[2]=((((cj11)*(new_r10)))+(((IkReal(-1.00000000000000))*(x219)))+(((IkReal(-1.00000000000000))*(new_r00)*(x216))));
evalcond[3]=((((cj11)*(new_r11)))+(((IkReal(-1.00000000000000))*(x212)))+(((IkReal(-1.00000000000000))*(new_r01)*(x216))));
evalcond[4]=((((cj12)*(x212)))+(x214)+(x215));
evalcond[5]=((x213)+(x218)+(((IkReal(-1.00000000000000))*(cj12)*(x219))));
evalcond[6]=((((cj12)*(x214)))+(((cj12)*(x215)))+(x212)+(((IkReal(-1.00000000000000))*(new_r20)*(x217))));
evalcond[7]=((((cj12)*(x218)))+(((cj12)*(x213)))+(((IkReal(-1.00000000000000))*(new_r21)*(x217)))+(((IkReal(-1.00000000000000))*(x219))));
if( IKabs(evalcond[0]) > 0.000001  || IKabs(evalcond[1]) > 0.000001  || IKabs(evalcond[2]) > 0.000001  || IKabs(evalcond[3]) > 0.000001  || IKabs(evalcond[4]) > 0.000001  || IKabs(evalcond[5]) > 0.000001  || IKabs(evalcond[6]) > 0.000001  || IKabs(evalcond[7]) > 0.000001  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(7);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j7;
vinfos[0].indices[0] = _ij7[0];
vinfos[0].indices[1] = _ij7[1];
vinfos[0].maxsolutions = _nj7;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j8;
vinfos[1].indices[0] = _ij8[0];
vinfos[1].indices[1] = _ij8[1];
vinfos[1].maxsolutions = _nj8;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j9;
vinfos[2].indices[0] = _ij9[0];
vinfos[2].indices[1] = _ij9[1];
vinfos[2].maxsolutions = _nj9;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j10;
vinfos[3].indices[0] = _ij10[0];
vinfos[3].indices[1] = _ij10[1];
vinfos[3].maxsolutions = _nj10;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j11;
vinfos[4].indices[0] = _ij11[0];
vinfos[4].indices[1] = _ij11[1];
vinfos[4].maxsolutions = _nj11;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j12;
vinfos[5].indices[0] = _ij12[0];
vinfos[5].indices[1] = _ij12[1];
vinfos[5].maxsolutions = _nj12;
vinfos[6].jointtype = 1;
vinfos[6].foffset = j14;
vinfos[6].indices[0] = _ij14[0];
vinfos[6].indices[1] = _ij14[1];
vinfos[6].maxsolutions = _nj14;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j14array[1], cj14array[1], sj14array[1];
bool j14valid[1]={false};
_nj14 = 1;
if( IKabs(((IkReal(-1.00000000000000))*(gconst55)*(new_r21))) < IKFAST_ATAN2_MAGTHRESH && IKabs(((gconst55)*(new_r20))) < IKFAST_ATAN2_MAGTHRESH )
    continue;
j14array[0]=IKatan2(((IkReal(-1.00000000000000))*(gconst55)*(new_r21)), ((gconst55)*(new_r20)));
sj14array[0]=IKsin(j14array[0]);
cj14array[0]=IKcos(j14array[0]);
if( j14array[0] > IKPI )
{
    j14array[0]-=IK2PI;
}
else if( j14array[0] < -IKPI )
{    j14array[0]+=IK2PI;
}
j14valid[0] = true;
for(int ij14 = 0; ij14 < 1; ++ij14)
{
if( !j14valid[ij14] )
{
    continue;
}
_ij14[0] = ij14; _ij14[1] = -1;
for(int iij14 = ij14+1; iij14 < 1; ++iij14)
{
if( j14valid[iij14] && IKabs(cj14array[ij14]-cj14array[iij14]) < IKFAST_SOLUTION_THRESH && IKabs(sj14array[ij14]-sj14array[iij14]) < IKFAST_SOLUTION_THRESH )
{
    j14valid[iij14]=false; _ij14[1] = iij14; break;
}
}
j14 = j14array[ij14]; cj14 = cj14array[ij14]; sj14 = sj14array[ij14];
{
IkReal evalcond[8];
IkReal x220=IKsin(j14);
IkReal x221=IKcos(j14);
IkReal x222=((new_r11)*(sj11));
IkReal x223=((new_r10)*(sj11));
IkReal x224=((cj11)*(new_r00));
IkReal x225=((IkReal(1.00000000000000))*(sj11));
IkReal x226=((IkReal(1.00000000000000))*(sj12));
IkReal x227=((cj11)*(new_r01));
IkReal x228=((IkReal(1.00000000000000))*(x220));
evalcond[0]=((((sj12)*(x220)))+(new_r21));
evalcond[1]=((((IkReal(-1.00000000000000))*(x221)*(x226)))+(new_r20));
evalcond[2]=((((cj11)*(new_r10)))+(((IkReal(-1.00000000000000))*(x228)))+(((IkReal(-1.00000000000000))*(new_r00)*(x225))));
evalcond[3]=((((cj11)*(new_r11)))+(((IkReal(-1.00000000000000))*(new_r01)*(x225)))+(((IkReal(-1.00000000000000))*(x221))));
evalcond[4]=((((cj12)*(x221)))+(x223)+(x224));
evalcond[5]=((((IkReal(-1.00000000000000))*(cj12)*(x228)))+(x222)+(x227));
evalcond[6]=((((cj12)*(x223)))+(((cj12)*(x224)))+(x221)+(((IkReal(-1.00000000000000))*(new_r20)*(x226))));
evalcond[7]=((((cj12)*(x222)))+(((cj12)*(x227)))+(((IkReal(-1.00000000000000))*(new_r21)*(x226)))+(((IkReal(-1.00000000000000))*(x228))));
if( IKabs(evalcond[0]) > 0.000001  || IKabs(evalcond[1]) > 0.000001  || IKabs(evalcond[2]) > 0.000001  || IKabs(evalcond[3]) > 0.000001  || IKabs(evalcond[4]) > 0.000001  || IKabs(evalcond[5]) > 0.000001  || IKabs(evalcond[6]) > 0.000001  || IKabs(evalcond[7]) > 0.000001  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(7);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j7;
vinfos[0].indices[0] = _ij7[0];
vinfos[0].indices[1] = _ij7[1];
vinfos[0].maxsolutions = _nj7;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j8;
vinfos[1].indices[0] = _ij8[0];
vinfos[1].indices[1] = _ij8[1];
vinfos[1].maxsolutions = _nj8;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j9;
vinfos[2].indices[0] = _ij9[0];
vinfos[2].indices[1] = _ij9[1];
vinfos[2].maxsolutions = _nj9;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j10;
vinfos[3].indices[0] = _ij10[0];
vinfos[3].indices[1] = _ij10[1];
vinfos[3].maxsolutions = _nj10;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j11;
vinfos[4].indices[0] = _ij11[0];
vinfos[4].indices[1] = _ij11[1];
vinfos[4].maxsolutions = _nj11;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j12;
vinfos[5].indices[0] = _ij12[0];
vinfos[5].indices[1] = _ij12[1];
vinfos[5].maxsolutions = _nj12;
vinfos[6].jointtype = 1;
vinfos[6].foffset = j14;
vinfos[6].indices[0] = _ij14[0];
vinfos[6].indices[1] = _ij14[1];
vinfos[6].maxsolutions = _nj14;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}
}
}

}

}

} else
{
{
IkReal j14array[1], cj14array[1], sj14array[1];
bool j14valid[1]={false};
_nj14 = 1;
if( IKabs(((IkReal(-1.00000000000000))*(gconst54)*(new_r21))) < IKFAST_ATAN2_MAGTHRESH && IKabs(((gconst54)*(new_r20))) < IKFAST_ATAN2_MAGTHRESH )
    continue;
j14array[0]=IKatan2(((IkReal(-1.00000000000000))*(gconst54)*(new_r21)), ((gconst54)*(new_r20)));
sj14array[0]=IKsin(j14array[0]);
cj14array[0]=IKcos(j14array[0]);
if( j14array[0] > IKPI )
{
    j14array[0]-=IK2PI;
}
else if( j14array[0] < -IKPI )
{    j14array[0]+=IK2PI;
}
j14valid[0] = true;
for(int ij14 = 0; ij14 < 1; ++ij14)
{
if( !j14valid[ij14] )
{
    continue;
}
_ij14[0] = ij14; _ij14[1] = -1;
for(int iij14 = ij14+1; iij14 < 1; ++iij14)
{
if( j14valid[iij14] && IKabs(cj14array[ij14]-cj14array[iij14]) < IKFAST_SOLUTION_THRESH && IKabs(sj14array[ij14]-sj14array[iij14]) < IKFAST_SOLUTION_THRESH )
{
    j14valid[iij14]=false; _ij14[1] = iij14; break;
}
}
j14 = j14array[ij14]; cj14 = cj14array[ij14]; sj14 = sj14array[ij14];
{
IkReal evalcond[2];
evalcond[0]=((new_r21)+(((sj12)*(IKsin(j14)))));
evalcond[1]=((((IkReal(-1.00000000000000))*(sj12)*(IKcos(j14))))+(new_r20));
if( IKabs(evalcond[0]) > 0.000001  || IKabs(evalcond[1]) > 0.000001  )
{
continue;
}
}

{
IkReal dummyeval[1];
IkReal gconst56;
gconst56=IKsign(((((IkReal(-1.00000000000000))*((new_r02)*(new_r02))))+(((IkReal(-1.00000000000000))*((new_r12)*(new_r12))))));
dummyeval[0]=((((IkReal(-1.00000000000000))*((new_r02)*(new_r02))))+(((IkReal(-1.00000000000000))*((new_r12)*(new_r12)))));
if( IKabs(dummyeval[0]) < 0.0000010000000000  )
{
{
IkReal dummyeval[1];
IkReal gconst57;
gconst57=IKsign(((((IkReal(-1.00000000000000))*(new_r00)*(new_r02)))+(((IkReal(-1.00000000000000))*(new_r10)*(new_r12)))));
dummyeval[0]=((((IkReal(-1.00000000000000))*(new_r00)*(new_r02)))+(((IkReal(-1.00000000000000))*(new_r10)*(new_r12))));
if( IKabs(dummyeval[0]) < 0.0000010000000000  )
{
continue;

} else
{
{
IkReal j11array[1], cj11array[1], sj11array[1];
bool j11valid[1]={false};
_nj11 = 1;
IkReal x229=((cj12)*(cj14)*(gconst57));
if( IKabs(((new_r12)*(x229))) < IKFAST_ATAN2_MAGTHRESH && IKabs(((new_r02)*(x229))) < IKFAST_ATAN2_MAGTHRESH )
    continue;
j11array[0]=IKatan2(((new_r12)*(x229)), ((new_r02)*(x229)));
sj11array[0]=IKsin(j11array[0]);
cj11array[0]=IKcos(j11array[0]);
if( j11array[0] > IKPI )
{
    j11array[0]-=IK2PI;
}
else if( j11array[0] < -IKPI )
{    j11array[0]+=IK2PI;
}
j11valid[0] = true;
for(int ij11 = 0; ij11 < 1; ++ij11)
{
if( !j11valid[ij11] )
{
    continue;
}
_ij11[0] = ij11; _ij11[1] = -1;
for(int iij11 = ij11+1; iij11 < 1; ++iij11)
{
if( j11valid[iij11] && IKabs(cj11array[ij11]-cj11array[iij11]) < IKFAST_SOLUTION_THRESH && IKabs(sj11array[ij11]-sj11array[iij11]) < IKFAST_SOLUTION_THRESH )
{
    j11valid[iij11]=false; _ij11[1] = iij11; break;
}
}
j11 = j11array[ij11]; cj11 = cj11array[ij11]; sj11 = sj11array[ij11];
{
IkReal evalcond[12];
IkReal x230=IKcos(j11);
IkReal x231=IKsin(j11);
IkReal x232=((IkReal(1.00000000000000))*(sj14));
IkReal x233=((IkReal(1.00000000000000))*(new_r22));
IkReal x234=((IkReal(1.00000000000000))*(cj12));
IkReal x235=((IkReal(1.00000000000000))*(sj12));
IkReal x236=((new_r10)*(x231));
IkReal x237=((new_r01)*(x230));
IkReal x238=((IkReal(1.00000000000000))*(x231));
IkReal x239=((cj12)*(x231));
IkReal x240=((new_r00)*(x230));
IkReal x241=((new_r02)*(x230));
evalcond[0]=((((IkReal(-1.00000000000000))*(new_r02)*(x238)))+(((new_r12)*(x230))));
evalcond[1]=((((new_r12)*(x231)))+(x241)+(sj12));
evalcond[2]=((((new_r10)*(x230)))+(((IkReal(-1.00000000000000))*(x232)))+(((IkReal(-1.00000000000000))*(new_r00)*(x238))));
evalcond[3]=((((new_r11)*(x230)))+(((IkReal(-1.00000000000000))*(cj14)))+(((IkReal(-1.00000000000000))*(new_r01)*(x238))));
evalcond[4]=((x236)+(x240)+(((cj12)*(cj14))));
evalcond[5]=((((new_r11)*(x231)))+(((IkReal(-1.00000000000000))*(cj12)*(x232)))+(x237));
evalcond[6]=((((IkReal(-1.00000000000000))*(sj12)*(x233)))+(((new_r12)*(x239)))+(((cj12)*(x241))));
evalcond[7]=((((IkReal(-1.00000000000000))*(x235)*(x236)))+(((IkReal(-1.00000000000000))*(new_r20)*(x234)))+(((IkReal(-1.00000000000000))*(x235)*(x240))));
evalcond[8]=((((IkReal(-1.00000000000000))*(new_r21)*(x234)))+(((IkReal(-1.00000000000000))*(x235)*(x237)))+(((IkReal(-1.00000000000000))*(new_r11)*(x231)*(x235))));
evalcond[9]=((((IkReal(-1.00000000000000))*(new_r20)*(x235)))+(cj14)+(((cj12)*(x236)))+(((cj12)*(x240))));
evalcond[10]=((IkReal(-1.00000000000000))+(((IkReal(-1.00000000000000))*(new_r12)*(x231)*(x235)))+(((IkReal(-1.00000000000000))*(cj12)*(x233)))+(((IkReal(-1.00000000000000))*(x235)*(x241))));
evalcond[11]=((((IkReal(-1.00000000000000))*(new_r21)*(x235)))+(((new_r11)*(x239)))+(((IkReal(-1.00000000000000))*(x232)))+(((cj12)*(x237))));
if( IKabs(evalcond[0]) > 0.000001  || IKabs(evalcond[1]) > 0.000001  || IKabs(evalcond[2]) > 0.000001  || IKabs(evalcond[3]) > 0.000001  || IKabs(evalcond[4]) > 0.000001  || IKabs(evalcond[5]) > 0.000001  || IKabs(evalcond[6]) > 0.000001  || IKabs(evalcond[7]) > 0.000001  || IKabs(evalcond[8]) > 0.000001  || IKabs(evalcond[9]) > 0.000001  || IKabs(evalcond[10]) > 0.000001  || IKabs(evalcond[11]) > 0.000001  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(7);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j7;
vinfos[0].indices[0] = _ij7[0];
vinfos[0].indices[1] = _ij7[1];
vinfos[0].maxsolutions = _nj7;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j8;
vinfos[1].indices[0] = _ij8[0];
vinfos[1].indices[1] = _ij8[1];
vinfos[1].maxsolutions = _nj8;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j9;
vinfos[2].indices[0] = _ij9[0];
vinfos[2].indices[1] = _ij9[1];
vinfos[2].maxsolutions = _nj9;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j10;
vinfos[3].indices[0] = _ij10[0];
vinfos[3].indices[1] = _ij10[1];
vinfos[3].maxsolutions = _nj10;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j11;
vinfos[4].indices[0] = _ij11[0];
vinfos[4].indices[1] = _ij11[1];
vinfos[4].maxsolutions = _nj11;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j12;
vinfos[5].indices[0] = _ij12[0];
vinfos[5].indices[1] = _ij12[1];
vinfos[5].maxsolutions = _nj12;
vinfos[6].jointtype = 1;
vinfos[6].foffset = j14;
vinfos[6].indices[0] = _ij14[0];
vinfos[6].indices[1] = _ij14[1];
vinfos[6].maxsolutions = _nj14;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j11array[1], cj11array[1], sj11array[1];
bool j11valid[1]={false};
_nj11 = 1;
IkReal x242=((gconst56)*(sj12));
if( IKabs(((new_r12)*(x242))) < IKFAST_ATAN2_MAGTHRESH && IKabs(((new_r02)*(x242))) < IKFAST_ATAN2_MAGTHRESH )
    continue;
j11array[0]=IKatan2(((new_r12)*(x242)), ((new_r02)*(x242)));
sj11array[0]=IKsin(j11array[0]);
cj11array[0]=IKcos(j11array[0]);
if( j11array[0] > IKPI )
{
    j11array[0]-=IK2PI;
}
else if( j11array[0] < -IKPI )
{    j11array[0]+=IK2PI;
}
j11valid[0] = true;
for(int ij11 = 0; ij11 < 1; ++ij11)
{
if( !j11valid[ij11] )
{
    continue;
}
_ij11[0] = ij11; _ij11[1] = -1;
for(int iij11 = ij11+1; iij11 < 1; ++iij11)
{
if( j11valid[iij11] && IKabs(cj11array[ij11]-cj11array[iij11]) < IKFAST_SOLUTION_THRESH && IKabs(sj11array[ij11]-sj11array[iij11]) < IKFAST_SOLUTION_THRESH )
{
    j11valid[iij11]=false; _ij11[1] = iij11; break;
}
}
j11 = j11array[ij11]; cj11 = cj11array[ij11]; sj11 = sj11array[ij11];
{
IkReal evalcond[12];
IkReal x243=IKcos(j11);
IkReal x244=IKsin(j11);
IkReal x245=((IkReal(1.00000000000000))*(sj14));
IkReal x246=((IkReal(1.00000000000000))*(new_r22));
IkReal x247=((IkReal(1.00000000000000))*(cj12));
IkReal x248=((IkReal(1.00000000000000))*(sj12));
IkReal x249=((new_r10)*(x244));
IkReal x250=((new_r01)*(x243));
IkReal x251=((IkReal(1.00000000000000))*(x244));
IkReal x252=((cj12)*(x244));
IkReal x253=((new_r00)*(x243));
IkReal x254=((new_r02)*(x243));
evalcond[0]=((((new_r12)*(x243)))+(((IkReal(-1.00000000000000))*(new_r02)*(x251))));
evalcond[1]=((((new_r12)*(x244)))+(x254)+(sj12));
evalcond[2]=((((IkReal(-1.00000000000000))*(x245)))+(((IkReal(-1.00000000000000))*(new_r00)*(x251)))+(((new_r10)*(x243))));
evalcond[3]=((((IkReal(-1.00000000000000))*(new_r01)*(x251)))+(((IkReal(-1.00000000000000))*(cj14)))+(((new_r11)*(x243))));
evalcond[4]=((x253)+(x249)+(((cj12)*(cj14))));
evalcond[5]=((x250)+(((IkReal(-1.00000000000000))*(cj12)*(x245)))+(((new_r11)*(x244))));
evalcond[6]=((((cj12)*(x254)))+(((new_r12)*(x252)))+(((IkReal(-1.00000000000000))*(sj12)*(x246))));
evalcond[7]=((((IkReal(-1.00000000000000))*(x248)*(x249)))+(((IkReal(-1.00000000000000))*(x248)*(x253)))+(((IkReal(-1.00000000000000))*(new_r20)*(x247))));
evalcond[8]=((((IkReal(-1.00000000000000))*(new_r21)*(x247)))+(((IkReal(-1.00000000000000))*(x248)*(x250)))+(((IkReal(-1.00000000000000))*(new_r11)*(x244)*(x248))));
evalcond[9]=((((cj12)*(x253)))+(cj14)+(((IkReal(-1.00000000000000))*(new_r20)*(x248)))+(((cj12)*(x249))));
evalcond[10]=((IkReal(-1.00000000000000))+(((IkReal(-1.00000000000000))*(x248)*(x254)))+(((IkReal(-1.00000000000000))*(cj12)*(x246)))+(((IkReal(-1.00000000000000))*(new_r12)*(x244)*(x248))));
evalcond[11]=((((IkReal(-1.00000000000000))*(new_r21)*(x248)))+(((cj12)*(x250)))+(((new_r11)*(x252)))+(((IkReal(-1.00000000000000))*(x245))));
if( IKabs(evalcond[0]) > 0.000001  || IKabs(evalcond[1]) > 0.000001  || IKabs(evalcond[2]) > 0.000001  || IKabs(evalcond[3]) > 0.000001  || IKabs(evalcond[4]) > 0.000001  || IKabs(evalcond[5]) > 0.000001  || IKabs(evalcond[6]) > 0.000001  || IKabs(evalcond[7]) > 0.000001  || IKabs(evalcond[8]) > 0.000001  || IKabs(evalcond[9]) > 0.000001  || IKabs(evalcond[10]) > 0.000001  || IKabs(evalcond[11]) > 0.000001  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(7);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j7;
vinfos[0].indices[0] = _ij7[0];
vinfos[0].indices[1] = _ij7[1];
vinfos[0].maxsolutions = _nj7;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j8;
vinfos[1].indices[0] = _ij8[0];
vinfos[1].indices[1] = _ij8[1];
vinfos[1].maxsolutions = _nj8;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j9;
vinfos[2].indices[0] = _ij9[0];
vinfos[2].indices[1] = _ij9[1];
vinfos[2].maxsolutions = _nj9;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j10;
vinfos[3].indices[0] = _ij10[0];
vinfos[3].indices[1] = _ij10[1];
vinfos[3].maxsolutions = _nj10;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j11;
vinfos[4].indices[0] = _ij11[0];
vinfos[4].indices[1] = _ij11[1];
vinfos[4].maxsolutions = _nj11;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j12;
vinfos[5].indices[0] = _ij12[0];
vinfos[5].indices[1] = _ij12[1];
vinfos[5].maxsolutions = _nj12;
vinfos[6].jointtype = 1;
vinfos[6].foffset = j14;
vinfos[6].indices[0] = _ij14[0];
vinfos[6].indices[1] = _ij14[1];
vinfos[6].maxsolutions = _nj14;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}
}
}

}

}
}
}
}
}static inline void polyroots2(IkReal rawcoeffs[2+1], IkReal rawroots[2], int& numroots) {
    IkReal det = rawcoeffs[1]*rawcoeffs[1]-4*rawcoeffs[0]*rawcoeffs[2];
    if( det < 0 ) {
        numroots=0;
    }
    else if( det == 0 ) {
        rawroots[0] = -0.5*rawcoeffs[1]/rawcoeffs[0];
        numroots = 1;
    }
    else {
        det = IKsqrt(det);
        rawroots[0] = (-rawcoeffs[1]+det)/(2*rawcoeffs[0]);
        rawroots[1] = (-rawcoeffs[1]-det)/(2*rawcoeffs[0]);//rawcoeffs[2]/(rawcoeffs[0]*rawroots[0]);
        numroots = 2;
    }
}
};


/// solves the inverse kinematics equations.
/// \param pfree is an array specifying the free joints of the chain.
IKFAST_API bool ComputeIk(const IkReal* eetrans, const IkReal* eerot, const IkReal* pfree, IkSolutionListBase<IkReal>& solutions) {
IKSolver solver;
return solver.ComputeIk(eetrans,eerot,pfree,solutions);
}

IKFAST_API const char* GetKinematicsHash() { return "634bf169a5daffdee3668272c52f4fe9"; }

IKFAST_API const char* GetIkFastVersion() { return IKFAST_STRINGIZE(IKFAST_VERSION); }

#ifdef IKFAST_NAMESPACE
} // end namespace
#endif

#ifndef IKFAST_NO_MAIN
#include <stdio.h>
#include <stdlib.h>
#ifdef IKFAST_NAMESPACE
using namespace IKFAST_NAMESPACE;
#endif
int main(int argc, char** argv)
{
    if( argc != 12+GetNumFreeParameters()+1 ) {
        printf("\nUsage: ./ik r00 r01 r02 t0 r10 r11 r12 t1 r20 r21 r22 t2 free0 ...\n\n"
               "Returns the ik solutions given the transformation of the end effector specified by\n"
               "a 3x3 rotation R (rXX), and a 3x1 translation (tX).\n"
               "There are %d free parameters that have to be specified.\n\n",GetNumFreeParameters());
        return 1;
    }

    IkSolutionList<IkReal> solutions;
    std::vector<IkReal> vfree(GetNumFreeParameters());
    IkReal eerot[9],eetrans[3];
    eerot[0] = atof(argv[1]); eerot[1] = atof(argv[2]); eerot[2] = atof(argv[3]); eetrans[0] = atof(argv[4]);
    eerot[3] = atof(argv[5]); eerot[4] = atof(argv[6]); eerot[5] = atof(argv[7]); eetrans[1] = atof(argv[8]);
    eerot[6] = atof(argv[9]); eerot[7] = atof(argv[10]); eerot[8] = atof(argv[11]); eetrans[2] = atof(argv[12]);
    for(std::size_t i = 0; i < vfree.size(); ++i)
        vfree[i] = atof(argv[13+i]);
    bool bSuccess = ComputeIk(eetrans, eerot, vfree.size() > 0 ? &vfree[0] : NULL, solutions);

    if( !bSuccess ) {
        fprintf(stderr,"Failed to get ik solution\n");
        return -1;
    }

    printf("Found %d ik solutions:\n", (int)solutions.GetNumSolutions());
    std::vector<IkReal> solvalues(GetNumJoints());
    for(std::size_t i = 0; i < solutions.GetNumSolutions(); ++i) {
        const IkSolutionBase<IkReal>& sol = solutions.GetSolution(i);
        printf("sol%d (free=%d): ", (int)i, (int)sol.GetFree().size());
        std::vector<IkReal> vsolfree(sol.GetFree().size());
        sol.GetSolution(&solvalues[0],vsolfree.size()>0?&vsolfree[0]:NULL);
        for( std::size_t j = 0; j < solvalues.size(); ++j)
            printf("%.15f, ", solvalues[j]);
        printf("\n");
    }
    return 0;
}

#endif

#include "plugindefs.h"
namespace IKFAST_NAMESPACE {
IkSolverBasePtr CreateIkSolver(EnvironmentBasePtr penv, std::istream& sinput, const std::vector<dReal>& vfreeinc) {
    boost::shared_ptr<ikfast::IkFastFunctions<IkReal> > ikfunctions(new ikfast::IkFastFunctions<IkReal>());
    ikfunctions->_ComputeIk = IKFAST_NAMESPACE::ComputeIk;
    ikfunctions->_ComputeFk = IKFAST_NAMESPACE::ComputeFk;
    ikfunctions->_GetNumFreeParameters = IKFAST_NAMESPACE::GetNumFreeParameters;
    ikfunctions->_GetFreeParameters = IKFAST_NAMESPACE::GetFreeParameters;
    ikfunctions->_GetNumJoints = IKFAST_NAMESPACE::GetNumJoints;
    ikfunctions->_GetIkRealSize = IKFAST_NAMESPACE::GetIkRealSize;
    ikfunctions->_GetIkFastVersion = IKFAST_NAMESPACE::GetIkFastVersion;
    ikfunctions->_GetIkType = IKFAST_NAMESPACE::GetIkType;
    ikfunctions->_GetKinematicsHash = IKFAST_NAMESPACE::GetKinematicsHash;
    return CreateIkFastSolver(penv,sinput,ikfunctions,vfreeinc);
}
} // end namespace
